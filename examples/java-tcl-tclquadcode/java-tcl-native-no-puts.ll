; ModuleID = 'Global'
source_filename = "Global"
target triple = "x86_64-unknown-linux-gnu"

%ObjType = type { i8*, void (%Tcl_Obj*)*, void (%Tcl_Obj*, %Tcl_Obj*)*, void (%Tcl_Obj*)*, i32 (%Interp*, %Tcl_Obj*)* }
%Tcl_Obj = type { i32, i8*, i32, %ObjType*, %InternalRepresentation }
%InternalRepresentation = type { i8*, i8* }
%Interp = type { i8*, void (i8*)*, i32, %TclStubs*, i8**, %Namespace*, %HashTable*, i8*, %HashTable, i32, i32, %CallFrame*, %CallFrame*, %ActiveVarTrace*, i32, %CallFrame*, %Namespace*, i8*, i32, i32, %HashTable, i8*, i32, i32, i32, %LiteralTable, i32, %Proc*, %ResolverScheme*, %Tcl_Obj*, i32, i64, %Trace*, %HashTable*, %ExecEnv*, %Tcl_Obj*, [201 x i8], %Tcl_Obj*, %ThreadId*, %Trace*, %Trace*, i32, %Tcl_Obj*, %Tcl_Obj*, %Tcl_Obj*, %Tcl_Obj*, %Tcl_Obj*, i32, %LimitInfo, %EnsembleInfo, %Tcl_Obj*, %CmdFrame*, %CmdFrame*, i32, %HashTable*, %HashTable*, %HashTable*, %HashTable*, %ContLineLoc*, i32, %HashTable, %HashTable, %AllocCache*, i8*, i32*, %OOFoundation*, %NRECallback*, %AsyncHandler*, %Tcl_Obj*, %Tcl_Obj*, %Tcl_Obj*, %Tcl_Obj*, %Tcl_Obj*, %Tcl_Obj*, i32 }
%TclStubs = type { i32, %TclStubHooks*, [631 x i32 (i32)*] }
%TclStubHooks = type { %TclPlatStubs*, %TclIntStubs*, %TclIntPlatStubs* }
%TclPlatStubs = type { i32, i8*, [2 x i32 (i32)*] }
%TclIntStubs = type { i32, i8*, [252 x i32 (i32)*] }
%TclIntPlatStubs = type { i32, i8*, [31 x i32 (i32)*] }
%ActiveVarTrace = type { %Var*, %ActiveVarTrace*, %VarTrace* }
%Var = type { i32, %Tcl_Obj* }
%VarTrace = type { i8* (i8*, %Interp*, i8*, i8*, i32)*, i8*, i32, %VarTrace* }
%CallFrame = type { %Namespace*, i32, i32, %Tcl_Obj**, %CallFrame*, %CallFrame*, i32, %Proc*, %VarHashTable*, i32, %Var*, i8*, %LocalCache*, %Tcl_Obj* }
%VarHashTable = type { %HashTable, %Namespace* }
%LocalCache = type { i32, i32, [1 x %Tcl_Obj*] }
%Namespace = type { i8*, i8*, i8*, void (i8*)*, %Namespace*, %HashTable, i64, %Interp*, i32, i32, i32, %HashTable, %VarHashTable, i8**, i32, i32, i32, i32, i32 (%Interp*, i8*, %Namespace*, i32, %Command*)*, i32 (%Interp*, i8*, %Namespace*, i32, %Var*)*, i32 (%Interp*, i8*, i32, %Namespace*, %ResolvedVarInfo**)*, i32, %Ensemble*, %Tcl_Obj*, i32, %NamespacePathEntry*, %NamespacePathEntry*, void (i8*)* }
%Command = type { %HashEntry*, %Namespace*, i32, i32, i32 (%Interp*, %Parse*, %Command*, %CompileEnv*)*, i32 (i8*, %Interp*, i32, %Tcl_Obj**)*, i8*, i32 (i8*, %Interp*, i32, i8**)*, i8*, void (i8*)*, i8*, i32, %ImportRef*, %Trace*, i32 (i8*, %Interp*, i32, %Tcl_Obj**)* }
%HashEntry = type { %HashEntry*, %HashTable*, i8*, i8*, i8* }
%Parse = type { i8*, i32, i8*, i32, i32, %Token*, i32, i32, i32, i8*, i8*, %Interp*, i8*, i32, [20 x %Token] }
%Token = type { i32, i8*, i32, i32 }
%CompileEnv = type opaque
%ImportRef = type { %Command*, %ImportRef* }
%ResolvedVarInfo = type { %Var* (%Interp*, %ResolvedVarInfo*)*, void (%ResolvedVarInfo*)* }
%Ensemble = type opaque
%NamespacePathEntry = type { %Namespace*, %Namespace*, %NamespacePathEntry*, %NamespacePathEntry* }
%LiteralTable = type { %LiteralEntry**, [4 x %LiteralEntry*], i32, i32, i32, i32 }
%LiteralEntry = type { %LiteralEntry*, %Tcl_Obj*, i32, %Namespace* }
%Proc = type { %Interp*, i32, %Command*, %Tcl_Obj*, i32, i32, %CompiledLocal*, %CompiledLocal* }
%CompiledLocal = type { %CompiledLocal*, i32, i32, i32, %Tcl_Obj*, %ResolvedVarInfo*, [1 x i8] }
%ResolverScheme = type { i8*, i32 (%Interp*, i8*, %Namespace*, i32, %Command*)*, i32 (%Interp*, i8*, %Namespace*, i32, %Var*)*, i32 (%Interp*, i8*, i32, %Namespace*, %ResolvedVarInfo**)*, %ResolverScheme* }
%ExecEnv = type { %ExecStack*, [2 x %Tcl_Obj], %Interp*, %NRECallback*, %CoroutineData*, i32 }
%ExecStack = type { %ExecStack*, %ExecStack*, %Tcl_Obj**, %Tcl_Obj**, %Tcl_Obj**, [1 x %Tcl_Obj*] }
%CoroutineData = type { %Command*, %ExecEnv*, %ExecEnv*, %CorContext, %CorContext, %HashTable*, i8*, i32, i32 }
%CorContext = type { %CallFrame*, %CallFrame*, %CmdFrame*, %HashTable* }
%ThreadId = type opaque
%Trace = type { i32, i32 (i8*, %Interp*, i32, i8*, %Command*, i32, %Tcl_Obj**)*, i8*, %Trace*, i32, void (i8*)* }
%LimitInfo = type { i32, i32, i32, i32, %LimitHandler*, i32, %Time, %LimitHandler*, i32, %TimerToken*, %HashTable }
%Time = type { i64, i64 }
%LimitHandler = type opaque
%TimerToken = type opaque
%EnsembleInfo = type { %Tcl_Obj**, i32, i32 }
%CmdFrame = type { i32, i32, i32*, i32, %CallFrame*, %CmdFrame*, %CmdFrameLocation, %Tcl_Obj*, i8*, i32, %CFWordBC* }
%CmdFrameLocation = type { i8*, i8* }
%CFWordBC = type { %CmdFrame*, i32, i32, %CFWordBC*, %CFWordBC*, %Tcl_Obj* }
%ContLineLoc = type { i32, [1 x i32] }
%HashTable = type { %HashEntry**, [4 x %HashEntry*], i32, i32, i32, i32, i32, i32, %HashEntry* (%HashTable*, i8*)*, %HashEntry* (%HashTable*, i8*, i32*)*, %HashKeyType* }
%HashKeyType = type { i32, i32, i32 (%HashTable*, i8*)*, i32 (i8*, %HashEntry*)*, %HashEntry* (%HashTable*, i8*)*, void (%HashEntry*)* }
%AllocCache = type opaque
%OOFoundation = type { %Interp*, %Class*, %Class*, %Namespace*, %Namespace*, %Namespace*, %Namespace*, i32, %ThreadLocalData*, %Tcl_Obj*, %Tcl_Obj*, %Tcl_Obj*, %Tcl_Obj*, %Tcl_Obj* }
%Class = type { %Object*, i32, i32, %StaticList_Class, %DynamicList_Class, %DynamicList_Object, %StaticList_Value, %StaticList_Class, %DynamicList_Class, %HashTable, %Method*, %Method*, %HashTable*, %CallChain*, %CallChain*, %HashTable*, %StaticList_Value }
%Object = type { %OOFoundation*, %Namespace*, %Command*, %Command*, %Class*, %HashTable*, %StaticList_Class, %StaticList_Value, %Class*, i32, i32, i32, i32, %HashTable*, %Tcl_Obj*, %HashTable*, i32 (%Interp*, %Object*, %Class*, %Tcl_Obj*)* }
%DynamicList_Object = type { i32, i32, %Object* }
%StaticList_Class = type { i32, %Class* }
%DynamicList_Class = type { i32, i32, %Class* }
%Method = type { %MethodType*, i32, i8*, %Tcl_Obj*, %Object*, %Class*, i32 }
%MethodType = type { i32, i8*, i32 (i8*, %Interp*, %CallContext*, i32, %Tcl_Obj**)*, void (i8*)*, i32 (%Interp*, i8*, i8**)* }
%CallContext = type { %Object*, i32, i32, %CallChain* }
%CallChain = type { i32, i32, i32, i32, i32, i32, %MInvoke*, [4 x %MInvoke] }
%MInvoke = type { %Method*, i32, %Class* }
%StaticList_Value = type { i32, %Tcl_Obj* }
%ThreadLocalData = type opaque
%NRECallback = type { i32 (i8**, %Interp*, i32)*, [4 x i8*], %NRECallback* }
%AsyncHandler = type opaque
%INT = type { i1, i32, i64 }
%NUMERIC = type { i1, %INT, double }
%NUMERIC_BOOLEAN = type { i3, %INT, double, i1 }
%HashSearch = type { %HashTable*, i32, %HashEntry* }
%Channel = type opaque
%RegExp = type opaque
%DictSearch = type { %ChainEntry*, i32, %Dict* }
%ChainEntry = type { %HashEntry, %ChainEntry*, %ChainEntry* }
%Dict = type { %HashTable, %ChainEntry*, %ChainEntry*, i32, i32, %Tcl_Obj* }
%ARRAYIMPL = type { i32, i1, %VarHashTable* }
%TclList = type { i32, i32, i32, i32, %Tcl_Obj* }
%FOREACH = type { i32, i32 }
%DICTFOR = type { %DictSearch, %Tcl_Obj*, %Tcl_Obj*, %Tcl_Obj*, i32, i1 }
%ArraySearch = type { %Tcl_Obj*, i32, %Var*, %HashSearch, %HashEntry*, %ArraySearch* }
%ARRAYSTRING = type { i1, %ARRAYIMPL*, %Tcl_Obj* }

@type.int = private unnamed_addr constant [4 x i8] c"int\00", align 1
@tclIntType = hidden local_unnamed_addr global %ObjType* null
@type.double = private unnamed_addr constant [7 x i8] c"double\00", align 1
@tclDoubleType = hidden local_unnamed_addr global %ObjType* null
@type.boolean = private unnamed_addr constant [14 x i8] c"booleanString\00", align 1
@tclBooleanType = hidden local_unnamed_addr global %ObjType* null
@type.bytes = private unnamed_addr constant [10 x i8] c"bytearray\00", align 1
@tclByteArrayType = hidden local_unnamed_addr global %ObjType* null
@type.string = private unnamed_addr constant [7 x i8] c"string\00", align 1
@tclStringType = hidden local_unnamed_addr global %ObjType* null
@type.wide = private unnamed_addr constant [8 x i8] c"wideInt\00", align 1
@tclWideIntType = hidden local_unnamed_addr global %ObjType* null
@type.list = private unnamed_addr constant [5 x i8] c"list\00", align 1
@tclListType = hidden local_unnamed_addr global %ObjType* null
@tclInterp = hidden local_unnamed_addr global %Interp* null
@tclEmptyString = hidden local_unnamed_addr global %Tcl_Obj* null
@tclEmptyStringRep = hidden local_unnamed_addr global i8* null
@string.constant = private unnamed_addr constant [5 x i8] c"0x%X\00", align 1
@string.constant.2 = private unnamed_addr constant [9 x i8] c"0x%016lX\00", align 1
@string.constant.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string.constant.4 = private unnamed_addr constant [23 x i8] c"the stork fell over %p\00", align 1
@string.constant.6 = private unnamed_addr constant [15 x i8] c"(%.30s) => %d\0A\00", align 1
@string.constant.7 = private unnamed_addr constant [9 x i8] c"%d:NULL\0A\00", align 1
@string.constant.8 = private unnamed_addr constant [8 x i8] c"%d:0x%X\00", align 1
@string.constant.9 = private unnamed_addr constant [10 x i8] c"[] => %d\0A\00", align 1
@obj.constant.0 = hidden global %Tcl_Obj* null
@str.constant.0 = private unnamed_addr constant [24 x i8] c"list index out of range\00", align 1
@obj.constant.1 = hidden global %Tcl_Obj* null
@str.constant.1 = private unnamed_addr constant [28 x i8] c"TCL OPERATION LSET BADINDEX\00", align 1
@string.constant.14 = private unnamed_addr constant [33 x i8] c"key \22%s\22 not known in dictionary\00", align 1
@string.constant.17 = private unnamed_addr constant [5 x i8] c"DICT\00", align 1
@obj.constant.2 = hidden global %Tcl_Obj* null
@str.constant.2 = private unnamed_addr constant [15 x i8] c"divide by zero\00", align 1
@obj.constant.3 = hidden global %Tcl_Obj* null
@str.constant.3 = private unnamed_addr constant [31 x i8] c"ARITH DIVZERO {divide by zero}\00", align 1
@obj.constant.4 = hidden global %Tcl_Obj* null
@str.constant.4 = private unnamed_addr constant [42 x i8] c"domain error: argument not in valid range\00", align 1
@obj.constant.5 = hidden global %Tcl_Obj* null
@str.constant.5 = private unnamed_addr constant [57 x i8] c"ARITH DOMAIN {domain error: argument not in valid range}\00", align 1
@obj.constant.6 = hidden global %Tcl_Obj* null
@str.constant.6 = private unnamed_addr constant [41 x i8] c"exponentiation of zero by negative power\00", align 1
@obj.constant.7 = hidden global %Tcl_Obj* null
@str.constant.7 = private unnamed_addr constant [56 x i8] c"ARITH DOMAIN {exponentiation of zero by negative power}\00", align 1
@obj.constant.8 = hidden global %Tcl_Obj* null
@str.constant.8 = private unnamed_addr constant [11 x i8] c"-errorcode\00", align 1
@obj.constant.9 = hidden global %Tcl_Obj* null
@str.constant.9 = private unnamed_addr constant [11 x i8] c"-errorinfo\00", align 1
@obj.constant.10 = hidden global %Tcl_Obj* null
@str.constant.10 = private unnamed_addr constant [12 x i8] c"-errorstack\00", align 1
@string.constant.18 = private unnamed_addr constant [5 x i8] c"NONE\00", align 1
@obj.constant.11 = hidden global %Tcl_Obj* null
@str.constant.11 = private unnamed_addr constant [11 x i8] c"-errorline\00", align 1
@string.constant.19 = private unnamed_addr constant [34 x i8] c"\0A    (procedure \22%.*s%s\22 line %d)\00", align 1
@string.constant.20 = private unnamed_addr constant [4 x i8] c"...\00", align 1
@string.constant.23 = private unnamed_addr constant [6 x i8] c"break\00", align 1
@obj.constant.12 = hidden global %Tcl_Obj* null
@str.constant.12 = private unnamed_addr constant [22 x i8] c"TCL RESULT UNEXPECTED\00", align 1
@string.constant.24 = private unnamed_addr constant [31 x i8] c"invoked \22%s\22 outside of a loop\00", align 1
@string.constant.25 = private unnamed_addr constant [9 x i8] c"continue\00", align 1
@string.constant.26 = private unnamed_addr constant [20 x i8] c"invoked from within\00", align 1
@string.constant.27 = private unnamed_addr constant [16 x i8] c"while executing\00", align 1
@string.constant.28 = private unnamed_addr constant [17 x i8] c"\0A    %s\0A\22%.*s%s\22\00", align 1
@noSuchElement = private unnamed_addr constant [25 x i8] c"no such element in array\00", align 1
@isArray = private unnamed_addr constant [18 x i8] c"variable is array\00", align 1
@noSuchVar = private unnamed_addr constant [17 x i8] c"no such variable\00", align 1
@string.constant.30 = private unnamed_addr constant [4 x i8] c"set\00", align 1
@string.constant.31 = private unnamed_addr constant [10 x i8] c"array set\00", align 1
@string.constant.32 = private unnamed_addr constant [21 x i8] c"variable isn't array\00", align 1
@obj.constant.13 = hidden global %Tcl_Obj* null
@str.constant.13 = private unnamed_addr constant [16 x i8] c"TCL WRITE ARRAY\00", align 1
@string.constant.33 = private unnamed_addr constant [26 x i8] c"invalid command name \22%s\22\00", align 1
@string.constant.36 = private unnamed_addr constant [8 x i8] c"COMMAND\00", align 1
@string.constant.40 = private unnamed_addr constant [12 x i8] c"STACK_LEVEL\00", align 1
@string.constant.43 = private unnamed_addr constant [15 x i8] c"bad level \22%s\22\00", align 1
@string.constant.44 = private unnamed_addr constant [4 x i8] c"TCL\00", align 1
@string.constant.45 = private unnamed_addr constant [7 x i8] c"LOOKUP\00", align 1
@string.constant.46 = private unnamed_addr constant [6 x i8] c"LEVEL\00", align 1
@string.constant.47 = private unnamed_addr constant [7 x i8] c"access\00", align 1
@obj.constant.14 = hidden global %Tcl_Obj* null
@wrongargs_ = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@"name.thunk::main" = private unnamed_addr constant [7 x i8] c"::main\00", align 1
@pkg.name = private unnamed_addr constant [21 x i8] c"tclquadcoded::Global\00", align 1
@pkg.version = private unnamed_addr constant [8 x i8] c"0.0.0.1\00", align 1

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden i32 @tcl.int.32(%INT %x) local_unnamed_addr #0 !dbg !4 {
enter:
  %0 = extractvalue %INT %x, 0, !dbg !18
  br i1 %0, label %x64, label %x32, !dbg !18

x32:                                              ; preds = %enter
  %1 = extractvalue %INT %x, 1, !dbg !19
  ret i32 %1, !dbg !19

x64:                                              ; preds = %enter
  %2 = extractvalue %INT %x, 2, !dbg !20
  %3 = trunc i64 %2 to i32, !dbg !20
  ret i32 %3, !dbg !20
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden i64 @tcl.int.64(%INT %x) local_unnamed_addr #0 !dbg !21 {
enter:
  %0 = extractvalue %INT %x, 0, !dbg !26
  br i1 %0, label %x64, label %x32, !dbg !26

x32:                                              ; preds = %enter
  %1 = extractvalue %INT %x, 1, !dbg !27
  %2 = sext i32 %1 to i64, !dbg !27
  ret i64 %2, !dbg !27

x64:                                              ; preds = %enter
  %3 = extractvalue %INT %x, 2, !dbg !28
  ret i64 %3, !dbg !28
}

; Function Attrs: alwaysinline nounwind readnone
define hidden %INT @tcl.shl(%INT %x, %INT %y) local_unnamed_addr #1 !dbg !29 {
enter:
  %0 = extractvalue %INT %x, 0, !dbg !35
  br i1 %0, label %x64.i, label %whatabouty, !dbg !35

whatabouty:                                       ; preds = %enter
  %1 = extractvalue %INT %y, 0, !dbg !36
  %.pre4 = extractvalue %INT %x, 1, !dbg !37
  br i1 %1, label %x32.i, label %confirmspace, !dbg !36

confirmspace:                                     ; preds = %whatabouty
  %2 = extractvalue %INT %y, 1, !dbg !38
  %3 = tail call i32 @llvm.ctlz.i32(i32 %.pre4, i1 false), !dbg !39, !range !40
  %4 = icmp sgt i32 %3, %2, !dbg !41
  br i1 %4, label %op.32bit, label %x32.i, !dbg !41

op.32bit:                                         ; preds = %confirmspace
  %5 = shl i32 %.pre4, %2, !dbg !42
  %6 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %5, 1, !dbg !42
  ret %INT %6, !dbg !42

x32.i:                                            ; preds = %whatabouty, %confirmspace
  %7 = sext i32 %.pre4 to i64, !dbg !43
  br label %tcl.int.64.exit, !dbg !43

x64.i:                                            ; preds = %enter
  %8 = extractvalue %INT %x, 2, !dbg !45
  %.pre = extractvalue %INT %y, 0, !dbg !46
  br label %tcl.int.64.exit, !dbg !45

tcl.int.64.exit:                                  ; preds = %x64.i, %x32.i
  %.pre-phi = phi i1 [ %.pre, %x64.i ], [ %1, %x32.i ], !dbg !46
  %9 = phi i64 [ %8, %x64.i ], [ %7, %x32.i ]
  %10 = extractvalue %INT %y, 1, !dbg !46
  %11 = sext i32 %10 to i64, !dbg !46
  %12 = extractvalue %INT %y, 2, !dbg !46
  %13 = select i1 %.pre-phi, i64 %12, i64 %11, !dbg !46
  %14 = shl i64 %9, %13, !dbg !48
  %15 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %14, 2, !dbg !48
  ret %INT %15, !dbg !48
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #2

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden i32 @tcl.div.32(i32 %x, i32 %y) local_unnamed_addr #0 !dbg !49 {
enter:
  %0 = sdiv i32 %x, %y, !dbg !55
  %1 = icmp sgt i32 %0, 0, !dbg !56
  br i1 %1, label %retnow, label %nextcheck, !dbg !56

retnow:                                           ; preds = %innercheck, %zerocase, %enter
  ret i32 %0, !dbg !57

nextcheck:                                        ; preds = %enter
  %2 = icmp slt i32 %0, 0, !dbg !58
  br i1 %2, label %innercheck, label %zerocase, !dbg !58

zerocase:                                         ; preds = %nextcheck
  %3 = icmp slt i32 %x, 0, !dbg !59
  %4 = icmp sgt i32 %y, 0, !dbg !59
  %5 = and i1 %3, %4, !dbg !59
  %6 = icmp sgt i32 %x, 0, !dbg !59
  %7 = icmp slt i32 %y, 0, !dbg !59
  %8 = and i1 %6, %7, !dbg !59
  %9 = or i1 %5, %8, !dbg !59
  br i1 %9, label %innercheck, label %retnow, !dbg !59

innercheck:                                       ; preds = %zerocase, %nextcheck
  %10 = mul i32 %0, %y, !dbg !60
  %11 = icmp eq i32 %10, %x, !dbg !60
  br i1 %11, label %retnow, label %subret, !dbg !60

subret:                                           ; preds = %innercheck
  %12 = add i32 %0, -1, !dbg !61
  ret i32 %12, !dbg !61
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden i64 @tcl.div.64(i64 %x, i64 %y) local_unnamed_addr #0 !dbg !62 {
enter:
  %0 = sdiv i64 %x, %y, !dbg !68
  %1 = icmp sgt i64 %0, 0, !dbg !69
  br i1 %1, label %retnow, label %nextcheck, !dbg !69

retnow:                                           ; preds = %innercheck, %zerocase, %enter
  ret i64 %0, !dbg !70

nextcheck:                                        ; preds = %enter
  %2 = icmp slt i64 %0, 0, !dbg !71
  br i1 %2, label %innercheck, label %zerocase, !dbg !71

zerocase:                                         ; preds = %nextcheck
  %3 = icmp slt i64 %x, 0, !dbg !72
  %4 = icmp sgt i64 %y, 0, !dbg !72
  %5 = and i1 %3, %4, !dbg !72
  %6 = icmp sgt i64 %x, 0, !dbg !72
  %7 = icmp slt i64 %y, 0, !dbg !72
  %8 = and i1 %6, %7, !dbg !72
  %9 = or i1 %5, %8, !dbg !72
  br i1 %9, label %innercheck, label %retnow, !dbg !72

innercheck:                                       ; preds = %zerocase, %nextcheck
  %10 = mul i64 %0, %y, !dbg !73
  %11 = icmp eq i64 %10, %x, !dbg !73
  br i1 %11, label %retnow, label %subret, !dbg !73

subret:                                           ; preds = %innercheck
  %12 = add i64 %0, -1, !dbg !74
  ret i64 %12, !dbg !74
}

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.sadd.with.overflow.i32(i32, i32) #2

; Function Attrs: alwaysinline nounwind readnone
define hidden %INT @tcl.add(%INT %x, %INT %y) local_unnamed_addr #1 !dbg !75 {
enter:
  %0 = extractvalue %INT %x, 0, !dbg !79
  br i1 %0, label %tcl.int.64.exit, label %check2, !dbg !79

check2:                                           ; preds = %enter
  %1 = extractvalue %INT %y, 0, !dbg !80
  %2 = extractvalue %INT %x, 1, !dbg !81
  br i1 %1, label %tcl.int.64.exit.thread, label %op.32bit, !dbg !80

op.32bit:                                         ; preds = %check2
  %y.32 = extractvalue %INT %y, 1, !dbg !82
  %3 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %2, i32 %y.32), !dbg !83
  %4 = extractvalue { i32, i1 } %3, 1, !dbg !84
  %5 = tail call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !84
  br i1 %5, label %overflow.32bit, label %return.32bit, !dbg !84

overflow.32bit:                                   ; preds = %op.32bit
  %x.64 = sext i32 %2 to i64, !dbg !85
  %x.641 = sext i32 %y.32 to i64, !dbg !86
  %z.64 = add nsw i64 %x.641, %x.64, !dbg !87
  %6 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64, 2, !dbg !87
  ret %INT %6, !dbg !87

return.32bit:                                     ; preds = %op.32bit
  %z.32 = extractvalue { i32, i1 } %3, 0, !dbg !88
  %7 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32, 1, !dbg !88
  ret %INT %7, !dbg !88

tcl.int.64.exit.thread:                           ; preds = %check2
  %8 = sext i32 %2 to i64, !dbg !89
  %9 = extractvalue %INT %y, 2, !dbg !91
  br label %14, !dbg !91

tcl.int.64.exit:                                  ; preds = %enter
  %10 = extractvalue %INT %x, 2, !dbg !93
  %.pre = extractvalue %INT %y, 0, !dbg !91
  %11 = extractvalue %INT %y, 1, !dbg !91
  %12 = sext i32 %11 to i64, !dbg !91
  %13 = extractvalue %INT %y, 2, !dbg !91
  br i1 %.pre, label %14, label %16, !dbg !91

14:                                               ; preds = %tcl.int.64.exit.thread, %tcl.int.64.exit
  %15 = phi i64 [ %9, %tcl.int.64.exit.thread ], [ %13, %tcl.int.64.exit ]
  %x.642412 = phi i64 [ %8, %tcl.int.64.exit.thread ], [ %10, %tcl.int.64.exit ]
  br label %16, !dbg !91

16:                                               ; preds = %tcl.int.64.exit, %14
  %x.642411 = phi i64 [ %x.642412, %14 ], [ %10, %tcl.int.64.exit ]
  %17 = phi i64 [ %15, %14 ], [ %12, %tcl.int.64.exit ]
  %z.643 = add i64 %x.642411, %17, !dbg !94
  %18 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643, 2, !dbg !94
  ret %INT %18, !dbg !94
}

; Function Attrs: nounwind readnone
declare i1 @llvm.expect.i1(i1, i1) #3

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #2

; Function Attrs: alwaysinline nounwind readnone
define hidden %INT @tcl.sub(%INT %x, %INT %y) local_unnamed_addr #1 !dbg !95 {
enter:
  %0 = extractvalue %INT %x, 0, !dbg !99
  br i1 %0, label %tcl.int.64.exit, label %check2, !dbg !99

check2:                                           ; preds = %enter
  %1 = extractvalue %INT %y, 0, !dbg !100
  %2 = extractvalue %INT %x, 1, !dbg !101
  br i1 %1, label %tcl.int.64.exit.thread, label %op.32bit, !dbg !100

op.32bit:                                         ; preds = %check2
  %y.32 = extractvalue %INT %y, 1, !dbg !102
  %3 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %2, i32 %y.32), !dbg !103
  %4 = extractvalue { i32, i1 } %3, 1, !dbg !104
  %5 = tail call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !104
  br i1 %5, label %overflow.32bit, label %return.32bit, !dbg !104

overflow.32bit:                                   ; preds = %op.32bit
  %x.64 = sext i32 %2 to i64, !dbg !105
  %x.641 = sext i32 %y.32 to i64, !dbg !106
  %z.64 = sub nsw i64 %x.64, %x.641, !dbg !107
  %6 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64, 2, !dbg !107
  ret %INT %6, !dbg !107

return.32bit:                                     ; preds = %op.32bit
  %z.32 = extractvalue { i32, i1 } %3, 0, !dbg !108
  %7 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32, 1, !dbg !108
  ret %INT %7, !dbg !108

tcl.int.64.exit.thread:                           ; preds = %check2
  %8 = sext i32 %2 to i64, !dbg !109
  %9 = extractvalue %INT %y, 2, !dbg !111
  br label %14, !dbg !111

tcl.int.64.exit:                                  ; preds = %enter
  %10 = extractvalue %INT %x, 2, !dbg !113
  %.pre = extractvalue %INT %y, 0, !dbg !111
  %11 = extractvalue %INT %y, 1, !dbg !111
  %12 = sext i32 %11 to i64, !dbg !111
  %13 = extractvalue %INT %y, 2, !dbg !111
  br i1 %.pre, label %14, label %16, !dbg !111

14:                                               ; preds = %tcl.int.64.exit.thread, %tcl.int.64.exit
  %15 = phi i64 [ %9, %tcl.int.64.exit.thread ], [ %13, %tcl.int.64.exit ]
  %x.642412 = phi i64 [ %8, %tcl.int.64.exit.thread ], [ %10, %tcl.int.64.exit ]
  br label %16, !dbg !111

16:                                               ; preds = %tcl.int.64.exit, %14
  %x.642411 = phi i64 [ %x.642412, %14 ], [ %10, %tcl.int.64.exit ]
  %17 = phi i64 [ %15, %14 ], [ %12, %tcl.int.64.exit ]
  %z.643 = sub i64 %x.642411, %17, !dbg !114
  %18 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643, 2, !dbg !114
  ret %INT %18, !dbg !114
}

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.smul.with.overflow.i32(i32, i32) #2

; Function Attrs: alwaysinline nounwind readnone
define hidden %INT @tcl.mul(%INT %x, %INT %y) local_unnamed_addr #1 !dbg !115 {
enter:
  %0 = extractvalue %INT %x, 0, !dbg !119
  br i1 %0, label %tcl.int.64.exit, label %check2, !dbg !119

check2:                                           ; preds = %enter
  %1 = extractvalue %INT %y, 0, !dbg !120
  %2 = extractvalue %INT %x, 1, !dbg !121
  br i1 %1, label %tcl.int.64.exit.thread, label %op.32bit, !dbg !120

op.32bit:                                         ; preds = %check2
  %y.32 = extractvalue %INT %y, 1, !dbg !122
  %3 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %2, i32 %y.32), !dbg !123
  %4 = extractvalue { i32, i1 } %3, 1, !dbg !124
  %5 = tail call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !124
  br i1 %5, label %overflow.32bit, label %return.32bit, !dbg !124

overflow.32bit:                                   ; preds = %op.32bit
  %x.64 = sext i32 %2 to i64, !dbg !125
  %x.641 = sext i32 %y.32 to i64, !dbg !126
  %z.64 = mul nsw i64 %x.641, %x.64, !dbg !127
  %6 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64, 2, !dbg !127
  ret %INT %6, !dbg !127

return.32bit:                                     ; preds = %op.32bit
  %z.32 = extractvalue { i32, i1 } %3, 0, !dbg !128
  %7 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32, 1, !dbg !128
  ret %INT %7, !dbg !128

tcl.int.64.exit.thread:                           ; preds = %check2
  %8 = sext i32 %2 to i64, !dbg !129
  %9 = extractvalue %INT %y, 2, !dbg !131
  br label %14, !dbg !131

tcl.int.64.exit:                                  ; preds = %enter
  %10 = extractvalue %INT %x, 2, !dbg !133
  %.pre = extractvalue %INT %y, 0, !dbg !131
  %11 = extractvalue %INT %y, 1, !dbg !131
  %12 = sext i32 %11 to i64, !dbg !131
  %13 = extractvalue %INT %y, 2, !dbg !131
  br i1 %.pre, label %14, label %16, !dbg !131

14:                                               ; preds = %tcl.int.64.exit.thread, %tcl.int.64.exit
  %15 = phi i64 [ %9, %tcl.int.64.exit.thread ], [ %13, %tcl.int.64.exit ]
  %x.642412 = phi i64 [ %8, %tcl.int.64.exit.thread ], [ %10, %tcl.int.64.exit ]
  br label %16, !dbg !131

16:                                               ; preds = %tcl.int.64.exit, %14
  %x.642411 = phi i64 [ %x.642412, %14 ], [ %10, %tcl.int.64.exit ]
  %17 = phi i64 [ %15, %14 ], [ %12, %tcl.int.64.exit ]
  %z.643 = mul i64 %x.642411, %17, !dbg !134
  %18 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643, 2, !dbg !134
  ret %INT %18, !dbg !134
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden %INT @tcl.and(%INT %x, %INT %y) local_unnamed_addr #0 !dbg !135 {
enter:
  %0 = extractvalue %INT %x, 0, !dbg !139
  br i1 %0, label %tcl.int.64.exit, label %check2, !dbg !139

check2:                                           ; preds = %enter
  %1 = extractvalue %INT %y, 0, !dbg !140
  %2 = extractvalue %INT %x, 1, !dbg !141
  br i1 %1, label %tcl.int.64.exit.thread, label %op.32bit, !dbg !140

op.32bit:                                         ; preds = %check2
  %y.32 = extractvalue %INT %y, 1, !dbg !142
  %z.32 = and i32 %y.32, %2, !dbg !143
  %3 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32, 1, !dbg !144
  ret %INT %3, !dbg !144

tcl.int.64.exit.thread:                           ; preds = %check2
  %4 = sext i32 %2 to i64, !dbg !145
  %5 = extractvalue %INT %y, 2, !dbg !147
  br label %10, !dbg !147

tcl.int.64.exit:                                  ; preds = %enter
  %6 = extractvalue %INT %x, 2, !dbg !149
  %.pre = extractvalue %INT %y, 0, !dbg !147
  %7 = extractvalue %INT %y, 1, !dbg !147
  %8 = sext i32 %7 to i64, !dbg !147
  %9 = extractvalue %INT %y, 2, !dbg !147
  br i1 %.pre, label %10, label %12, !dbg !147

10:                                               ; preds = %tcl.int.64.exit.thread, %tcl.int.64.exit
  %11 = phi i64 [ %5, %tcl.int.64.exit.thread ], [ %9, %tcl.int.64.exit ]
  %x.6419 = phi i64 [ %4, %tcl.int.64.exit.thread ], [ %6, %tcl.int.64.exit ]
  br label %12, !dbg !147

12:                                               ; preds = %tcl.int.64.exit, %10
  %x.6418 = phi i64 [ %x.6419, %10 ], [ %6, %tcl.int.64.exit ]
  %13 = phi i64 [ %11, %10 ], [ %8, %tcl.int.64.exit ]
  %z.64 = and i64 %x.6418, %13, !dbg !150
  %14 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64, 2, !dbg !151
  ret %INT %14, !dbg !151
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden %INT @tcl.or(%INT %x, %INT %y) local_unnamed_addr #0 !dbg !152 {
enter:
  %0 = extractvalue %INT %x, 0, !dbg !156
  br i1 %0, label %tcl.int.64.exit, label %check2, !dbg !156

check2:                                           ; preds = %enter
  %1 = extractvalue %INT %y, 0, !dbg !157
  %2 = extractvalue %INT %x, 1, !dbg !158
  br i1 %1, label %tcl.int.64.exit.thread, label %op.32bit, !dbg !157

op.32bit:                                         ; preds = %check2
  %y.32 = extractvalue %INT %y, 1, !dbg !159
  %z.32 = or i32 %y.32, %2, !dbg !160
  %3 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32, 1, !dbg !161
  ret %INT %3, !dbg !161

tcl.int.64.exit.thread:                           ; preds = %check2
  %4 = sext i32 %2 to i64, !dbg !162
  %5 = extractvalue %INT %y, 2, !dbg !164
  br label %10, !dbg !164

tcl.int.64.exit:                                  ; preds = %enter
  %6 = extractvalue %INT %x, 2, !dbg !166
  %.pre = extractvalue %INT %y, 0, !dbg !164
  %7 = extractvalue %INT %y, 1, !dbg !164
  %8 = sext i32 %7 to i64, !dbg !164
  %9 = extractvalue %INT %y, 2, !dbg !164
  br i1 %.pre, label %10, label %12, !dbg !164

10:                                               ; preds = %tcl.int.64.exit.thread, %tcl.int.64.exit
  %11 = phi i64 [ %5, %tcl.int.64.exit.thread ], [ %9, %tcl.int.64.exit ]
  %x.6419 = phi i64 [ %4, %tcl.int.64.exit.thread ], [ %6, %tcl.int.64.exit ]
  br label %12, !dbg !164

12:                                               ; preds = %tcl.int.64.exit, %10
  %x.6418 = phi i64 [ %x.6419, %10 ], [ %6, %tcl.int.64.exit ]
  %13 = phi i64 [ %11, %10 ], [ %8, %tcl.int.64.exit ]
  %z.64 = or i64 %x.6418, %13, !dbg !167
  %14 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64, 2, !dbg !168
  ret %INT %14, !dbg !168
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden %INT @tcl.xor(%INT %x, %INT %y) local_unnamed_addr #0 !dbg !169 {
enter:
  %0 = extractvalue %INT %x, 0, !dbg !173
  br i1 %0, label %tcl.int.64.exit, label %check2, !dbg !173

check2:                                           ; preds = %enter
  %1 = extractvalue %INT %y, 0, !dbg !174
  %2 = extractvalue %INT %x, 1, !dbg !175
  br i1 %1, label %tcl.int.64.exit.thread, label %op.32bit, !dbg !174

op.32bit:                                         ; preds = %check2
  %y.32 = extractvalue %INT %y, 1, !dbg !176
  %z.32 = xor i32 %y.32, %2, !dbg !177
  %3 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32, 1, !dbg !178
  ret %INT %3, !dbg !178

tcl.int.64.exit.thread:                           ; preds = %check2
  %4 = sext i32 %2 to i64, !dbg !179
  %5 = extractvalue %INT %y, 2, !dbg !181
  br label %10, !dbg !181

tcl.int.64.exit:                                  ; preds = %enter
  %6 = extractvalue %INT %x, 2, !dbg !183
  %.pre = extractvalue %INT %y, 0, !dbg !181
  %7 = extractvalue %INT %y, 1, !dbg !181
  %8 = sext i32 %7 to i64, !dbg !181
  %9 = extractvalue %INT %y, 2, !dbg !181
  br i1 %.pre, label %10, label %12, !dbg !181

10:                                               ; preds = %tcl.int.64.exit.thread, %tcl.int.64.exit
  %11 = phi i64 [ %5, %tcl.int.64.exit.thread ], [ %9, %tcl.int.64.exit ]
  %x.6419 = phi i64 [ %4, %tcl.int.64.exit.thread ], [ %6, %tcl.int.64.exit ]
  br label %12, !dbg !181

12:                                               ; preds = %tcl.int.64.exit, %10
  %x.6418 = phi i64 [ %x.6419, %10 ], [ %6, %tcl.int.64.exit ]
  %13 = phi i64 [ %11, %10 ], [ %8, %tcl.int.64.exit ]
  %z.64 = xor i64 %x.6418, %13, !dbg !184
  %14 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64, 2, !dbg !185
  ret %INT %14, !dbg !185
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden %INT @tcl.shr(%INT %x, %INT %y) local_unnamed_addr #0 !dbg !186 {
enter:
  %0 = extractvalue %INT %x, 0, !dbg !190
  br i1 %0, label %tcl.int.64.exit, label %check2, !dbg !190

check2:                                           ; preds = %enter
  %1 = extractvalue %INT %y, 0, !dbg !191
  %2 = extractvalue %INT %x, 1, !dbg !192
  br i1 %1, label %tcl.int.64.exit.thread, label %op.32bit, !dbg !191

op.32bit:                                         ; preds = %check2
  %y.32 = extractvalue %INT %y, 1, !dbg !193
  %z.32 = ashr i32 %2, %y.32, !dbg !194
  %3 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32, 1, !dbg !195
  ret %INT %3, !dbg !195

tcl.int.64.exit.thread:                           ; preds = %check2
  %4 = sext i32 %2 to i64, !dbg !196
  %5 = extractvalue %INT %y, 2, !dbg !198
  br label %10, !dbg !198

tcl.int.64.exit:                                  ; preds = %enter
  %6 = extractvalue %INT %x, 2, !dbg !200
  %.pre = extractvalue %INT %y, 0, !dbg !198
  %7 = extractvalue %INT %y, 1, !dbg !198
  %8 = sext i32 %7 to i64, !dbg !198
  %9 = extractvalue %INT %y, 2, !dbg !198
  br i1 %.pre, label %10, label %12, !dbg !198

10:                                               ; preds = %tcl.int.64.exit.thread, %tcl.int.64.exit
  %11 = phi i64 [ %5, %tcl.int.64.exit.thread ], [ %9, %tcl.int.64.exit ]
  %x.6419 = phi i64 [ %4, %tcl.int.64.exit.thread ], [ %6, %tcl.int.64.exit ]
  br label %12, !dbg !198

12:                                               ; preds = %tcl.int.64.exit, %10
  %x.6418 = phi i64 [ %x.6419, %10 ], [ %6, %tcl.int.64.exit ]
  %13 = phi i64 [ %11, %10 ], [ %8, %tcl.int.64.exit ]
  %z.64 = ashr i64 %x.6418, %13, !dbg !201
  %14 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64, 2, !dbg !202
  ret %INT %14, !dbg !202
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden i1 @tcl.eq(%INT %x, %INT %y) local_unnamed_addr #0 !dbg !203 {
enter:
  %0 = extractvalue %INT %x, 0, !dbg !209
  br i1 %0, label %tcl.int.64.exit, label %check2, !dbg !209

check2:                                           ; preds = %enter
  %1 = extractvalue %INT %y, 0, !dbg !210
  %2 = extractvalue %INT %x, 1, !dbg !211
  br i1 %1, label %tcl.int.64.exit.thread, label %op.32bit, !dbg !210

op.32bit:                                         ; preds = %check2
  %y.32 = extractvalue %INT %y, 1, !dbg !212
  %z.bit = icmp eq i32 %2, %y.32, !dbg !213
  ret i1 %z.bit, !dbg !213

tcl.int.64.exit.thread:                           ; preds = %check2
  %3 = sext i32 %2 to i64, !dbg !214
  %4 = extractvalue %INT %y, 2, !dbg !216
  br label %9, !dbg !216

tcl.int.64.exit:                                  ; preds = %enter
  %5 = extractvalue %INT %x, 2, !dbg !218
  %.pre = extractvalue %INT %y, 0, !dbg !216
  %6 = extractvalue %INT %y, 1, !dbg !216
  %7 = sext i32 %6 to i64, !dbg !216
  %8 = extractvalue %INT %y, 2, !dbg !216
  br i1 %.pre, label %9, label %11, !dbg !216

9:                                                ; preds = %tcl.int.64.exit.thread, %tcl.int.64.exit
  %10 = phi i64 [ %4, %tcl.int.64.exit.thread ], [ %8, %tcl.int.64.exit ]
  %x.64210 = phi i64 [ %3, %tcl.int.64.exit.thread ], [ %5, %tcl.int.64.exit ]
  br label %11, !dbg !216

11:                                               ; preds = %tcl.int.64.exit, %9
  %x.6429 = phi i64 [ %x.64210, %9 ], [ %5, %tcl.int.64.exit ]
  %12 = phi i64 [ %10, %9 ], [ %7, %tcl.int.64.exit ]
  %z.bit1 = icmp eq i64 %x.6429, %12, !dbg !219
  ret i1 %z.bit1, !dbg !219
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden i1 @tcl.ne(%INT %x, %INT %y) local_unnamed_addr #0 !dbg !220 {
enter:
  %0 = extractvalue %INT %x, 0, !dbg !224
  br i1 %0, label %tcl.int.64.exit, label %check2, !dbg !224

check2:                                           ; preds = %enter
  %1 = extractvalue %INT %y, 0, !dbg !225
  %2 = extractvalue %INT %x, 1, !dbg !226
  br i1 %1, label %tcl.int.64.exit.thread, label %op.32bit, !dbg !225

op.32bit:                                         ; preds = %check2
  %y.32 = extractvalue %INT %y, 1, !dbg !227
  %z.bit = icmp ne i32 %2, %y.32, !dbg !228
  ret i1 %z.bit, !dbg !228

tcl.int.64.exit.thread:                           ; preds = %check2
  %3 = sext i32 %2 to i64, !dbg !229
  %4 = extractvalue %INT %y, 2, !dbg !231
  br label %9, !dbg !231

tcl.int.64.exit:                                  ; preds = %enter
  %5 = extractvalue %INT %x, 2, !dbg !233
  %.pre = extractvalue %INT %y, 0, !dbg !231
  %6 = extractvalue %INT %y, 1, !dbg !231
  %7 = sext i32 %6 to i64, !dbg !231
  %8 = extractvalue %INT %y, 2, !dbg !231
  br i1 %.pre, label %9, label %11, !dbg !231

9:                                                ; preds = %tcl.int.64.exit.thread, %tcl.int.64.exit
  %10 = phi i64 [ %4, %tcl.int.64.exit.thread ], [ %8, %tcl.int.64.exit ]
  %x.64210 = phi i64 [ %3, %tcl.int.64.exit.thread ], [ %5, %tcl.int.64.exit ]
  br label %11, !dbg !231

11:                                               ; preds = %tcl.int.64.exit, %9
  %x.6429 = phi i64 [ %x.64210, %9 ], [ %5, %tcl.int.64.exit ]
  %12 = phi i64 [ %10, %9 ], [ %7, %tcl.int.64.exit ]
  %z.bit1 = icmp ne i64 %x.6429, %12, !dbg !234
  ret i1 %z.bit1, !dbg !234
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden i1 @tcl.gt(%INT %x, %INT %y) local_unnamed_addr #0 !dbg !235 {
enter:
  %0 = extractvalue %INT %x, 0, !dbg !239
  br i1 %0, label %tcl.int.64.exit, label %check2, !dbg !239

check2:                                           ; preds = %enter
  %1 = extractvalue %INT %y, 0, !dbg !240
  %2 = extractvalue %INT %x, 1, !dbg !241
  br i1 %1, label %tcl.int.64.exit.thread, label %op.32bit, !dbg !240

op.32bit:                                         ; preds = %check2
  %y.32 = extractvalue %INT %y, 1, !dbg !242
  %z.bit = icmp sgt i32 %2, %y.32, !dbg !243
  ret i1 %z.bit, !dbg !243

tcl.int.64.exit.thread:                           ; preds = %check2
  %3 = sext i32 %2 to i64, !dbg !244
  %4 = extractvalue %INT %y, 2, !dbg !246
  br label %9, !dbg !246

tcl.int.64.exit:                                  ; preds = %enter
  %5 = extractvalue %INT %x, 2, !dbg !248
  %.pre = extractvalue %INT %y, 0, !dbg !246
  %6 = extractvalue %INT %y, 1, !dbg !246
  %7 = sext i32 %6 to i64, !dbg !246
  %8 = extractvalue %INT %y, 2, !dbg !246
  br i1 %.pre, label %9, label %11, !dbg !246

9:                                                ; preds = %tcl.int.64.exit.thread, %tcl.int.64.exit
  %10 = phi i64 [ %4, %tcl.int.64.exit.thread ], [ %8, %tcl.int.64.exit ]
  %x.64210 = phi i64 [ %3, %tcl.int.64.exit.thread ], [ %5, %tcl.int.64.exit ]
  br label %11, !dbg !246

11:                                               ; preds = %tcl.int.64.exit, %9
  %x.6429 = phi i64 [ %x.64210, %9 ], [ %5, %tcl.int.64.exit ]
  %12 = phi i64 [ %10, %9 ], [ %7, %tcl.int.64.exit ]
  %z.bit1 = icmp sgt i64 %x.6429, %12, !dbg !249
  ret i1 %z.bit1, !dbg !249
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden i1 @tcl.ge(%INT %x, %INT %y) local_unnamed_addr #0 !dbg !250 {
enter:
  %0 = extractvalue %INT %x, 0, !dbg !254
  br i1 %0, label %tcl.int.64.exit, label %check2, !dbg !254

check2:                                           ; preds = %enter
  %1 = extractvalue %INT %y, 0, !dbg !255
  %2 = extractvalue %INT %x, 1, !dbg !256
  br i1 %1, label %tcl.int.64.exit.thread, label %op.32bit, !dbg !255

op.32bit:                                         ; preds = %check2
  %y.32 = extractvalue %INT %y, 1, !dbg !257
  %z.bit = icmp sge i32 %2, %y.32, !dbg !258
  ret i1 %z.bit, !dbg !258

tcl.int.64.exit.thread:                           ; preds = %check2
  %3 = sext i32 %2 to i64, !dbg !259
  %4 = extractvalue %INT %y, 2, !dbg !261
  br label %9, !dbg !261

tcl.int.64.exit:                                  ; preds = %enter
  %5 = extractvalue %INT %x, 2, !dbg !263
  %.pre = extractvalue %INT %y, 0, !dbg !261
  %6 = extractvalue %INT %y, 1, !dbg !261
  %7 = sext i32 %6 to i64, !dbg !261
  %8 = extractvalue %INT %y, 2, !dbg !261
  br i1 %.pre, label %9, label %11, !dbg !261

9:                                                ; preds = %tcl.int.64.exit.thread, %tcl.int.64.exit
  %10 = phi i64 [ %4, %tcl.int.64.exit.thread ], [ %8, %tcl.int.64.exit ]
  %x.64210 = phi i64 [ %3, %tcl.int.64.exit.thread ], [ %5, %tcl.int.64.exit ]
  br label %11, !dbg !261

11:                                               ; preds = %tcl.int.64.exit, %9
  %x.6429 = phi i64 [ %x.64210, %9 ], [ %5, %tcl.int.64.exit ]
  %12 = phi i64 [ %10, %9 ], [ %7, %tcl.int.64.exit ]
  %z.bit1 = icmp sge i64 %x.6429, %12, !dbg !264
  ret i1 %z.bit1, !dbg !264
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden i1 @tcl.lt(%INT %x, %INT %y) local_unnamed_addr #0 !dbg !265 {
enter:
  %0 = extractvalue %INT %x, 0, !dbg !269
  br i1 %0, label %tcl.int.64.exit, label %check2, !dbg !269

check2:                                           ; preds = %enter
  %1 = extractvalue %INT %y, 0, !dbg !270
  %2 = extractvalue %INT %x, 1, !dbg !271
  br i1 %1, label %tcl.int.64.exit.thread, label %op.32bit, !dbg !270

op.32bit:                                         ; preds = %check2
  %y.32 = extractvalue %INT %y, 1, !dbg !272
  %z.bit = icmp slt i32 %2, %y.32, !dbg !273
  ret i1 %z.bit, !dbg !273

tcl.int.64.exit.thread:                           ; preds = %check2
  %3 = sext i32 %2 to i64, !dbg !274
  %4 = extractvalue %INT %y, 2, !dbg !276
  br label %9, !dbg !276

tcl.int.64.exit:                                  ; preds = %enter
  %5 = extractvalue %INT %x, 2, !dbg !278
  %.pre = extractvalue %INT %y, 0, !dbg !276
  %6 = extractvalue %INT %y, 1, !dbg !276
  %7 = sext i32 %6 to i64, !dbg !276
  %8 = extractvalue %INT %y, 2, !dbg !276
  br i1 %.pre, label %9, label %11, !dbg !276

9:                                                ; preds = %tcl.int.64.exit.thread, %tcl.int.64.exit
  %10 = phi i64 [ %4, %tcl.int.64.exit.thread ], [ %8, %tcl.int.64.exit ]
  %x.64210 = phi i64 [ %3, %tcl.int.64.exit.thread ], [ %5, %tcl.int.64.exit ]
  br label %11, !dbg !276

11:                                               ; preds = %tcl.int.64.exit, %9
  %x.6429 = phi i64 [ %x.64210, %9 ], [ %5, %tcl.int.64.exit ]
  %12 = phi i64 [ %10, %9 ], [ %7, %tcl.int.64.exit ]
  %z.bit1 = icmp slt i64 %x.6429, %12, !dbg !279
  ret i1 %z.bit1, !dbg !279
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden i1 @tcl.le(%INT %x, %INT %y) local_unnamed_addr #0 !dbg !280 {
enter:
  %0 = extractvalue %INT %x, 0, !dbg !284
  br i1 %0, label %tcl.int.64.exit, label %check2, !dbg !284

check2:                                           ; preds = %enter
  %1 = extractvalue %INT %y, 0, !dbg !285
  %2 = extractvalue %INT %x, 1, !dbg !286
  br i1 %1, label %tcl.int.64.exit.thread, label %op.32bit, !dbg !285

op.32bit:                                         ; preds = %check2
  %y.32 = extractvalue %INT %y, 1, !dbg !287
  %z.bit = icmp sle i32 %2, %y.32, !dbg !288
  ret i1 %z.bit, !dbg !288

tcl.int.64.exit.thread:                           ; preds = %check2
  %3 = sext i32 %2 to i64, !dbg !289
  %4 = extractvalue %INT %y, 2, !dbg !291
  br label %9, !dbg !291

tcl.int.64.exit:                                  ; preds = %enter
  %5 = extractvalue %INT %x, 2, !dbg !293
  %.pre = extractvalue %INT %y, 0, !dbg !291
  %6 = extractvalue %INT %y, 1, !dbg !291
  %7 = sext i32 %6 to i64, !dbg !291
  %8 = extractvalue %INT %y, 2, !dbg !291
  br i1 %.pre, label %9, label %11, !dbg !291

9:                                                ; preds = %tcl.int.64.exit.thread, %tcl.int.64.exit
  %10 = phi i64 [ %4, %tcl.int.64.exit.thread ], [ %8, %tcl.int.64.exit ]
  %x.64210 = phi i64 [ %3, %tcl.int.64.exit.thread ], [ %5, %tcl.int.64.exit ]
  br label %11, !dbg !291

11:                                               ; preds = %tcl.int.64.exit, %9
  %x.6429 = phi i64 [ %x.64210, %9 ], [ %5, %tcl.int.64.exit ]
  %12 = phi i64 [ %10, %9 ], [ %7, %tcl.int.64.exit ]
  %z.bit1 = icmp sle i64 %x.6429, %12, !dbg !294
  ret i1 %z.bit1, !dbg !294
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden %INT @tcl.not(%INT %x) local_unnamed_addr #0 !dbg !295 {
enter:
  %0 = extractvalue %INT %x, 0, !dbg !300
  br i1 %0, label %op.64bit, label %op.32bit, !dbg !300

op.32bit:                                         ; preds = %enter
  %x.32 = extractvalue %INT %x, 1, !dbg !301
  %z.32 = xor i32 %x.32, -1, !dbg !301
  %1 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32, 1, !dbg !301
  ret %INT %1, !dbg !301

op.64bit:                                         ; preds = %enter
  %x.64 = extractvalue %INT %x, 2, !dbg !302
  %z.64 = xor i64 %x.64, -1, !dbg !302
  %2 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64, 2, !dbg !302
  ret %INT %2, !dbg !302
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden %INT @tcl.neg(%INT %x) local_unnamed_addr #0 !dbg !303 {
enter:
  %0 = extractvalue %INT %x, 0, !dbg !306
  br i1 %0, label %op.64bit, label %op.32bit, !dbg !306

op.32bit:                                         ; preds = %enter
  %x.32 = extractvalue %INT %x, 1, !dbg !307
  %z.32 = sub i32 0, %x.32, !dbg !307
  %1 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32, 1, !dbg !307
  ret %INT %1, !dbg !307

op.64bit:                                         ; preds = %enter
  %x.64 = extractvalue %INT %x, 2, !dbg !308
  %z.64 = sub i64 0, %x.64, !dbg !308
  %2 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64, 2, !dbg !308
  ret %INT %2, !dbg !308
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden i1 @tcl.land(%INT %x, %INT %y) local_unnamed_addr #0 !dbg !309 {
enter:
  %0 = extractvalue %INT %x, 0, !dbg !313
  %1 = extractvalue %INT %x, 1, !dbg !313
  %2 = sext i32 %1 to i64, !dbg !313
  %3 = extractvalue %INT %x, 2, !dbg !313
  %x.641 = select i1 %0, i64 %3, i64 %2, !dbg !313
  %4 = extractvalue %INT %y, 0, !dbg !315
  %5 = extractvalue %INT %y, 1, !dbg !315
  %6 = sext i32 %5 to i64, !dbg !315
  %7 = extractvalue %INT %y, 2, !dbg !315
  %y.645 = select i1 %4, i64 %7, i64 %6, !dbg !315
  %8 = icmp ne i64 %x.641, 0, !dbg !317
  %9 = icmp ne i64 %y.645, 0, !dbg !317
  %result = and i1 %8, %9, !dbg !317
  ret i1 %result, !dbg !317
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden i1 @tcl.land.double(double %x, double %y) local_unnamed_addr #0 !dbg !318 {
enter:
  %0 = fcmp one double %x, 0.000000e+00, !dbg !325
  %1 = fcmp one double %y, 0.000000e+00, !dbg !325
  %2 = and i1 %0, %1, !dbg !325
  ret i1 %2, !dbg !325
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden i1 @tcl.lor(%INT %x, %INT %y) local_unnamed_addr #0 !dbg !326 {
enter:
  %0 = extractvalue %INT %x, 0, !dbg !330
  %1 = extractvalue %INT %x, 1, !dbg !330
  %2 = sext i32 %1 to i64, !dbg !330
  %3 = extractvalue %INT %x, 2, !dbg !330
  %x.641 = select i1 %0, i64 %3, i64 %2, !dbg !330
  %4 = extractvalue %INT %y, 0, !dbg !332
  %5 = extractvalue %INT %y, 1, !dbg !332
  %6 = sext i32 %5 to i64, !dbg !332
  %7 = extractvalue %INT %y, 2, !dbg !332
  %y.645 = select i1 %4, i64 %7, i64 %6, !dbg !332
  %8 = or i64 %y.645, %x.641, !dbg !334
  %9 = icmp ne i64 %8, 0, !dbg !334
  ret i1 %9, !dbg !334
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden i1 @tcl.lor.double(double %x, double %y) local_unnamed_addr #0 !dbg !335 {
enter:
  %0 = fcmp one double %x, 0.000000e+00, !dbg !339
  %1 = fcmp one double %y, 0.000000e+00, !dbg !339
  %2 = or i1 %0, %1, !dbg !339
  ret i1 %2, !dbg !339
}

; Function Attrs: alwaysinline nounwind readnone
define hidden %NUMERIC @tcl.add.numeric(%NUMERIC %left, %NUMERIC %right) local_unnamed_addr #1 !dbg !340 {
enter:
  %0 = extractvalue %NUMERIC %left, 0, !dbg !348
  %1 = extractvalue %NUMERIC %right, 0, !dbg !348
  %.demorgan = or i1 %0, %1, !dbg !348
  %2 = extractvalue %NUMERIC %left, 1, !dbg !349
  br i1 %.demorgan, label %doubles, label %ints, !dbg !348

ints:                                             ; preds = %enter
  %3 = extractvalue %NUMERIC %right, 1, !dbg !350
  %4 = extractvalue %INT %2, 0, !dbg !351
  br i1 %4, label %tcl.int.64.exit.i, label %check2.i, !dbg !351

check2.i:                                         ; preds = %ints
  %5 = extractvalue %INT %3, 0, !dbg !353
  %6 = extractvalue %INT %2, 1, !dbg !354
  br i1 %5, label %tcl.int.64.exit.thread.i, label %op.32bit.i, !dbg !353

op.32bit.i:                                       ; preds = %check2.i
  %y.32.i = extractvalue %INT %3, 1, !dbg !355
  %7 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %6, i32 %y.32.i) #5, !dbg !356
  %8 = extractvalue { i32, i1 } %7, 1, !dbg !357
  %9 = tail call i1 @llvm.expect.i1(i1 %8, i1 false) #5, !dbg !357
  br i1 %9, label %overflow.32bit.i, label %return.32bit.i, !dbg !357

overflow.32bit.i:                                 ; preds = %op.32bit.i
  %x.64.i = sext i32 %6 to i64, !dbg !358
  %x.641.i = sext i32 %y.32.i to i64, !dbg !359
  %z.64.i = add nsw i64 %x.641.i, %x.64.i, !dbg !360
  %10 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i, 2, !dbg !360
  br label %tcl.add.exit, !dbg !360

return.32bit.i:                                   ; preds = %op.32bit.i
  %z.32.i = extractvalue { i32, i1 } %7, 0, !dbg !361
  %11 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i, 1, !dbg !361
  br label %tcl.add.exit, !dbg !361

tcl.int.64.exit.thread.i:                         ; preds = %check2.i
  %12 = sext i32 %6 to i64, !dbg !362
  %13 = extractvalue %INT %3, 2, !dbg !364
  br label %18, !dbg !364

tcl.int.64.exit.i:                                ; preds = %ints
  %14 = extractvalue %INT %2, 2, !dbg !366
  %.pre.i = extractvalue %INT %3, 0, !dbg !364
  %15 = extractvalue %INT %3, 1, !dbg !364
  %16 = sext i32 %15 to i64, !dbg !364
  %17 = extractvalue %INT %3, 2, !dbg !364
  br i1 %.pre.i, label %18, label %20, !dbg !364

18:                                               ; preds = %tcl.int.64.exit.i, %tcl.int.64.exit.thread.i
  %19 = phi i64 [ %13, %tcl.int.64.exit.thread.i ], [ %17, %tcl.int.64.exit.i ]
  %x.642412.i = phi i64 [ %12, %tcl.int.64.exit.thread.i ], [ %14, %tcl.int.64.exit.i ]
  br label %20, !dbg !364

20:                                               ; preds = %18, %tcl.int.64.exit.i
  %x.642411.i = phi i64 [ %x.642412.i, %18 ], [ %14, %tcl.int.64.exit.i ]
  %21 = phi i64 [ %19, %18 ], [ %16, %tcl.int.64.exit.i ]
  %z.643.i = add i64 %21, %x.642411.i, !dbg !367
  %22 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i, 2, !dbg !367
  br label %tcl.add.exit, !dbg !367

tcl.add.exit:                                     ; preds = %20, %return.32bit.i, %overflow.32bit.i
  %23 = phi %INT [ %10, %overflow.32bit.i ], [ %11, %return.32bit.i ], [ %22, %20 ]
  %24 = insertvalue %NUMERIC { i1 false, %INT undef, double undef }, %INT %23, 1, !dbg !350
  ret %NUMERIC %24, !dbg !350

doubles:                                          ; preds = %enter
  %25 = extractvalue %INT %2, 0, !dbg !368
  %26 = extractvalue %INT %2, 1, !dbg !368
  %27 = sext i32 %26 to i64, !dbg !368
  %28 = extractvalue %INT %2, 2, !dbg !368
  %29 = select i1 %25, i64 %28, i64 %27, !dbg !368
  %30 = sitofp i64 %29 to double, !dbg !370
  %31 = extractvalue %NUMERIC %left, 2, !dbg !370
  %left1 = select i1 %0, double %31, double %30, !dbg !370
  %32 = extractvalue %NUMERIC %right, 1, !dbg !371
  %33 = extractvalue %INT %32, 0, !dbg !372
  %34 = extractvalue %INT %32, 1, !dbg !372
  %35 = sext i32 %34 to i64, !dbg !372
  %36 = extractvalue %INT %32, 2, !dbg !372
  %37 = select i1 %33, i64 %36, i64 %35, !dbg !372
  %38 = sitofp i64 %37 to double, !dbg !371
  %39 = extractvalue %NUMERIC %right, 2, !dbg !371
  %right2 = select i1 %1, double %39, double %38, !dbg !371
  %40 = fadd double %left1, %right2, !dbg !374
  %41 = insertvalue %NUMERIC { i1 true, %INT undef, double undef }, double %40, 2, !dbg !374
  ret %NUMERIC %41, !dbg !374
}

; Function Attrs: alwaysinline nounwind readnone
define hidden %NUMERIC @tcl.sub.numeric(%NUMERIC %left, %NUMERIC %right) local_unnamed_addr #1 !dbg !375 {
enter:
  %0 = extractvalue %NUMERIC %left, 0, !dbg !379
  %1 = extractvalue %NUMERIC %right, 0, !dbg !379
  %.demorgan = or i1 %0, %1, !dbg !379
  %2 = extractvalue %NUMERIC %left, 1, !dbg !380
  br i1 %.demorgan, label %doubles, label %ints, !dbg !379

ints:                                             ; preds = %enter
  %3 = extractvalue %NUMERIC %right, 1, !dbg !381
  %4 = extractvalue %INT %2, 0, !dbg !382
  br i1 %4, label %tcl.int.64.exit.i, label %check2.i, !dbg !382

check2.i:                                         ; preds = %ints
  %5 = extractvalue %INT %3, 0, !dbg !384
  %6 = extractvalue %INT %2, 1, !dbg !385
  br i1 %5, label %tcl.int.64.exit.thread.i, label %op.32bit.i, !dbg !384

op.32bit.i:                                       ; preds = %check2.i
  %y.32.i = extractvalue %INT %3, 1, !dbg !386
  %7 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %6, i32 %y.32.i) #5, !dbg !387
  %8 = extractvalue { i32, i1 } %7, 1, !dbg !388
  %9 = tail call i1 @llvm.expect.i1(i1 %8, i1 false) #5, !dbg !388
  br i1 %9, label %overflow.32bit.i, label %return.32bit.i, !dbg !388

overflow.32bit.i:                                 ; preds = %op.32bit.i
  %x.64.i = sext i32 %6 to i64, !dbg !389
  %x.641.i = sext i32 %y.32.i to i64, !dbg !390
  %z.64.i = sub nsw i64 %x.64.i, %x.641.i, !dbg !391
  %10 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i, 2, !dbg !391
  br label %tcl.sub.exit, !dbg !391

return.32bit.i:                                   ; preds = %op.32bit.i
  %z.32.i = extractvalue { i32, i1 } %7, 0, !dbg !392
  %11 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i, 1, !dbg !392
  br label %tcl.sub.exit, !dbg !392

tcl.int.64.exit.thread.i:                         ; preds = %check2.i
  %12 = sext i32 %6 to i64, !dbg !393
  %13 = extractvalue %INT %3, 2, !dbg !395
  br label %18, !dbg !395

tcl.int.64.exit.i:                                ; preds = %ints
  %14 = extractvalue %INT %2, 2, !dbg !397
  %.pre.i = extractvalue %INT %3, 0, !dbg !395
  %15 = extractvalue %INT %3, 1, !dbg !395
  %16 = sext i32 %15 to i64, !dbg !395
  %17 = extractvalue %INT %3, 2, !dbg !395
  br i1 %.pre.i, label %18, label %20, !dbg !395

18:                                               ; preds = %tcl.int.64.exit.i, %tcl.int.64.exit.thread.i
  %19 = phi i64 [ %13, %tcl.int.64.exit.thread.i ], [ %17, %tcl.int.64.exit.i ]
  %x.642412.i = phi i64 [ %12, %tcl.int.64.exit.thread.i ], [ %14, %tcl.int.64.exit.i ]
  br label %20, !dbg !395

20:                                               ; preds = %18, %tcl.int.64.exit.i
  %x.642411.i = phi i64 [ %x.642412.i, %18 ], [ %14, %tcl.int.64.exit.i ]
  %21 = phi i64 [ %19, %18 ], [ %16, %tcl.int.64.exit.i ]
  %z.643.i = sub i64 %x.642411.i, %21, !dbg !398
  %22 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i, 2, !dbg !398
  br label %tcl.sub.exit, !dbg !398

tcl.sub.exit:                                     ; preds = %20, %return.32bit.i, %overflow.32bit.i
  %23 = phi %INT [ %10, %overflow.32bit.i ], [ %11, %return.32bit.i ], [ %22, %20 ]
  %24 = insertvalue %NUMERIC { i1 false, %INT undef, double undef }, %INT %23, 1, !dbg !381
  ret %NUMERIC %24, !dbg !381

doubles:                                          ; preds = %enter
  %25 = extractvalue %INT %2, 0, !dbg !399
  %26 = extractvalue %INT %2, 1, !dbg !399
  %27 = sext i32 %26 to i64, !dbg !399
  %28 = extractvalue %INT %2, 2, !dbg !399
  %29 = select i1 %25, i64 %28, i64 %27, !dbg !399
  %30 = sitofp i64 %29 to double, !dbg !401
  %31 = extractvalue %NUMERIC %left, 2, !dbg !401
  %left1 = select i1 %0, double %31, double %30, !dbg !401
  %32 = extractvalue %NUMERIC %right, 1, !dbg !402
  %33 = extractvalue %INT %32, 0, !dbg !403
  %34 = extractvalue %INT %32, 1, !dbg !403
  %35 = sext i32 %34 to i64, !dbg !403
  %36 = extractvalue %INT %32, 2, !dbg !403
  %37 = select i1 %33, i64 %36, i64 %35, !dbg !403
  %38 = sitofp i64 %37 to double, !dbg !402
  %39 = extractvalue %NUMERIC %right, 2, !dbg !402
  %right2 = select i1 %1, double %39, double %38, !dbg !402
  %40 = fsub double %left1, %right2, !dbg !405
  %41 = insertvalue %NUMERIC { i1 true, %INT undef, double undef }, double %40, 2, !dbg !405
  ret %NUMERIC %41, !dbg !405
}

; Function Attrs: alwaysinline nounwind readnone
define hidden %NUMERIC @tcl.mult.numeric(%NUMERIC %left, %NUMERIC %right) local_unnamed_addr #1 !dbg !406 {
enter:
  %0 = extractvalue %NUMERIC %left, 0, !dbg !410
  %1 = extractvalue %NUMERIC %right, 0, !dbg !410
  %.demorgan = or i1 %0, %1, !dbg !410
  %2 = extractvalue %NUMERIC %left, 1, !dbg !411
  br i1 %.demorgan, label %doubles, label %ints, !dbg !410

ints:                                             ; preds = %enter
  %3 = extractvalue %NUMERIC %right, 1, !dbg !412
  %4 = extractvalue %INT %2, 0, !dbg !413
  br i1 %4, label %tcl.int.64.exit.i, label %check2.i, !dbg !413

check2.i:                                         ; preds = %ints
  %5 = extractvalue %INT %3, 0, !dbg !415
  %6 = extractvalue %INT %2, 1, !dbg !416
  br i1 %5, label %tcl.int.64.exit.thread.i, label %op.32bit.i, !dbg !415

op.32bit.i:                                       ; preds = %check2.i
  %y.32.i = extractvalue %INT %3, 1, !dbg !417
  %7 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %6, i32 %y.32.i) #5, !dbg !418
  %8 = extractvalue { i32, i1 } %7, 1, !dbg !419
  %9 = tail call i1 @llvm.expect.i1(i1 %8, i1 false) #5, !dbg !419
  br i1 %9, label %overflow.32bit.i, label %return.32bit.i, !dbg !419

overflow.32bit.i:                                 ; preds = %op.32bit.i
  %x.64.i = sext i32 %6 to i64, !dbg !420
  %x.641.i = sext i32 %y.32.i to i64, !dbg !421
  %z.64.i = mul nsw i64 %x.641.i, %x.64.i, !dbg !422
  %10 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i, 2, !dbg !422
  br label %tcl.mul.exit, !dbg !422

return.32bit.i:                                   ; preds = %op.32bit.i
  %z.32.i = extractvalue { i32, i1 } %7, 0, !dbg !423
  %11 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i, 1, !dbg !423
  br label %tcl.mul.exit, !dbg !423

tcl.int.64.exit.thread.i:                         ; preds = %check2.i
  %12 = sext i32 %6 to i64, !dbg !424
  %13 = extractvalue %INT %3, 2, !dbg !426
  br label %18, !dbg !426

tcl.int.64.exit.i:                                ; preds = %ints
  %14 = extractvalue %INT %2, 2, !dbg !428
  %.pre.i = extractvalue %INT %3, 0, !dbg !426
  %15 = extractvalue %INT %3, 1, !dbg !426
  %16 = sext i32 %15 to i64, !dbg !426
  %17 = extractvalue %INT %3, 2, !dbg !426
  br i1 %.pre.i, label %18, label %20, !dbg !426

18:                                               ; preds = %tcl.int.64.exit.i, %tcl.int.64.exit.thread.i
  %19 = phi i64 [ %13, %tcl.int.64.exit.thread.i ], [ %17, %tcl.int.64.exit.i ]
  %x.642412.i = phi i64 [ %12, %tcl.int.64.exit.thread.i ], [ %14, %tcl.int.64.exit.i ]
  br label %20, !dbg !426

20:                                               ; preds = %18, %tcl.int.64.exit.i
  %x.642411.i = phi i64 [ %x.642412.i, %18 ], [ %14, %tcl.int.64.exit.i ]
  %21 = phi i64 [ %19, %18 ], [ %16, %tcl.int.64.exit.i ]
  %z.643.i = mul i64 %21, %x.642411.i, !dbg !429
  %22 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i, 2, !dbg !429
  br label %tcl.mul.exit, !dbg !429

tcl.mul.exit:                                     ; preds = %20, %return.32bit.i, %overflow.32bit.i
  %23 = phi %INT [ %10, %overflow.32bit.i ], [ %11, %return.32bit.i ], [ %22, %20 ]
  %24 = insertvalue %NUMERIC { i1 false, %INT undef, double undef }, %INT %23, 1, !dbg !412
  ret %NUMERIC %24, !dbg !412

doubles:                                          ; preds = %enter
  %25 = extractvalue %INT %2, 0, !dbg !430
  %26 = extractvalue %INT %2, 1, !dbg !430
  %27 = sext i32 %26 to i64, !dbg !430
  %28 = extractvalue %INT %2, 2, !dbg !430
  %29 = select i1 %25, i64 %28, i64 %27, !dbg !430
  %30 = sitofp i64 %29 to double, !dbg !432
  %31 = extractvalue %NUMERIC %left, 2, !dbg !432
  %left1 = select i1 %0, double %31, double %30, !dbg !432
  %32 = extractvalue %NUMERIC %right, 1, !dbg !433
  %33 = extractvalue %INT %32, 0, !dbg !434
  %34 = extractvalue %INT %32, 1, !dbg !434
  %35 = sext i32 %34 to i64, !dbg !434
  %36 = extractvalue %INT %32, 2, !dbg !434
  %37 = select i1 %33, i64 %36, i64 %35, !dbg !434
  %38 = sitofp i64 %37 to double, !dbg !433
  %39 = extractvalue %NUMERIC %right, 2, !dbg !433
  %right2 = select i1 %1, double %39, double %38, !dbg !433
  %40 = fmul double %left1, %right2, !dbg !436
  %41 = insertvalue %NUMERIC { i1 true, %INT undef, double undef }, double %40, 2, !dbg !436
  ret %NUMERIC %41, !dbg !436
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden i1 @tcl.eq.numeric(%NUMERIC %left, %NUMERIC %right) local_unnamed_addr #0 !dbg !437 {
enter:
  %0 = extractvalue %NUMERIC %left, 0, !dbg !443
  %1 = extractvalue %NUMERIC %right, 0, !dbg !443
  %.demorgan = or i1 %0, %1, !dbg !443
  %2 = extractvalue %NUMERIC %left, 1, !dbg !444
  br i1 %.demorgan, label %doubles, label %ints, !dbg !443

ints:                                             ; preds = %enter
  %3 = extractvalue %NUMERIC %right, 1, !dbg !445
  %4 = extractvalue %INT %2, 0, !dbg !446
  br i1 %4, label %tcl.int.64.exit.i, label %check2.i, !dbg !446

check2.i:                                         ; preds = %ints
  %5 = extractvalue %INT %3, 0, !dbg !448
  %6 = extractvalue %INT %2, 1, !dbg !449
  br i1 %5, label %tcl.int.64.exit.thread.i, label %op.32bit.i, !dbg !448

op.32bit.i:                                       ; preds = %check2.i
  %y.32.i = extractvalue %INT %3, 1, !dbg !450
  %z.bit.i = icmp eq i32 %6, %y.32.i, !dbg !451
  br label %tcl.eq.exit, !dbg !451

tcl.int.64.exit.thread.i:                         ; preds = %check2.i
  %7 = sext i32 %6 to i64, !dbg !452
  %8 = extractvalue %INT %3, 2, !dbg !454
  br label %13, !dbg !454

tcl.int.64.exit.i:                                ; preds = %ints
  %9 = extractvalue %INT %2, 2, !dbg !456
  %.pre.i = extractvalue %INT %3, 0, !dbg !454
  %10 = extractvalue %INT %3, 1, !dbg !454
  %11 = sext i32 %10 to i64, !dbg !454
  %12 = extractvalue %INT %3, 2, !dbg !454
  br i1 %.pre.i, label %13, label %15, !dbg !454

13:                                               ; preds = %tcl.int.64.exit.i, %tcl.int.64.exit.thread.i
  %14 = phi i64 [ %8, %tcl.int.64.exit.thread.i ], [ %12, %tcl.int.64.exit.i ]
  %x.64210.i = phi i64 [ %7, %tcl.int.64.exit.thread.i ], [ %9, %tcl.int.64.exit.i ]
  br label %15, !dbg !454

15:                                               ; preds = %13, %tcl.int.64.exit.i
  %x.6429.i = phi i64 [ %x.64210.i, %13 ], [ %9, %tcl.int.64.exit.i ]
  %16 = phi i64 [ %14, %13 ], [ %11, %tcl.int.64.exit.i ]
  %z.bit1.i = icmp eq i64 %x.6429.i, %16, !dbg !457
  br label %tcl.eq.exit, !dbg !457

tcl.eq.exit:                                      ; preds = %15, %op.32bit.i
  %17 = phi i1 [ %z.bit.i, %op.32bit.i ], [ %z.bit1.i, %15 ]
  ret i1 %17, !dbg !445

doubles:                                          ; preds = %enter
  %18 = extractvalue %INT %2, 0, !dbg !458
  %19 = extractvalue %INT %2, 1, !dbg !458
  %20 = sext i32 %19 to i64, !dbg !458
  %21 = extractvalue %INT %2, 2, !dbg !458
  %22 = select i1 %18, i64 %21, i64 %20, !dbg !458
  %23 = sitofp i64 %22 to double, !dbg !460
  %24 = extractvalue %NUMERIC %left, 2, !dbg !460
  %left1 = select i1 %0, double %24, double %23, !dbg !460
  %25 = extractvalue %NUMERIC %right, 1, !dbg !461
  %26 = extractvalue %INT %25, 0, !dbg !462
  %27 = extractvalue %INT %25, 1, !dbg !462
  %28 = sext i32 %27 to i64, !dbg !462
  %29 = extractvalue %INT %25, 2, !dbg !462
  %30 = select i1 %26, i64 %29, i64 %28, !dbg !462
  %31 = sitofp i64 %30 to double, !dbg !461
  %32 = extractvalue %NUMERIC %right, 2, !dbg !461
  %right2 = select i1 %1, double %32, double %31, !dbg !461
  %33 = fcmp oeq double %left1, %right2, !dbg !464
  ret i1 %33, !dbg !464
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden i1 @tcl.ne.numeric(%NUMERIC %left, %NUMERIC %right) local_unnamed_addr #0 !dbg !465 {
enter:
  %0 = extractvalue %NUMERIC %left, 0, !dbg !469
  %1 = extractvalue %NUMERIC %right, 0, !dbg !469
  %.demorgan = or i1 %0, %1, !dbg !469
  %2 = extractvalue %NUMERIC %left, 1, !dbg !470
  br i1 %.demorgan, label %doubles, label %ints, !dbg !469

ints:                                             ; preds = %enter
  %3 = extractvalue %NUMERIC %right, 1, !dbg !471
  %4 = extractvalue %INT %2, 0, !dbg !472
  br i1 %4, label %tcl.int.64.exit.i, label %check2.i, !dbg !472

check2.i:                                         ; preds = %ints
  %5 = extractvalue %INT %3, 0, !dbg !474
  %6 = extractvalue %INT %2, 1, !dbg !475
  br i1 %5, label %tcl.int.64.exit.thread.i, label %op.32bit.i, !dbg !474

op.32bit.i:                                       ; preds = %check2.i
  %y.32.i = extractvalue %INT %3, 1, !dbg !476
  %z.bit.i = icmp ne i32 %6, %y.32.i, !dbg !477
  br label %tcl.ne.exit, !dbg !477

tcl.int.64.exit.thread.i:                         ; preds = %check2.i
  %7 = sext i32 %6 to i64, !dbg !478
  %8 = extractvalue %INT %3, 2, !dbg !480
  br label %13, !dbg !480

tcl.int.64.exit.i:                                ; preds = %ints
  %9 = extractvalue %INT %2, 2, !dbg !482
  %.pre.i = extractvalue %INT %3, 0, !dbg !480
  %10 = extractvalue %INT %3, 1, !dbg !480
  %11 = sext i32 %10 to i64, !dbg !480
  %12 = extractvalue %INT %3, 2, !dbg !480
  br i1 %.pre.i, label %13, label %15, !dbg !480

13:                                               ; preds = %tcl.int.64.exit.i, %tcl.int.64.exit.thread.i
  %14 = phi i64 [ %8, %tcl.int.64.exit.thread.i ], [ %12, %tcl.int.64.exit.i ]
  %x.64210.i = phi i64 [ %7, %tcl.int.64.exit.thread.i ], [ %9, %tcl.int.64.exit.i ]
  br label %15, !dbg !480

15:                                               ; preds = %13, %tcl.int.64.exit.i
  %x.6429.i = phi i64 [ %x.64210.i, %13 ], [ %9, %tcl.int.64.exit.i ]
  %16 = phi i64 [ %14, %13 ], [ %11, %tcl.int.64.exit.i ]
  %z.bit1.i = icmp ne i64 %x.6429.i, %16, !dbg !483
  br label %tcl.ne.exit, !dbg !483

tcl.ne.exit:                                      ; preds = %15, %op.32bit.i
  %17 = phi i1 [ %z.bit.i, %op.32bit.i ], [ %z.bit1.i, %15 ]
  ret i1 %17, !dbg !471

doubles:                                          ; preds = %enter
  %18 = extractvalue %INT %2, 0, !dbg !484
  %19 = extractvalue %INT %2, 1, !dbg !484
  %20 = sext i32 %19 to i64, !dbg !484
  %21 = extractvalue %INT %2, 2, !dbg !484
  %22 = select i1 %18, i64 %21, i64 %20, !dbg !484
  %23 = sitofp i64 %22 to double, !dbg !486
  %24 = extractvalue %NUMERIC %left, 2, !dbg !486
  %left1 = select i1 %0, double %24, double %23, !dbg !486
  %25 = extractvalue %NUMERIC %right, 1, !dbg !487
  %26 = extractvalue %INT %25, 0, !dbg !488
  %27 = extractvalue %INT %25, 1, !dbg !488
  %28 = sext i32 %27 to i64, !dbg !488
  %29 = extractvalue %INT %25, 2, !dbg !488
  %30 = select i1 %26, i64 %29, i64 %28, !dbg !488
  %31 = sitofp i64 %30 to double, !dbg !487
  %32 = extractvalue %NUMERIC %right, 2, !dbg !487
  %right2 = select i1 %1, double %32, double %31, !dbg !487
  %33 = fcmp one double %left1, %right2, !dbg !490
  ret i1 %33, !dbg !490
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden i1 @tcl.lt.numeric(%NUMERIC %left, %NUMERIC %right) local_unnamed_addr #0 !dbg !491 {
enter:
  %0 = extractvalue %NUMERIC %left, 0, !dbg !495
  %1 = extractvalue %NUMERIC %right, 0, !dbg !495
  %.demorgan = or i1 %0, %1, !dbg !495
  %2 = extractvalue %NUMERIC %left, 1, !dbg !496
  br i1 %.demorgan, label %doubles, label %ints, !dbg !495

ints:                                             ; preds = %enter
  %3 = extractvalue %NUMERIC %right, 1, !dbg !497
  %4 = extractvalue %INT %2, 0, !dbg !498
  br i1 %4, label %tcl.int.64.exit.i, label %check2.i, !dbg !498

check2.i:                                         ; preds = %ints
  %5 = extractvalue %INT %3, 0, !dbg !500
  %6 = extractvalue %INT %2, 1, !dbg !501
  br i1 %5, label %tcl.int.64.exit.thread.i, label %op.32bit.i, !dbg !500

op.32bit.i:                                       ; preds = %check2.i
  %y.32.i = extractvalue %INT %3, 1, !dbg !502
  %z.bit.i = icmp slt i32 %6, %y.32.i, !dbg !503
  br label %tcl.lt.exit, !dbg !503

tcl.int.64.exit.thread.i:                         ; preds = %check2.i
  %7 = sext i32 %6 to i64, !dbg !504
  %8 = extractvalue %INT %3, 2, !dbg !506
  br label %13, !dbg !506

tcl.int.64.exit.i:                                ; preds = %ints
  %9 = extractvalue %INT %2, 2, !dbg !508
  %.pre.i = extractvalue %INT %3, 0, !dbg !506
  %10 = extractvalue %INT %3, 1, !dbg !506
  %11 = sext i32 %10 to i64, !dbg !506
  %12 = extractvalue %INT %3, 2, !dbg !506
  br i1 %.pre.i, label %13, label %15, !dbg !506

13:                                               ; preds = %tcl.int.64.exit.i, %tcl.int.64.exit.thread.i
  %14 = phi i64 [ %8, %tcl.int.64.exit.thread.i ], [ %12, %tcl.int.64.exit.i ]
  %x.64210.i = phi i64 [ %7, %tcl.int.64.exit.thread.i ], [ %9, %tcl.int.64.exit.i ]
  br label %15, !dbg !506

15:                                               ; preds = %13, %tcl.int.64.exit.i
  %x.6429.i = phi i64 [ %x.64210.i, %13 ], [ %9, %tcl.int.64.exit.i ]
  %16 = phi i64 [ %14, %13 ], [ %11, %tcl.int.64.exit.i ]
  %z.bit1.i = icmp slt i64 %x.6429.i, %16, !dbg !509
  br label %tcl.lt.exit, !dbg !509

tcl.lt.exit:                                      ; preds = %15, %op.32bit.i
  %17 = phi i1 [ %z.bit.i, %op.32bit.i ], [ %z.bit1.i, %15 ]
  ret i1 %17, !dbg !497

doubles:                                          ; preds = %enter
  %18 = extractvalue %INT %2, 0, !dbg !510
  %19 = extractvalue %INT %2, 1, !dbg !510
  %20 = sext i32 %19 to i64, !dbg !510
  %21 = extractvalue %INT %2, 2, !dbg !510
  %22 = select i1 %18, i64 %21, i64 %20, !dbg !510
  %23 = sitofp i64 %22 to double, !dbg !512
  %24 = extractvalue %NUMERIC %left, 2, !dbg !512
  %left1 = select i1 %0, double %24, double %23, !dbg !512
  %25 = extractvalue %NUMERIC %right, 1, !dbg !513
  %26 = extractvalue %INT %25, 0, !dbg !514
  %27 = extractvalue %INT %25, 1, !dbg !514
  %28 = sext i32 %27 to i64, !dbg !514
  %29 = extractvalue %INT %25, 2, !dbg !514
  %30 = select i1 %26, i64 %29, i64 %28, !dbg !514
  %31 = sitofp i64 %30 to double, !dbg !513
  %32 = extractvalue %NUMERIC %right, 2, !dbg !513
  %right2 = select i1 %1, double %32, double %31, !dbg !513
  %33 = fcmp olt double %left1, %right2, !dbg !516
  ret i1 %33, !dbg !516
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden i1 @tcl.le.numeric(%NUMERIC %left, %NUMERIC %right) local_unnamed_addr #0 !dbg !517 {
enter:
  %0 = extractvalue %NUMERIC %left, 0, !dbg !521
  %1 = extractvalue %NUMERIC %right, 0, !dbg !521
  %.demorgan = or i1 %0, %1, !dbg !521
  %2 = extractvalue %NUMERIC %left, 1, !dbg !522
  br i1 %.demorgan, label %doubles, label %ints, !dbg !521

ints:                                             ; preds = %enter
  %3 = extractvalue %NUMERIC %right, 1, !dbg !523
  %4 = extractvalue %INT %2, 0, !dbg !524
  br i1 %4, label %tcl.int.64.exit.i, label %check2.i, !dbg !524

check2.i:                                         ; preds = %ints
  %5 = extractvalue %INT %3, 0, !dbg !526
  %6 = extractvalue %INT %2, 1, !dbg !527
  br i1 %5, label %tcl.int.64.exit.thread.i, label %op.32bit.i, !dbg !526

op.32bit.i:                                       ; preds = %check2.i
  %y.32.i = extractvalue %INT %3, 1, !dbg !528
  %z.bit.i = icmp sle i32 %6, %y.32.i, !dbg !529
  br label %tcl.le.exit, !dbg !529

tcl.int.64.exit.thread.i:                         ; preds = %check2.i
  %7 = sext i32 %6 to i64, !dbg !530
  %8 = extractvalue %INT %3, 2, !dbg !532
  br label %13, !dbg !532

tcl.int.64.exit.i:                                ; preds = %ints
  %9 = extractvalue %INT %2, 2, !dbg !534
  %.pre.i = extractvalue %INT %3, 0, !dbg !532
  %10 = extractvalue %INT %3, 1, !dbg !532
  %11 = sext i32 %10 to i64, !dbg !532
  %12 = extractvalue %INT %3, 2, !dbg !532
  br i1 %.pre.i, label %13, label %15, !dbg !532

13:                                               ; preds = %tcl.int.64.exit.i, %tcl.int.64.exit.thread.i
  %14 = phi i64 [ %8, %tcl.int.64.exit.thread.i ], [ %12, %tcl.int.64.exit.i ]
  %x.64210.i = phi i64 [ %7, %tcl.int.64.exit.thread.i ], [ %9, %tcl.int.64.exit.i ]
  br label %15, !dbg !532

15:                                               ; preds = %13, %tcl.int.64.exit.i
  %x.6429.i = phi i64 [ %x.64210.i, %13 ], [ %9, %tcl.int.64.exit.i ]
  %16 = phi i64 [ %14, %13 ], [ %11, %tcl.int.64.exit.i ]
  %z.bit1.i = icmp sle i64 %x.6429.i, %16, !dbg !535
  br label %tcl.le.exit, !dbg !535

tcl.le.exit:                                      ; preds = %15, %op.32bit.i
  %17 = phi i1 [ %z.bit.i, %op.32bit.i ], [ %z.bit1.i, %15 ]
  ret i1 %17, !dbg !523

doubles:                                          ; preds = %enter
  %18 = extractvalue %INT %2, 0, !dbg !536
  %19 = extractvalue %INT %2, 1, !dbg !536
  %20 = sext i32 %19 to i64, !dbg !536
  %21 = extractvalue %INT %2, 2, !dbg !536
  %22 = select i1 %18, i64 %21, i64 %20, !dbg !536
  %23 = sitofp i64 %22 to double, !dbg !538
  %24 = extractvalue %NUMERIC %left, 2, !dbg !538
  %left1 = select i1 %0, double %24, double %23, !dbg !538
  %25 = extractvalue %NUMERIC %right, 1, !dbg !539
  %26 = extractvalue %INT %25, 0, !dbg !540
  %27 = extractvalue %INT %25, 1, !dbg !540
  %28 = sext i32 %27 to i64, !dbg !540
  %29 = extractvalue %INT %25, 2, !dbg !540
  %30 = select i1 %26, i64 %29, i64 %28, !dbg !540
  %31 = sitofp i64 %30 to double, !dbg !539
  %32 = extractvalue %NUMERIC %right, 2, !dbg !539
  %right2 = select i1 %1, double %32, double %31, !dbg !539
  %33 = fcmp ole double %left1, %right2, !dbg !542
  ret i1 %33, !dbg !542
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden i1 @tcl.gt.numeric(%NUMERIC %left, %NUMERIC %right) local_unnamed_addr #0 !dbg !543 {
enter:
  %0 = extractvalue %NUMERIC %left, 0, !dbg !547
  %1 = extractvalue %NUMERIC %right, 0, !dbg !547
  %.demorgan = or i1 %0, %1, !dbg !547
  %2 = extractvalue %NUMERIC %left, 1, !dbg !548
  br i1 %.demorgan, label %doubles, label %ints, !dbg !547

ints:                                             ; preds = %enter
  %3 = extractvalue %NUMERIC %right, 1, !dbg !549
  %4 = extractvalue %INT %2, 0, !dbg !550
  br i1 %4, label %tcl.int.64.exit.i, label %check2.i, !dbg !550

check2.i:                                         ; preds = %ints
  %5 = extractvalue %INT %3, 0, !dbg !552
  %6 = extractvalue %INT %2, 1, !dbg !553
  br i1 %5, label %tcl.int.64.exit.thread.i, label %op.32bit.i, !dbg !552

op.32bit.i:                                       ; preds = %check2.i
  %y.32.i = extractvalue %INT %3, 1, !dbg !554
  %z.bit.i = icmp sgt i32 %6, %y.32.i, !dbg !555
  br label %tcl.gt.exit, !dbg !555

tcl.int.64.exit.thread.i:                         ; preds = %check2.i
  %7 = sext i32 %6 to i64, !dbg !556
  %8 = extractvalue %INT %3, 2, !dbg !558
  br label %13, !dbg !558

tcl.int.64.exit.i:                                ; preds = %ints
  %9 = extractvalue %INT %2, 2, !dbg !560
  %.pre.i = extractvalue %INT %3, 0, !dbg !558
  %10 = extractvalue %INT %3, 1, !dbg !558
  %11 = sext i32 %10 to i64, !dbg !558
  %12 = extractvalue %INT %3, 2, !dbg !558
  br i1 %.pre.i, label %13, label %15, !dbg !558

13:                                               ; preds = %tcl.int.64.exit.i, %tcl.int.64.exit.thread.i
  %14 = phi i64 [ %8, %tcl.int.64.exit.thread.i ], [ %12, %tcl.int.64.exit.i ]
  %x.64210.i = phi i64 [ %7, %tcl.int.64.exit.thread.i ], [ %9, %tcl.int.64.exit.i ]
  br label %15, !dbg !558

15:                                               ; preds = %13, %tcl.int.64.exit.i
  %x.6429.i = phi i64 [ %x.64210.i, %13 ], [ %9, %tcl.int.64.exit.i ]
  %16 = phi i64 [ %14, %13 ], [ %11, %tcl.int.64.exit.i ]
  %z.bit1.i = icmp sgt i64 %x.6429.i, %16, !dbg !561
  br label %tcl.gt.exit, !dbg !561

tcl.gt.exit:                                      ; preds = %15, %op.32bit.i
  %17 = phi i1 [ %z.bit.i, %op.32bit.i ], [ %z.bit1.i, %15 ]
  ret i1 %17, !dbg !549

doubles:                                          ; preds = %enter
  %18 = extractvalue %INT %2, 0, !dbg !562
  %19 = extractvalue %INT %2, 1, !dbg !562
  %20 = sext i32 %19 to i64, !dbg !562
  %21 = extractvalue %INT %2, 2, !dbg !562
  %22 = select i1 %18, i64 %21, i64 %20, !dbg !562
  %23 = sitofp i64 %22 to double, !dbg !564
  %24 = extractvalue %NUMERIC %left, 2, !dbg !564
  %left1 = select i1 %0, double %24, double %23, !dbg !564
  %25 = extractvalue %NUMERIC %right, 1, !dbg !565
  %26 = extractvalue %INT %25, 0, !dbg !566
  %27 = extractvalue %INT %25, 1, !dbg !566
  %28 = sext i32 %27 to i64, !dbg !566
  %29 = extractvalue %INT %25, 2, !dbg !566
  %30 = select i1 %26, i64 %29, i64 %28, !dbg !566
  %31 = sitofp i64 %30 to double, !dbg !565
  %32 = extractvalue %NUMERIC %right, 2, !dbg !565
  %right2 = select i1 %1, double %32, double %31, !dbg !565
  %33 = fcmp ogt double %left1, %right2, !dbg !568
  ret i1 %33, !dbg !568
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden i1 @tcl.ge.numeric(%NUMERIC %left, %NUMERIC %right) local_unnamed_addr #0 !dbg !569 {
enter:
  %0 = extractvalue %NUMERIC %left, 0, !dbg !573
  %1 = extractvalue %NUMERIC %right, 0, !dbg !573
  %.demorgan = or i1 %0, %1, !dbg !573
  %2 = extractvalue %NUMERIC %left, 1, !dbg !574
  br i1 %.demorgan, label %doubles, label %ints, !dbg !573

ints:                                             ; preds = %enter
  %3 = extractvalue %NUMERIC %right, 1, !dbg !575
  %4 = extractvalue %INT %2, 0, !dbg !576
  br i1 %4, label %tcl.int.64.exit.i, label %check2.i, !dbg !576

check2.i:                                         ; preds = %ints
  %5 = extractvalue %INT %3, 0, !dbg !578
  %6 = extractvalue %INT %2, 1, !dbg !579
  br i1 %5, label %tcl.int.64.exit.thread.i, label %op.32bit.i, !dbg !578

op.32bit.i:                                       ; preds = %check2.i
  %y.32.i = extractvalue %INT %3, 1, !dbg !580
  %z.bit.i = icmp sge i32 %6, %y.32.i, !dbg !581
  br label %tcl.ge.exit, !dbg !581

tcl.int.64.exit.thread.i:                         ; preds = %check2.i
  %7 = sext i32 %6 to i64, !dbg !582
  %8 = extractvalue %INT %3, 2, !dbg !584
  br label %13, !dbg !584

tcl.int.64.exit.i:                                ; preds = %ints
  %9 = extractvalue %INT %2, 2, !dbg !586
  %.pre.i = extractvalue %INT %3, 0, !dbg !584
  %10 = extractvalue %INT %3, 1, !dbg !584
  %11 = sext i32 %10 to i64, !dbg !584
  %12 = extractvalue %INT %3, 2, !dbg !584
  br i1 %.pre.i, label %13, label %15, !dbg !584

13:                                               ; preds = %tcl.int.64.exit.i, %tcl.int.64.exit.thread.i
  %14 = phi i64 [ %8, %tcl.int.64.exit.thread.i ], [ %12, %tcl.int.64.exit.i ]
  %x.64210.i = phi i64 [ %7, %tcl.int.64.exit.thread.i ], [ %9, %tcl.int.64.exit.i ]
  br label %15, !dbg !584

15:                                               ; preds = %13, %tcl.int.64.exit.i
  %x.6429.i = phi i64 [ %x.64210.i, %13 ], [ %9, %tcl.int.64.exit.i ]
  %16 = phi i64 [ %14, %13 ], [ %11, %tcl.int.64.exit.i ]
  %z.bit1.i = icmp sge i64 %x.6429.i, %16, !dbg !587
  br label %tcl.ge.exit, !dbg !587

tcl.ge.exit:                                      ; preds = %15, %op.32bit.i
  %17 = phi i1 [ %z.bit.i, %op.32bit.i ], [ %z.bit1.i, %15 ]
  ret i1 %17, !dbg !575

doubles:                                          ; preds = %enter
  %18 = extractvalue %INT %2, 0, !dbg !588
  %19 = extractvalue %INT %2, 1, !dbg !588
  %20 = sext i32 %19 to i64, !dbg !588
  %21 = extractvalue %INT %2, 2, !dbg !588
  %22 = select i1 %18, i64 %21, i64 %20, !dbg !588
  %23 = sitofp i64 %22 to double, !dbg !590
  %24 = extractvalue %NUMERIC %left, 2, !dbg !590
  %left1 = select i1 %0, double %24, double %23, !dbg !590
  %25 = extractvalue %NUMERIC %right, 1, !dbg !591
  %26 = extractvalue %INT %25, 0, !dbg !592
  %27 = extractvalue %INT %25, 1, !dbg !592
  %28 = sext i32 %27 to i64, !dbg !592
  %29 = extractvalue %INT %25, 2, !dbg !592
  %30 = select i1 %26, i64 %29, i64 %28, !dbg !592
  %31 = sitofp i64 %30 to double, !dbg !591
  %32 = extractvalue %NUMERIC %right, 2, !dbg !591
  %right2 = select i1 %1, double %32, double %31, !dbg !591
  %33 = fcmp oge double %left1, %right2, !dbg !594
  ret i1 %33, !dbg !594
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden i1 @tcl.land.numeric(%NUMERIC %left, %NUMERIC %right) local_unnamed_addr #0 !dbg !595 {
enter:
  %0 = extractvalue %NUMERIC %left, 0, !dbg !599
  %1 = extractvalue %NUMERIC %right, 0, !dbg !599
  %.demorgan = or i1 %0, %1, !dbg !599
  %2 = extractvalue %NUMERIC %left, 1, !dbg !600
  br i1 %.demorgan, label %doubles, label %ints, !dbg !599

ints:                                             ; preds = %enter
  %3 = extractvalue %NUMERIC %right, 1, !dbg !601
  %4 = extractvalue %INT %2, 0, !dbg !602
  %5 = extractvalue %INT %2, 1, !dbg !602
  %6 = sext i32 %5 to i64, !dbg !602
  %7 = extractvalue %INT %2, 2, !dbg !602
  %x.641.i = select i1 %4, i64 %7, i64 %6, !dbg !602
  %8 = extractvalue %INT %3, 0, !dbg !605
  %9 = extractvalue %INT %3, 1, !dbg !605
  %10 = sext i32 %9 to i64, !dbg !605
  %11 = extractvalue %INT %3, 2, !dbg !605
  %y.645.i = select i1 %8, i64 %11, i64 %10, !dbg !605
  %12 = icmp ne i64 %x.641.i, 0, !dbg !607
  %13 = icmp ne i64 %y.645.i, 0, !dbg !607
  %result.i = and i1 %12, %13, !dbg !607
  ret i1 %result.i, !dbg !601

doubles:                                          ; preds = %enter
  %14 = extractvalue %INT %2, 0, !dbg !608
  %15 = extractvalue %INT %2, 1, !dbg !608
  %16 = sext i32 %15 to i64, !dbg !608
  %17 = extractvalue %INT %2, 2, !dbg !608
  %18 = select i1 %14, i64 %17, i64 %16, !dbg !608
  %19 = sitofp i64 %18 to double, !dbg !610
  %20 = extractvalue %NUMERIC %left, 2, !dbg !610
  %left1 = select i1 %0, double %20, double %19, !dbg !610
  %21 = extractvalue %NUMERIC %right, 1, !dbg !611
  %22 = extractvalue %INT %21, 0, !dbg !612
  %23 = extractvalue %INT %21, 1, !dbg !612
  %24 = sext i32 %23 to i64, !dbg !612
  %25 = extractvalue %INT %21, 2, !dbg !612
  %26 = select i1 %22, i64 %25, i64 %24, !dbg !612
  %27 = sitofp i64 %26 to double, !dbg !611
  %28 = extractvalue %NUMERIC %right, 2, !dbg !611
  %right2 = select i1 %1, double %28, double %27, !dbg !611
  %29 = fcmp one double %left1, 0.000000e+00, !dbg !614
  %30 = fcmp one double %right2, 0.000000e+00, !dbg !614
  %31 = and i1 %29, %30, !dbg !614
  ret i1 %31, !dbg !616
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden i1 @tcl.lor.numeric(%NUMERIC %left, %NUMERIC %right) local_unnamed_addr #0 !dbg !617 {
enter:
  %0 = extractvalue %NUMERIC %left, 0, !dbg !621
  %1 = extractvalue %NUMERIC %right, 0, !dbg !621
  %.demorgan = or i1 %0, %1, !dbg !621
  %2 = extractvalue %NUMERIC %left, 1, !dbg !622
  br i1 %.demorgan, label %doubles, label %ints, !dbg !621

ints:                                             ; preds = %enter
  %3 = extractvalue %NUMERIC %right, 1, !dbg !623
  %4 = extractvalue %INT %2, 0, !dbg !624
  %5 = extractvalue %INT %2, 1, !dbg !624
  %6 = sext i32 %5 to i64, !dbg !624
  %7 = extractvalue %INT %2, 2, !dbg !624
  %x.641.i = select i1 %4, i64 %7, i64 %6, !dbg !624
  %8 = extractvalue %INT %3, 0, !dbg !627
  %9 = extractvalue %INT %3, 1, !dbg !627
  %10 = sext i32 %9 to i64, !dbg !627
  %11 = extractvalue %INT %3, 2, !dbg !627
  %y.645.i = select i1 %8, i64 %11, i64 %10, !dbg !627
  %12 = or i64 %y.645.i, %x.641.i, !dbg !629
  %13 = icmp ne i64 %12, 0, !dbg !629
  ret i1 %13, !dbg !623

doubles:                                          ; preds = %enter
  %14 = extractvalue %INT %2, 0, !dbg !630
  %15 = extractvalue %INT %2, 1, !dbg !630
  %16 = sext i32 %15 to i64, !dbg !630
  %17 = extractvalue %INT %2, 2, !dbg !630
  %18 = select i1 %14, i64 %17, i64 %16, !dbg !630
  %19 = sitofp i64 %18 to double, !dbg !632
  %20 = extractvalue %NUMERIC %left, 2, !dbg !632
  %left1 = select i1 %0, double %20, double %19, !dbg !632
  %21 = extractvalue %NUMERIC %right, 1, !dbg !633
  %22 = extractvalue %INT %21, 0, !dbg !634
  %23 = extractvalue %INT %21, 1, !dbg !634
  %24 = sext i32 %23 to i64, !dbg !634
  %25 = extractvalue %INT %21, 2, !dbg !634
  %26 = select i1 %22, i64 %25, i64 %24, !dbg !634
  %27 = sitofp i64 %26 to double, !dbg !633
  %28 = extractvalue %NUMERIC %right, 2, !dbg !633
  %right2 = select i1 %1, double %28, double %27, !dbg !633
  %29 = fcmp one double %left1, 0.000000e+00, !dbg !636
  %30 = fcmp one double %right2, 0.000000e+00, !dbg !636
  %31 = or i1 %29, %30, !dbg !636
  ret i1 %31, !dbg !638
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden i1 @tcl.not.numeric(%NUMERIC %value) local_unnamed_addr #0 !dbg !639 {
enter:
  %0 = extractvalue %NUMERIC %value, 0, !dbg !644
  br i1 %0, label %double.not, label %int.not, !dbg !644

int.not:                                          ; preds = %enter
  %1 = extractvalue %NUMERIC %value, 1, !dbg !645
  %2 = extractvalue %INT %1, 0, !dbg !646
  %3 = extractvalue %INT %1, 1, !dbg !646
  %4 = sext i32 %3 to i64, !dbg !646
  %5 = extractvalue %INT %1, 2, !dbg !646
  %x.64210.i = select i1 %2, i64 %5, i64 %4, !dbg !646
  %z.bit1.i = icmp eq i64 %x.64210.i, 0, !dbg !648
  ret i1 %z.bit1.i, !dbg !645

double.not:                                       ; preds = %enter
  %6 = extractvalue %NUMERIC %value, 2, !dbg !649
  %7 = fcmp oeq double %6, 0.000000e+00, !dbg !649
  ret i1 %7, !dbg !649
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden i1 @tcl.not.numericOrBoolean(%NUMERIC_BOOLEAN %value) local_unnamed_addr #0 !dbg !650 {
enter:
  %0 = extractvalue %NUMERIC_BOOLEAN %value, 0, !dbg !660
  switch i3 %0, label %bool.not [
    i3 0, label %int.not
    i3 1, label %double.not
  ], !dbg !660

int.not:                                          ; preds = %enter
  %1 = extractvalue %NUMERIC_BOOLEAN %value, 1, !dbg !661
  %2 = extractvalue %INT %1, 0, !dbg !662
  %3 = extractvalue %INT %1, 1, !dbg !662
  %4 = sext i32 %3 to i64, !dbg !662
  %5 = extractvalue %INT %1, 2, !dbg !662
  %x.64210.i = select i1 %2, i64 %5, i64 %4, !dbg !662
  %z.bit1.i = icmp eq i64 %x.64210.i, 0, !dbg !664
  ret i1 %z.bit1.i, !dbg !661

double.not:                                       ; preds = %enter
  %6 = extractvalue %NUMERIC_BOOLEAN %value, 2, !dbg !665
  %7 = fcmp oeq double %6, 0.000000e+00, !dbg !665
  ret i1 %7, !dbg !665

bool.not:                                         ; preds = %enter
  %8 = extractvalue %NUMERIC_BOOLEAN %value, 3, !dbg !666
  %9 = xor i1 %8, true, !dbg !666
  ret i1 %9, !dbg !666
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden %NUMERIC @tcl.neg.numeric(%NUMERIC %value) local_unnamed_addr #0 !dbg !667 {
enter:
  %0 = extractvalue %NUMERIC %value, 0, !dbg !672
  br i1 %0, label %double.negate, label %int.negate, !dbg !672

int.negate:                                       ; preds = %enter
  %value1 = extractvalue %NUMERIC %value, 1, !dbg !673
  %1 = extractvalue %INT %value1, 0, !dbg !674
  br i1 %1, label %op.64bit.i, label %op.32bit.i, !dbg !674

op.32bit.i:                                       ; preds = %int.negate
  %x.32.i = extractvalue %INT %value1, 1, !dbg !676
  %z.32.i = sub i32 0, %x.32.i, !dbg !676
  %2 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i, 1, !dbg !676
  br label %tcl.neg.exit, !dbg !676

op.64bit.i:                                       ; preds = %int.negate
  %x.64.i = extractvalue %INT %value1, 2, !dbg !677
  %z.64.i = sub i64 0, %x.64.i, !dbg !677
  %3 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i, 2, !dbg !677
  br label %tcl.neg.exit, !dbg !677

tcl.neg.exit:                                     ; preds = %op.64bit.i, %op.32bit.i
  %4 = phi %INT [ %2, %op.32bit.i ], [ %3, %op.64bit.i ]
  %5 = insertvalue %NUMERIC { i1 false, %INT undef, double undef }, %INT %4, 1, !dbg !678
  ret %NUMERIC %5, !dbg !678

double.negate:                                    ; preds = %enter
  %value2 = extractvalue %NUMERIC %value, 2, !dbg !679
  %6 = fsub double -0.000000e+00, %value2, !dbg !680
  %7 = insertvalue %NUMERIC { i1 true, %INT undef, double undef }, double %6, 2, !dbg !680
  ret %NUMERIC %7, !dbg !680
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden i1 @"tcl ::tcl::mathfunc::bool 252"(%NUMERIC %x) local_unnamed_addr #0 !dbg !681 {
enter:
  %0 = extractvalue %NUMERIC %x, 0, !dbg !686
  %1 = extractvalue %NUMERIC %x, 1, !dbg !686
  %2 = extractvalue %INT %1, 0, !dbg !687
  %3 = extractvalue %INT %1, 1, !dbg !687
  %4 = sext i32 %3 to i64, !dbg !687
  %5 = extractvalue %INT %1, 2, !dbg !687
  %x.64210.i = select i1 %2, i64 %5, i64 %4, !dbg !687
  %z.bit1.i = icmp ne i64 %x.64210.i, 0, !dbg !689
  %6 = extractvalue %NUMERIC %x, 2, !dbg !686
  %7 = fcmp one double %6, 0.000000e+00, !dbg !686
  %8 = select i1 %0, i1 %7, i1 %z.bit1.i, !dbg !686
  ret i1 %8, !dbg !686
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden i1 @"tcl ::tcl::mathfunc::bool 128"(double %x) local_unnamed_addr #0 !dbg !690 {
enter:
  %0 = fcmp one double %x, 0.000000e+00, !dbg !695
  ret i1 %0, !dbg !695
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden i1 @"tcl ::tcl::mathfunc::bool 12"(i1 returned %x) local_unnamed_addr #0 !dbg !696 {
enter:
  ret i1 %x, !dbg !701
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden double @"tcl ::tcl::mathfunc::double 252"(%NUMERIC %x) local_unnamed_addr #0 !dbg !702 {
enter:
  %0 = extractvalue %NUMERIC %x, 0, !dbg !707
  %1 = extractvalue %NUMERIC %x, 1, !dbg !707
  %2 = extractvalue %INT %1, 0, !dbg !708
  %3 = extractvalue %INT %1, 1, !dbg !708
  %4 = sext i32 %3 to i64, !dbg !708
  %5 = extractvalue %INT %1, 2, !dbg !708
  %6 = select i1 %2, i64 %5, i64 %4, !dbg !708
  %7 = sitofp i64 %6 to double, !dbg !707
  %8 = extractvalue %NUMERIC %x, 2, !dbg !707
  %9 = select i1 %0, double %8, double %7, !dbg !707
  ret double %9, !dbg !707
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden double @"tcl ::tcl::mathfunc::double 60"(%INT %x) local_unnamed_addr #0 !dbg !710 {
enter:
  %0 = extractvalue %INT %x, 0, !dbg !715
  %1 = extractvalue %INT %x, 1, !dbg !715
  %2 = sext i32 %1 to i64, !dbg !715
  %3 = extractvalue %INT %x, 2, !dbg !715
  %4 = select i1 %0, i64 %3, i64 %2, !dbg !715
  %5 = sitofp i64 %4 to double, !dbg !717
  ret double %5, !dbg !717
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden double @"tcl ::tcl::mathfunc::double 128"(double returned %x) local_unnamed_addr #0 !dbg !718 {
enter:
  ret double %x, !dbg !723
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden %INT @"tcl ::tcl::mathfunc::entier 252"(%NUMERIC %x) local_unnamed_addr #0 !dbg !724 {
enter:
  %0 = extractvalue %NUMERIC %x, 0, !dbg !729
  %1 = extractvalue %NUMERIC %x, 1, !dbg !729
  %2 = extractvalue %NUMERIC %x, 2, !dbg !729
  %3 = fptosi double %2 to i64, !dbg !729
  %4 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %3, 2, !dbg !729
  %5 = select i1 %0, %INT %4, %INT %1, !dbg !729
  ret %INT %5, !dbg !729
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden %INT @"tcl ::tcl::mathfunc::entier 60"(%INT returned %x) local_unnamed_addr #0 !dbg !730 {
enter:
  ret %INT %x, !dbg !733
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden %INT @"tcl ::tcl::mathfunc::entier 128"(double %x) local_unnamed_addr #0 !dbg !734 {
enter:
  %0 = fptosi double %x to i64, !dbg !739
  %1 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %0, 2, !dbg !739
  ret %INT %1, !dbg !739
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden %INT @"tcl ::tcl::mathfunc::int 252"(%NUMERIC %x) local_unnamed_addr #0 !dbg !740 {
enter:
  %0 = extractvalue %NUMERIC %x, 0, !dbg !743
  %1 = extractvalue %NUMERIC %x, 1, !dbg !743
  %2 = extractvalue %NUMERIC %x, 2, !dbg !743
  %3 = fptosi double %2 to i64, !dbg !743
  %4 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %3, 2, !dbg !743
  %y = select i1 %0, %INT %4, %INT %1, !dbg !743
  ret %INT %y, !dbg !744
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden %INT @"tcl ::tcl::mathfunc::int 60"(%INT returned %x) local_unnamed_addr #0 !dbg !745 {
enter:
  ret %INT %x, !dbg !748
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden %INT @"tcl ::tcl::mathfunc::int 128"(double %x) local_unnamed_addr #0 !dbg !749 {
enter:
  %0 = fptosi double %x to i64, !dbg !752
  %1 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %0, 2, !dbg !752
  ret %INT %1, !dbg !752
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden %INT @"tcl ::tcl::mathfunc::wide 252"(%NUMERIC %x) local_unnamed_addr #0 !dbg !753 {
enter:
  %0 = extractvalue %NUMERIC %x, 0, !dbg !756
  %1 = extractvalue %NUMERIC %x, 1, !dbg !756
  %2 = extractvalue %NUMERIC %x, 2, !dbg !756
  %3 = fptosi double %2 to i64, !dbg !756
  %4 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %3, 2, !dbg !756
  %5 = select i1 %0, %INT %4, %INT %1, !dbg !756
  ret %INT %5, !dbg !756
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden %INT @"tcl ::tcl::mathfunc::wide 128"(double %x) local_unnamed_addr #0 !dbg !757 {
enter:
  %0 = fptosi double %x to i64, !dbg !760
  %1 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %0, 2, !dbg !760
  ret %INT %1, !dbg !760
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden %INT @"tcl ::tcl::mathfunc::wide 60"(%INT returned %x) local_unnamed_addr #0 !dbg !761 {
enter:
  ret %INT %x, !dbg !764
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden %NUMERIC @"tcl ::tcl::mathfunc::abs 252"(%NUMERIC %x) local_unnamed_addr #0 !dbg !765 {
enter:
  %0 = extractvalue %NUMERIC %x, 0, !dbg !768
  %1 = extractvalue %NUMERIC %x, 1, !dbg !770
  br i1 %0, label %tcl.lt.numeric.exit, label %ints.i, !dbg !768

ints.i:                                           ; preds = %enter
  %2 = extractvalue %INT %1, 0, !dbg !770
  %3 = extractvalue %INT %1, 2, !dbg !770
  %4 = extractvalue %INT %1, 1, !dbg !770
  %5 = sext i32 %4 to i64, !dbg !770
  %6 = select i1 %2, i64 %3, i64 %5, !dbg !770
  %z.bit1.i.i = icmp slt i64 %6, 0, !dbg !771
  br i1 %z.bit1.i.i, label %int.negate.i, label %normal, !dbg !773

tcl.lt.numeric.exit:                              ; preds = %enter
  %7 = extractvalue %NUMERIC %x, 2, !dbg !774
  %8 = fcmp olt double %7, 0.000000e+00, !dbg !775
  br i1 %8, label %double.negate.i, label %normal, !dbg !773

normal:                                           ; preds = %int.negate.i, %double.negate.i, %ints.i, %tcl.lt.numeric.exit
  %merge = phi %NUMERIC [ %x, %ints.i ], [ %x, %tcl.lt.numeric.exit ], [ %12, %int.negate.i ], [ %14, %double.negate.i ]
  ret %NUMERIC %merge, !dbg !776

int.negate.i:                                     ; preds = %ints.i
  %z.32.i.i = sub i32 0, %4, !dbg !777
  %9 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i.i, 1, !dbg !777
  %z.64.i.i = sub i64 0, %3, !dbg !777
  %10 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i.i, 2, !dbg !777
  %11 = select i1 %2, %INT %10, %INT %9, !dbg !777
  %12 = insertvalue %NUMERIC { i1 false, %INT undef, double undef }, %INT %11, 1, !dbg !780
  br label %normal, !dbg !780

double.negate.i:                                  ; preds = %tcl.lt.numeric.exit
  %13 = fsub double -0.000000e+00, %7, !dbg !781
  %14 = insertvalue %NUMERIC { i1 true, %INT undef, double undef }, double %13, 2, !dbg !781
  br label %normal, !dbg !781
}

; Function Attrs: alwaysinline nounwind readnone
define hidden double @"tcl ::tcl::mathfunc::acos 128"(double %x) local_unnamed_addr #1 !dbg !782 {
enter:
  %0 = tail call double @acos(double %x), !dbg !785
  ret double %0, !dbg !785
}

; Function Attrs: nofree nounwind readnone
declare double @acos(double) local_unnamed_addr #4

; Function Attrs: alwaysinline nounwind readnone
define hidden double @"tcl ::tcl::mathfunc::asin 128"(double %x) local_unnamed_addr #1 !dbg !786 {
enter:
  %0 = tail call double @asin(double %x), !dbg !789
  ret double %0, !dbg !789
}

; Function Attrs: nofree nounwind readnone
declare double @asin(double) local_unnamed_addr #4

; Function Attrs: alwaysinline nounwind readnone
define hidden double @"tcl ::tcl::mathfunc::atan 128"(double %x) local_unnamed_addr #1 !dbg !790 {
enter:
  %0 = tail call double @atan(double %x), !dbg !793
  ret double %0, !dbg !793
}

; Function Attrs: nofree nounwind readnone
declare double @atan(double) local_unnamed_addr #4

; Function Attrs: alwaysinline nounwind readnone
define hidden double @"tcl ::tcl::mathfunc::cosh 128"(double %x) local_unnamed_addr #1 !dbg !794 {
enter:
  %0 = tail call double @cosh(double %x), !dbg !797
  ret double %0, !dbg !797
}

; Function Attrs: nofree nounwind readnone
declare double @cosh(double) local_unnamed_addr #4

; Function Attrs: alwaysinline nounwind readnone
define hidden double @"tcl ::tcl::mathfunc::sinh 128"(double %x) local_unnamed_addr #1 !dbg !798 {
enter:
  %0 = tail call double @sinh(double %x), !dbg !801
  ret double %0, !dbg !801
}

; Function Attrs: nofree nounwind readnone
declare double @sinh(double) local_unnamed_addr #4

; Function Attrs: alwaysinline nounwind readnone
define hidden double @"tcl ::tcl::mathfunc::tan 128"(double %x) local_unnamed_addr #1 !dbg !802 {
enter:
  %0 = tail call double @tan(double %x), !dbg !805
  ret double %0, !dbg !805
}

; Function Attrs: nofree nounwind readnone
declare double @tan(double) local_unnamed_addr #4

; Function Attrs: alwaysinline nounwind readnone
define hidden double @"tcl ::tcl::mathfunc::tanh 128"(double %x) local_unnamed_addr #1 !dbg !806 {
enter:
  %0 = tail call double @tanh(double %x), !dbg !809
  ret double %0, !dbg !809
}

; Function Attrs: nofree nounwind readnone
declare double @tanh(double) local_unnamed_addr #4

; Function Attrs: alwaysinline nounwind readnone
define hidden double @"tcl ::tcl::mathfunc::ceil 128"(double %x) local_unnamed_addr #1 !dbg !810 {
enter:
  %0 = tail call double @llvm.ceil.f64(double %x), !dbg !813
  ret double %0, !dbg !813
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.ceil.f64(double) #2

; Function Attrs: alwaysinline nounwind readnone
define hidden double @"tcl ::tcl::mathfunc::cos 128"(double %x) local_unnamed_addr #1 !dbg !814 {
enter:
  %0 = tail call double @llvm.cos.f64(double %x), !dbg !817
  ret double %0, !dbg !817
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.cos.f64(double) #2

; Function Attrs: alwaysinline nounwind readnone
define hidden double @"tcl ::tcl::mathfunc::exp 128"(double %x) local_unnamed_addr #1 !dbg !818 {
enter:
  %0 = tail call double @llvm.exp.f64(double %x), !dbg !821
  ret double %0, !dbg !821
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.exp.f64(double) #2

; Function Attrs: alwaysinline nounwind readnone
define hidden double @"tcl ::tcl::mathfunc::floor 128"(double %x) local_unnamed_addr #1 !dbg !822 {
enter:
  %0 = tail call double @llvm.floor.f64(double %x), !dbg !825
  ret double %0, !dbg !825
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #2

; Function Attrs: alwaysinline nounwind readnone
define hidden double @"tcl ::tcl::mathfunc::log 128"(double %x) local_unnamed_addr #1 !dbg !826 {
enter:
  %0 = tail call double @llvm.log.f64(double %x), !dbg !829
  ret double %0, !dbg !829
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.log.f64(double) #2

; Function Attrs: alwaysinline nounwind readnone
define hidden double @"tcl ::tcl::mathfunc::log10 128"(double %x) local_unnamed_addr #1 !dbg !830 {
enter:
  %0 = tail call double @llvm.log10.f64(double %x), !dbg !833
  ret double %0, !dbg !833
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.log10.f64(double) #2

; Function Attrs: alwaysinline nounwind readnone
define hidden double @"tcl ::tcl::mathfunc::sin 128"(double %x) local_unnamed_addr #1 !dbg !834 {
enter:
  %0 = tail call double @llvm.sin.f64(double %x), !dbg !837
  ret double %0, !dbg !837
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.sin.f64(double) #2

; Function Attrs: alwaysinline nounwind readnone
define hidden double @"tcl ::tcl::mathfunc::sqrt 128"(double %x) local_unnamed_addr #1 !dbg !838 {
enter:
  %0 = tail call double @llvm.sqrt.f64(double %x), !dbg !841
  ret double %0, !dbg !841
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.sqrt.f64(double) #2

; Function Attrs: alwaysinline nounwind readnone
define hidden double @"tcl ::tcl::mathfunc::atan2 {128 128}"(double %y, double %x) local_unnamed_addr #1 !dbg !842 {
enter:
  %0 = tail call double @atan2(double %y, double %x), !dbg !848
  ret double %0, !dbg !848
}

; Function Attrs: nofree nounwind readnone
declare double @atan2(double, double) local_unnamed_addr #4

; Function Attrs: alwaysinline nounwind readnone
define hidden double @"tcl ::tcl::mathfunc::hypot {128 128}"(double %y, double %x) local_unnamed_addr #1 !dbg !849 {
enter:
  %0 = tail call double @hypot(double %y, double %x), !dbg !853
  ret double %0, !dbg !853
}

; Function Attrs: nounwind readnone
declare double @hypot(double, double) local_unnamed_addr #3

; Function Attrs: alwaysinline nounwind readnone
define hidden double @"tcl ::tcl::mathfunc::pow {128 128}"(double %y, double %x) local_unnamed_addr #1 !dbg !854 {
enter:
  %0 = tail call double @pow(double %y, double %x), !dbg !858
  ret double %0, !dbg !858
}

; Function Attrs: nofree nounwind readnone
declare double @pow(double, double) local_unnamed_addr #4

; Function Attrs: alwaysinline nounwind readnone
define hidden %INT @"tcl ::tcl::mathfunc::round 128"(double %x) local_unnamed_addr #1 !dbg !859 {
enter:
  %0 = tail call double @llvm.round.f64(double %x), !dbg !862
  %1 = fptosi double %0 to i64, !dbg !862
  %2 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %1, 2, !dbg !862
  ret %INT %2, !dbg !862
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.round.f64(double) #2

; Function Attrs: nounwind
define i32 @Global_Init(%Interp* %interp) local_unnamed_addr #5 !dbg !863 {
enter:
  %objTypePtr = tail call %ObjType* @Tcl_GetObjType(i8* nocapture nonnull readonly getelementptr inbounds ([4 x i8], [4 x i8]* @type.int, i64 0, i64 0)), !dbg !993
  store %ObjType* %objTypePtr, %ObjType** @tclIntType, align 8, !dbg !993
  %objTypePtr1 = tail call %ObjType* @Tcl_GetObjType(i8* nocapture nonnull readonly getelementptr inbounds ([7 x i8], [7 x i8]* @type.double, i64 0, i64 0)), !dbg !993
  store %ObjType* %objTypePtr1, %ObjType** @tclDoubleType, align 8, !dbg !993
  %objTypePtr2 = tail call %ObjType* @Tcl_GetObjType(i8* nocapture nonnull readonly getelementptr inbounds ([14 x i8], [14 x i8]* @type.boolean, i64 0, i64 0)), !dbg !993
  store %ObjType* %objTypePtr2, %ObjType** @tclBooleanType, align 8, !dbg !993
  %objTypePtr3 = tail call %ObjType* @Tcl_GetObjType(i8* nocapture nonnull readonly getelementptr inbounds ([10 x i8], [10 x i8]* @type.bytes, i64 0, i64 0)), !dbg !993
  store %ObjType* %objTypePtr3, %ObjType** @tclByteArrayType, align 8, !dbg !993
  %objTypePtr4 = tail call %ObjType* @Tcl_GetObjType(i8* nocapture nonnull readonly getelementptr inbounds ([7 x i8], [7 x i8]* @type.string, i64 0, i64 0)), !dbg !993
  store %ObjType* %objTypePtr4, %ObjType** @tclStringType, align 8, !dbg !993
  %objTypePtr5 = tail call %ObjType* @Tcl_GetObjType(i8* nocapture nonnull readonly getelementptr inbounds ([8 x i8], [8 x i8]* @type.wide, i64 0, i64 0)), !dbg !993
  %0 = icmp eq %ObjType* %objTypePtr5, null, !dbg !993
  %1 = select i1 %0, %ObjType* %objTypePtr, %ObjType* %objTypePtr5, !dbg !993
  store %ObjType* %1, %ObjType** @tclWideIntType, align 8, !dbg !993
  %objTypePtr6 = tail call %ObjType* @Tcl_GetObjType(i8* nocapture nonnull readonly getelementptr inbounds ([5 x i8], [5 x i8]* @type.list, i64 0, i64 0)), !dbg !993
  store %ObjType* %objTypePtr6, %ObjType** @tclListType, align 8, !dbg !993
  store %Interp* %interp, %Interp** @tclInterp, align 8, !dbg !993
  %objPtr = tail call noalias nonnull %Tcl_Obj* @Tcl_NewObj(), !dbg !993
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !994
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !1002
  %2 = icmp eq i32 %refCount1.i, 0, !dbg !1002
  tail call void @llvm.assume(i1 %2) #5, !dbg !1002
  store %Tcl_Obj* %objPtr, %Tcl_Obj** @tclEmptyString, align 8, !dbg !993
  %bytes.ptr = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 1, !dbg !993
  %bytes = load i8*, i8** %bytes.ptr, align 8, !dbg !993
  store i8* %bytes, i8** @tclEmptyStringRep, align 8, !dbg !993
  store i32 1, i32* %refCount.i, align 4, !dbg !1003
  %3 = tail call %Tcl_Obj* @tcl.obj.constant(%Tcl_Obj** @obj.constant.0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @str.constant.0, i64 0, i64 0), i32 23), !dbg !1009
  %4 = tail call %Tcl_Obj* @tcl.obj.constant(%Tcl_Obj** @obj.constant.1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @str.constant.1, i64 0, i64 0), i32 27), !dbg !1009
  %5 = tail call %Tcl_Obj* @tcl.obj.constant(%Tcl_Obj** @obj.constant.2, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str.constant.2, i64 0, i64 0), i32 14), !dbg !1009
  %6 = tail call %Tcl_Obj* @tcl.obj.constant(%Tcl_Obj** @obj.constant.3, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @str.constant.3, i64 0, i64 0), i32 30), !dbg !1009
  %7 = tail call %Tcl_Obj* @tcl.obj.constant(%Tcl_Obj** @obj.constant.4, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @str.constant.4, i64 0, i64 0), i32 41), !dbg !1009
  %8 = tail call %Tcl_Obj* @tcl.obj.constant(%Tcl_Obj** @obj.constant.5, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @str.constant.5, i64 0, i64 0), i32 56), !dbg !1009
  %9 = tail call %Tcl_Obj* @tcl.obj.constant(%Tcl_Obj** @obj.constant.6, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @str.constant.6, i64 0, i64 0), i32 40), !dbg !1009
  %10 = tail call %Tcl_Obj* @tcl.obj.constant(%Tcl_Obj** @obj.constant.7, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @str.constant.7, i64 0, i64 0), i32 55), !dbg !1009
  %11 = tail call %Tcl_Obj* @tcl.obj.constant(%Tcl_Obj** @obj.constant.8, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.constant.8, i64 0, i64 0), i32 10), !dbg !1009
  %12 = tail call %Tcl_Obj* @tcl.obj.constant(%Tcl_Obj** @obj.constant.9, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.constant.9, i64 0, i64 0), i32 10), !dbg !1009
  %13 = tail call %Tcl_Obj* @tcl.obj.constant(%Tcl_Obj** @obj.constant.10, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str.constant.10, i64 0, i64 0), i32 11), !dbg !1009
  %14 = tail call %Tcl_Obj* @tcl.obj.constant(%Tcl_Obj** @obj.constant.11, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.constant.11, i64 0, i64 0), i32 10), !dbg !1009
  %15 = tail call %Tcl_Obj* @tcl.obj.constant(%Tcl_Obj** @obj.constant.12, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @str.constant.12, i64 0, i64 0), i32 21), !dbg !1009
  %16 = tail call %Tcl_Obj* @tcl.obj.constant(%Tcl_Obj** @obj.constant.13, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str.constant.13, i64 0, i64 0), i32 15), !dbg !1009
  %17 = tail call %Tcl_Obj* @tcl.obj.constant(%Tcl_Obj** @obj.constant.14, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @wrongargs_, i64 0, i64 0), i32 0), !dbg !1009
  %cmdPtr = tail call noalias %Command* @Tcl_CreateObjCommand(%Interp* nonnull %interp, i8* nocapture nonnull readonly getelementptr inbounds ([7 x i8], [7 x i8]* @"name.thunk::main", i64 0, i64 0), i32 (i8*, %Interp*, i32, %Tcl_Obj**)* nonnull readonly @"cmd.thunk::main", i8* null, void (i8*)* readonly null), !dbg !1010
  %18 = icmp eq %Command* %cmdPtr, null, !dbg !1010
  br i1 %18, label %error, label %leave, !dbg !1010

error:                                            ; preds = %enter
  ret i32 1, !dbg !1011

leave:                                            ; preds = %enter
  %code = tail call i32 @Tcl_PkgProvideEx(%Interp* noalias nocapture nonnull %interp, i8* noalias nocapture nonnull readonly getelementptr inbounds ([21 x i8], [21 x i8]* @pkg.name, i64 0, i64 0), i8* noalias nocapture nonnull readonly getelementptr inbounds ([8 x i8], [8 x i8]* @pkg.version, i64 0, i64 0), i8* noalias readonly null), !dbg !1011
  ret i32 %code, !dbg !1011
}

; Function Attrs: alwaysinline nounwind
define hidden void @AssertZeroRefCount(%Tcl_Obj* readonly %objPtr) local_unnamed_addr #6 !dbg !995 {
enter:
  %0 = icmp eq %Tcl_Obj* %objPtr, null, !dbg !1012
  br i1 %0, label %null.doesnt.have.reference.counts, label %assert.zero.reference.count, !dbg !1012

assert.zero.reference.count:                      ; preds = %enter
  %refCount = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !1013
  %refCount1 = load i32, i32* %refCount, align 4, !dbg !1014
  %1 = icmp eq i32 %refCount1, 0, !dbg !1014
  tail call void @llvm.assume(i1 %1), !dbg !1014
  ret void, !dbg !1015

null.doesnt.have.reference.counts:                ; preds = %enter
  ret void, !dbg !1016
}

; Function Attrs: nounwind
declare void @llvm.assume(i1) #5

; Function Attrs: cold nounwind
declare i32 @Tcl_PkgProvideEx(%Interp*, i8*, i8*, i8*) local_unnamed_addr #7

; Function Attrs: noreturn nounwind
declare void @Tcl_Panic(i8*, ...) local_unnamed_addr #8

; Function Attrs: nounwind
declare i8* @Tcl_Alloc(i32) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @Tcl_Free(i8*) local_unnamed_addr #5

; Function Attrs: nounwind
declare %Tcl_Obj* @Tcl_ConcatObj(i32, %Tcl_Obj**) local_unnamed_addr #5

; Function Attrs: nounwind
declare %Tcl_Obj* @Tcl_DuplicateObj(%Tcl_Obj*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @TclFreeObj(%Tcl_Obj*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @Tcl_GetBooleanFromObj(%Interp*, %Tcl_Obj*, i32*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i8* @Tcl_GetByteArrayFromObj(%Tcl_Obj*, i32*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @Tcl_GetDoubleFromObj(%Interp*, %Tcl_Obj*, double*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @Tcl_GetIntFromObj(%Interp*, %Tcl_Obj*, i32*) local_unnamed_addr #5

; Function Attrs: nounwind readonly
declare %ObjType* @Tcl_GetObjType(i8*) local_unnamed_addr #9

; Function Attrs: nounwind
declare i8* @Tcl_GetStringFromObj(%Tcl_Obj*, i32*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @Tcl_ListObjAppendElement(%Interp*, %Tcl_Obj*, %Tcl_Obj*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @Tcl_ListObjGetElements(%Interp*, %Tcl_Obj*, i32*, %Tcl_Obj***) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @Tcl_ListObjLength(%Interp*, %Tcl_Obj*, i32*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @Tcl_ListObjReplace(%Interp*, %Tcl_Obj*, i32, i32, i32, %Tcl_Obj**) local_unnamed_addr #5

; Function Attrs: nounwind
declare %Tcl_Obj* @Tcl_NewBooleanObj(i32) local_unnamed_addr #5

; Function Attrs: nounwind readonly
declare %Tcl_Obj* @Tcl_NewByteArrayObj(i8*, i32) local_unnamed_addr #9

; Function Attrs: nounwind
declare %Tcl_Obj* @Tcl_NewDoubleObj(double) local_unnamed_addr #5

; Function Attrs: nounwind
declare %Tcl_Obj* @Tcl_NewIntObj(i32) local_unnamed_addr #5

; Function Attrs: nounwind
declare %Tcl_Obj* @Tcl_NewListObj(i32, %Tcl_Obj**) local_unnamed_addr #5

; Function Attrs: nounwind
declare %Tcl_Obj* @Tcl_NewObj() local_unnamed_addr #5

; Function Attrs: nounwind
declare %Tcl_Obj* @Tcl_NewStringObj(i8*, i32) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @Tcl_SetDoubleObj(%Tcl_Obj*, double) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @Tcl_SetIntObj(%Tcl_Obj*, i32) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @Tcl_SetObjLength(%Tcl_Obj*, i32) local_unnamed_addr #5

; Function Attrs: nounwind
declare %Command* @Tcl_CreateObjCommand(%Interp*, i8*, i32 (i8*, %Interp*, i32, %Tcl_Obj**)*, i8*, void (i8*)*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @Tcl_DeleteHashEntry(%HashEntry*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @Tcl_DeleteHashTable(%HashTable*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @Tcl_EventuallyFree(i8*, void (i8*)*) local_unnamed_addr #5

; Function Attrs: nounwind
declare %HashEntry* @Tcl_FirstHashEntry(%HashTable*, %HashSearch*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @Tcl_Flush(%Channel*) local_unnamed_addr #5

; Function Attrs: nounwind
declare %Tcl_Obj* @Tcl_GetObjResult(%Interp*) local_unnamed_addr #5

; Function Attrs: nounwind
declare %Channel* @Tcl_GetStdChannel(i32) local_unnamed_addr #5

; Function Attrs: nounwind
declare %HashEntry* @Tcl_NextHashEntry(%HashSearch*) local_unnamed_addr #5

; Function Attrs: nounwind
declare %Tcl_Obj* @Tcl_ObjGetVar2(%Interp*, %Tcl_Obj*, %Tcl_Obj*, i32) local_unnamed_addr #5

; Function Attrs: nounwind
declare %Tcl_Obj* @Tcl_ObjSetVar2(%Interp*, %Tcl_Obj*, %Tcl_Obj*, %Tcl_Obj*, i32) local_unnamed_addr #5

; Function Attrs: cold nounwind
declare void @Tcl_SetErrorCode(%Interp*, ...) local_unnamed_addr #7

; Function Attrs: cold nounwind
declare void @Tcl_SetObjErrorCode(%Interp*, %Tcl_Obj*) local_unnamed_addr #7

; Function Attrs: nounwind
declare void @Tcl_SetObjResult(%Interp*, %Tcl_Obj*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @Tcl_UnsetVar2(%Interp*, i8*, i8*, i32) local_unnamed_addr #5

; Function Attrs: cold nounwind
declare void @Tcl_WrongNumArgs(%Interp*, i32, %Tcl_Obj**, i8*) local_unnamed_addr #7

; Function Attrs: nounwind
declare void @Tcl_AppendObjToObj(%Tcl_Obj*, %Tcl_Obj*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @Tcl_EvalObjv(%Interp*, i32, %Tcl_Obj**, i32) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @Tcl_UniCharToUtf(i32, i8*) local_unnamed_addr #5

; Function Attrs: nounwind readonly
declare i8* @Tcl_UtfPrev(i8*, i8*) local_unnamed_addr #9

; Function Attrs: nounwind
declare i32 @Tcl_UtfToLower(i8*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @Tcl_UtfToTitle(i8*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @Tcl_UtfToUniChar(i8*, i16*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @Tcl_UtfToUpper(i8*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @Tcl_WriteChars(%Channel*, i8*, i32) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @Tcl_WriteObj(%Channel*, %Tcl_Obj*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i8* @Tcl_GetString(%Tcl_Obj*) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i32 @Tcl_UniCharIsAlnum(i16) local_unnamed_addr #3

; Function Attrs: nounwind readnone
declare i32 @Tcl_UniCharIsAlpha(i16) local_unnamed_addr #3

; Function Attrs: nounwind readnone
declare i32 @Tcl_UniCharIsDigit(i16) local_unnamed_addr #3

; Function Attrs: nounwind readnone
declare i32 @Tcl_UniCharIsLower(i16) local_unnamed_addr #3

; Function Attrs: nounwind readnone
declare i32 @Tcl_UniCharIsSpace(i16) local_unnamed_addr #3

; Function Attrs: nounwind readnone
declare i32 @Tcl_UniCharIsUpper(i16) local_unnamed_addr #3

; Function Attrs: nounwind readnone
declare i32 @Tcl_UniCharIsWordChar(i16) local_unnamed_addr #3

; Function Attrs: nounwind readonly
declare i32 @Tcl_UniCharNcmp(i16*, i16*, i32) local_unnamed_addr #9

; Function Attrs: nounwind
declare %RegExp* @Tcl_GetRegExpFromObj(%Interp*, %Tcl_Obj*, i32) local_unnamed_addr #5

; Function Attrs: nounwind readonly
declare i32 @Tcl_StringCaseMatch(i8*, i8*, i32) local_unnamed_addr #9

; Function Attrs: nounwind readnone
declare i32 @Tcl_UniCharIsControl(i16) local_unnamed_addr #3

; Function Attrs: nounwind readnone
declare i32 @Tcl_UniCharIsGraph(i16) local_unnamed_addr #3

; Function Attrs: nounwind readnone
declare i32 @Tcl_UniCharIsPrint(i16) local_unnamed_addr #3

; Function Attrs: nounwind readnone
declare i32 @Tcl_UniCharIsPunct(i16) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @Tcl_RegExpExecObj(%Interp*, %RegExp*, %Tcl_Obj*, i32, i32, i32) local_unnamed_addr #5

; Function Attrs: nounwind
declare %Tcl_Obj* @Tcl_NewUnicodeObj(i16*, i32) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @Tcl_GetCharLength(%Tcl_Obj*) local_unnamed_addr #5

; Function Attrs: nounwind readonly
declare i16 @Tcl_GetUniChar(%Tcl_Obj*, i32) local_unnamed_addr #9

; Function Attrs: nounwind
declare i16* @Tcl_GetUnicode(%Tcl_Obj*) local_unnamed_addr #5

; Function Attrs: nounwind
declare %Tcl_Obj* @Tcl_GetRange(%Tcl_Obj*, i32, i32) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @Tcl_AppendUnicodeToObj(%Tcl_Obj*, i16*, i32) local_unnamed_addr #5

; Function Attrs: nounwind
declare %HashEntry* @Tcl_FindHashEntry(%HashTable*, i8*) local_unnamed_addr #5

; Function Attrs: nounwind
declare %HashEntry* @Tcl_CreateHashEntry(%HashTable*, i8*, i32*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @Tcl_InitObjHashTable(%HashTable*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i16* @Tcl_GetUnicodeFromObj(%Tcl_Obj*, i32*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @Tcl_GetWideIntFromObj(%Interp*, %Tcl_Obj*, i64*) local_unnamed_addr #5

; Function Attrs: nounwind
declare %Tcl_Obj* @Tcl_NewWideIntObj(i64) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @Tcl_SetWideIntObj(%Tcl_Obj*, i64) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @Tcl_DictObjPut(%Interp*, %Tcl_Obj*, %Tcl_Obj*, %Tcl_Obj*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @Tcl_DictObjGet(%Interp*, %Tcl_Obj*, %Tcl_Obj*, %Tcl_Obj**) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @Tcl_DictObjRemove(%Interp*, %Tcl_Obj*, %Tcl_Obj*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @Tcl_DictObjSize(%Interp*, %Tcl_Obj*, i32*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @Tcl_DictObjFirst(%Interp*, %Tcl_Obj*, %DictSearch*, %Tcl_Obj**, %Tcl_Obj**, i32*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @Tcl_DictObjNext(%DictSearch*, %Tcl_Obj**, %Tcl_Obj**, i32*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @Tcl_DictObjDone(%DictSearch*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @Tcl_DictObjPutKeyList(%Interp*, %Tcl_Obj*, i32, %Tcl_Obj**, %Tcl_Obj*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @Tcl_DictObjRemoveKeyList(%Interp*, %Tcl_Obj*, i32, %Tcl_Obj**) local_unnamed_addr #5

; Function Attrs: nounwind
declare %Command* @Tcl_GetCommandFromObj(%Interp*, %Tcl_Obj*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @Tcl_GetCommandFullName(%Interp*, %Command*, %Tcl_Obj*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @Tcl_SetReturnOptions(%Interp*, %Tcl_Obj*) local_unnamed_addr #5

; Function Attrs: nounwind
declare %Tcl_Obj* @Tcl_GetReturnOptions(%Interp*, i32) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @Tcl_AppendObjToErrorInfo(%Interp*, %Tcl_Obj*) local_unnamed_addr #5

; Function Attrs: nounwind
declare %Tcl_Obj* @Tcl_ObjPrintf(i8*, ...) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @TclGetIntForIndex(%Interp*, %Tcl_Obj*, i32, i32*) local_unnamed_addr #5

; Function Attrs: nounwind readonly
declare %Command* @TclGetOriginalCommand(%Command*) local_unnamed_addr #9

; Function Attrs: nounwind
declare i32 @TclUpdateReturnInfo(%Interp*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @Tcl_PopCallFrame(%Interp*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @Tcl_PushCallFrame(%Interp*, %CallFrame*, %Namespace*, i32) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @TclListObjSetElement(%Interp*, %Tcl_Obj*, i32, %Tcl_Obj*) local_unnamed_addr #5

; Function Attrs: nounwind readonly
declare i32 @TclpUtfNcmp2(i8*, i8*, i32) local_unnamed_addr #9

; Function Attrs: nounwind readonly
declare i32 @TclUniCharMatch(i16*, i32, i16*, i32, i32) local_unnamed_addr #9

; Function Attrs: nounwind
declare i32 @TclCallVarTraces(%Interp*, %Var*, %Var*, i8*, i8*, i32, i32) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @TclCleanupVar(%Var*, %Var*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @TclVarErrMsg(%Interp*, i8*, i8*, i8*, i8*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @TclObjGetFrame(%Interp*, %Tcl_Obj*, %CallFrame**) local_unnamed_addr #5

; Function Attrs: nounwind
declare %Tcl_Obj* @TclTraceDictPath(%Interp*, %Tcl_Obj*, i32, %Tcl_Obj**, i32) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @TclPtrMakeUpvar(%Interp*, %Var*, i8*, i32, i32) local_unnamed_addr #5

; Function Attrs: nounwind
declare %Var* @TclObjLookupVar(%Interp*, %Tcl_Obj*, i8*, i32, i8*, i32, i32, %Var**) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @TclGetNamespaceFromObj(%Interp*, %Tcl_Obj*, %Namespace**) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @TclInitVarHashTable(%VarHashTable*, %Namespace*) local_unnamed_addr #5

; Function Attrs: nounwind
declare %Tcl_Obj* @TclPtrGetVar(%Interp*, %Var*, %Var*, %Tcl_Obj*, %Tcl_Obj*, i32) local_unnamed_addr #5

; Function Attrs: nounwind
declare %Tcl_Obj* @TclPtrSetVar(%Interp*, %Var*, %Var*, %Tcl_Obj*, %Tcl_Obj*, %Tcl_Obj*, i32) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @TclPtrUnsetVar(%Interp*, %Var*, %Var*, %Tcl_Obj*, %Tcl_Obj*, i32) local_unnamed_addr #5

; Function Attrs: alwaysinline nofree norecurse nounwind
define hidden void @Tcl_IncrRefCount(%Tcl_Obj* nocapture nonnull %objPtr) local_unnamed_addr #10 !dbg !1004 {
enter:
  %refCount = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !1017
  %refCount1 = load i32, i32* %refCount, align 4, !dbg !1018
  %0 = add nsw i32 %refCount1, 1, !dbg !1018
  store i32 %0, i32* %refCount, align 4, !dbg !1018
  ret void, !dbg !1019
}

; Function Attrs: alwaysinline nounwind
define hidden void @Tcl_DecrRefCount(%Tcl_Obj* nonnull %objPtr) local_unnamed_addr #6 !dbg !1020 {
enter:
  %refCount = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !1023
  %refCount1 = load i32, i32* %refCount, align 4, !dbg !1024
  %0 = icmp slt i32 %refCount1, 2, !dbg !1025
  br i1 %0, label %freeObject, label %leave, !dbg !1025

freeObject:                                       ; preds = %enter
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %objPtr), !dbg !1026
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %objPtr), !dbg !1027
  ret void, !dbg !1028

leave:                                            ; preds = %enter
  %1 = add nsw i32 %refCount1, -1, !dbg !1024
  store i32 %1, i32* %refCount, align 4, !dbg !1029
  ret void, !dbg !1030
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0s_Tcl_Objs(i64 immarg, %Tcl_Obj* nocapture) #11

; Function Attrs: alwaysinline
define hidden void @TclFreeIntRep(%Tcl_Obj* nonnull %objPtr) local_unnamed_addr #12 !dbg !1031 {
enter:
  %typePtr = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 3, !dbg !1034
  %typePtr1 = load %ObjType*, %ObjType** %typePtr, align 8, !dbg !1035
  %0 = icmp eq %ObjType* %typePtr1, null, !dbg !1036
  br i1 %0, label %done, label %check, !dbg !1036

check:                                            ; preds = %enter
  %freeIntRepProc.ptr = getelementptr %ObjType, %ObjType* %typePtr1, i64 0, i32 1, !dbg !1037
  %freeIntRepProc = load void (%Tcl_Obj*)*, void (%Tcl_Obj*)** %freeIntRepProc.ptr, align 8, !dbg !1037
  %1 = icmp eq void (%Tcl_Obj*)* %freeIntRepProc, null, !dbg !1038
  br i1 %1, label %clear, label %free, !dbg !1038

free:                                             ; preds = %check
  tail call void %freeIntRepProc(%Tcl_Obj* nonnull %objPtr), !dbg !1039
  br label %clear, !dbg !1040

clear:                                            ; preds = %check, %free
  store %ObjType* null, %ObjType** %typePtr, align 8, !dbg !1041
  br label %done, !dbg !1042

done:                                             ; preds = %enter, %clear
  ret void, !dbg !1043
}

; Function Attrs: alwaysinline nounwind
define hidden void @TclInvalidateStringRep(%Tcl_Obj* nocapture nonnull %objPtr) local_unnamed_addr #6 !dbg !1044 {
enter:
  %bytes = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 1, !dbg !1047
  %bytes1 = load i8*, i8** %bytes, align 8, !dbg !1048
  %0 = icmp eq i8* %bytes1, null, !dbg !1049
  br i1 %0, label %done, label %act, !dbg !1049

act:                                              ; preds = %enter
  %tclEmptyStringRep = load i8*, i8** @tclEmptyStringRep, align 8, !dbg !1050, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %1 = icmp eq i8* %bytes1, %tclEmptyStringRep, !dbg !1050
  br i1 %1, label %clear, label %free, !dbg !1050

free:                                             ; preds = %act
  tail call void @Tcl_Free(i8* nonnull %bytes1), !dbg !1052
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %bytes1), !dbg !1053
  br label %clear, !dbg !1054

clear:                                            ; preds = %act, %free
  store i8* null, i8** %bytes, align 8, !dbg !1055
  br label %done, !dbg !1056

done:                                             ; preds = %enter, %clear
  ret void, !dbg !1057
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #11

; Function Attrs: noinline nounwind
define hidden %Tcl_Obj* @tcl.obj.constant(%Tcl_Obj** noalias nocapture nonnull %varPtr, i8* noalias nocapture nonnull readonly %stringPtr, i32 %length) local_unnamed_addr #13 !dbg !1058 {
enter:
  %objPtr = load %Tcl_Obj*, %Tcl_Obj** %varPtr, align 8, !dbg !1067
  %0 = icmp eq %Tcl_Obj* %objPtr, null, !dbg !1068
  br i1 %0, label %undefined, label %defined, !dbg !1068

defined:                                          ; preds = %enter
  ret %Tcl_Obj* %objPtr, !dbg !1069

undefined:                                        ; preds = %enter
  %objPtr1 = tail call noalias nonnull %Tcl_Obj* @Tcl_NewStringObj(i8* nocapture nonnull readonly %stringPtr, i32 %length), !dbg !1070
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr1, i64 0, i32 0, !dbg !1071
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !1073
  %1 = icmp eq i32 %refCount1.i, 0, !dbg !1073
  tail call void @llvm.assume(i1 %1) #5, !dbg !1073
  store i32 2, i32* %refCount.i, align 4, !dbg !1074
  store %Tcl_Obj* %objPtr1, %Tcl_Obj** %varPtr, align 8, !dbg !1076
  ret %Tcl_Obj* %objPtr1, !dbg !1077
}

; Function Attrs: noinline nounwind
define hidden void @bootstrap.JumpTable.constant(%HashTable* noalias nocapture nonnull %hashPtr, %Tcl_Obj* noalias nonnull %objPtr) local_unnamed_addr #13 !dbg !1078 {
enter:
  tail call void @Tcl_InitObjHashTable(%HashTable* nocapture nonnull %hashPtr), !dbg !1085
  %search = alloca %DictSearch, align 8, !dbg !1086
  %key = alloca %Tcl_Obj*, align 8, !dbg !1087
  %value = alloca %Tcl_Obj*, align 8, !dbg !1088
  %done = alloca i32, align 4, !dbg !1089
  %jump = alloca i32, align 4, !dbg !1090
  %code = call i32 @Tcl_DictObjFirst(%Interp* nocapture null, %Tcl_Obj* nonnull %objPtr, %DictSearch* nocapture nonnull %search, %Tcl_Obj** nocapture nonnull %key, %Tcl_Obj** nocapture nonnull %value, i32* nocapture nonnull %done), !dbg !1091
  %done1 = load i32, i32* %done, align 4, !dbg !1092
  %0 = icmp eq i32 %done1, 0, !dbg !1092
  br i1 %0, label %loop.preheader, label %finished, !dbg !1092

loop.preheader:                                   ; preds = %enter
  %1 = bitcast %Tcl_Obj** %key to i8**, !dbg !1093
  br label %loop, !dbg !1094

loop:                                             ; preds = %loop.preheader, %loop
  %key28 = load i8*, i8** %1, align 8, !dbg !1095
  %value3 = load %Tcl_Obj*, %Tcl_Obj** %value, align 8, !dbg !1096
  %code4 = call i32 @Tcl_GetIntFromObj(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %value3, i32* noalias nocapture nonnull %jump), !dbg !1097
  %jump5 = load i32, i32* %jump, align 4, !dbg !1098
  %hPtr = call nonnull %HashEntry* @Tcl_CreateHashEntry(%HashTable* noalias nocapture nonnull %hashPtr, i8* noalias %key28, i32* noalias nocapture nonnull %done), !dbg !1099
  %2 = zext i32 %jump5 to i64, !dbg !1100
  %3 = inttoptr i64 %2 to i8*, !dbg !1100
  %clientData = getelementptr %HashEntry, %HashEntry* %hPtr, i64 0, i32 3, !dbg !1100
  store i8* %3, i8** %clientData, align 8, !dbg !1100
  call void @Tcl_DictObjNext(%DictSearch* nocapture nonnull %search, %Tcl_Obj** nocapture nonnull %key, %Tcl_Obj** nocapture nonnull %value, i32* nocapture nonnull %done), !dbg !1101
  %done7 = load i32, i32* %done, align 4, !dbg !1094
  %4 = icmp eq i32 %done7, 0, !dbg !1094
  br i1 %4, label %loop, label %finished, !dbg !1094

finished:                                         ; preds = %loop, %enter
  call void @Tcl_DictObjDone(%DictSearch* nocapture nonnull %search), !dbg !1102
  ret void, !dbg !1103
}

; Function Attrs: noinline nounwind
define hidden void @writeline(i8* nocapture nonnull readonly %string, i32 %length) local_unnamed_addr #13 !dbg !1104 {
enter:
  %chan = tail call nonnull %Channel* @Tcl_GetStdChannel(i32 8), !dbg !1110
  %bytesWritten = tail call i32 @Tcl_WriteChars(%Channel* noalias nocapture nonnull %chan, i8* noalias nocapture nonnull readonly %string, i32 %length), !dbg !1110
  %e = tail call i32 @Tcl_Flush(%Channel* nocapture nonnull %chan), !dbg !1110
  ret void, !dbg !1111
}

; Function Attrs: noinline nounwind
define hidden void @writeint(i32 %n) local_unnamed_addr #13 !dbg !1112 {
enter:
  %objPtr = tail call noalias nonnull %Tcl_Obj* (i8*, ...) @Tcl_ObjPrintf(i8* nocapture nonnull readonly getelementptr inbounds ([5 x i8], [5 x i8]* @string.constant, i64 0, i64 0), i32 %n), !dbg !1117
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !1118
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !1120
  %0 = icmp eq i32 %refCount1.i, 0, !dbg !1120
  tail call void @llvm.assume(i1 %0) #5, !dbg !1120
  %chan = tail call nonnull %Channel* @Tcl_GetStdChannel(i32 8), !dbg !1121
  %bytesWritten = tail call i32 @Tcl_WriteObj(%Channel* noalias nocapture nonnull %chan, %Tcl_Obj* noalias nocapture nonnull %objPtr), !dbg !1122
  %refCount1.i2 = load i32, i32* %refCount.i, align 4, !dbg !1123
  %1 = icmp slt i32 %refCount1.i2, 2, !dbg !1125
  br i1 %1, label %freeObject.i, label %leave.i, !dbg !1125

freeObject.i:                                     ; preds = %enter
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %objPtr) #5, !dbg !1126
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %objPtr) #5, !dbg !1127
  br label %Tcl_DecrRefCount.exit, !dbg !1128

leave.i:                                          ; preds = %enter
  %2 = add nsw i32 %refCount1.i2, -1, !dbg !1123
  store i32 %2, i32* %refCount.i, align 4, !dbg !1129
  br label %Tcl_DecrRefCount.exit, !dbg !1130

Tcl_DecrRefCount.exit:                            ; preds = %leave.i, %freeObject.i
  tail call void @writeline(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string.constant.3, i64 0, i64 0), i32 1), !dbg !1131
  ret void, !dbg !1132
}

; Function Attrs: noinline nounwind
define hidden void @writeptr(i8* %n) local_unnamed_addr #13 !dbg !1133 {
enter:
  %0 = ptrtoint i8* %n to i64, !dbg !1138
  %objPtr = tail call noalias nonnull %Tcl_Obj* (i8*, ...) @Tcl_ObjPrintf(i8* nocapture nonnull readonly getelementptr inbounds ([9 x i8], [9 x i8]* @string.constant.2, i64 0, i64 0), i64 %0), !dbg !1139
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !1140
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !1142
  %1 = icmp eq i32 %refCount1.i, 0, !dbg !1142
  tail call void @llvm.assume(i1 %1) #5, !dbg !1142
  %chan = tail call nonnull %Channel* @Tcl_GetStdChannel(i32 8), !dbg !1143
  %bytesWritten = tail call i32 @Tcl_WriteObj(%Channel* noalias nocapture nonnull %chan, %Tcl_Obj* noalias nocapture nonnull %objPtr), !dbg !1144
  %refCount1.i2 = load i32, i32* %refCount.i, align 4, !dbg !1145
  %2 = icmp slt i32 %refCount1.i2, 2, !dbg !1147
  br i1 %2, label %freeObject.i, label %leave.i, !dbg !1147

freeObject.i:                                     ; preds = %enter
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %objPtr) #5, !dbg !1148
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %objPtr) #5, !dbg !1149
  br label %Tcl_DecrRefCount.exit, !dbg !1150

leave.i:                                          ; preds = %enter
  %3 = add nsw i32 %refCount1.i2, -1, !dbg !1145
  store i32 %3, i32* %refCount.i, align 4, !dbg !1151
  br label %Tcl_DecrRefCount.exit, !dbg !1152

Tcl_DecrRefCount.exit:                            ; preds = %leave.i, %freeObject.i
  tail call void @writeline(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string.constant.3, i64 0, i64 0), i32 1), !dbg !1153
  ret void, !dbg !1154
}

; Function Attrs: noinline nounwind readonly
define hidden void @stork(%Tcl_Obj* nocapture %obj) local_unnamed_addr #14 !dbg !1155 {
enter:
  %bytes.ptr = getelementptr %Tcl_Obj, %Tcl_Obj* %obj, i64 0, i32 1, !dbg !1158
  %bytes = load i8*, i8** %bytes.ptr, align 8, !dbg !1158
  %0 = icmp ne i8* %bytes, null, !dbg !1158
  %typePtr.ptr = getelementptr %Tcl_Obj, %Tcl_Obj* %obj, i64 0, i32 3, !dbg !1158
  %typePtr = load %ObjType*, %ObjType** %typePtr.ptr, align 8, !dbg !1158
  %1 = icmp ne %ObjType* %typePtr, null, !dbg !1158
  %2 = or i1 %0, %1, !dbg !1158
  br i1 %2, label %ok, label %fail, !dbg !1158

ok:                                               ; preds = %enter
  ret void, !dbg !1159

fail:                                             ; preds = %enter
  tail call void (i8*, ...) @Tcl_Panic(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @string.constant.4, i64 0, i64 0), %Tcl_Obj* nonnull %obj), !dbg !1160
  unreachable, !dbg !1161
}

; Function Attrs: alwaysinline nounwind
define hidden void @thunk.result.ZEROONE(%Interp* nocapture nonnull %interp, i1 %result) local_unnamed_addr #6 !dbg !1162 {
enter:
  %0 = zext i1 %result to i32, !dbg !1168
  %objPtr = tail call noalias nonnull %Tcl_Obj* @Tcl_NewBooleanObj(i32 %0), !dbg !1168
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !1169
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !1171
  %1 = icmp eq i32 %refCount1.i, 0, !dbg !1171
  tail call void @llvm.assume(i1 %1) #5, !dbg !1171
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %objPtr), !dbg !1168
  ret void, !dbg !1172
}

; Function Attrs: alwaysinline nounwind
define hidden void @"thunk.result.INT BOOLEAN"(%Interp* nocapture nonnull %interp, %INT %result) local_unnamed_addr #6 !dbg !1173 {
enter:
  %0 = extractvalue %INT %result, 0, !dbg !1179
  %1 = extractvalue %INT %result, 1, !dbg !1179
  %2 = extractvalue %INT %result, 2, !dbg !1179
  %3 = trunc i64 %2 to i32, !dbg !1179
  %4 = select i1 %0, i32 %3, i32 %1, !dbg !1179
  %objPtr = tail call noalias nonnull %Tcl_Obj* @Tcl_NewBooleanObj(i32 %4), !dbg !1181
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !1182
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !1184
  %5 = icmp eq i32 %refCount1.i, 0, !dbg !1184
  tail call void @llvm.assume(i1 %5) #5, !dbg !1184
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %objPtr), !dbg !1181
  ret void, !dbg !1185
}

; Function Attrs: alwaysinline nounwind
define hidden void @thunk.result.INT(%Interp* nocapture nonnull %interp, %INT %result) local_unnamed_addr #6 !dbg !1186 {
enter:
  %0 = extractvalue %INT %result, 0, !dbg !1190
  br i1 %0, label %result.64bit, label %result.32bit, !dbg !1190

result.32bit:                                     ; preds = %enter
  %1 = extractvalue %INT %result, 1, !dbg !1191
  %objPtr = tail call noalias nonnull %Tcl_Obj* @Tcl_NewIntObj(i32 %1), !dbg !1191
  br label %next, !dbg !1192

result.64bit:                                     ; preds = %enter
  %2 = extractvalue %INT %result, 2, !dbg !1193
  %objPtr1 = tail call noalias nonnull %Tcl_Obj* @Tcl_NewWideIntObj(i64 %2), !dbg !1193
  br label %next, !dbg !1194

next:                                             ; preds = %result.64bit, %result.32bit
  %objPtr1.sink = phi %Tcl_Obj* [ %objPtr1, %result.64bit ], [ %objPtr, %result.32bit ]
  %refCount.i2 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr1.sink, i64 0, i32 0, !dbg !1195
  %refCount1.i3 = load i32, i32* %refCount.i2, align 4, !dbg !1195
  %3 = icmp eq i32 %refCount1.i3, 0, !dbg !1195
  tail call void @llvm.assume(i1 %3) #5, !dbg !1195
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %objPtr1.sink), !dbg !1196
  ret void, !dbg !1197
}

; Function Attrs: alwaysinline nounwind
define hidden void @thunk.result.DOUBLE(%Interp* nocapture nonnull %interp, double %result) local_unnamed_addr #6 !dbg !1198 {
enter:
  %objPtr = tail call noalias nonnull %Tcl_Obj* @Tcl_NewDoubleObj(double %result), !dbg !1204
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !1205
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !1207
  %0 = icmp eq i32 %refCount1.i, 0, !dbg !1207
  tail call void @llvm.assume(i1 %0) #5, !dbg !1207
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %objPtr), !dbg !1204
  ret void, !dbg !1208
}

; Function Attrs: alwaysinline nounwind
define hidden void @thunk.result.NUMERIC(%Interp* nocapture nonnull %interp, %NUMERIC %result) local_unnamed_addr #6 !dbg !1209 {
enter:
  %0 = extractvalue %NUMERIC %result, 0, !dbg !1215
  br i1 %0, label %rDbl, label %rInt, !dbg !1215

rDbl:                                             ; preds = %enter
  %1 = extractvalue %NUMERIC %result, 2, !dbg !1216
  %objPtr.i = tail call noalias nonnull %Tcl_Obj* @Tcl_NewDoubleObj(double %1) #5, !dbg !1217
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr.i, i64 0, i32 0, !dbg !1219
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !1221
  %2 = icmp eq i32 %refCount1.i.i, 0, !dbg !1221
  tail call void @llvm.assume(i1 %2) #5, !dbg !1221
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %objPtr.i) #5, !dbg !1217
  ret void, !dbg !1222

rInt:                                             ; preds = %enter
  %3 = extractvalue %NUMERIC %result, 1, !dbg !1223
  %4 = extractvalue %INT %3, 0, !dbg !1224
  br i1 %4, label %result.64bit.i, label %result.32bit.i, !dbg !1224

result.32bit.i:                                   ; preds = %rInt
  %5 = extractvalue %INT %3, 1, !dbg !1226
  %objPtr.i1 = tail call noalias nonnull %Tcl_Obj* @Tcl_NewIntObj(i32 %5) #5, !dbg !1226
  br label %thunk.result.INT.exit, !dbg !1227

result.64bit.i:                                   ; preds = %rInt
  %6 = extractvalue %INT %3, 2, !dbg !1228
  %objPtr1.i = tail call noalias nonnull %Tcl_Obj* @Tcl_NewWideIntObj(i64 %6) #5, !dbg !1228
  br label %thunk.result.INT.exit, !dbg !1229

thunk.result.INT.exit:                            ; preds = %result.32bit.i, %result.64bit.i
  %objPtr.i1.sink = phi %Tcl_Obj* [ %objPtr.i1, %result.32bit.i ], [ %objPtr1.i, %result.64bit.i ]
  %refCount.i.i2 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr.i1.sink, i64 0, i32 0, !dbg !1230
  %refCount1.i.i3 = load i32, i32* %refCount.i.i2, align 4, !dbg !1230
  %7 = icmp eq i32 %refCount1.i.i3, 0, !dbg !1230
  tail call void @llvm.assume(i1 %7) #5, !dbg !1230
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %objPtr.i1.sink) #5, !dbg !1231
  ret void, !dbg !1232
}

; Function Attrs: alwaysinline nounwind
define hidden void @thunk.result.STRING(%Interp* nocapture nonnull %interp, %Tcl_Obj* nonnull %result) local_unnamed_addr #6 !dbg !1233 {
enter:
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %result), !dbg !1239
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %result, i64 0, i32 0, !dbg !1240
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !1242
  %0 = icmp slt i32 %refCount1.i, 2, !dbg !1243
  br i1 %0, label %freeObject.i, label %leave.i, !dbg !1243

freeObject.i:                                     ; preds = %enter
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %result) #5, !dbg !1244
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %result) #5, !dbg !1245
  br label %Tcl_DecrRefCount.exit, !dbg !1246

leave.i:                                          ; preds = %enter
  %1 = add nsw i32 %refCount1.i, -1, !dbg !1242
  store i32 %1, i32* %refCount.i, align 4, !dbg !1247
  br label %Tcl_DecrRefCount.exit, !dbg !1248

Tcl_DecrRefCount.exit:                            ; preds = %leave.i, %freeObject.i
  ret void, !dbg !1249
}

; Function Attrs: alwaysinline nounwind
define hidden void @thunk.result.EMPTY(%Interp* nocapture nonnull %interp, %Tcl_Obj* nocapture readnone %result) local_unnamed_addr #6 !dbg !1250 {
enter:
  %objPtr = tail call noalias nonnull %Tcl_Obj* @Tcl_NewObj(), !dbg !1254
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !1255
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !1257
  %0 = icmp eq i32 %refCount1.i, 0, !dbg !1257
  tail call void @llvm.assume(i1 %0) #5, !dbg !1257
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %objPtr), !dbg !1254
  ret void, !dbg !1258
}

; Function Attrs: alwaysinline norecurse nounwind readonly
define hidden %Tcl_Obj* @thunk.arg.default(i32 %index, i32 %argc, %Tcl_Obj** nocapture nonnull readonly %argv, %Tcl_Obj* nonnull readnone %default) local_unnamed_addr #15 !dbg !1259 {
enter:
  %0 = icmp sgt i32 %argc, %index, !dbg !1267
  br i1 %0, label %real, label %default1, !dbg !1267

default1:                                         ; preds = %enter
  ret %Tcl_Obj* %default, !dbg !1268

real:                                             ; preds = %enter
  %1 = sext i32 %index to i64, !dbg !1269
  %realPtr = getelementptr %Tcl_Obj*, %Tcl_Obj** %argv, i64 %1, !dbg !1269
  %real2 = load %Tcl_Obj*, %Tcl_Obj** %realPtr, align 8, !dbg !1270
  ret %Tcl_Obj* %real2, !dbg !1271
}

; Function Attrs: alwaysinline nounwind
define hidden void @tcl.print.string(i32 %chanID, %Tcl_Obj* %str) local_unnamed_addr #6 !dbg !1272 {
enter:
  %chan = tail call nonnull %Channel* @Tcl_GetStdChannel(i32 %chanID), !dbg !1279
  %bytesWritten = tail call i32 @Tcl_WriteObj(%Channel* noalias nocapture nonnull %chan, %Tcl_Obj* noalias nocapture nonnull %str), !dbg !1280
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %str, i64 0, i32 0, !dbg !1281
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !1283
  %0 = icmp slt i32 %refCount1.i, 2, !dbg !1284
  br i1 %0, label %freeObject.i, label %leave.i, !dbg !1284

freeObject.i:                                     ; preds = %enter
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %str) #5, !dbg !1285
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %str) #5, !dbg !1286
  br label %Tcl_DecrRefCount.exit, !dbg !1287

leave.i:                                          ; preds = %enter
  %1 = add nsw i32 %refCount1.i, -1, !dbg !1283
  store i32 %1, i32* %refCount.i, align 4, !dbg !1288
  br label %Tcl_DecrRefCount.exit, !dbg !1289

Tcl_DecrRefCount.exit:                            ; preds = %leave.i, %freeObject.i
  ret void, !dbg !1290
}

; Function Attrs: alwaysinline nounwind
define hidden noalias nonnull %Tcl_Obj* @tcl.stringify.double(double %value) local_unnamed_addr #6 !dbg !1291 {
enter:
  %objPtr = tail call noalias nonnull %Tcl_Obj* @Tcl_NewDoubleObj(double %value), !dbg !1296
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !1297
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !1299
  %0 = icmp eq i32 %refCount1.i, 0, !dbg !1299
  tail call void @llvm.assume(i1 %0) #5, !dbg !1299
  %typePtr.ptr = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 3, !dbg !1300
  %typePtr = load %ObjType*, %ObjType** %typePtr.ptr, align 8, !dbg !1300, !nonnull !3
  %tclDoubleType = load %ObjType*, %ObjType** @tclDoubleType, align 8, !dbg !1301, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %1 = icmp eq %ObjType* %typePtr, %tclDoubleType, !dbg !1301
  tail call void @llvm.assume(i1 %1), !dbg !1301
  ret %Tcl_Obj* %objPtr, !dbg !1302
}

; Function Attrs: alwaysinline nounwind
define hidden noalias nonnull %Tcl_Obj* @tcl.stringify.int(%INT %value) local_unnamed_addr #6 !dbg !1303 {
enter:
  %0 = extractvalue %INT %value, 0, !dbg !1308
  br i1 %0, label %op.64bit, label %op.32bit, !dbg !1308

op.32bit:                                         ; preds = %enter
  %1 = extractvalue %INT %value, 1, !dbg !1309
  %objPtr = tail call noalias nonnull %Tcl_Obj* @Tcl_NewIntObj(i32 %1), !dbg !1309
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !1310
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !1312
  %2 = icmp eq i32 %refCount1.i, 0, !dbg !1312
  tail call void @llvm.assume(i1 %2) #5, !dbg !1312
  %typePtr.ptr = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 3, !dbg !1313
  %typePtr = load %ObjType*, %ObjType** %typePtr.ptr, align 8, !dbg !1313, !nonnull !3
  %tclWideIntType = load %ObjType*, %ObjType** @tclWideIntType, align 8, !dbg !1314, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %3 = icmp eq %ObjType* %typePtr, %tclWideIntType, !dbg !1314
  %tclIntType = load %ObjType*, %ObjType** @tclIntType, align 8, !dbg !1314, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %4 = icmp eq %ObjType* %typePtr, %tclIntType, !dbg !1314
  %5 = or i1 %3, %4, !dbg !1314
  tail call void @llvm.assume(i1 %5), !dbg !1314
  ret %Tcl_Obj* %objPtr, !dbg !1315

op.64bit:                                         ; preds = %enter
  %6 = extractvalue %INT %value, 2, !dbg !1316
  %objPtr1 = tail call noalias nonnull %Tcl_Obj* @Tcl_NewWideIntObj(i64 %6), !dbg !1316
  %refCount.i6 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr1, i64 0, i32 0, !dbg !1317
  %refCount1.i7 = load i32, i32* %refCount.i6, align 4, !dbg !1319
  %7 = icmp eq i32 %refCount1.i7, 0, !dbg !1319
  tail call void @llvm.assume(i1 %7) #5, !dbg !1319
  %typePtr.ptr2 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr1, i64 0, i32 3, !dbg !1320
  %typePtr3 = load %ObjType*, %ObjType** %typePtr.ptr2, align 8, !dbg !1320, !nonnull !3
  %tclWideIntType4 = load %ObjType*, %ObjType** @tclWideIntType, align 8, !dbg !1321, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %8 = icmp eq %ObjType* %typePtr3, %tclWideIntType4, !dbg !1321
  %tclIntType5 = load %ObjType*, %ObjType** @tclIntType, align 8, !dbg !1321, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %9 = icmp eq %ObjType* %typePtr3, %tclIntType5, !dbg !1321
  %10 = or i1 %8, %9, !dbg !1321
  tail call void @llvm.assume(i1 %10), !dbg !1321
  ret %Tcl_Obj* %objPtr1, !dbg !1322
}

; Function Attrs: alwaysinline nounwind
define hidden noalias nonnull %Tcl_Obj* @tcl.stringify.numeric(%NUMERIC %value) local_unnamed_addr #6 !dbg !1323 {
enter:
  %0 = extractvalue %NUMERIC %value, 0, !dbg !1328
  br i1 %0, label %op.double, label %op.int, !dbg !1328

op.int:                                           ; preds = %enter
  %1 = extractvalue %NUMERIC %value, 1, !dbg !1329
  %2 = extractvalue %INT %1, 0, !dbg !1330
  br i1 %2, label %op.64bit.i, label %op.32bit.i, !dbg !1330

op.32bit.i:                                       ; preds = %op.int
  %3 = extractvalue %INT %1, 1, !dbg !1332
  %objPtr.i = tail call noalias nonnull %Tcl_Obj* @Tcl_NewIntObj(i32 %3) #5, !dbg !1332
  br label %tcl.stringify.int.exit, !dbg !1333

op.64bit.i:                                       ; preds = %op.int
  %4 = extractvalue %INT %1, 2, !dbg !1334
  %objPtr1.i = tail call noalias nonnull %Tcl_Obj* @Tcl_NewWideIntObj(i64 %4) #5, !dbg !1334
  br label %tcl.stringify.int.exit, !dbg !1335

tcl.stringify.int.exit:                           ; preds = %op.64bit.i, %op.32bit.i
  %objPtr1.i.sink9 = phi %Tcl_Obj* [ %objPtr1.i, %op.64bit.i ], [ %objPtr.i, %op.32bit.i ]
  %refCount.i6.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr1.i.sink9, i64 0, i32 0, !dbg !1336
  %refCount1.i7.i = load i32, i32* %refCount.i6.i, align 4, !dbg !1336
  %5 = icmp eq i32 %refCount1.i7.i, 0, !dbg !1336
  tail call void @llvm.assume(i1 %5) #5, !dbg !1336
  %typePtr.ptr2.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr1.i.sink9, i64 0, i32 3, !dbg !1336
  %typePtr3.i = load %ObjType*, %ObjType** %typePtr.ptr2.i, align 8, !dbg !1336, !nonnull !3
  %tclWideIntType4.i = load %ObjType*, %ObjType** @tclWideIntType, align 8, !dbg !1336, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %6 = icmp eq %ObjType* %typePtr3.i, %tclWideIntType4.i, !dbg !1336
  %tclIntType5.i = load %ObjType*, %ObjType** @tclIntType, align 8, !dbg !1336, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %7 = icmp eq %ObjType* %typePtr3.i, %tclIntType5.i, !dbg !1336
  %8 = or i1 %6, %7, !dbg !1336
  tail call void @llvm.assume(i1 %8) #5, !dbg !1336
  ret %Tcl_Obj* %objPtr1.i.sink9, !dbg !1329

op.double:                                        ; preds = %enter
  %9 = extractvalue %NUMERIC %value, 2, !dbg !1337
  %objPtr.i1 = tail call noalias nonnull %Tcl_Obj* @Tcl_NewDoubleObj(double %9) #5, !dbg !1338
  %refCount.i.i2 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr.i1, i64 0, i32 0, !dbg !1340
  %refCount1.i.i3 = load i32, i32* %refCount.i.i2, align 4, !dbg !1342
  %10 = icmp eq i32 %refCount1.i.i3, 0, !dbg !1342
  tail call void @llvm.assume(i1 %10) #5, !dbg !1342
  %typePtr.ptr.i4 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr.i1, i64 0, i32 3, !dbg !1343
  %typePtr.i5 = load %ObjType*, %ObjType** %typePtr.ptr.i4, align 8, !dbg !1343, !nonnull !3
  %tclDoubleType.i = load %ObjType*, %ObjType** @tclDoubleType, align 8, !dbg !1344, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %11 = icmp eq %ObjType* %typePtr.i5, %tclDoubleType.i, !dbg !1344
  tail call void @llvm.assume(i1 %11) #5, !dbg !1344
  ret %Tcl_Obj* %objPtr.i1, !dbg !1337
}

; Function Attrs: alwaysinline norecurse nounwind readonly
define hidden i32 @tcl.refCount(%Tcl_Obj* nocapture nonnull readonly %objPtr) local_unnamed_addr #15 !dbg !1345 {
enter:
  %refCountPtr = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !1350
  %refCount = load i32, i32* %refCountPtr, align 4, !dbg !1350
  ret i32 %refCount, !dbg !1350
}

; Function Attrs: alwaysinline norecurse nounwind readonly
define hidden i1 @tcl.shared(%Tcl_Obj* nocapture nonnull readonly %objPtr) local_unnamed_addr #15 !dbg !1351 {
enter:
  %refCountPtr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !1356
  %refCount.i = load i32, i32* %refCountPtr.i, align 4, !dbg !1356
  %shared = icmp sgt i32 %refCount.i, 1, !dbg !1358
  ret i1 %shared, !dbg !1358
}

; Function Attrs: alwaysinline nofree norecurse nounwind
define hidden void @tcl.addReference(%Tcl_Obj* nocapture nonnull %objPtr) local_unnamed_addr #10 !dbg !1359 {
enter:
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !1362
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !1364
  %0 = add nsw i32 %refCount1.i, 1, !dbg !1364
  store i32 %0, i32* %refCount.i, align 4, !dbg !1364
  ret void, !dbg !1365
}

; Function Attrs: alwaysinline nounwind
define hidden void @tcl.dropReference(%Tcl_Obj* nonnull %objPtr) local_unnamed_addr #6 !dbg !1366 {
enter:
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !1369
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !1371
  %0 = icmp slt i32 %refCount1.i, 2, !dbg !1372
  br i1 %0, label %freeObject.i, label %leave.i, !dbg !1372

freeObject.i:                                     ; preds = %enter
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %objPtr) #5, !dbg !1373
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %objPtr) #5, !dbg !1374
  br label %Tcl_DecrRefCount.exit, !dbg !1375

leave.i:                                          ; preds = %enter
  %1 = add nsw i32 %refCount1.i, -1, !dbg !1371
  store i32 %1, i32* %refCount.i, align 4, !dbg !1376
  br label %Tcl_DecrRefCount.exit, !dbg !1377

Tcl_DecrRefCount.exit:                            ; preds = %leave.i, %freeObject.i
  ret void, !dbg !1378
}

; Function Attrs: alwaysinline nofree norecurse nounwind
define hidden void @tcl.addFailReference({ i32, %Tcl_Obj* } %maybeObjPtr) local_unnamed_addr #10 !dbg !1379 {
enter:
  %0 = extractvalue { i32, %Tcl_Obj* } %maybeObjPtr, 0, !dbg !1387
  %1 = icmp eq i32 %0, 0, !dbg !1387
  br i1 %1, label %action.required, label %nothing.to.do, !dbg !1387

action.required:                                  ; preds = %enter
  %objPtr = extractvalue { i32, %Tcl_Obj* } %maybeObjPtr, 1, !dbg !1388
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !1389
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !1391
  %2 = add nsw i32 %refCount1.i, 1, !dbg !1391
  store i32 %2, i32* %refCount.i, align 4, !dbg !1391
  ret void, !dbg !1392

nothing.to.do:                                    ; preds = %enter
  ret void, !dbg !1393
}

; Function Attrs: alwaysinline nounwind
define hidden void @tcl.dropFailReference({ i32, %Tcl_Obj* } %maybeObjPtr) local_unnamed_addr #6 !dbg !1394 {
enter:
  %0 = extractvalue { i32, %Tcl_Obj* } %maybeObjPtr, 0, !dbg !1397
  %1 = icmp eq i32 %0, 0, !dbg !1397
  br i1 %1, label %action.required, label %Tcl_DecrRefCount.exit, !dbg !1397

action.required:                                  ; preds = %enter
  %objPtr = extractvalue { i32, %Tcl_Obj* } %maybeObjPtr, 1, !dbg !1398
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !1399
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !1401
  %2 = icmp slt i32 %refCount1.i, 2, !dbg !1402
  br i1 %2, label %freeObject.i, label %leave.i, !dbg !1402

freeObject.i:                                     ; preds = %action.required
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %objPtr) #5, !dbg !1403
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %objPtr) #5, !dbg !1404
  br label %Tcl_DecrRefCount.exit, !dbg !1405

leave.i:                                          ; preds = %action.required
  %3 = add nsw i32 %refCount1.i, -1, !dbg !1401
  store i32 %3, i32* %refCount.i, align 4, !dbg !1406
  br label %Tcl_DecrRefCount.exit, !dbg !1407

Tcl_DecrRefCount.exit:                            ; preds = %enter, %leave.i, %freeObject.i
  ret void, !dbg !1408
}

; Function Attrs: alwaysinline nofree norecurse nounwind
define hidden void @tcl.maybeAddReference(i1 %maybe, %Tcl_Obj* nocapture %value) local_unnamed_addr #10 !dbg !1409 {
enter:
  br i1 %maybe, label %nothing.to.do, label %action.required, !dbg !1415

action.required:                                  ; preds = %enter
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value, i64 0, i32 0, !dbg !1416
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !1418
  %0 = add nsw i32 %refCount1.i, 1, !dbg !1418
  store i32 %0, i32* %refCount.i, align 4, !dbg !1418
  ret void, !dbg !1419

nothing.to.do:                                    ; preds = %enter
  ret void, !dbg !1420
}

; Function Attrs: alwaysinline nounwind
define hidden void @tcl.maybeDropReference(i1 %maybe, %Tcl_Obj* %value) local_unnamed_addr #6 !dbg !1421 {
enter:
  br i1 %maybe, label %Tcl_DecrRefCount.exit, label %action.required, !dbg !1425

action.required:                                  ; preds = %enter
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value, i64 0, i32 0, !dbg !1426
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !1428
  %0 = icmp slt i32 %refCount1.i, 2, !dbg !1429
  br i1 %0, label %freeObject.i, label %leave.i, !dbg !1429

freeObject.i:                                     ; preds = %action.required
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %value) #5, !dbg !1430
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %value) #5, !dbg !1431
  br label %Tcl_DecrRefCount.exit, !dbg !1432

leave.i:                                          ; preds = %action.required
  %1 = add nsw i32 %refCount1.i, -1, !dbg !1428
  store i32 %1, i32* %refCount.i, align 4, !dbg !1433
  br label %Tcl_DecrRefCount.exit, !dbg !1434

Tcl_DecrRefCount.exit:                            ; preds = %enter, %leave.i, %freeObject.i
  ret void, !dbg !1435
}

; Function Attrs: alwaysinline nofree norecurse nounwind
define hidden void @tcl.addNExistReference({ i1, %Tcl_Obj* } %maybeObjPtr) local_unnamed_addr #10 !dbg !1436 {
enter:
  %0 = extractvalue { i1, %Tcl_Obj* } %maybeObjPtr, 0, !dbg !1443
  br i1 %0, label %nothing.to.do, label %action.required, !dbg !1443

action.required:                                  ; preds = %enter
  %objPtr = extractvalue { i1, %Tcl_Obj* } %maybeObjPtr, 1, !dbg !1444
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !1445
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !1447
  %1 = add nsw i32 %refCount1.i, 1, !dbg !1447
  store i32 %1, i32* %refCount.i, align 4, !dbg !1447
  ret void, !dbg !1448

nothing.to.do:                                    ; preds = %enter
  ret void, !dbg !1449
}

; Function Attrs: alwaysinline nounwind
define hidden void @tcl.dropNExistReference({ i1, %Tcl_Obj* } %maybeObjPtr) local_unnamed_addr #6 !dbg !1450 {
enter:
  %0 = extractvalue { i1, %Tcl_Obj* } %maybeObjPtr, 0, !dbg !1453
  br i1 %0, label %Tcl_DecrRefCount.exit, label %action.required, !dbg !1453

action.required:                                  ; preds = %enter
  %objPtr = extractvalue { i1, %Tcl_Obj* } %maybeObjPtr, 1, !dbg !1454
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !1455
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !1457
  %1 = icmp slt i32 %refCount1.i, 2, !dbg !1458
  br i1 %1, label %freeObject.i, label %leave.i, !dbg !1458

freeObject.i:                                     ; preds = %action.required
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %objPtr) #5, !dbg !1459
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %objPtr) #5, !dbg !1460
  br label %Tcl_DecrRefCount.exit, !dbg !1461

leave.i:                                          ; preds = %action.required
  %2 = add nsw i32 %refCount1.i, -1, !dbg !1457
  store i32 %2, i32* %refCount.i, align 4, !dbg !1462
  br label %Tcl_DecrRefCount.exit, !dbg !1463

Tcl_DecrRefCount.exit:                            ; preds = %enter, %leave.i, %freeObject.i
  ret void, !dbg !1464
}

; Function Attrs: alwaysinline nounwind
define hidden void @tcl.dropFailNExistReference({ i32, { i1, %Tcl_Obj* } } %maybeObjPtr) local_unnamed_addr #6 !dbg !1465 {
enter:
  %0 = extractvalue { i32, { i1, %Tcl_Obj* } } %maybeObjPtr, 0, !dbg !1472
  %1 = icmp eq i32 %0, 0, !dbg !1472
  br i1 %1, label %action.required, label %tcl.dropNExistReference.exit, !dbg !1472

action.required:                                  ; preds = %enter
  %2 = extractvalue { i32, { i1, %Tcl_Obj* } } %maybeObjPtr, 1, !dbg !1473
  %3 = extractvalue { i1, %Tcl_Obj* } %2, 0, !dbg !1474
  br i1 %3, label %tcl.dropNExistReference.exit, label %action.required.i, !dbg !1474

action.required.i:                                ; preds = %action.required
  %objPtr.i = extractvalue { i1, %Tcl_Obj* } %2, 1, !dbg !1476
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr.i, i64 0, i32 0, !dbg !1477
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !1479
  %4 = icmp slt i32 %refCount1.i.i, 2, !dbg !1480
  br i1 %4, label %freeObject.i.i, label %leave.i.i, !dbg !1480

freeObject.i.i:                                   ; preds = %action.required.i
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %objPtr.i) #5, !dbg !1481
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %objPtr.i) #5, !dbg !1482
  br label %tcl.dropNExistReference.exit, !dbg !1483

leave.i.i:                                        ; preds = %action.required.i
  %5 = add nsw i32 %refCount1.i.i, -1, !dbg !1479
  store i32 %5, i32* %refCount.i.i, align 4, !dbg !1484
  br label %tcl.dropNExistReference.exit, !dbg !1485

tcl.dropNExistReference.exit:                     ; preds = %enter, %action.required, %freeObject.i.i, %leave.i.i
  ret void, !dbg !1486
}

; Function Attrs: alwaysinline nounwind
define hidden void @tcl.dropReference.failImpureInt({ i32, { %Tcl_Obj*, %INT } } %value) local_unnamed_addr #6 !dbg !1487 {
enter:
  %0 = extractvalue { i32, { %Tcl_Obj*, %INT } } %value, 0, !dbg !1495
  %1 = icmp eq i32 %0, 0, !dbg !1495
  br i1 %1, label %action.required, label %Tcl_DecrRefCount.exit, !dbg !1495

action.required:                                  ; preds = %enter
  %objPtr = extractvalue { i32, { %Tcl_Obj*, %INT } } %value, 1, !dbg !1496
  %objPtr.string = extractvalue { %Tcl_Obj*, %INT } %objPtr, 0, !dbg !1496
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr.string, i64 0, i32 0, !dbg !1497
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !1499
  %2 = icmp slt i32 %refCount1.i, 2, !dbg !1500
  br i1 %2, label %freeObject.i, label %leave.i, !dbg !1500

freeObject.i:                                     ; preds = %action.required
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %objPtr.string) #5, !dbg !1501
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %objPtr.string) #5, !dbg !1502
  br label %Tcl_DecrRefCount.exit, !dbg !1503

leave.i:                                          ; preds = %action.required
  %3 = add nsw i32 %refCount1.i, -1, !dbg !1499
  store i32 %3, i32* %refCount.i, align 4, !dbg !1504
  br label %Tcl_DecrRefCount.exit, !dbg !1505

Tcl_DecrRefCount.exit:                            ; preds = %enter, %leave.i, %freeObject.i
  ret void, !dbg !1506
}

; Function Attrs: alwaysinline nounwind
define hidden void @tcl.dropReference.failImpureDouble({ i32, { %Tcl_Obj*, double } } %value) local_unnamed_addr #6 !dbg !1507 {
enter:
  %0 = extractvalue { i32, { %Tcl_Obj*, double } } %value, 0, !dbg !1517
  %1 = icmp eq i32 %0, 0, !dbg !1517
  br i1 %1, label %action.required, label %Tcl_DecrRefCount.exit, !dbg !1517

action.required:                                  ; preds = %enter
  %objPtr = extractvalue { i32, { %Tcl_Obj*, double } } %value, 1, !dbg !1518
  %objPtr.string = extractvalue { %Tcl_Obj*, double } %objPtr, 0, !dbg !1518
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr.string, i64 0, i32 0, !dbg !1519
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !1521
  %2 = icmp slt i32 %refCount1.i, 2, !dbg !1522
  br i1 %2, label %freeObject.i, label %leave.i, !dbg !1522

freeObject.i:                                     ; preds = %action.required
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %objPtr.string) #5, !dbg !1523
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %objPtr.string) #5, !dbg !1524
  br label %Tcl_DecrRefCount.exit, !dbg !1525

leave.i:                                          ; preds = %action.required
  %3 = add nsw i32 %refCount1.i, -1, !dbg !1521
  store i32 %3, i32* %refCount.i, align 4, !dbg !1526
  br label %Tcl_DecrRefCount.exit, !dbg !1527

Tcl_DecrRefCount.exit:                            ; preds = %enter, %leave.i, %freeObject.i
  ret void, !dbg !1528
}

; Function Attrs: alwaysinline nounwind
define hidden void @tcl.dropReference.failImpureZeroOneBoolean({ i32, { %Tcl_Obj*, i1 } } %value) local_unnamed_addr #6 !dbg !1529 {
enter:
  %0 = extractvalue { i32, { %Tcl_Obj*, i1 } } %value, 0, !dbg !1539
  %1 = icmp eq i32 %0, 0, !dbg !1539
  br i1 %1, label %action.required, label %Tcl_DecrRefCount.exit, !dbg !1539

action.required:                                  ; preds = %enter
  %objPtr = extractvalue { i32, { %Tcl_Obj*, i1 } } %value, 1, !dbg !1540
  %objPtr.string = extractvalue { %Tcl_Obj*, i1 } %objPtr, 0, !dbg !1540
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr.string, i64 0, i32 0, !dbg !1541
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !1543
  %2 = icmp slt i32 %refCount1.i, 2, !dbg !1544
  br i1 %2, label %freeObject.i, label %leave.i, !dbg !1544

freeObject.i:                                     ; preds = %action.required
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %objPtr.string) #5, !dbg !1545
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %objPtr.string) #5, !dbg !1546
  br label %Tcl_DecrRefCount.exit, !dbg !1547

leave.i:                                          ; preds = %action.required
  %3 = add nsw i32 %refCount1.i, -1, !dbg !1543
  store i32 %3, i32* %refCount.i, align 4, !dbg !1548
  br label %Tcl_DecrRefCount.exit, !dbg !1549

Tcl_DecrRefCount.exit:                            ; preds = %enter, %leave.i, %freeObject.i
  ret void, !dbg !1550
}

; Function Attrs: alwaysinline nounwind
define hidden nonnull %Tcl_Obj* @tcl.unshare(%Tcl_Obj* nonnull %objPtr) local_unnamed_addr #6 !dbg !1551 {
enter:
  %refCountPtr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !1556
  %refCount.i = load i32, i32* %refCountPtr.i, align 4, !dbg !1556
  switch i32 %refCount.i, label %duplicated [
    i32 0, label %noReference
    i32 1, label %noDuplicate
  ], !dbg !1558

noReference:                                      ; preds = %enter
  store i32 2, i32* %refCountPtr.i, align 4, !dbg !1559
  ret %Tcl_Obj* %objPtr, !dbg !1562

noDuplicate:                                      ; preds = %leave.i.i, %freeObject.i.i, %enter
  %merge = phi %Tcl_Obj* [ %objPtr, %enter ], [ %objPtr2, %freeObject.i.i ], [ %objPtr2, %leave.i.i ]
  ret %Tcl_Obj* %merge, !dbg !1563

duplicated:                                       ; preds = %enter
  %objPtr2 = tail call noalias nonnull %Tcl_Obj* @Tcl_DuplicateObj(%Tcl_Obj* nocapture nonnull readonly %objPtr), !dbg !1564
  %refCount.i5 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr2, i64 0, i32 0, !dbg !1565
  %refCount1.i = load i32, i32* %refCount.i5, align 4, !dbg !1567
  %0 = icmp eq i32 %refCount1.i, 0, !dbg !1567
  tail call void @llvm.assume(i1 %0) #5, !dbg !1567
  store i32 1, i32* %refCount.i5, align 4, !dbg !1568
  %refCount1.i.i = load i32, i32* %refCountPtr.i, align 4, !dbg !1571
  %1 = icmp slt i32 %refCount1.i.i, 2, !dbg !1574
  br i1 %1, label %freeObject.i.i, label %leave.i.i, !dbg !1574

freeObject.i.i:                                   ; preds = %duplicated
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %objPtr) #5, !dbg !1575
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %objPtr) #5, !dbg !1576
  br label %noDuplicate, !dbg !1577

leave.i.i:                                        ; preds = %duplicated
  %2 = add nsw i32 %refCount1.i.i, -1, !dbg !1571
  store i32 %2, i32* %refCountPtr.i, align 4, !dbg !1578
  br label %noDuplicate, !dbg !1579
}

; Function Attrs: alwaysinline nounwind readonly
define hidden noalias nonnull %Tcl_Obj* @tcl.unshare.copy(%Tcl_Obj* nocapture nonnull readonly %objPtr) local_unnamed_addr #16 !dbg !1580 {
enter:
  %objPtr1 = tail call noalias nonnull %Tcl_Obj* @Tcl_DuplicateObj(%Tcl_Obj* nocapture nonnull readonly %objPtr), !dbg !1583
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr1, i64 0, i32 0, !dbg !1584
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !1586
  %0 = icmp eq i32 %refCount1.i, 0, !dbg !1586
  tail call void @llvm.assume(i1 %0) #5, !dbg !1586
  store i32 1, i32* %refCount.i, align 4, !dbg !1587
  ret %Tcl_Obj* %objPtr1, !dbg !1590
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden void @tcl.vector.clear(i32 %objc, %Tcl_Obj** nocapture nonnull %objv) local_unnamed_addr #0 !dbg !1591 {
enter:
  ret void, !dbg !1597
}

; Function Attrs: noinline nounwind
define hidden void @writeref(i32 %pr, %Tcl_Obj* %val, i8* readonly %prefix) local_unnamed_addr #13 !dbg !1598 {
enter:
  %chan = tail call nonnull %Channel* @Tcl_GetStdChannel(i32 8), !dbg !1605
  %0 = icmp eq i8* %prefix, null, !dbg !1606
  br i1 %0, label %check.print.reference, label %print.prefix, !dbg !1606

print.prefix:                                     ; preds = %enter
  %objPtr = tail call noalias nonnull %Tcl_Obj* @Tcl_NewStringObj(i8* nocapture nonnull readonly %prefix, i32 -1), !dbg !1607
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !1608
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !1610
  %1 = icmp eq i32 %refCount1.i, 0, !dbg !1610
  tail call void @llvm.assume(i1 %1) #5, !dbg !1610
  %bytesWritten = tail call i32 @Tcl_WriteObj(%Channel* noalias nocapture nonnull %chan, %Tcl_Obj* noalias nocapture nonnull %objPtr), !dbg !1611
  %refCount1.i10 = load i32, i32* %refCount.i, align 4, !dbg !1612
  %2 = icmp slt i32 %refCount1.i10, 2, !dbg !1614
  br i1 %2, label %freeObject.i11, label %leave.i12, !dbg !1614

freeObject.i11:                                   ; preds = %print.prefix
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %objPtr) #5, !dbg !1615
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %objPtr) #5, !dbg !1616
  br label %check.print.reference, !dbg !1617

leave.i12:                                        ; preds = %print.prefix
  %3 = add nsw i32 %refCount1.i10, -1, !dbg !1612
  store i32 %3, i32* %refCount.i, align 4, !dbg !1618
  br label %check.print.reference, !dbg !1619

check.print.reference:                            ; preds = %freeObject.i11, %leave.i12, %enter
  %4 = icmp eq %Tcl_Obj* %val, null, !dbg !1620
  br i1 %4, label %got.null, label %print.reference, !dbg !1620

print.reference:                                  ; preds = %check.print.reference
  %5 = ptrtoint %Tcl_Obj* %val to i64, !dbg !1621
  %6 = trunc i64 %5 to i32, !dbg !1621
  %objPtr1 = tail call noalias nonnull %Tcl_Obj* (i8*, ...) @Tcl_ObjPrintf(i8* nocapture nonnull readonly getelementptr inbounds ([8 x i8], [8 x i8]* @string.constant.8, i64 0, i64 0), i32 %pr, i32 %6), !dbg !1621
  %refCount.i14 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr1, i64 0, i32 0, !dbg !1622
  %refCount1.i15 = load i32, i32* %refCount.i14, align 4, !dbg !1624
  %7 = icmp eq i32 %refCount1.i15, 0, !dbg !1624
  tail call void @llvm.assume(i1 %7) #5, !dbg !1624
  %bytesWritten2 = tail call i32 @Tcl_WriteObj(%Channel* noalias nocapture nonnull %chan, %Tcl_Obj* noalias nocapture nonnull %objPtr1), !dbg !1625
  %refCount1.i24 = load i32, i32* %refCount.i14, align 4, !dbg !1626
  %8 = icmp slt i32 %refCount1.i24, 2, !dbg !1628
  br i1 %8, label %freeObject.i25, label %leave.i26, !dbg !1628

freeObject.i25:                                   ; preds = %print.reference
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %objPtr1) #5, !dbg !1629
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %objPtr1) #5, !dbg !1630
  br label %Tcl_DecrRefCount.exit27, !dbg !1631

leave.i26:                                        ; preds = %print.reference
  %9 = add nsw i32 %refCount1.i24, -1, !dbg !1626
  store i32 %9, i32* %refCount.i14, align 4, !dbg !1632
  br label %Tcl_DecrRefCount.exit27, !dbg !1633

Tcl_DecrRefCount.exit27:                          ; preds = %leave.i26, %freeObject.i25
  %refCountPtr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %val, i64 0, i32 0, !dbg !1634
  %refCount.i28 = load i32, i32* %refCountPtr.i, align 4, !dbg !1634
  %str = tail call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %val), !dbg !1636
  %objPtr3 = tail call noalias nonnull %Tcl_Obj* (i8*, ...) @Tcl_ObjPrintf(i8* nocapture nonnull readonly getelementptr inbounds ([15 x i8], [15 x i8]* @string.constant.6, i64 0, i64 0), i8* nocapture nonnull %str, i32 %refCount.i28), !dbg !1636
  %refCount.i29 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr3, i64 0, i32 0, !dbg !1637
  %refCount1.i30 = load i32, i32* %refCount.i29, align 4, !dbg !1639
  %10 = icmp eq i32 %refCount1.i30, 0, !dbg !1639
  tail call void @llvm.assume(i1 %10) #5, !dbg !1639
  %bytesWritten4 = tail call i32 @Tcl_WriteObj(%Channel* noalias nocapture nonnull %chan, %Tcl_Obj* noalias nocapture nonnull %objPtr3), !dbg !1640
  %refCount1.i19 = load i32, i32* %refCount.i29, align 4, !dbg !1641
  %11 = icmp slt i32 %refCount1.i19, 2, !dbg !1643
  br i1 %11, label %freeObject.i20, label %leave.i21, !dbg !1643

freeObject.i20:                                   ; preds = %Tcl_DecrRefCount.exit27
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %objPtr3) #5, !dbg !1644
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %objPtr3) #5, !dbg !1645
  br label %Tcl_DecrRefCount.exit22, !dbg !1646

leave.i21:                                        ; preds = %Tcl_DecrRefCount.exit27
  %12 = add nsw i32 %refCount1.i19, -1, !dbg !1641
  store i32 %12, i32* %refCount.i29, align 4, !dbg !1647
  br label %Tcl_DecrRefCount.exit22, !dbg !1648

Tcl_DecrRefCount.exit22:                          ; preds = %freeObject.i, %leave.i, %leave.i21, %freeObject.i20
  ret void, !dbg !1649

got.null:                                         ; preds = %check.print.reference
  %objPtr5 = tail call noalias nonnull %Tcl_Obj* (i8*, ...) @Tcl_ObjPrintf(i8* nocapture nonnull readonly getelementptr inbounds ([9 x i8], [9 x i8]* @string.constant.7, i64 0, i64 0), i32 %pr), !dbg !1650
  %refCount.i16 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr5, i64 0, i32 0, !dbg !1651
  %refCount1.i17 = load i32, i32* %refCount.i16, align 4, !dbg !1653
  %13 = icmp eq i32 %refCount1.i17, 0, !dbg !1653
  tail call void @llvm.assume(i1 %13) #5, !dbg !1653
  %bytesWritten6 = tail call i32 @Tcl_WriteObj(%Channel* noalias nocapture nonnull %chan, %Tcl_Obj* noalias nocapture nonnull %objPtr5), !dbg !1654
  %refCount1.i8 = load i32, i32* %refCount.i16, align 4, !dbg !1655
  %14 = icmp slt i32 %refCount1.i8, 2, !dbg !1657
  br i1 %14, label %freeObject.i, label %leave.i, !dbg !1657

freeObject.i:                                     ; preds = %got.null
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %objPtr5) #5, !dbg !1658
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %objPtr5) #5, !dbg !1659
  br label %Tcl_DecrRefCount.exit22, !dbg !1660

leave.i:                                          ; preds = %got.null
  %15 = add nsw i32 %refCount1.i8, -1, !dbg !1655
  store i32 %15, i32* %refCount.i16, align 4, !dbg !1661
  br label %Tcl_DecrRefCount.exit22, !dbg !1662
}

; Function Attrs: alwaysinline nounwind
define hidden void @"writeref?"(i32 %pr, { i32, %Tcl_Obj* } %val, i8* readonly %prefix) local_unnamed_addr #6 !dbg !1663 {
enter:
  %0 = extractvalue { i32, %Tcl_Obj* } %val, 0, !dbg !1670
  %1 = icmp eq i32 %0, 0, !dbg !1670
  br i1 %1, label %print, label %done, !dbg !1670

print:                                            ; preds = %enter
  %2 = extractvalue { i32, %Tcl_Obj* } %val, 1, !dbg !1671
  tail call void @writeref(i32 %pr, %Tcl_Obj* %2, i8* %prefix), !dbg !1671
  ret void, !dbg !1672

done:                                             ; preds = %enter
  ret void, !dbg !1673
}

; Function Attrs: alwaysinline nounwind
define hidden void @writearef(i32 %pr, %ARRAYIMPL* nonnull %val, i8* readonly %prefix) local_unnamed_addr #6 !dbg !1674 {
enter:
  %chan = tail call nonnull %Channel* @Tcl_GetStdChannel(i32 8), !dbg !1686
  %0 = icmp eq i8* %prefix, null, !dbg !1687
  br i1 %0, label %print.reference, label %print.prefix, !dbg !1687

print.prefix:                                     ; preds = %enter
  %objPtr = tail call noalias nonnull %Tcl_Obj* @Tcl_NewStringObj(i8* nocapture nonnull readonly %prefix, i32 -1), !dbg !1688
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !1689
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !1691
  %1 = icmp eq i32 %refCount1.i, 0, !dbg !1691
  tail call void @llvm.assume(i1 %1) #5, !dbg !1691
  %bytesWritten = tail call i32 @Tcl_WriteObj(%Channel* noalias nocapture nonnull %chan, %Tcl_Obj* noalias nocapture nonnull %objPtr), !dbg !1692
  %refCount1.i8 = load i32, i32* %refCount.i, align 4, !dbg !1693
  %2 = icmp slt i32 %refCount1.i8, 2, !dbg !1695
  br i1 %2, label %freeObject.i9, label %leave.i10, !dbg !1695

freeObject.i9:                                    ; preds = %print.prefix
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %objPtr) #5, !dbg !1696
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %objPtr) #5, !dbg !1697
  br label %print.reference, !dbg !1698

leave.i10:                                        ; preds = %print.prefix
  %3 = add nsw i32 %refCount1.i8, -1, !dbg !1693
  store i32 %3, i32* %refCount.i, align 4, !dbg !1699
  br label %print.reference, !dbg !1700

print.reference:                                  ; preds = %freeObject.i9, %leave.i10, %enter
  %4 = ptrtoint %ARRAYIMPL* %val to i64, !dbg !1701
  %5 = trunc i64 %4 to i32, !dbg !1701
  %objPtr1 = tail call noalias nonnull %Tcl_Obj* (i8*, ...) @Tcl_ObjPrintf(i8* nocapture nonnull readonly getelementptr inbounds ([8 x i8], [8 x i8]* @string.constant.8, i64 0, i64 0), i32 %pr, i32 %5), !dbg !1701
  %refCount.i12 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr1, i64 0, i32 0, !dbg !1702
  %refCount1.i13 = load i32, i32* %refCount.i12, align 4, !dbg !1704
  %6 = icmp eq i32 %refCount1.i13, 0, !dbg !1704
  tail call void @llvm.assume(i1 %6) #5, !dbg !1704
  %bytesWritten2 = tail call i32 @Tcl_WriteObj(%Channel* noalias nocapture nonnull %chan, %Tcl_Obj* noalias nocapture nonnull %objPtr1), !dbg !1705
  %refCount1.i17 = load i32, i32* %refCount.i12, align 4, !dbg !1706
  %7 = icmp slt i32 %refCount1.i17, 2, !dbg !1708
  br i1 %7, label %freeObject.i18, label %leave.i19, !dbg !1708

freeObject.i18:                                   ; preds = %print.reference
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %objPtr1) #5, !dbg !1709
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %objPtr1) #5, !dbg !1710
  br label %Tcl_DecrRefCount.exit20, !dbg !1711

leave.i19:                                        ; preds = %print.reference
  %8 = add nsw i32 %refCount1.i17, -1, !dbg !1706
  store i32 %8, i32* %refCount.i12, align 4, !dbg !1712
  br label %Tcl_DecrRefCount.exit20, !dbg !1713

Tcl_DecrRefCount.exit20:                          ; preds = %leave.i19, %freeObject.i18
  %ref.ptr = getelementptr %ARRAYIMPL, %ARRAYIMPL* %val, i64 0, i32 0, !dbg !1714
  %ref = load i32, i32* %ref.ptr, align 4, !dbg !1714
  %objPtr3 = tail call noalias nonnull %Tcl_Obj* (i8*, ...) @Tcl_ObjPrintf(i8* nocapture nonnull readonly getelementptr inbounds ([10 x i8], [10 x i8]* @string.constant.9, i64 0, i64 0), i32 %ref), !dbg !1715
  %refCount.i14 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr3, i64 0, i32 0, !dbg !1716
  %refCount1.i15 = load i32, i32* %refCount.i14, align 4, !dbg !1718
  %9 = icmp eq i32 %refCount1.i15, 0, !dbg !1718
  tail call void @llvm.assume(i1 %9) #5, !dbg !1718
  %bytesWritten4 = tail call i32 @Tcl_WriteObj(%Channel* noalias nocapture nonnull %chan, %Tcl_Obj* noalias nocapture nonnull %objPtr3), !dbg !1719
  %refCount1.i6 = load i32, i32* %refCount.i14, align 4, !dbg !1720
  %10 = icmp slt i32 %refCount1.i6, 2, !dbg !1722
  br i1 %10, label %freeObject.i, label %leave.i, !dbg !1722

freeObject.i:                                     ; preds = %Tcl_DecrRefCount.exit20
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %objPtr3) #5, !dbg !1723
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %objPtr3) #5, !dbg !1724
  br label %Tcl_DecrRefCount.exit, !dbg !1725

leave.i:                                          ; preds = %Tcl_DecrRefCount.exit20
  %11 = add nsw i32 %refCount1.i6, -1, !dbg !1720
  store i32 %11, i32* %refCount.i14, align 4, !dbg !1726
  br label %Tcl_DecrRefCount.exit, !dbg !1727

Tcl_DecrRefCount.exit:                            ; preds = %leave.i, %freeObject.i
  ret void, !dbg !1728
}

; Function Attrs: nofree nounwind readonly
declare i32 @memcmp(i8* nocapture, i8* nocapture, i32) local_unnamed_addr #17

; Function Attrs: alwaysinline nounwind
define hidden %INT @tcl.strlen(%Tcl_Obj* nocapture nonnull %objPtr) local_unnamed_addr #6 !dbg !1729 {
enter:
  %refCountPtr = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !1734
  %before = load i32, i32* %refCountPtr, align 4, !dbg !1735
  %length = tail call i32 @Tcl_GetCharLength(%Tcl_Obj* nocapture nonnull %objPtr), !dbg !1736
  %0 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %length, 1, !dbg !1736
  %after = load i32, i32* %refCountPtr, align 4, !dbg !1737
  %1 = icmp eq i32 %before, %after, !dbg !1738
  tail call void @llvm.assume(i1 %1), !dbg !1738
  ret %INT %0, !dbg !1739
}

; Function Attrs: alwaysinline norecurse nounwind readonly
define hidden i1 @tcl.isPureByteArray(%Tcl_Obj* nocapture nonnull readonly %objPtr) local_unnamed_addr #15 !dbg !1740 {
enter:
  %tclByteArrayType = load %ObjType*, %ObjType** @tclByteArrayType, align 8, !dbg !1743, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %typePtr.ptr = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 3, !dbg !1744
  %typePtr = load %ObjType*, %ObjType** %typePtr.ptr, align 8, !dbg !1744
  %0 = icmp eq %ObjType* %tclByteArrayType, %typePtr, !dbg !1745
  br i1 %0, label %puretest, label %notBA, !dbg !1745

puretest:                                         ; preds = %enter
  %bytes.ptr = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 1, !dbg !1746
  %bytes = load i8*, i8** %bytes.ptr, align 8, !dbg !1746
  %1 = icmp eq i8* %bytes, null, !dbg !1746
  br i1 %1, label %isBA, label %notBA, !dbg !1746

isBA:                                             ; preds = %notBA, %puretest
  %merge = phi i1 [ true, %puretest ], [ false, %notBA ]
  ret i1 %merge, !dbg !1747

notBA:                                            ; preds = %puretest, %enter
  br label %isBA
}

; Function Attrs: alwaysinline norecurse nounwind readonly
define hidden i1 @tcl.isUnicodeString(%Tcl_Obj* nocapture nonnull readonly %objPtr) local_unnamed_addr #15 !dbg !1748 {
enter:
  %tclStringType = load %ObjType*, %ObjType** @tclStringType, align 8, !dbg !1751, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %typePtr.ptr = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 3, !dbg !1752
  %typePtr = load %ObjType*, %ObjType** %typePtr.ptr, align 8, !dbg !1752
  %0 = icmp eq %ObjType* %typePtr, %tclStringType, !dbg !1753
  ret i1 %0, !dbg !1753
}

; Function Attrs: alwaysinline nounwind
define hidden { i1, i1 } @tcl.impl.getBoolean(%Tcl_Obj* nocapture nonnull %valueObj) local_unnamed_addr #6 !dbg !1754 {
enter:
  %boolPtr = alloca i32, align 4, !dbg !1759
  %str = tail call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %valueObj), !dbg !1760
  %code = call i32 @Tcl_GetBooleanFromObj(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %valueObj, i32* noalias nocapture nonnull %boolPtr), !dbg !1761
  %0 = icmp eq i32 %code, 0, !dbg !1762
  %1 = insertvalue { i1, i1 } undef, i1 %0, 0, !dbg !1762
  %bool = load i32, i32* %boolPtr, align 4, !dbg !1763
  %2 = icmp ne i32 %bool, 0, !dbg !1763
  %3 = insertvalue { i1, i1 } %1, i1 %2, 1, !dbg !1763
  ret { i1, i1 } %3, !dbg !1764
}

; Function Attrs: alwaysinline nounwind
define hidden { i1, double } @tcl.impl.getDouble(%Tcl_Obj* nocapture nonnull %valueObj) local_unnamed_addr #6 !dbg !1765 {
enter:
  %dblPtr = alloca double, align 8, !dbg !1770
  %code = call i32 @Tcl_GetDoubleFromObj(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %valueObj, double* noalias nocapture nonnull %dblPtr), !dbg !1771
  %0 = icmp eq i32 %code, 0, !dbg !1772
  %1 = insertvalue { i1, double } undef, i1 %0, 0, !dbg !1772
  %dbl = load double, double* %dblPtr, align 8, !dbg !1773
  %2 = insertvalue { i1, double } %1, double %dbl, 1, !dbg !1773
  ret { i1, double } %2, !dbg !1774
}

; Function Attrs: alwaysinline nounwind
define hidden { i1, i64 } @tcl.impl.getWide(%Tcl_Obj* nocapture nonnull %valueObj) local_unnamed_addr #6 !dbg !1775 {
enter:
  %intPtr = alloca i64, align 8, !dbg !1782
  %code = call i32 @Tcl_GetWideIntFromObj(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %valueObj, i64* noalias nocapture nonnull %intPtr), !dbg !1783
  %0 = icmp eq i32 %code, 0, !dbg !1784
  %1 = insertvalue { i1, i64 } undef, i1 %0, 0, !dbg !1784
  %int = load i64, i64* %intPtr, align 8, !dbg !1785
  %result = insertvalue { i1, i64 } %1, i64 %int, 1, !dbg !1785
  ret { i1, i64 } %result, !dbg !1786
}

; Function Attrs: alwaysinline nounwind readonly
define hidden { i32, i8* } @tcl.impl.getString(%Tcl_Obj* nocapture nonnull %stringObj) local_unnamed_addr #16 !dbg !1787 {
enter:
  %lengthPtr = alloca i32, align 4, !dbg !1794
  %str = call nonnull i8* @Tcl_GetStringFromObj(%Tcl_Obj* noalias nocapture nonnull %stringObj, i32* noalias nocapture nonnull %lengthPtr), !dbg !1795
  %length = load i32, i32* %lengthPtr, align 4, !dbg !1796
  %0 = insertvalue { i32, i8* } undef, i32 %length, 0, !dbg !1796
  %result = insertvalue { i32, i8* } %0, i8* %str, 1, !dbg !1797
  ret { i32, i8* } %result, !dbg !1798
}

; Function Attrs: alwaysinline nounwind readonly
define hidden { i32, i16* } @tcl.impl.getUnicode(%Tcl_Obj* nocapture nonnull %stringObj) local_unnamed_addr #16 !dbg !1799 {
enter:
  %lengthPtr = alloca i32, align 4, !dbg !1809
  %ustr = call nonnull i16* @Tcl_GetUnicodeFromObj(%Tcl_Obj* noalias nocapture nonnull %stringObj, i32* noalias nocapture nonnull %lengthPtr), !dbg !1810
  %length = load i32, i32* %lengthPtr, align 4, !dbg !1811
  %0 = insertvalue { i32, i16* } undef, i32 %length, 0, !dbg !1811
  %result = insertvalue { i32, i16* } %0, i16* %ustr, 1, !dbg !1812
  ret { i32, i16* } %result, !dbg !1813
}

; Function Attrs: alwaysinline nounwind readonly
define hidden { i32, i8* } @tcl.impl.getBytes(%Tcl_Obj* nocapture nonnull %stringObj) local_unnamed_addr #16 !dbg !1814 {
enter:
  %lengthPtr = alloca i32, align 4, !dbg !1817
  %bytes = call nonnull i8* @Tcl_GetByteArrayFromObj(%Tcl_Obj* noalias nocapture nonnull %stringObj, i32* noalias nocapture nonnull %lengthPtr), !dbg !1818
  %length = load i32, i32* %lengthPtr, align 4, !dbg !1819
  %0 = insertvalue { i32, i8* } undef, i32 %length, 0, !dbg !1819
  %result = insertvalue { i32, i8* } %0, i8* %bytes, 1, !dbg !1820
  ret { i32, i8* } %result, !dbg !1821
}

; Function Attrs: alwaysinline nounwind
define hidden %INT @tcl.strfind.fwd(%Tcl_Obj* nocapture nonnull %needlePtr, %Tcl_Obj* nocapture nonnull %haystackPtr) local_unnamed_addr #6 !dbg !1822 {
enter:
  %lengthPtr.i4 = alloca i32, align 4, !dbg !1828
  %lengthPtr.i = alloca i32, align 4, !dbg !1830
  %0 = bitcast i32* %lengthPtr.i to i8*, !dbg !1832
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0), !dbg !1832
  %ustr.i = call nonnull i16* @Tcl_GetUnicodeFromObj(%Tcl_Obj* noalias nocapture nonnull %haystackPtr, i32* noalias nocapture nonnull %lengthPtr.i) #5, !dbg !1832
  %length.i = load i32, i32* %lengthPtr.i, align 4, !dbg !1833
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0), !dbg !1834
  %1 = bitcast i32* %lengthPtr.i4 to i8*, !dbg !1835
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1), !dbg !1835
  %ustr.i5 = call nonnull i16* @Tcl_GetUnicodeFromObj(%Tcl_Obj* noalias nocapture nonnull %needlePtr, i32* noalias nocapture nonnull %lengthPtr.i4) #5, !dbg !1835
  %length.i6 = load i32, i32* %lengthPtr.i4, align 4, !dbg !1836
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1), !dbg !1837
  %2 = icmp slt i32 %length.i6, 1, !dbg !1838
  %3 = icmp slt i32 %length.i, %length.i6, !dbg !1839
  %or.cond = or i1 %2, %3, !dbg !1838
  br i1 %or.cond, label %noMatch, label %doSearch.init, !dbg !1838

doSearch.init:                                    ; preds = %enter
  %4 = add i32 %length.i, 1, !dbg !1840
  %5 = sub i32 %4, %length.i6, !dbg !1840
  %6 = sext i32 %5 to i64, !dbg !1840
  %end = getelementptr i16, i16* %ustr.i, i64 %6, !dbg !1840
  %needle.0 = load i16, i16* %ustr.i5, align 2, !dbg !1841
  %7 = icmp slt i16* %ustr.i, %end, !dbg !1842
  br i1 %7, label %doSearch.loop1.lr.ph, label %noMatch, !dbg !1842

doSearch.loop1.lr.ph:                             ; preds = %doSearch.init
  %8 = shl i32 %length.i6, 1, !dbg !1843
  %9 = bitcast i16* %ustr.i5 to i8*, !dbg !1843
  br label %doSearch.loop1, !dbg !1842

doSearch.next:                                    ; preds = %doSearch.loop2, %doSearch.loop1
  %10 = getelementptr i16, i16* %ptr.09, i64 1, !dbg !1844
  %11 = icmp slt i16* %10, %end, !dbg !1842
  br i1 %11, label %doSearch.loop1, label %noMatch, !dbg !1842

doSearch.loop1:                                   ; preds = %doSearch.loop1.lr.ph, %doSearch.next
  %ptr.09 = phi i16* [ %ustr.i, %doSearch.loop1.lr.ph ], [ %10, %doSearch.next ]
  %p3 = load i16, i16* %ptr.09, align 2, !dbg !1845
  %12 = icmp eq i16 %p3, %needle.0, !dbg !1845
  br i1 %12, label %doSearch.loop2, label %doSearch.next, !dbg !1845

doSearch.loop2:                                   ; preds = %doSearch.loop1
  %13 = bitcast i16* %ptr.09 to i8*, !dbg !1846
  %cmp = tail call i32 @memcmp(i8* nonnull %9, i8* %13, i32 %8), !dbg !1846
  %14 = icmp eq i32 %cmp, 0, !dbg !1847
  br i1 %14, label %found, label %doSearch.next, !dbg !1847

found:                                            ; preds = %doSearch.loop2
  %15 = ptrtoint i16* %ptr.09 to i64
  %16 = ptrtoint i16* %ustr.i to i64
  %17 = sub i64 %15, %16
  %18 = lshr exact i64 %17, 1, !dbg !1848
  %19 = trunc i64 %18 to i32, !dbg !1848
  %20 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %19, 1, !dbg !1848
  ret %INT %20, !dbg !1848

noMatch:                                          ; preds = %doSearch.next, %doSearch.init, %enter
  ret %INT { i1 true, i32 undef, i64 -1 }, !dbg !1849
}

; Function Attrs: alwaysinline nounwind
define hidden %INT @tcl.strfind.rev(%Tcl_Obj* nocapture nonnull %needlePtr, %Tcl_Obj* nocapture nonnull %haystackPtr) local_unnamed_addr #6 !dbg !1850 {
enter:
  %lengthPtr.i4 = alloca i32, align 4, !dbg !1854
  %lengthPtr.i = alloca i32, align 4, !dbg !1856
  %0 = bitcast i32* %lengthPtr.i to i8*, !dbg !1858
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0), !dbg !1858
  %ustr.i = call nonnull i16* @Tcl_GetUnicodeFromObj(%Tcl_Obj* noalias nocapture nonnull %haystackPtr, i32* noalias nocapture nonnull %lengthPtr.i) #5, !dbg !1858
  %length.i = load i32, i32* %lengthPtr.i, align 4, !dbg !1859
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0), !dbg !1860
  %1 = bitcast i32* %lengthPtr.i4 to i8*, !dbg !1861
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1), !dbg !1861
  %ustr.i5 = call nonnull i16* @Tcl_GetUnicodeFromObj(%Tcl_Obj* noalias nocapture nonnull %needlePtr, i32* noalias nocapture nonnull %lengthPtr.i4) #5, !dbg !1861
  %length.i6 = load i32, i32* %lengthPtr.i4, align 4, !dbg !1862
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1), !dbg !1863
  %2 = icmp slt i32 %length.i6, 1, !dbg !1864
  %3 = icmp slt i32 %length.i, %length.i6, !dbg !1865
  %or.cond = or i1 %2, %3, !dbg !1864
  br i1 %or.cond, label %noMatch, label %doSearch.init, !dbg !1864

doSearch.init:                                    ; preds = %enter
  %needle.0 = load i16, i16* %ustr.i5, align 2, !dbg !1866
  %4 = sub i32 %length.i, %length.i6, !dbg !1867
  %5 = sext i32 %4 to i64, !dbg !1867
  %6 = getelementptr i16, i16* %ustr.i, i64 %5, !dbg !1867
  %7 = icmp slt i16* %6, %ustr.i, !dbg !1868
  br i1 %7, label %noMatch, label %doSearch.loop1.lr.ph, !dbg !1868

doSearch.loop1.lr.ph:                             ; preds = %doSearch.init
  %8 = shl i32 %length.i6, 1, !dbg !1869
  %9 = bitcast i16* %ustr.i5 to i8*, !dbg !1869
  br label %doSearch.loop1, !dbg !1868

doSearch.next:                                    ; preds = %doSearch.loop2, %doSearch.loop1
  %10 = getelementptr i16, i16* %ptr.09, i64 -1, !dbg !1870
  %11 = icmp slt i16* %10, %ustr.i, !dbg !1868
  br i1 %11, label %noMatch, label %doSearch.loop1, !dbg !1868

doSearch.loop1:                                   ; preds = %doSearch.loop1.lr.ph, %doSearch.next
  %ptr.09 = phi i16* [ %6, %doSearch.loop1.lr.ph ], [ %10, %doSearch.next ]
  %p3 = load i16, i16* %ptr.09, align 2, !dbg !1871
  %12 = icmp eq i16 %p3, %needle.0, !dbg !1871
  br i1 %12, label %doSearch.loop2, label %doSearch.next, !dbg !1871

doSearch.loop2:                                   ; preds = %doSearch.loop1
  %13 = bitcast i16* %ptr.09 to i8*, !dbg !1872
  %cmp = tail call i32 @memcmp(i8* nonnull %9, i8* %13, i32 %8), !dbg !1872
  %14 = icmp eq i32 %cmp, 0, !dbg !1873
  br i1 %14, label %found, label %doSearch.next, !dbg !1873

found:                                            ; preds = %doSearch.loop2
  %15 = ptrtoint i16* %ptr.09 to i64
  %16 = ptrtoint i16* %ustr.i to i64
  %17 = sub i64 %15, %16
  %18 = lshr exact i64 %17, 1, !dbg !1874
  %19 = trunc i64 %18 to i32, !dbg !1874
  %20 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %19, 1, !dbg !1874
  ret %INT %20, !dbg !1874

noMatch:                                          ; preds = %doSearch.next, %doSearch.init, %enter
  ret %INT { i1 true, i32 undef, i64 -1 }, !dbg !1875
}

; Function Attrs: alwaysinline nounwind readonly
define hidden i32 @tcl.impl.trimleft(i8* nonnull %bytes, i32 %numBytes, i8* nocapture nonnull readonly %trim, i32 %numTrim) local_unnamed_addr #16 !dbg !1876 {
enter:
  %0 = alloca i16, align 2, !dbg !1884
  %1 = icmp eq i32 %numBytes, 0, !dbg !1885
  %2 = icmp eq i32 %numTrim, 0, !dbg !1886
  %or.cond = or i1 %1, %2, !dbg !1885
  br i1 %or.cond, label %ret0, label %outerLoop, !dbg !1885

ret0:                                             ; preds = %enter
  ret i32 0, !dbg !1887

outerLoop:                                        ; preds = %enter, %nextOuter
  %p = phi i8* [ %p4, %nextOuter ], [ %bytes, %enter ]
  %numBytes.2 = phi i32 [ %numBytes.3, %nextOuter ], [ %numBytes, %enter ]
  %pInc = call i32 @Tcl_UtfToUniChar(i8* noalias nocapture nonnull readonly %p, i16* noalias nocapture nonnull %0), !dbg !1888
  %ch1 = load i16, i16* %0, align 2, !dbg !1889
  br label %innerLoop, !dbg !1890

innerLoop:                                        ; preds = %nextInner, %outerLoop
  %q = phi i8* [ %trim, %outerLoop ], [ %q1, %nextInner ]
  %bytesLeft = phi i32 [ %numTrim, %outerLoop ], [ %bytesLeft2, %nextInner ]
  %qInc = call i32 @Tcl_UtfToUniChar(i8* noalias nocapture nonnull readonly %q, i16* noalias nocapture nonnull %0), !dbg !1891
  %ch2 = load i16, i16* %0, align 2, !dbg !1892
  %3 = icmp eq i16 %ch1, %ch2, !dbg !1893
  br i1 %3, label %doneInner, label %nextInner, !dbg !1893

nextInner:                                        ; preds = %innerLoop
  %4 = sext i32 %qInc to i64, !dbg !1894
  %q1 = getelementptr i8, i8* %q, i64 %4, !dbg !1894
  %bytesLeft2 = sub i32 %bytesLeft, %qInc, !dbg !1895
  %5 = icmp sgt i32 %bytesLeft2, 0, !dbg !1896
  br i1 %5, label %innerLoop, label %doneOuter, !dbg !1896

doneInner:                                        ; preds = %innerLoop
  %6 = icmp slt i32 %bytesLeft, 1, !dbg !1897
  br i1 %6, label %doneOuter, label %nextOuter, !dbg !1897

nextOuter:                                        ; preds = %doneInner
  %7 = sext i32 %pInc to i64, !dbg !1898
  %p4 = getelementptr i8, i8* %p, i64 %7, !dbg !1898
  %numBytes.3 = sub i32 %numBytes.2, %pInc, !dbg !1899
  %8 = icmp sgt i32 %numBytes.3, 0, !dbg !1900
  br i1 %8, label %outerLoop, label %doneOuter, !dbg !1900

doneOuter:                                        ; preds = %nextOuter, %doneInner, %nextInner
  %p5 = phi i8* [ %p, %nextInner ], [ %p4, %nextOuter ], [ %p, %doneInner ]
  %9 = ptrtoint i8* %p5 to i64
  %10 = ptrtoint i8* %bytes to i64
  %11 = sub i64 %9, %10
  %12 = trunc i64 %11 to i32, !dbg !1901
  ret i32 %12, !dbg !1901
}

; Function Attrs: alwaysinline nounwind readonly
define hidden i32 @tcl.impl.trimright(i8* nonnull %bytes, i32 %numBytes, i8* nocapture nonnull readonly %trim, i32 %numTrim) local_unnamed_addr #16 !dbg !1902 {
enter:
  %0 = alloca i16, align 2, !dbg !1908
  %1 = icmp eq i32 %numBytes, 0, !dbg !1909
  %2 = icmp eq i32 %numTrim, 0, !dbg !1910
  %or.cond = or i1 %1, %2, !dbg !1909
  br i1 %or.cond, label %ret0, label %outerLoop.preheader, !dbg !1909

outerLoop.preheader:                              ; preds = %enter
  %3 = sext i32 %numBytes to i64, !dbg !1911
  %p.0 = getelementptr i8, i8* %bytes, i64 %3, !dbg !1911
  br label %outerLoop, !dbg !1912

ret0:                                             ; preds = %enter
  ret i32 0, !dbg !1913

outerLoop:                                        ; preds = %outerLoop.preheader, %nextOuter
  %p.1 = phi i8* [ %p.2, %nextOuter ], [ %p.0, %outerLoop.preheader ]
  %p.2 = tail call nonnull i8* @Tcl_UtfPrev(i8* nocapture nonnull readonly %p.1, i8* nocapture nonnull readonly %bytes), !dbg !1914
  %pInc = call i32 @Tcl_UtfToUniChar(i8* noalias nocapture nonnull readonly %p.2, i16* noalias nocapture nonnull %0), !dbg !1915
  %ch1 = load i16, i16* %0, align 2, !dbg !1916
  br label %innerLoop, !dbg !1912

innerLoop:                                        ; preds = %nextInner, %outerLoop
  %q = phi i8* [ %trim, %outerLoop ], [ %q1, %nextInner ]
  %bytesLeft = phi i32 [ %numTrim, %outerLoop ], [ %bytesLeft.1, %nextInner ]
  %qInc = call i32 @Tcl_UtfToUniChar(i8* noalias nocapture nonnull readonly %q, i16* noalias nocapture nonnull %0), !dbg !1917
  %ch2 = load i16, i16* %0, align 2, !dbg !1918
  %4 = icmp eq i16 %ch1, %ch2, !dbg !1919
  br i1 %4, label %doneInner, label %nextInner, !dbg !1919

doneInner:                                        ; preds = %innerLoop
  %5 = icmp slt i32 %bytesLeft, 1, !dbg !1920
  br i1 %5, label %fixP, label %nextOuter, !dbg !1920

nextInner:                                        ; preds = %innerLoop
  %6 = sext i32 %qInc to i64, !dbg !1921
  %q1 = getelementptr i8, i8* %q, i64 %6, !dbg !1921
  %bytesLeft.1 = sub i32 %bytesLeft, %qInc, !dbg !1922
  %7 = icmp sgt i32 %bytesLeft.1, 0, !dbg !1923
  br i1 %7, label %innerLoop, label %fixP, !dbg !1923

nextOuter:                                        ; preds = %doneInner
  %8 = icmp sgt i8* %p.2, %bytes, !dbg !1924
  br i1 %8, label %outerLoop, label %doneOuter, !dbg !1924

fixP:                                             ; preds = %doneInner, %nextInner
  %9 = sext i32 %pInc to i64, !dbg !1925
  %p.4 = getelementptr i8, i8* %p.2, i64 %9, !dbg !1925
  br label %doneOuter, !dbg !1926

doneOuter:                                        ; preds = %nextOuter, %fixP
  %p.5 = phi i8* [ %p.4, %fixP ], [ %p.2, %nextOuter ]
  %10 = ptrtoint i8* %p.5 to i64
  %11 = ptrtoint i8* %bytes to i64
  %12 = sub i64 %10, %11
  %13 = trunc i64 %12 to i32, !dbg !1927
  %14 = sub i32 %numBytes, %13, !dbg !1927
  ret i32 %14, !dbg !1927
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden i1 @tcl.impl.isAscii(i16 %ch) local_unnamed_addr #0 !dbg !1928 {
enter:
  %0 = icmp ult i16 %ch, 128, !dbg !1933
  ret i1 %0, !dbg !1933
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden i1 @tcl.impl.isXdigit(i16 %ch) local_unnamed_addr #0 !dbg !1934 {
enter:
  switch i16 %ch, label %not [
    i16 48, label %ok
    i16 49, label %ok
    i16 50, label %ok
    i16 51, label %ok
    i16 52, label %ok
    i16 53, label %ok
    i16 54, label %ok
    i16 55, label %ok
    i16 56, label %ok
    i16 57, label %ok
    i16 65, label %ok
    i16 66, label %ok
    i16 67, label %ok
    i16 68, label %ok
    i16 69, label %ok
    i16 70, label %ok
    i16 97, label %ok
    i16 98, label %ok
    i16 99, label %ok
    i16 100, label %ok
    i16 101, label %ok
    i16 102, label %ok
  ], !dbg !1937

ok:                                               ; preds = %not, %enter, %enter, %enter, %enter, %enter, %enter, %enter, %enter, %enter, %enter, %enter, %enter, %enter, %enter, %enter, %enter, %enter, %enter, %enter, %enter, %enter, %enter
  %merge = phi i1 [ true, %enter ], [ true, %enter ], [ true, %enter ], [ true, %enter ], [ true, %enter ], [ true, %enter ], [ true, %enter ], [ true, %enter ], [ true, %enter ], [ true, %enter ], [ true, %enter ], [ true, %enter ], [ true, %enter ], [ true, %enter ], [ true, %enter ], [ true, %enter ], [ true, %enter ], [ true, %enter ], [ true, %enter ], [ true, %enter ], [ true, %enter ], [ true, %enter ], [ false, %not ]
  ret i1 %merge, !dbg !1938

not:                                              ; preds = %enter
  br label %ok
}

; Function Attrs: alwaysinline nounwind
define hidden i1 @tcl.strclass(%Tcl_Obj* nocapture nonnull %objPtr, i32 %class) local_unnamed_addr #6 !dbg !1939 {
enter:
  %lengthPtr.i = alloca i32, align 4, !dbg !1945
  %0 = bitcast i32* %lengthPtr.i to i8*, !dbg !1947
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0), !dbg !1947
  %ustr.i = call nonnull i16* @Tcl_GetUnicodeFromObj(%Tcl_Obj* noalias nocapture nonnull %objPtr, i32* noalias nocapture nonnull %lengthPtr.i) #5, !dbg !1947
  %length.i = load i32, i32* %lengthPtr.i, align 4, !dbg !1948
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0), !dbg !1949
  %1 = icmp sgt i32 %length.i, 0, !dbg !1950
  br i1 %1, label %test, label %match, !dbg !1950

test:                                             ; preds = %enter
  %2 = sext i32 %length.i to i64, !dbg !1951
  %3 = getelementptr i16, i16* %ustr.i, i64 %2, !dbg !1951
  switch i32 %class, label %xdigit [
    i32 0, label %alnum
    i32 1, label %alpha
    i32 2, label %ascii
    i32 3, label %control
    i32 4, label %digit
    i32 5, label %graph
    i32 6, label %lower
    i32 7, label %print
    i32 8, label %punct
    i32 9, label %space
    i32 10, label %upper
    i32 11, label %word
  ], !dbg !1952

alnum:                                            ; preds = %test, %alnum.next
  %p = phi i16* [ %p.0, %alnum.next ], [ %ustr.i, %test ]
  %p1 = load i16, i16* %p, align 2, !dbg !1953
  %test2 = tail call i32 @Tcl_UniCharIsAlnum(i16 %p1), !dbg !1953
  %4 = icmp eq i32 %test2, 0, !dbg !1953
  br i1 %4, label %match, label %alnum.next, !dbg !1953

alnum.next:                                       ; preds = %alnum
  %p.0 = getelementptr i16, i16* %p, i64 1, !dbg !1954
  %5 = icmp slt i16* %p.0, %3, !dbg !1955
  br i1 %5, label %alnum, label %match, !dbg !1955

alpha:                                            ; preds = %test, %alpha.next
  %p3 = phi i16* [ %p.1, %alpha.next ], [ %ustr.i, %test ]
  %p34 = load i16, i16* %p3, align 2, !dbg !1956
  %test5 = tail call i32 @Tcl_UniCharIsAlpha(i16 %p34), !dbg !1956
  %6 = icmp eq i32 %test5, 0, !dbg !1956
  br i1 %6, label %match, label %alpha.next, !dbg !1956

alpha.next:                                       ; preds = %alpha
  %p.1 = getelementptr i16, i16* %p3, i64 1, !dbg !1957
  %7 = icmp slt i16* %p.1, %3, !dbg !1958
  br i1 %7, label %alpha, label %match, !dbg !1958

ascii:                                            ; preds = %test, %ascii.next
  %p6 = phi i16* [ %p.2, %ascii.next ], [ %ustr.i, %test ]
  %p67 = load i16, i16* %p6, align 2, !dbg !1959
  %8 = icmp ult i16 %p67, 128, !dbg !1960
  br i1 %8, label %ascii.next, label %match, !dbg !1959

ascii.next:                                       ; preds = %ascii
  %p.2 = getelementptr i16, i16* %p6, i64 1, !dbg !1962
  %9 = icmp slt i16* %p.2, %3, !dbg !1963
  br i1 %9, label %ascii, label %match, !dbg !1963

control:                                          ; preds = %test, %control.next
  %p8 = phi i16* [ %p.3, %control.next ], [ %ustr.i, %test ]
  %p89 = load i16, i16* %p8, align 2, !dbg !1964
  %test10 = tail call i32 @Tcl_UniCharIsControl(i16 %p89), !dbg !1964
  %10 = icmp eq i32 %test10, 0, !dbg !1964
  br i1 %10, label %match, label %control.next, !dbg !1964

control.next:                                     ; preds = %control
  %p.3 = getelementptr i16, i16* %p8, i64 1, !dbg !1965
  %11 = icmp slt i16* %p.3, %3, !dbg !1966
  br i1 %11, label %control, label %match, !dbg !1966

digit:                                            ; preds = %test, %digit.next
  %p11 = phi i16* [ %p.4, %digit.next ], [ %ustr.i, %test ]
  %p1112 = load i16, i16* %p11, align 2, !dbg !1967
  %test13 = tail call i32 @Tcl_UniCharIsDigit(i16 %p1112), !dbg !1967
  %12 = icmp eq i32 %test13, 0, !dbg !1967
  br i1 %12, label %match, label %digit.next, !dbg !1967

digit.next:                                       ; preds = %digit
  %p.4 = getelementptr i16, i16* %p11, i64 1, !dbg !1968
  %13 = icmp slt i16* %p.4, %3, !dbg !1969
  br i1 %13, label %digit, label %match, !dbg !1969

graph:                                            ; preds = %test, %graph.next
  %p14 = phi i16* [ %p.5, %graph.next ], [ %ustr.i, %test ]
  %p1415 = load i16, i16* %p14, align 2, !dbg !1970
  %test16 = tail call i32 @Tcl_UniCharIsGraph(i16 %p1415), !dbg !1970
  %14 = icmp eq i32 %test16, 0, !dbg !1970
  br i1 %14, label %match, label %graph.next, !dbg !1970

graph.next:                                       ; preds = %graph
  %p.5 = getelementptr i16, i16* %p14, i64 1, !dbg !1971
  %15 = icmp slt i16* %p.5, %3, !dbg !1972
  br i1 %15, label %graph, label %match, !dbg !1972

lower:                                            ; preds = %test, %lower.next
  %p17 = phi i16* [ %p.6, %lower.next ], [ %ustr.i, %test ]
  %p1718 = load i16, i16* %p17, align 2, !dbg !1973
  %test19 = tail call i32 @Tcl_UniCharIsLower(i16 %p1718), !dbg !1973
  %16 = icmp eq i32 %test19, 0, !dbg !1973
  br i1 %16, label %match, label %lower.next, !dbg !1973

lower.next:                                       ; preds = %lower
  %p.6 = getelementptr i16, i16* %p17, i64 1, !dbg !1974
  %17 = icmp slt i16* %p.6, %3, !dbg !1975
  br i1 %17, label %lower, label %match, !dbg !1975

print:                                            ; preds = %test, %print.next
  %p20 = phi i16* [ %p.7, %print.next ], [ %ustr.i, %test ]
  %p2021 = load i16, i16* %p20, align 2, !dbg !1976
  %test22 = tail call i32 @Tcl_UniCharIsPrint(i16 %p2021), !dbg !1976
  %18 = icmp eq i32 %test22, 0, !dbg !1976
  br i1 %18, label %match, label %print.next, !dbg !1976

print.next:                                       ; preds = %print
  %p.7 = getelementptr i16, i16* %p20, i64 1, !dbg !1977
  %19 = icmp slt i16* %p.7, %3, !dbg !1978
  br i1 %19, label %print, label %match, !dbg !1978

punct:                                            ; preds = %test, %punct.next
  %p23 = phi i16* [ %p.8, %punct.next ], [ %ustr.i, %test ]
  %p2324 = load i16, i16* %p23, align 2, !dbg !1979
  %test25 = tail call i32 @Tcl_UniCharIsPunct(i16 %p2324), !dbg !1979
  %20 = icmp eq i32 %test25, 0, !dbg !1979
  br i1 %20, label %match, label %punct.next, !dbg !1979

punct.next:                                       ; preds = %punct
  %p.8 = getelementptr i16, i16* %p23, i64 1, !dbg !1980
  %21 = icmp slt i16* %p.8, %3, !dbg !1981
  br i1 %21, label %punct, label %match, !dbg !1981

space:                                            ; preds = %test, %space.next
  %p26 = phi i16* [ %p.9, %space.next ], [ %ustr.i, %test ]
  %p2627 = load i16, i16* %p26, align 2, !dbg !1982
  %test28 = tail call i32 @Tcl_UniCharIsSpace(i16 %p2627), !dbg !1982
  %22 = icmp eq i32 %test28, 0, !dbg !1982
  br i1 %22, label %match, label %space.next, !dbg !1982

space.next:                                       ; preds = %space
  %p.9 = getelementptr i16, i16* %p26, i64 1, !dbg !1983
  %23 = icmp slt i16* %p.9, %3, !dbg !1984
  br i1 %23, label %space, label %match, !dbg !1984

upper:                                            ; preds = %test, %upper.next
  %p29 = phi i16* [ %p.10, %upper.next ], [ %ustr.i, %test ]
  %p2930 = load i16, i16* %p29, align 2, !dbg !1985
  %test31 = tail call i32 @Tcl_UniCharIsUpper(i16 %p2930), !dbg !1985
  %24 = icmp eq i32 %test31, 0, !dbg !1985
  br i1 %24, label %match, label %upper.next, !dbg !1985

upper.next:                                       ; preds = %upper
  %p.10 = getelementptr i16, i16* %p29, i64 1, !dbg !1986
  %25 = icmp slt i16* %p.10, %3, !dbg !1987
  br i1 %25, label %upper, label %match, !dbg !1987

word:                                             ; preds = %test, %word.next
  %p32 = phi i16* [ %p.11, %word.next ], [ %ustr.i, %test ]
  %p3233 = load i16, i16* %p32, align 2, !dbg !1988
  %test34 = tail call i32 @Tcl_UniCharIsWordChar(i16 %p3233), !dbg !1988
  %26 = icmp eq i32 %test34, 0, !dbg !1988
  br i1 %26, label %match, label %word.next, !dbg !1988

word.next:                                        ; preds = %word
  %p.11 = getelementptr i16, i16* %p32, i64 1, !dbg !1989
  %27 = icmp slt i16* %p.11, %3, !dbg !1990
  br i1 %27, label %word, label %match, !dbg !1990

xdigit:                                           ; preds = %test, %xdigit.next
  %p35 = phi i16* [ %p.12, %xdigit.next ], [ %ustr.i, %test ]
  %p3536 = load i16, i16* %p35, align 2, !dbg !1991
  switch i16 %p3536, label %match [
    i16 48, label %xdigit.next
    i16 49, label %xdigit.next
    i16 50, label %xdigit.next
    i16 51, label %xdigit.next
    i16 52, label %xdigit.next
    i16 53, label %xdigit.next
    i16 54, label %xdigit.next
    i16 55, label %xdigit.next
    i16 56, label %xdigit.next
    i16 57, label %xdigit.next
    i16 65, label %xdigit.next
    i16 66, label %xdigit.next
    i16 67, label %xdigit.next
    i16 68, label %xdigit.next
    i16 69, label %xdigit.next
    i16 70, label %xdigit.next
    i16 97, label %xdigit.next
    i16 98, label %xdigit.next
    i16 99, label %xdigit.next
    i16 100, label %xdigit.next
    i16 101, label %xdigit.next
    i16 102, label %xdigit.next
  ], !dbg !1992

xdigit.next:                                      ; preds = %xdigit, %xdigit, %xdigit, %xdigit, %xdigit, %xdigit, %xdigit, %xdigit, %xdigit, %xdigit, %xdigit, %xdigit, %xdigit, %xdigit, %xdigit, %xdigit, %xdigit, %xdigit, %xdigit, %xdigit, %xdigit, %xdigit
  %p.12 = getelementptr i16, i16* %p35, i64 1, !dbg !1994
  %28 = icmp slt i16* %p.12, %3, !dbg !1995
  br i1 %28, label %xdigit, label %match, !dbg !1995

match:                                            ; preds = %word, %word.next, %upper, %upper.next, %space, %space.next, %punct, %punct.next, %print, %print.next, %lower, %lower.next, %graph, %graph.next, %digit, %digit.next, %control, %control.next, %ascii, %ascii.next, %alpha, %alpha.next, %alnum, %alnum.next, %xdigit, %xdigit.next, %enter
  %merge = phi i1 [ true, %enter ], [ false, %xdigit ], [ true, %xdigit.next ], [ false, %alnum ], [ true, %alnum.next ], [ false, %alpha ], [ true, %alpha.next ], [ false, %ascii ], [ true, %ascii.next ], [ false, %control ], [ true, %control.next ], [ false, %digit ], [ true, %digit.next ], [ false, %graph ], [ true, %graph.next ], [ false, %lower ], [ true, %lower.next ], [ false, %print ], [ true, %print.next ], [ false, %punct ], [ true, %punct.next ], [ false, %space ], [ true, %space.next ], [ false, %upper ], [ true, %upper.next ], [ false, %word ], [ true, %word.next ]
  ret i1 %merge, !dbg !1996
}

; Function Attrs: alwaysinline nounwind readonly
define hidden { i1, i32 } @tcl.impl.getIndex(%Interp* noalias nocapture %interp, %Tcl_Obj* noalias nocapture nonnull %objPtr, i32 %end) local_unnamed_addr #16 !dbg !1997 {
enter:
  %index = alloca i32, align 4, !dbg !2005
  %typePtr.ptr = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 3, !dbg !2006
  %typePtr = load %ObjType*, %ObjType** %typePtr.ptr, align 8, !dbg !2006
  %tclIntType = load %ObjType*, %ObjType** @tclIntType, align 8, !dbg !2006, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %0 = icmp eq %ObjType* %typePtr, %tclIntType, !dbg !2006
  br i1 %0, label %direct, label %call, !dbg !2006

direct:                                           ; preds = %enter
  %internalRep = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 4, !dbg !2007
  %1 = bitcast %InternalRepresentation* %internalRep to i32*, !dbg !2008
  %longValue = load i32, i32* %1, align 4, !dbg !2008
  %2 = insertvalue { i1, i32 } { i1 true, i32 undef }, i32 %longValue, 1, !dbg !2008
  ret { i1, i32 } %2, !dbg !2008

call:                                             ; preds = %enter
  %code = call i32 @TclGetIntForIndex(%Interp* noalias nocapture %interp, %Tcl_Obj* noalias nocapture nonnull %objPtr, i32 %end, i32* noalias nocapture nonnull %index), !dbg !2009
  %3 = icmp eq i32 %code, 0, !dbg !2010
  %4 = insertvalue { i1, i32 } undef, i1 %3, 0, !dbg !2010
  %index1 = load i32, i32* %index, align 4, !dbg !2011
  %5 = insertvalue { i1, i32 } %4, i32 %index1, 1, !dbg !2011
  ret { i1, i32 } %5, !dbg !2011
}

; Function Attrs: alwaysinline
define hidden i32 @tcl.setFromAny(%ObjType* noalias nocapture nonnull readonly %typePtr, %Interp* noalias nocapture %interp, %Tcl_Obj* noalias nocapture nonnull %objPtr) local_unnamed_addr #12 !dbg !2012 {
enter:
  %setFromAnyProc.ptr = getelementptr %ObjType, %ObjType* %typePtr, i64 0, i32 4, !dbg !2020
  %setFromAnyProc = load i32 (%Interp*, %Tcl_Obj*)*, i32 (%Interp*, %Tcl_Obj*)** %setFromAnyProc.ptr, align 8, !dbg !2020
  %code = tail call i32 %setFromAnyProc(%Interp* nocapture %interp, %Tcl_Obj* nocapture nonnull %objPtr), !dbg !2021
  ret i32 %code, !dbg !2022
}

; Function Attrs: alwaysinline nounwind
define hidden { %Tcl_Obj*, i1 } @obj.dedup(%Tcl_Obj* %obj) local_unnamed_addr #6 !dbg !2023 {
enter:
  %refCountPtr.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %obj, i64 0, i32 0, !dbg !2030
  %refCount.i.i = load i32, i32* %refCountPtr.i.i, align 4, !dbg !2030
  %shared.i = icmp sgt i32 %refCount.i.i, 1, !dbg !2033
  %0 = insertvalue { %Tcl_Obj*, i1 } undef, i1 %shared.i, 1, !dbg !2034
  br i1 %shared.i, label %duplicated, label %unshared, !dbg !2035

duplicated:                                       ; preds = %enter
  %duplicateObj = tail call noalias nonnull %Tcl_Obj* @Tcl_DuplicateObj(%Tcl_Obj* nocapture nonnull readonly %obj), !dbg !2036
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %duplicateObj, i64 0, i32 0, !dbg !2037
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !2039
  %1 = icmp eq i32 %refCount1.i, 0, !dbg !2039
  tail call void @llvm.assume(i1 %1) #5, !dbg !2039
  %2 = insertvalue { %Tcl_Obj*, i1 } %0, %Tcl_Obj* %duplicateObj, 0, !dbg !2040
  ret { %Tcl_Obj*, i1 } %2, !dbg !2040

unshared:                                         ; preds = %enter
  %3 = insertvalue { %Tcl_Obj*, i1 } %0, %Tcl_Obj* %obj, 0, !dbg !2041
  ret { %Tcl_Obj*, i1 } %3, !dbg !2041
}

; Function Attrs: alwaysinline nounwind
define hidden void @obj.cleanup({ %Tcl_Obj*, i1 } %objdupe) local_unnamed_addr #6 !dbg !2042 {
enter:
  %0 = extractvalue { %Tcl_Obj*, i1 } %objdupe, 1, !dbg !2047
  br i1 %0, label %duplicated, label %tcl.dropReference.exit, !dbg !2047

duplicated:                                       ; preds = %enter
  %1 = extractvalue { %Tcl_Obj*, i1 } %objdupe, 0, !dbg !2048
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %1, i64 0, i32 0, !dbg !2049
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !2052
  %2 = icmp slt i32 %refCount1.i.i, 2, !dbg !2053
  br i1 %2, label %freeObject.i.i, label %leave.i.i, !dbg !2053

freeObject.i.i:                                   ; preds = %duplicated
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %1) #5, !dbg !2054
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %1) #5, !dbg !2055
  br label %tcl.dropReference.exit, !dbg !2056

leave.i.i:                                        ; preds = %duplicated
  %3 = add nsw i32 %refCount1.i.i, -1, !dbg !2052
  store i32 %3, i32* %refCount.i.i, align 4, !dbg !2057
  br label %tcl.dropReference.exit, !dbg !2058

tcl.dropReference.exit:                           ; preds = %enter, %freeObject.i.i, %leave.i.i
  ret void, !dbg !2059
}

; Function Attrs: alwaysinline nounwind
define hidden void @tcl.append.string(%Tcl_Obj* noalias nocapture nonnull %bufferObjPtr, %Tcl_Obj* noalias nocapture nonnull %valueObjPtr) local_unnamed_addr #6 !dbg !2060 {
enter:
  %refCountPtr = getelementptr %Tcl_Obj, %Tcl_Obj* %bufferObjPtr, i64 0, i32 0, !dbg !2066
  %before.buf = load i32, i32* %refCountPtr, align 4, !dbg !2067
  %0 = icmp slt i32 %before.buf, 2, !dbg !2068
  tail call void @llvm.assume(i1 %0), !dbg !2068
  %refCountPtr1 = getelementptr %Tcl_Obj, %Tcl_Obj* %valueObjPtr, i64 0, i32 0, !dbg !2069
  %before.val = load i32, i32* %refCountPtr1, align 4, !dbg !2070
  tail call void @Tcl_AppendObjToObj(%Tcl_Obj* noalias nocapture nonnull %bufferObjPtr, %Tcl_Obj* noalias nocapture nonnull %valueObjPtr), !dbg !2071
  %after.buf = load i32, i32* %refCountPtr, align 4, !dbg !2072
  %1 = icmp eq i32 %before.buf, %after.buf, !dbg !2073
  tail call void @llvm.assume(i1 %1), !dbg !2073
  %after.val = load i32, i32* %refCountPtr1, align 4, !dbg !2074
  %2 = icmp eq i32 %before.val, %after.val, !dbg !2075
  tail call void @llvm.assume(i1 %2), !dbg !2075
  ret void, !dbg !2076
}

; Function Attrs: alwaysinline nounwind
define hidden noalias nonnull %Tcl_Obj* @tcl.stridx(%Tcl_Obj* nocapture nonnull %objPtr, %INT %indexInt) local_unnamed_addr #6 !dbg !2077 {
enter:
  %buf9 = alloca [8 x i8], align 1, !dbg !2083
  %buf9.sub = getelementptr inbounds [8 x i8], [8 x i8]* %buf9, i64 0, i64 0
  %0 = extractvalue %INT %indexInt, 0, !dbg !2084
  %1 = extractvalue %INT %indexInt, 1, !dbg !2084
  %2 = zext i32 %1 to i64, !dbg !2084
  %3 = extractvalue %INT %indexInt, 2, !dbg !2084
  %4 = select i1 %0, i64 %3, i64 %2, !dbg !2084
  %index = trunc i64 %4 to i32, !dbg !2086
  %5 = icmp slt i32 %index, 0, !dbg !2087
  br i1 %5, label %empty, label %testTooLong, !dbg !2087

empty:                                            ; preds = %testTooLong, %enter
  %objPtr1 = tail call noalias nonnull %Tcl_Obj* @Tcl_NewObj(), !dbg !2088
  br label %done, !dbg !2089

testTooLong:                                      ; preds = %enter
  %length = tail call i32 @Tcl_GetCharLength(%Tcl_Obj* nocapture nonnull %objPtr), !dbg !2090
  %6 = icmp sgt i32 %length, %index, !dbg !2091
  br i1 %6, label %isPure, label %empty, !dbg !2091

isPure:                                           ; preds = %testTooLong
  %tclByteArrayType.i = load %ObjType*, %ObjType** @tclByteArrayType, align 8, !dbg !2092, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %typePtr.ptr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 3, !dbg !2094
  %typePtr.i = load %ObjType*, %ObjType** %typePtr.ptr.i, align 8, !dbg !2094
  %7 = icmp eq %ObjType* %tclByteArrayType.i, %typePtr.i, !dbg !2095
  %bytes.ptr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 1, !dbg !2096
  %bytes.i = load i8*, i8** %bytes.ptr.i, align 8, !dbg !2096
  %8 = icmp eq i8* %bytes.i, null, !dbg !2096
  br i1 %7, label %puretest.i, label %nexttest, !dbg !2095

puretest.i:                                       ; preds = %isPure
  br i1 %8, label %byteArrayIndexing, label %nexttest2, !dbg !2097

nexttest:                                         ; preds = %isPure
  br i1 %8, label %slowStringIndexing, label %nexttest2, !dbg !2098

nexttest2:                                        ; preds = %puretest.i, %nexttest
  %length.ptr = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 2, !dbg !2099
  %length2 = load i32, i32* %length.ptr, align 4, !dbg !2099
  %9 = icmp eq i32 %length, %length2, !dbg !2099
  br i1 %9, label %fastStringIndexing, label %slowStringIndexing, !dbg !2099

byteArrayIndexing:                                ; preds = %puretest.i
  %bytes3 = tail call nonnull i8* @Tcl_GetByteArrayFromObj(%Tcl_Obj* noalias nocapture nonnull %objPtr, i32* noalias nocapture null), !dbg !2100
  %10 = sext i32 %index to i64, !dbg !2101
  %11 = getelementptr i8, i8* %bytes3, i64 %10, !dbg !2101
  %objPtr4 = tail call noalias nonnull %Tcl_Obj* @Tcl_NewByteArrayObj(i8* nocapture nonnull readonly %11, i32 1), !dbg !2102
  br label %done, !dbg !2103

fastStringIndexing:                               ; preds = %nexttest2
  %12 = sext i32 %index to i64, !dbg !2104
  %13 = getelementptr i8, i8* %bytes.i, i64 %12, !dbg !2104
  %objPtr7 = tail call noalias nonnull %Tcl_Obj* @Tcl_NewStringObj(i8* nocapture readonly %13, i32 1), !dbg !2105
  br label %done, !dbg !2106

slowStringIndexing:                               ; preds = %nexttest, %nexttest2
  %14 = tail call i16 @Tcl_GetUniChar(%Tcl_Obj* nocapture nonnull %objPtr, i32 %index), !dbg !2107
  %ch = zext i16 %14 to i32, !dbg !2107
  %len = call i32 @Tcl_UniCharToUtf(i32 %ch, i8* nocapture nonnull %buf9.sub), !dbg !2108
  %objPtr8 = call noalias nonnull %Tcl_Obj* @Tcl_NewStringObj(i8* nocapture nonnull readonly %buf9.sub, i32 %len), !dbg !2109
  br label %done, !dbg !2110

done:                                             ; preds = %slowStringIndexing, %fastStringIndexing, %byteArrayIndexing, %empty
  %result = phi %Tcl_Obj* [ %objPtr1, %empty ], [ %objPtr4, %byteArrayIndexing ], [ %objPtr7, %fastStringIndexing ], [ %objPtr8, %slowStringIndexing ]
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %result, i64 0, i32 0, !dbg !2111
  store i32 1, i32* %refCount.i.i, align 4, !dbg !2114
  ret %Tcl_Obj* %result, !dbg !2115
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, %Tcl_Obj* } @tcl.stridx.idx(%Tcl_Obj* nocapture nonnull %objPtr, %Tcl_Obj* nocapture nonnull %index, i32* noalias nocapture nonnull %ecvar) local_unnamed_addr #6 !dbg !2116 {
enter:
  %index.i = alloca i32, align 4, !dbg !2123
  %buf9 = alloca [8 x i8], align 1, !dbg !2125
  %buf9.sub = getelementptr inbounds [8 x i8], [8 x i8]* %buf9, i64 0, i64 0
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !2126, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %length = tail call i32 @Tcl_GetCharLength(%Tcl_Obj* nocapture nonnull %objPtr), !dbg !2127
  %0 = bitcast i32* %index.i to i8*, !dbg !2128
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0), !dbg !2128
  %typePtr.ptr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %index, i64 0, i32 3, !dbg !2128
  %typePtr.i = load %ObjType*, %ObjType** %typePtr.ptr.i, align 8, !dbg !2128, !alias.scope !2129, !noalias !2132
  %tclIntType.i = load %ObjType*, %ObjType** @tclIntType, align 8, !dbg !2128, !invariant.load !3, !noalias !2134, !nonnull !3, !dereferenceable !1051
  %1 = icmp eq %ObjType* %typePtr.i, %tclIntType.i, !dbg !2128
  br i1 %1, label %direct.i, label %call.i, !dbg !2128

direct.i:                                         ; preds = %enter
  %internalRep.i = getelementptr %Tcl_Obj, %Tcl_Obj* %index, i64 0, i32 4, !dbg !2135
  %2 = bitcast %InternalRepresentation* %internalRep.i to i32*, !dbg !2136
  %longValue.i = load i32, i32* %2, align 4, !dbg !2136, !alias.scope !2129, !noalias !2132
  %3 = insertvalue { i1, i32 } { i1 true, i32 undef }, i32 %longValue.i, 1, !dbg !2136
  br label %tcl.impl.getIndex.exit, !dbg !2136

call.i:                                           ; preds = %enter
  %end = add i32 %length, -1, !dbg !2137
  %code.i = call i32 @TclGetIntForIndex(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %index, i32 %end, i32* noalias nocapture nonnull %index.i) #5, !dbg !2138
  %4 = icmp eq i32 %code.i, 0, !dbg !2139
  %5 = insertvalue { i1, i32 } undef, i1 %4, 0, !dbg !2139
  %index1.i = load i32, i32* %index.i, align 4, !dbg !2140, !noalias !2134
  %6 = insertvalue { i1, i32 } %5, i32 %index1.i, 1, !dbg !2140
  br label %tcl.impl.getIndex.exit, !dbg !2140

tcl.impl.getIndex.exit:                           ; preds = %call.i, %direct.i
  %7 = phi { i1, i32 } [ %3, %direct.i ], [ %6, %call.i ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0), !dbg !2141
  %getIndex.index = extractvalue { i1, i32 } %7, 1, !dbg !2142
  %getIndex.result = extractvalue { i1, i32 } %7, 0, !dbg !2142
  br i1 %getIndex.result, label %testBefore, label %failed, !dbg !2142

testBefore:                                       ; preds = %tcl.impl.getIndex.exit
  %8 = icmp sgt i32 %getIndex.index, -1, !dbg !2143
  %9 = icmp slt i32 %getIndex.index, %length, !dbg !2144
  %or.cond = and i1 %8, %9, !dbg !2143
  br i1 %or.cond, label %isPure, label %empty, !dbg !2143

empty:                                            ; preds = %testBefore
  %objPtr1 = tail call noalias nonnull %Tcl_Obj* @Tcl_NewObj(), !dbg !2145
  br label %done, !dbg !2146

isPure:                                           ; preds = %testBefore
  %tclByteArrayType.i = load %ObjType*, %ObjType** @tclByteArrayType, align 8, !dbg !2147, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %typePtr.ptr.i16 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 3, !dbg !2149
  %typePtr.i17 = load %ObjType*, %ObjType** %typePtr.ptr.i16, align 8, !dbg !2149
  %10 = icmp eq %ObjType* %tclByteArrayType.i, %typePtr.i17, !dbg !2150
  %bytes.ptr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 1, !dbg !2151
  %bytes.i = load i8*, i8** %bytes.ptr.i, align 8, !dbg !2151
  %11 = icmp eq i8* %bytes.i, null, !dbg !2151
  br i1 %10, label %puretest.i, label %nexttest, !dbg !2150

puretest.i:                                       ; preds = %isPure
  br i1 %11, label %byteArrayIndexing, label %nexttest2, !dbg !2152

nexttest:                                         ; preds = %isPure
  br i1 %11, label %slowStringIndexing, label %nexttest2, !dbg !2153

nexttest2:                                        ; preds = %puretest.i, %nexttest
  %length.ptr = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 2, !dbg !2154
  %length2 = load i32, i32* %length.ptr, align 4, !dbg !2154
  %12 = icmp eq i32 %length, %length2, !dbg !2154
  br i1 %12, label %fastStringIndexing, label %slowStringIndexing, !dbg !2154

byteArrayIndexing:                                ; preds = %puretest.i
  %bytes3 = tail call nonnull i8* @Tcl_GetByteArrayFromObj(%Tcl_Obj* noalias nocapture nonnull %objPtr, i32* noalias nocapture null), !dbg !2155
  %13 = sext i32 %getIndex.index to i64, !dbg !2156
  %14 = getelementptr i8, i8* %bytes3, i64 %13, !dbg !2156
  %objPtr4 = tail call noalias nonnull %Tcl_Obj* @Tcl_NewByteArrayObj(i8* nocapture nonnull readonly %14, i32 1), !dbg !2157
  br label %done, !dbg !2158

fastStringIndexing:                               ; preds = %nexttest2
  %15 = sext i32 %getIndex.index to i64, !dbg !2159
  %16 = getelementptr i8, i8* %bytes.i, i64 %15, !dbg !2159
  %objPtr7 = tail call noalias nonnull %Tcl_Obj* @Tcl_NewStringObj(i8* nocapture readonly %16, i32 1), !dbg !2160
  br label %done, !dbg !2161

slowStringIndexing:                               ; preds = %nexttest, %nexttest2
  %17 = tail call i16 @Tcl_GetUniChar(%Tcl_Obj* nocapture nonnull %objPtr, i32 %getIndex.index), !dbg !2162
  %ch = zext i16 %17 to i32, !dbg !2162
  %len = call i32 @Tcl_UniCharToUtf(i32 %ch, i8* nocapture nonnull %buf9.sub), !dbg !2163
  %objPtr8 = call noalias nonnull %Tcl_Obj* @Tcl_NewStringObj(i8* nocapture nonnull readonly %buf9.sub, i32 %len), !dbg !2164
  br label %done, !dbg !2165

done:                                             ; preds = %slowStringIndexing, %fastStringIndexing, %byteArrayIndexing, %empty
  %result = phi %Tcl_Obj* [ %objPtr1, %empty ], [ %objPtr4, %byteArrayIndexing ], [ %objPtr7, %fastStringIndexing ], [ %objPtr8, %slowStringIndexing ]
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %result, i64 0, i32 0, !dbg !2166
  store i32 1, i32* %refCount.i.i, align 4, !dbg !2169
  %18 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %result, 1, !dbg !2170
  ret { i32, %Tcl_Obj* } %18, !dbg !2170

failed:                                           ; preds = %tcl.impl.getIndex.exit
  store i32 1, i32* %ecvar, align 4, !dbg !2171
  ret { i32, %Tcl_Obj* } { i32 1, %Tcl_Obj* undef }, !dbg !2172
}

; Function Attrs: alwaysinline nounwind
define hidden noalias nonnull %Tcl_Obj* @tcl.strrange(%Tcl_Obj* nocapture nonnull %objPtr, %INT %from, %INT %to) local_unnamed_addr #6 !dbg !2173 {
enter:
  %0 = extractvalue %INT %from, 0, !dbg !2180
  %1 = extractvalue %INT %from, 1, !dbg !2180
  %2 = zext i32 %1 to i64, !dbg !2180
  %3 = extractvalue %INT %from, 2, !dbg !2180
  %4 = select i1 %0, i64 %3, i64 %2, !dbg !2180
  %5 = trunc i64 %4 to i32, !dbg !2182
  %6 = icmp sgt i32 %5, 0, !dbg !2182
  %from1 = select i1 %6, i32 %5, i32 0, !dbg !2182
  %length = tail call i32 @Tcl_GetCharLength(%Tcl_Obj* nocapture nonnull %objPtr), !dbg !2183
  %7 = add i32 %length, -1, !dbg !2183
  %8 = extractvalue %INT %to, 0, !dbg !2184
  %9 = extractvalue %INT %to, 1, !dbg !2184
  %10 = zext i32 %9 to i64, !dbg !2184
  %11 = extractvalue %INT %to, 2, !dbg !2184
  %12 = select i1 %8, i64 %11, i64 %10, !dbg !2184
  %13 = trunc i64 %12 to i32, !dbg !2186
  %14 = icmp slt i32 %7, %13, !dbg !2186
  %to2 = select i1 %14, i32 %7, i32 %13, !dbg !2186
  %15 = icmp slt i32 %to2, %from1, !dbg !2187
  br i1 %15, label %empty, label %realSubstring, !dbg !2187

empty:                                            ; preds = %enter
  %objPtr3 = tail call noalias nonnull %Tcl_Obj* @Tcl_NewObj(), !dbg !2188
  br label %finish, !dbg !2189

realSubstring:                                    ; preds = %enter
  %objPtr4 = tail call noalias nonnull %Tcl_Obj* @Tcl_GetRange(%Tcl_Obj* nocapture nonnull %objPtr, i32 %from1, i32 %to2), !dbg !2190
  br label %finish, !dbg !2191

finish:                                           ; preds = %realSubstring, %empty
  %result = phi %Tcl_Obj* [ %objPtr3, %empty ], [ %objPtr4, %realSubstring ]
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %result, i64 0, i32 0, !dbg !2192
  store i32 1, i32* %refCount.i.i, align 4, !dbg !2195
  ret %Tcl_Obj* %result, !dbg !2196
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, %Tcl_Obj* } @tcl.strrange.idx(%Tcl_Obj* nocapture nonnull %objPtr, %Tcl_Obj* nocapture nonnull %fromIdx, %Tcl_Obj* nocapture nonnull %toIdx, i32* noalias nocapture nonnull %ecvar) local_unnamed_addr #6 !dbg !2197 {
enter:
  %index.i7 = alloca i32, align 4, !dbg !2205
  %index.i = alloca i32, align 4, !dbg !2207
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !2209, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %length = tail call i32 @Tcl_GetCharLength(%Tcl_Obj* nocapture nonnull %objPtr), !dbg !2210
  %end = add i32 %length, -1, !dbg !2211
  %0 = bitcast i32* %index.i to i8*, !dbg !2212
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0), !dbg !2212
  %typePtr.ptr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %fromIdx, i64 0, i32 3, !dbg !2212
  %typePtr.i = load %ObjType*, %ObjType** %typePtr.ptr.i, align 8, !dbg !2212, !alias.scope !2213, !noalias !2216
  %tclIntType.i = load %ObjType*, %ObjType** @tclIntType, align 8, !dbg !2212, !invariant.load !3, !noalias !2218, !nonnull !3, !dereferenceable !1051
  %1 = icmp eq %ObjType* %typePtr.i, %tclIntType.i, !dbg !2212
  br i1 %1, label %direct.i, label %call.i, !dbg !2212

direct.i:                                         ; preds = %enter
  %internalRep.i = getelementptr %Tcl_Obj, %Tcl_Obj* %fromIdx, i64 0, i32 4, !dbg !2219
  %2 = bitcast %InternalRepresentation* %internalRep.i to i32*, !dbg !2220
  %longValue.i = load i32, i32* %2, align 4, !dbg !2220, !alias.scope !2213, !noalias !2216
  %3 = insertvalue { i1, i32 } { i1 true, i32 undef }, i32 %longValue.i, 1, !dbg !2220
  br label %tcl.impl.getIndex.exit, !dbg !2220

call.i:                                           ; preds = %enter
  %code.i = call i32 @TclGetIntForIndex(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %fromIdx, i32 %end, i32* noalias nocapture nonnull %index.i) #5, !dbg !2221
  %4 = icmp eq i32 %code.i, 0, !dbg !2222
  %5 = insertvalue { i1, i32 } undef, i1 %4, 0, !dbg !2222
  %index1.i = load i32, i32* %index.i, align 4, !dbg !2223, !noalias !2218
  %6 = insertvalue { i1, i32 } %5, i32 %index1.i, 1, !dbg !2223
  br label %tcl.impl.getIndex.exit, !dbg !2223

tcl.impl.getIndex.exit:                           ; preds = %call.i, %direct.i
  %7 = phi { i1, i32 } [ %3, %direct.i ], [ %6, %call.i ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0), !dbg !2224
  %getIndex.index = extractvalue { i1, i32 } %7, 1, !dbg !2225
  %getIndex.result = extractvalue { i1, i32 } %7, 0, !dbg !2225
  br i1 %getIndex.result, label %getTo, label %failed, !dbg !2225

getTo:                                            ; preds = %tcl.impl.getIndex.exit
  %8 = bitcast i32* %index.i7 to i8*, !dbg !2226
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8), !dbg !2226
  %typePtr.ptr.i8 = getelementptr %Tcl_Obj, %Tcl_Obj* %toIdx, i64 0, i32 3, !dbg !2226
  %typePtr.i9 = load %ObjType*, %ObjType** %typePtr.ptr.i8, align 8, !dbg !2226, !alias.scope !2227, !noalias !2230
  %9 = icmp eq %ObjType* %typePtr.i9, %tclIntType.i, !dbg !2226
  br i1 %9, label %direct.i13, label %call.i16, !dbg !2226

direct.i13:                                       ; preds = %getTo
  %internalRep.i11 = getelementptr %Tcl_Obj, %Tcl_Obj* %toIdx, i64 0, i32 4, !dbg !2232
  %10 = bitcast %InternalRepresentation* %internalRep.i11 to i32*, !dbg !2233
  %longValue.i12 = load i32, i32* %10, align 4, !dbg !2233, !alias.scope !2227, !noalias !2230
  %11 = insertvalue { i1, i32 } { i1 true, i32 undef }, i32 %longValue.i12, 1, !dbg !2233
  br label %tcl.impl.getIndex.exit17, !dbg !2233

call.i16:                                         ; preds = %getTo
  %code.i14 = call i32 @TclGetIntForIndex(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %toIdx, i32 %end, i32* noalias nocapture nonnull %index.i7) #5, !dbg !2234
  %12 = icmp eq i32 %code.i14, 0, !dbg !2235
  %13 = insertvalue { i1, i32 } undef, i1 %12, 0, !dbg !2235
  %index1.i15 = load i32, i32* %index.i7, align 4, !dbg !2236, !noalias !2237
  %14 = insertvalue { i1, i32 } %13, i32 %index1.i15, 1, !dbg !2236
  br label %tcl.impl.getIndex.exit17, !dbg !2236

tcl.impl.getIndex.exit17:                         ; preds = %call.i16, %direct.i13
  %15 = phi { i1, i32 } [ %11, %direct.i13 ], [ %14, %call.i16 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8), !dbg !2238
  %getIndex.index1 = extractvalue { i1, i32 } %15, 1, !dbg !2239
  %getIndex.result2 = extractvalue { i1, i32 } %15, 0, !dbg !2239
  br i1 %getIndex.result2, label %rangeCheck, label %failed, !dbg !2239

rangeCheck:                                       ; preds = %tcl.impl.getIndex.exit17
  %16 = icmp sgt i32 %getIndex.index, 0, !dbg !2240
  %fromIdx3 = select i1 %16, i32 %getIndex.index, i32 0, !dbg !2240
  %17 = icmp slt i32 %end, %getIndex.index1, !dbg !2241
  %toIdx4 = select i1 %17, i32 %end, i32 %getIndex.index1, !dbg !2241
  %18 = icmp slt i32 %toIdx4, %fromIdx3, !dbg !2242
  br i1 %18, label %empty, label %realSubstring, !dbg !2242

empty:                                            ; preds = %rangeCheck
  %objPtr5 = tail call noalias nonnull %Tcl_Obj* @Tcl_NewObj(), !dbg !2243
  br label %finish, !dbg !2244

realSubstring:                                    ; preds = %rangeCheck
  %objPtr6 = tail call noalias nonnull %Tcl_Obj* @Tcl_GetRange(%Tcl_Obj* nocapture nonnull %objPtr, i32 %fromIdx3, i32 %toIdx4), !dbg !2245
  br label %finish, !dbg !2246

finish:                                           ; preds = %realSubstring, %empty
  %result = phi %Tcl_Obj* [ %objPtr5, %empty ], [ %objPtr6, %realSubstring ]
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %result, i64 0, i32 0, !dbg !2247
  store i32 1, i32* %refCount.i.i, align 4, !dbg !2250
  %19 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %result, 1, !dbg !2251
  ret { i32, %Tcl_Obj* } %19, !dbg !2251

failed:                                           ; preds = %tcl.impl.getIndex.exit17, %tcl.impl.getIndex.exit
  store i32 1, i32* %ecvar, align 4, !dbg !2252
  ret { i32, %Tcl_Obj* } { i32 1, %Tcl_Obj* undef }, !dbg !2253
}

; Function Attrs: alwaysinline nounwind
define hidden nonnull %Tcl_Obj* @tcl.strreplace(%Tcl_Obj* nonnull %stringPtr, %INT %fromInt, %INT %toInt, %Tcl_Obj* nonnull %substringPtr) local_unnamed_addr #6 !dbg !2254 {
enter:
  %lengthPtr.i = alloca i32, align 4, !dbg !2262
  %0 = extractvalue %INT %fromInt, 0, !dbg !2264
  %1 = extractvalue %INT %fromInt, 1, !dbg !2264
  %2 = extractvalue %INT %fromInt, 2, !dbg !2264
  %3 = trunc i64 %2 to i32, !dbg !2264
  %4 = select i1 %0, i32 %3, i32 %1, !dbg !2264
  %5 = icmp sgt i32 %4, 0, !dbg !2266
  %from = select i1 %5, i32 %4, i32 0, !dbg !2266
  %6 = extractvalue %INT %toInt, 0, !dbg !2267
  %7 = extractvalue %INT %toInt, 1, !dbg !2267
  %8 = extractvalue %INT %toInt, 2, !dbg !2267
  %9 = trunc i64 %8 to i32, !dbg !2267
  %to18 = select i1 %6, i32 %9, i32 %7, !dbg !2267
  %refCountPtr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %stringPtr, i64 0, i32 0, !dbg !2269
  %before.i = load i32, i32* %refCountPtr.i, align 4, !dbg !2271
  %length.i19 = tail call i32 @Tcl_GetCharLength(%Tcl_Obj* nocapture nonnull %stringPtr) #5, !dbg !2272
  %after.i = load i32, i32* %refCountPtr.i, align 4, !dbg !2273
  %10 = icmp eq i32 %before.i, %after.i, !dbg !2274
  tail call void @llvm.assume(i1 %10) #5, !dbg !2274
  %11 = icmp sgt i32 %from, %to18, !dbg !2275
  %12 = icmp sgt i32 %from, %length.i19, !dbg !2275
  %13 = or i1 %11, %12, !dbg !2275
  br i1 %13, label %done, label %check.trivial, !dbg !2275

check.trivial:                                    ; preds = %enter
  %14 = icmp slt i32 %length.i19, %to18, !dbg !2276
  %to1 = select i1 %14, i32 %length.i19, i32 %to18, !dbg !2276
  %15 = icmp slt i32 %4, 1, !dbg !2277
  %16 = icmp sle i32 %length.i19, %to18, !dbg !2277
  %17 = and i1 %15, %16, !dbg !2277
  br i1 %17, label %done, label %check.remove.tail, !dbg !2277

check.remove.tail:                                ; preds = %check.trivial
  %refCountPtr.i31 = getelementptr %Tcl_Obj, %Tcl_Obj* %substringPtr, i64 0, i32 0, !dbg !2278
  %before.i32 = load i32, i32* %refCountPtr.i31, align 4, !dbg !2280
  %length.i33 = tail call i32 @Tcl_GetCharLength(%Tcl_Obj* nocapture nonnull %substringPtr) #5, !dbg !2281
  %after.i34 = load i32, i32* %refCountPtr.i31, align 4, !dbg !2282
  %18 = icmp eq i32 %before.i32, %after.i34, !dbg !2283
  tail call void @llvm.assume(i1 %18) #5, !dbg !2283
  %refCount.i52 = load i32, i32* %refCountPtr.i, align 4, !dbg !2284
  %19 = icmp eq i32 %length.i33, 0, !dbg !2286
  %20 = and i1 %16, %19, !dbg !2286
  %21 = icmp slt i32 %refCount.i52, 2, !dbg !2287
  %or.cond = and i1 %20, %21, !dbg !2286
  br i1 %or.cond, label %replace.remove.tail, label %check.in.place, !dbg !2286

replace.remove.tail:                              ; preds = %check.remove.tail
  tail call void @Tcl_SetObjLength(%Tcl_Obj* nocapture nonnull %stringPtr, i32 %from), !dbg !2288
  br label %done, !dbg !2289

check.in.place:                                   ; preds = %check.remove.tail
  %22 = add i32 %length.i33, -1, !dbg !2290
  %23 = sub i32 %to1, %from, !dbg !2290
  %24 = icmp eq i32 %22, %23, !dbg !2290
  br i1 %24, label %in.place, label %replace, !dbg !2290

in.place:                                         ; preds = %check.in.place
  br i1 %21, label %in.place.typecheck, label %in.place.dup, !dbg !2291

in.place.dup:                                     ; preds = %in.place
  %objPtr = tail call noalias nonnull %Tcl_Obj* @Tcl_DuplicateObj(%Tcl_Obj* nocapture nonnull readonly %stringPtr), !dbg !2292
  %refCount.i49 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !2293
  %refCount1.i50 = load i32, i32* %refCount.i49, align 4, !dbg !2295
  %25 = icmp eq i32 %refCount1.i50, 0, !dbg !2295
  tail call void @llvm.assume(i1 %25) #5, !dbg !2295
  br label %in.place.typecheck, !dbg !2296

in.place.typecheck:                               ; preds = %in.place.dup, %in.place
  %26 = phi %Tcl_Obj* [ %stringPtr, %in.place ], [ %objPtr, %in.place.dup ]
  %tclByteArrayType.i40 = load %ObjType*, %ObjType** @tclByteArrayType, align 8, !dbg !2297, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %typePtr.ptr.i41 = getelementptr %Tcl_Obj, %Tcl_Obj* %26, i64 0, i32 3, !dbg !2299
  %typePtr.i42 = load %ObjType*, %ObjType** %typePtr.ptr.i41, align 8, !dbg !2299
  %27 = icmp eq %ObjType* %tclByteArrayType.i40, %typePtr.i42, !dbg !2300
  br i1 %27, label %puretest.i45, label %notBA.i47, !dbg !2300

puretest.i45:                                     ; preds = %in.place.typecheck
  %bytes.ptr.i43 = getelementptr %Tcl_Obj, %Tcl_Obj* %26, i64 0, i32 1, !dbg !2301
  %bytes.i44 = load i8*, i8** %bytes.ptr.i43, align 8, !dbg !2301
  %28 = icmp eq i8* %bytes.i44, null, !dbg !2301
  br i1 %28, label %tcl.isPureByteArray.exit48, label %notBA.i47, !dbg !2301

notBA.i47:                                        ; preds = %puretest.i45, %in.place.typecheck
  br label %tcl.isPureByteArray.exit48

tcl.isPureByteArray.exit48:                       ; preds = %puretest.i45, %notBA.i47
  %merge.i46 = phi i1 [ true, %puretest.i45 ], [ false, %notBA.i47 ]
  %typePtr.ptr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %substringPtr, i64 0, i32 3, !dbg !2302
  %typePtr.i = load %ObjType*, %ObjType** %typePtr.ptr.i, align 8, !dbg !2302
  %29 = icmp eq %ObjType* %tclByteArrayType.i40, %typePtr.i, !dbg !2304
  br i1 %29, label %puretest.i, label %in.place.unicode, !dbg !2304

puretest.i:                                       ; preds = %tcl.isPureByteArray.exit48
  %bytes.ptr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %substringPtr, i64 0, i32 1, !dbg !2305
  %bytes.i39 = load i8*, i8** %bytes.ptr.i, align 8, !dbg !2305
  %30 = icmp eq i8* %bytes.i39, null, !dbg !2305
  %or.cond54 = and i1 %merge.i46, %30, !dbg !2305
  br i1 %or.cond54, label %in.place.bytes, label %in.place.unicode, !dbg !2305

in.place.bytes:                                   ; preds = %puretest.i
  %bytes = tail call nonnull i8* @Tcl_GetByteArrayFromObj(%Tcl_Obj* noalias nocapture nonnull %26, i32* noalias nocapture null), !dbg !2306
  %bytes2 = tail call nonnull i8* @Tcl_GetByteArrayFromObj(%Tcl_Obj* noalias nocapture nonnull %substringPtr, i32* noalias nocapture null), !dbg !2307
  %31 = zext i32 %from to i64, !dbg !2308
  %32 = getelementptr i8, i8* %bytes, i64 %31, !dbg !2308
  tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %32, i8* nonnull align 1 %bytes2, i32 %length.i33, i1 false), !dbg !2308
  %bytes.i24 = getelementptr %Tcl_Obj, %Tcl_Obj* %26, i64 0, i32 1, !dbg !2309
  %bytes1.i25 = load i8*, i8** %bytes.i24, align 8, !dbg !2311
  %33 = icmp eq i8* %bytes1.i25, null, !dbg !2312
  br i1 %33, label %done, label %act.i27, !dbg !2312

act.i27:                                          ; preds = %in.place.bytes
  %tclEmptyStringRep.i26 = load i8*, i8** @tclEmptyStringRep, align 8, !dbg !2313, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %34 = icmp eq i8* %bytes1.i25, %tclEmptyStringRep.i26, !dbg !2313
  br i1 %34, label %clear.i29, label %free.i28, !dbg !2313

free.i28:                                         ; preds = %act.i27
  tail call void @Tcl_Free(i8* nonnull %bytes1.i25) #5, !dbg !2314
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %bytes1.i25) #5, !dbg !2315
  br label %clear.i29, !dbg !2316

clear.i29:                                        ; preds = %free.i28, %act.i27
  store i8* null, i8** %bytes.i24, align 8, !dbg !2317
  br label %done, !dbg !2318

in.place.unicode:                                 ; preds = %puretest.i, %tcl.isPureByteArray.exit48
  %ustr = tail call nonnull i16* @Tcl_GetUnicode(%Tcl_Obj* nocapture nonnull %26), !dbg !2319
  %ustr3 = tail call nonnull i16* @Tcl_GetUnicode(%Tcl_Obj* nocapture nonnull %substringPtr), !dbg !2320
  %35 = zext i32 %from to i64, !dbg !2321
  %36 = getelementptr i16, i16* %ustr, i64 %35, !dbg !2321
  %37 = shl i32 %length.i33, 1, !dbg !2321
  %38 = bitcast i16* %36 to i8*, !dbg !2321
  %39 = bitcast i16* %ustr3 to i8*, !dbg !2321
  tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %38, i8* nonnull align 1 %39, i32 %37, i1 false), !dbg !2321
  %internalRep = getelementptr %Tcl_Obj, %Tcl_Obj* %26, i64 0, i32 4, !dbg !2322
  %40 = bitcast %InternalRepresentation* %internalRep to i32*, !dbg !2322
  %41 = getelementptr i32, i32* %40, i64 1, !dbg !2322
  store i32 0, i32* %41, align 4, !dbg !2322
  %bytes.i = getelementptr %Tcl_Obj, %Tcl_Obj* %26, i64 0, i32 1, !dbg !2323
  %bytes1.i = load i8*, i8** %bytes.i, align 8, !dbg !2325
  %42 = icmp eq i8* %bytes1.i, null, !dbg !2326
  br i1 %42, label %done, label %act.i, !dbg !2326

act.i:                                            ; preds = %in.place.unicode
  %tclEmptyStringRep.i = load i8*, i8** @tclEmptyStringRep, align 8, !dbg !2327, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %43 = icmp eq i8* %bytes1.i, %tclEmptyStringRep.i, !dbg !2327
  br i1 %43, label %clear.i, label %free.i, !dbg !2327

free.i:                                           ; preds = %act.i
  tail call void @Tcl_Free(i8* nonnull %bytes1.i) #5, !dbg !2328
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %bytes1.i) #5, !dbg !2329
  br label %clear.i, !dbg !2330

clear.i:                                          ; preds = %free.i, %act.i
  store i8* null, i8** %bytes.i, align 8, !dbg !2331
  br label %done, !dbg !2332

replace:                                          ; preds = %check.in.place
  %44 = bitcast i32* %lengthPtr.i to i8*, !dbg !2333
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %44), !dbg !2333
  %ustr.i = call nonnull i16* @Tcl_GetUnicodeFromObj(%Tcl_Obj* noalias nocapture nonnull %stringPtr, i32* noalias nocapture nonnull %lengthPtr.i) #5, !dbg !2333
  %length.i = load i32, i32* %lengthPtr.i, align 4, !dbg !2334
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %44), !dbg !2335
  br i1 %19, label %replace.remove, label %replace.substr, !dbg !2336

replace.remove:                                   ; preds = %replace
  br i1 %15, label %replace.remove.front, label %replace.remove.body, !dbg !2337

replace.remove.front:                             ; preds = %replace.remove
  %45 = add i32 %to1, 1, !dbg !2338
  %46 = sext i32 %45 to i64, !dbg !2338
  %47 = getelementptr i16, i16* %ustr.i, i64 %46, !dbg !2338
  %48 = sub i32 %length.i, %to1, !dbg !2338
  %objPtr4 = tail call noalias nonnull %Tcl_Obj* @Tcl_NewUnicodeObj(i16* nocapture nonnull readonly %47, i32 %48), !dbg !2338
  %refCount.i13 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr4, i64 0, i32 0, !dbg !2339
  %refCount1.i14 = load i32, i32* %refCount.i13, align 4, !dbg !2341
  %49 = icmp eq i32 %refCount1.i14, 0, !dbg !2341
  tail call void @llvm.assume(i1 %49) #5, !dbg !2341
  br label %done, !dbg !2342

replace.remove.body:                              ; preds = %replace.remove
  %objPtr5 = tail call noalias nonnull %Tcl_Obj* @Tcl_NewUnicodeObj(i16* nocapture nonnull readonly %ustr.i, i32 %from), !dbg !2343
  %refCount.i11 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr5, i64 0, i32 0, !dbg !2344
  %refCount1.i12 = load i32, i32* %refCount.i11, align 4, !dbg !2346
  %50 = icmp eq i32 %refCount1.i12, 0, !dbg !2346
  tail call void @llvm.assume(i1 %50) #5, !dbg !2346
  %51 = icmp sgt i32 %length.i, %to1, !dbg !2347
  br i1 %51, label %replace.remove.body.mid, label %done, !dbg !2347

replace.remove.body.mid:                          ; preds = %replace.remove.body
  %52 = add nsw i32 %to1, 1, !dbg !2348
  %53 = sext i32 %52 to i64, !dbg !2348
  %54 = getelementptr i16, i16* %ustr.i, i64 %53, !dbg !2348
  %55 = sub i32 %length.i, %to1, !dbg !2348
  tail call void @Tcl_AppendUnicodeToObj(%Tcl_Obj* noalias nocapture nonnull %objPtr5, i16* noalias nocapture nonnull readonly %54, i32 %55), !dbg !2348
  br label %done, !dbg !2349

replace.substr:                                   ; preds = %replace
  br i1 %5, label %replace.substr.mid, label %replace.substr.front.test, !dbg !2350

replace.substr.front.test:                        ; preds = %replace.substr
  %refCount.i.i10 = load i32, i32* %refCountPtr.i31, align 4, !dbg !2351
  %shared.i = icmp sgt i32 %refCount.i.i10, 1, !dbg !2354
  br i1 %shared.i, label %replace.substr.front.shared, label %replace.subst.front.unshared, !dbg !2355

replace.substr.mid:                               ; preds = %replace.substr
  %objPtr6 = tail call noalias nonnull %Tcl_Obj* @Tcl_NewUnicodeObj(i16* nocapture nonnull readonly %ustr.i, i32 %from), !dbg !2356
  %refCount.i8 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr6, i64 0, i32 0, !dbg !2357
  %refCount1.i9 = load i32, i32* %refCount.i8, align 4, !dbg !2359
  %56 = icmp eq i32 %refCount1.i9, 0, !dbg !2359
  tail call void @llvm.assume(i1 %56) #5, !dbg !2359
  tail call void @Tcl_AppendObjToObj(%Tcl_Obj* noalias nocapture nonnull %objPtr6, %Tcl_Obj* noalias nocapture nonnull %substringPtr), !dbg !2360
  %57 = icmp sgt i32 %length.i, %to1, !dbg !2361
  br i1 %57, label %replace.subst.tail, label %done, !dbg !2361

replace.substr.front.shared:                      ; preds = %replace.substr.front.test
  %objPtr7 = tail call noalias nonnull %Tcl_Obj* @Tcl_DuplicateObj(%Tcl_Obj* nocapture nonnull readonly %substringPtr), !dbg !2362
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr7, i64 0, i32 0, !dbg !2363
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !2365
  %58 = icmp eq i32 %refCount1.i, 0, !dbg !2365
  tail call void @llvm.assume(i1 %58) #5, !dbg !2365
  %59 = icmp sgt i32 %length.i, %to1, !dbg !2366
  br i1 %59, label %replace.subst.tail, label %done, !dbg !2366

replace.subst.front.unshared:                     ; preds = %replace.substr.front.test
  %60 = icmp sgt i32 %length.i, %to1, !dbg !2367
  br i1 %60, label %replace.subst.tail, label %done, !dbg !2367

replace.subst.tail:                               ; preds = %replace.subst.front.unshared, %replace.substr.front.shared, %replace.substr.mid
  %tail = phi %Tcl_Obj* [ %objPtr6, %replace.substr.mid ], [ %objPtr7, %replace.substr.front.shared ], [ %substringPtr, %replace.subst.front.unshared ]
  %61 = add nsw i32 %to1, 1, !dbg !2368
  %62 = sext i32 %61 to i64, !dbg !2368
  %63 = getelementptr i16, i16* %ustr.i, i64 %62, !dbg !2368
  %64 = xor i32 %to1, -1, !dbg !2368
  %65 = add i32 %length.i, %64, !dbg !2368
  tail call void @Tcl_AppendUnicodeToObj(%Tcl_Obj* noalias nocapture nonnull %tail, i16* noalias nocapture nonnull readonly %63, i32 %65), !dbg !2368
  br label %done, !dbg !2369

done:                                             ; preds = %clear.i, %in.place.unicode, %clear.i29, %in.place.bytes, %check.trivial, %enter, %replace.remove.tail, %replace.subst.tail, %replace.subst.front.unshared, %replace.substr.front.shared, %replace.substr.mid, %replace.remove.body.mid, %replace.remove.body, %replace.remove.front
  %66 = phi %Tcl_Obj* [ %objPtr4, %replace.remove.front ], [ %objPtr5, %replace.remove.body ], [ %objPtr5, %replace.remove.body.mid ], [ %objPtr6, %replace.substr.mid ], [ %objPtr7, %replace.substr.front.shared ], [ %substringPtr, %replace.subst.front.unshared ], [ %tail, %replace.subst.tail ], [ %stringPtr, %replace.remove.tail ], [ %stringPtr, %enter ], [ %substringPtr, %check.trivial ], [ %26, %in.place.bytes ], [ %26, %clear.i29 ], [ %26, %in.place.unicode ], [ %26, %clear.i ]
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %66, i64 0, i32 0, !dbg !2370
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !2373
  %67 = add nsw i32 %refCount1.i.i, 1, !dbg !2373
  store i32 %67, i32* %refCount.i.i, align 4, !dbg !2373
  ret %Tcl_Obj* %66, !dbg !2374
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture writeonly, i8* nocapture readonly, i32, i1 immarg) #11

; Function Attrs: alwaysinline nounwind
define hidden { i32, %Tcl_Obj* } @tcl.strreplace.idx(%Tcl_Obj* nonnull %stringPtr, %Tcl_Obj* nocapture nonnull %fromIdx, %Tcl_Obj* nocapture nonnull %toIdx, %Tcl_Obj* nonnull %substringPtr, i32* noalias nocapture nonnull %ecvar) local_unnamed_addr #6 !dbg !2375 {
enter:
  %lengthPtr.i.i = alloca i32, align 4, !dbg !2384
  %index.i3 = alloca i32, align 4, !dbg !2387
  %index.i = alloca i32, align 4, !dbg !2389
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !2391, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %length = tail call i32 @Tcl_GetCharLength(%Tcl_Obj* nocapture nonnull %stringPtr), !dbg !2392
  %end = add i32 %length, -1, !dbg !2392
  %0 = bitcast i32* %index.i to i8*, !dbg !2393
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0), !dbg !2393
  %typePtr.ptr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %fromIdx, i64 0, i32 3, !dbg !2393
  %typePtr.i = load %ObjType*, %ObjType** %typePtr.ptr.i, align 8, !dbg !2393, !alias.scope !2394, !noalias !2397
  %tclIntType.i = load %ObjType*, %ObjType** @tclIntType, align 8, !dbg !2393, !invariant.load !3, !noalias !2399, !nonnull !3, !dereferenceable !1051
  %1 = icmp eq %ObjType* %typePtr.i, %tclIntType.i, !dbg !2393
  br i1 %1, label %direct.i, label %call.i, !dbg !2393

direct.i:                                         ; preds = %enter
  %internalRep.i = getelementptr %Tcl_Obj, %Tcl_Obj* %fromIdx, i64 0, i32 4, !dbg !2400
  %2 = bitcast %InternalRepresentation* %internalRep.i to i32*, !dbg !2401
  %longValue.i = load i32, i32* %2, align 4, !dbg !2401, !alias.scope !2394, !noalias !2397
  %3 = insertvalue { i1, i32 } { i1 true, i32 undef }, i32 %longValue.i, 1, !dbg !2401
  br label %tcl.impl.getIndex.exit, !dbg !2401

call.i:                                           ; preds = %enter
  %code.i = call i32 @TclGetIntForIndex(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %fromIdx, i32 %end, i32* noalias nocapture nonnull %index.i) #5, !dbg !2402
  %4 = icmp eq i32 %code.i, 0, !dbg !2403
  %5 = insertvalue { i1, i32 } undef, i1 %4, 0, !dbg !2403
  %index1.i = load i32, i32* %index.i, align 4, !dbg !2404, !noalias !2399
  %6 = insertvalue { i1, i32 } %5, i32 %index1.i, 1, !dbg !2404
  br label %tcl.impl.getIndex.exit, !dbg !2404

tcl.impl.getIndex.exit:                           ; preds = %call.i, %direct.i
  %7 = phi { i1, i32 } [ %3, %direct.i ], [ %6, %call.i ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0), !dbg !2405
  %getIndex.index = extractvalue { i1, i32 } %7, 1, !dbg !2406
  %getIndex.result = extractvalue { i1, i32 } %7, 0, !dbg !2406
  br i1 %getIndex.result, label %getTo, label %failed, !dbg !2406

getTo:                                            ; preds = %tcl.impl.getIndex.exit
  %8 = bitcast i32* %index.i3 to i8*, !dbg !2407
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8), !dbg !2407
  %typePtr.ptr.i4 = getelementptr %Tcl_Obj, %Tcl_Obj* %toIdx, i64 0, i32 3, !dbg !2407
  %typePtr.i5 = load %ObjType*, %ObjType** %typePtr.ptr.i4, align 8, !dbg !2407, !alias.scope !2408, !noalias !2411
  %9 = icmp eq %ObjType* %typePtr.i5, %tclIntType.i, !dbg !2407
  br i1 %9, label %direct.i9, label %call.i12, !dbg !2407

direct.i9:                                        ; preds = %getTo
  %internalRep.i7 = getelementptr %Tcl_Obj, %Tcl_Obj* %toIdx, i64 0, i32 4, !dbg !2413
  %10 = bitcast %InternalRepresentation* %internalRep.i7 to i32*, !dbg !2414
  %longValue.i8 = load i32, i32* %10, align 4, !dbg !2414, !alias.scope !2408, !noalias !2411
  %11 = insertvalue { i1, i32 } { i1 true, i32 undef }, i32 %longValue.i8, 1, !dbg !2414
  br label %tcl.impl.getIndex.exit13, !dbg !2414

call.i12:                                         ; preds = %getTo
  %code.i10 = call i32 @TclGetIntForIndex(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %toIdx, i32 %end, i32* noalias nocapture nonnull %index.i3) #5, !dbg !2415
  %12 = icmp eq i32 %code.i10, 0, !dbg !2416
  %13 = insertvalue { i1, i32 } undef, i1 %12, 0, !dbg !2416
  %index1.i11 = load i32, i32* %index.i3, align 4, !dbg !2417, !noalias !2418
  %14 = insertvalue { i1, i32 } %13, i32 %index1.i11, 1, !dbg !2417
  br label %tcl.impl.getIndex.exit13, !dbg !2417

tcl.impl.getIndex.exit13:                         ; preds = %call.i12, %direct.i9
  %15 = phi { i1, i32 } [ %11, %direct.i9 ], [ %14, %call.i12 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8), !dbg !2419
  %getIndex.result2 = extractvalue { i1, i32 } %15, 0, !dbg !2420
  br i1 %getIndex.result2, label %rangeCheck, label %failed, !dbg !2420

rangeCheck:                                       ; preds = %tcl.impl.getIndex.exit13
  %getIndex.index1 = extractvalue { i1, i32 } %15, 1, !dbg !2420
  %16 = icmp sgt i32 %getIndex.index, 0, !dbg !2421
  %from.i = select i1 %16, i32 %getIndex.index, i32 0, !dbg !2421
  %refCountPtr.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %stringPtr, i64 0, i32 0, !dbg !2422
  %before.i.i = load i32, i32* %refCountPtr.i.i, align 4, !dbg !2424
  %length.i19.i = tail call i32 @Tcl_GetCharLength(%Tcl_Obj* nocapture nonnull %stringPtr) #5, !dbg !2425
  %after.i.i = load i32, i32* %refCountPtr.i.i, align 4, !dbg !2426
  %17 = icmp eq i32 %before.i.i, %after.i.i, !dbg !2427
  tail call void @llvm.assume(i1 %17) #5, !dbg !2427
  %18 = icmp sgt i32 %from.i, %getIndex.index1, !dbg !2428
  %19 = icmp sgt i32 %from.i, %length.i19.i, !dbg !2428
  %20 = or i1 %18, %19, !dbg !2428
  br i1 %20, label %tcl.strreplace.exit, label %check.trivial.i, !dbg !2428

check.trivial.i:                                  ; preds = %rangeCheck
  %21 = icmp slt i32 %length.i19.i, %getIndex.index1, !dbg !2429
  %to1.i = select i1 %21, i32 %length.i19.i, i32 %getIndex.index1, !dbg !2429
  %22 = icmp slt i32 %getIndex.index, 1, !dbg !2430
  %23 = icmp sle i32 %length.i19.i, %getIndex.index1, !dbg !2430
  %24 = and i1 %22, %23, !dbg !2430
  br i1 %24, label %tcl.strreplace.exit, label %check.remove.tail.i, !dbg !2430

check.remove.tail.i:                              ; preds = %check.trivial.i
  %refCountPtr.i31.i = getelementptr %Tcl_Obj, %Tcl_Obj* %substringPtr, i64 0, i32 0, !dbg !2431
  %before.i32.i = load i32, i32* %refCountPtr.i31.i, align 4, !dbg !2433
  %length.i33.i = tail call i32 @Tcl_GetCharLength(%Tcl_Obj* nocapture nonnull %substringPtr) #5, !dbg !2434
  %after.i34.i = load i32, i32* %refCountPtr.i31.i, align 4, !dbg !2435
  %25 = icmp eq i32 %before.i32.i, %after.i34.i, !dbg !2436
  tail call void @llvm.assume(i1 %25) #5, !dbg !2436
  %refCount.i52.i = load i32, i32* %refCountPtr.i.i, align 4, !dbg !2437
  %26 = icmp eq i32 %length.i33.i, 0, !dbg !2439
  %27 = and i1 %23, %26, !dbg !2439
  %28 = icmp slt i32 %refCount.i52.i, 2, !dbg !2440
  %or.cond.i = and i1 %27, %28, !dbg !2439
  br i1 %or.cond.i, label %replace.remove.tail.i, label %check.in.place.i, !dbg !2439

replace.remove.tail.i:                            ; preds = %check.remove.tail.i
  tail call void @Tcl_SetObjLength(%Tcl_Obj* nocapture nonnull %stringPtr, i32 %from.i) #5, !dbg !2441
  br label %tcl.strreplace.exit, !dbg !2442

check.in.place.i:                                 ; preds = %check.remove.tail.i
  %29 = add i32 %length.i33.i, -1, !dbg !2443
  %30 = sub i32 %to1.i, %from.i, !dbg !2443
  %31 = icmp eq i32 %29, %30, !dbg !2443
  br i1 %31, label %in.place.i, label %replace.i, !dbg !2443

in.place.i:                                       ; preds = %check.in.place.i
  br i1 %28, label %in.place.typecheck.i, label %in.place.dup.i, !dbg !2444

in.place.dup.i:                                   ; preds = %in.place.i
  %objPtr.i = tail call noalias nonnull %Tcl_Obj* @Tcl_DuplicateObj(%Tcl_Obj* nocapture nonnull readonly %stringPtr) #5, !dbg !2445
  %refCount.i49.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr.i, i64 0, i32 0, !dbg !2446
  %refCount1.i50.i = load i32, i32* %refCount.i49.i, align 4, !dbg !2448
  %32 = icmp eq i32 %refCount1.i50.i, 0, !dbg !2448
  tail call void @llvm.assume(i1 %32) #5, !dbg !2448
  br label %in.place.typecheck.i, !dbg !2449

in.place.typecheck.i:                             ; preds = %in.place.dup.i, %in.place.i
  %33 = phi %Tcl_Obj* [ %stringPtr, %in.place.i ], [ %objPtr.i, %in.place.dup.i ]
  %tclByteArrayType.i40.i = load %ObjType*, %ObjType** @tclByteArrayType, align 8, !dbg !2450, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %typePtr.ptr.i41.i = getelementptr %Tcl_Obj, %Tcl_Obj* %33, i64 0, i32 3, !dbg !2452
  %typePtr.i42.i = load %ObjType*, %ObjType** %typePtr.ptr.i41.i, align 8, !dbg !2452
  %34 = icmp eq %ObjType* %tclByteArrayType.i40.i, %typePtr.i42.i, !dbg !2453
  br i1 %34, label %puretest.i45.i, label %notBA.i47.i, !dbg !2453

puretest.i45.i:                                   ; preds = %in.place.typecheck.i
  %bytes.ptr.i43.i = getelementptr %Tcl_Obj, %Tcl_Obj* %33, i64 0, i32 1, !dbg !2454
  %bytes.i44.i = load i8*, i8** %bytes.ptr.i43.i, align 8, !dbg !2454
  %35 = icmp eq i8* %bytes.i44.i, null, !dbg !2454
  br i1 %35, label %tcl.isPureByteArray.exit48.i, label %notBA.i47.i, !dbg !2454

notBA.i47.i:                                      ; preds = %puretest.i45.i, %in.place.typecheck.i
  br label %tcl.isPureByteArray.exit48.i

tcl.isPureByteArray.exit48.i:                     ; preds = %notBA.i47.i, %puretest.i45.i
  %merge.i46.i = phi i1 [ true, %puretest.i45.i ], [ false, %notBA.i47.i ]
  %typePtr.ptr.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %substringPtr, i64 0, i32 3, !dbg !2455
  %typePtr.i.i = load %ObjType*, %ObjType** %typePtr.ptr.i.i, align 8, !dbg !2455
  %36 = icmp eq %ObjType* %tclByteArrayType.i40.i, %typePtr.i.i, !dbg !2457
  br i1 %36, label %puretest.i.i, label %in.place.unicode.i, !dbg !2457

puretest.i.i:                                     ; preds = %tcl.isPureByteArray.exit48.i
  %bytes.ptr.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %substringPtr, i64 0, i32 1, !dbg !2458
  %bytes.i39.i = load i8*, i8** %bytes.ptr.i.i, align 8, !dbg !2458
  %37 = icmp eq i8* %bytes.i39.i, null, !dbg !2458
  %or.cond54.i = and i1 %merge.i46.i, %37, !dbg !2458
  br i1 %or.cond54.i, label %in.place.bytes.i, label %in.place.unicode.i, !dbg !2458

in.place.bytes.i:                                 ; preds = %puretest.i.i
  %bytes.i = tail call nonnull i8* @Tcl_GetByteArrayFromObj(%Tcl_Obj* noalias nocapture nonnull %33, i32* noalias nocapture null) #5, !dbg !2459
  %bytes2.i = tail call nonnull i8* @Tcl_GetByteArrayFromObj(%Tcl_Obj* noalias nocapture nonnull %substringPtr, i32* noalias nocapture null) #5, !dbg !2460
  %38 = zext i32 %from.i to i64, !dbg !2461
  %39 = getelementptr i8, i8* %bytes.i, i64 %38, !dbg !2461
  tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %39, i8* nonnull align 1 %bytes2.i, i32 %length.i33.i, i1 false) #5, !dbg !2461
  %bytes.i24.i = getelementptr %Tcl_Obj, %Tcl_Obj* %33, i64 0, i32 1, !dbg !2462
  %bytes1.i25.i = load i8*, i8** %bytes.i24.i, align 8, !dbg !2464
  %40 = icmp eq i8* %bytes1.i25.i, null, !dbg !2465
  br i1 %40, label %tcl.strreplace.exit, label %act.i27.i, !dbg !2465

act.i27.i:                                        ; preds = %in.place.bytes.i
  %tclEmptyStringRep.i26.i = load i8*, i8** @tclEmptyStringRep, align 8, !dbg !2466, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %41 = icmp eq i8* %bytes1.i25.i, %tclEmptyStringRep.i26.i, !dbg !2466
  br i1 %41, label %clear.i29.i, label %free.i28.i, !dbg !2466

free.i28.i:                                       ; preds = %act.i27.i
  tail call void @Tcl_Free(i8* nonnull %bytes1.i25.i) #5, !dbg !2467
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %bytes1.i25.i) #5, !dbg !2468
  br label %clear.i29.i, !dbg !2469

clear.i29.i:                                      ; preds = %free.i28.i, %act.i27.i
  store i8* null, i8** %bytes.i24.i, align 8, !dbg !2470
  br label %tcl.strreplace.exit, !dbg !2471

in.place.unicode.i:                               ; preds = %puretest.i.i, %tcl.isPureByteArray.exit48.i
  %ustr.i = tail call nonnull i16* @Tcl_GetUnicode(%Tcl_Obj* nocapture nonnull %33) #5, !dbg !2472
  %ustr3.i = tail call nonnull i16* @Tcl_GetUnicode(%Tcl_Obj* nocapture nonnull %substringPtr) #5, !dbg !2473
  %42 = zext i32 %from.i to i64, !dbg !2474
  %43 = getelementptr i16, i16* %ustr.i, i64 %42, !dbg !2474
  %44 = shl i32 %length.i33.i, 1, !dbg !2474
  %45 = bitcast i16* %43 to i8*, !dbg !2474
  %46 = bitcast i16* %ustr3.i to i8*, !dbg !2474
  tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %45, i8* nonnull align 1 %46, i32 %44, i1 false) #5, !dbg !2474
  %internalRep.i14 = getelementptr %Tcl_Obj, %Tcl_Obj* %33, i64 0, i32 4, !dbg !2475
  %47 = bitcast %InternalRepresentation* %internalRep.i14 to i32*, !dbg !2475
  %48 = getelementptr i32, i32* %47, i64 1, !dbg !2475
  store i32 0, i32* %48, align 4, !dbg !2475
  %bytes.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %33, i64 0, i32 1, !dbg !2476
  %bytes1.i.i = load i8*, i8** %bytes.i.i, align 8, !dbg !2478
  %49 = icmp eq i8* %bytes1.i.i, null, !dbg !2479
  br i1 %49, label %tcl.strreplace.exit, label %act.i.i, !dbg !2479

act.i.i:                                          ; preds = %in.place.unicode.i
  %tclEmptyStringRep.i.i = load i8*, i8** @tclEmptyStringRep, align 8, !dbg !2480, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %50 = icmp eq i8* %bytes1.i.i, %tclEmptyStringRep.i.i, !dbg !2480
  br i1 %50, label %clear.i.i, label %free.i.i, !dbg !2480

free.i.i:                                         ; preds = %act.i.i
  tail call void @Tcl_Free(i8* nonnull %bytes1.i.i) #5, !dbg !2481
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %bytes1.i.i) #5, !dbg !2482
  br label %clear.i.i, !dbg !2483

clear.i.i:                                        ; preds = %free.i.i, %act.i.i
  store i8* null, i8** %bytes.i.i, align 8, !dbg !2484
  br label %tcl.strreplace.exit, !dbg !2485

replace.i:                                        ; preds = %check.in.place.i
  %51 = bitcast i32* %lengthPtr.i.i to i8*, !dbg !2486
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %51) #5, !dbg !2486
  %ustr.i.i = call nonnull i16* @Tcl_GetUnicodeFromObj(%Tcl_Obj* noalias nocapture nonnull %stringPtr, i32* noalias nocapture nonnull %lengthPtr.i.i) #5, !dbg !2486
  %length.i.i = load i32, i32* %lengthPtr.i.i, align 4, !dbg !2487
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %51) #5, !dbg !2488
  br i1 %26, label %replace.remove.i, label %replace.substr.i, !dbg !2489

replace.remove.i:                                 ; preds = %replace.i
  br i1 %22, label %replace.remove.front.i, label %replace.remove.body.i, !dbg !2490

replace.remove.front.i:                           ; preds = %replace.remove.i
  %52 = add i32 %to1.i, 1, !dbg !2491
  %53 = sext i32 %52 to i64, !dbg !2491
  %54 = getelementptr i16, i16* %ustr.i.i, i64 %53, !dbg !2491
  %55 = sub i32 %length.i.i, %to1.i, !dbg !2491
  %objPtr4.i = tail call noalias nonnull %Tcl_Obj* @Tcl_NewUnicodeObj(i16* nocapture nonnull readonly %54, i32 %55) #5, !dbg !2491
  %refCount.i13.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr4.i, i64 0, i32 0, !dbg !2492
  %refCount1.i14.i = load i32, i32* %refCount.i13.i, align 4, !dbg !2494
  %56 = icmp eq i32 %refCount1.i14.i, 0, !dbg !2494
  tail call void @llvm.assume(i1 %56) #5, !dbg !2494
  br label %tcl.strreplace.exit, !dbg !2495

replace.remove.body.i:                            ; preds = %replace.remove.i
  %objPtr5.i = tail call noalias nonnull %Tcl_Obj* @Tcl_NewUnicodeObj(i16* nocapture nonnull readonly %ustr.i.i, i32 %from.i) #5, !dbg !2496
  %refCount.i11.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr5.i, i64 0, i32 0, !dbg !2497
  %refCount1.i12.i = load i32, i32* %refCount.i11.i, align 4, !dbg !2499
  %57 = icmp eq i32 %refCount1.i12.i, 0, !dbg !2499
  tail call void @llvm.assume(i1 %57) #5, !dbg !2499
  %58 = icmp sgt i32 %length.i.i, %to1.i, !dbg !2500
  br i1 %58, label %replace.remove.body.mid.i, label %tcl.strreplace.exit, !dbg !2500

replace.remove.body.mid.i:                        ; preds = %replace.remove.body.i
  %59 = add nsw i32 %to1.i, 1, !dbg !2501
  %60 = sext i32 %59 to i64, !dbg !2501
  %61 = getelementptr i16, i16* %ustr.i.i, i64 %60, !dbg !2501
  %62 = sub i32 %length.i.i, %to1.i, !dbg !2501
  tail call void @Tcl_AppendUnicodeToObj(%Tcl_Obj* noalias nocapture nonnull %objPtr5.i, i16* noalias nocapture nonnull readonly %61, i32 %62) #5, !dbg !2501
  br label %tcl.strreplace.exit, !dbg !2502

replace.substr.i:                                 ; preds = %replace.i
  br i1 %16, label %replace.substr.mid.i, label %replace.substr.front.test.i, !dbg !2503

replace.substr.front.test.i:                      ; preds = %replace.substr.i
  %refCount.i.i10.i = load i32, i32* %refCountPtr.i31.i, align 4, !dbg !2504
  %shared.i.i = icmp sgt i32 %refCount.i.i10.i, 1, !dbg !2507
  br i1 %shared.i.i, label %replace.substr.front.shared.i, label %replace.subst.front.unshared.i, !dbg !2508

replace.substr.mid.i:                             ; preds = %replace.substr.i
  %objPtr6.i = tail call noalias nonnull %Tcl_Obj* @Tcl_NewUnicodeObj(i16* nocapture nonnull readonly %ustr.i.i, i32 %from.i) #5, !dbg !2509
  %refCount.i8.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr6.i, i64 0, i32 0, !dbg !2510
  %refCount1.i9.i = load i32, i32* %refCount.i8.i, align 4, !dbg !2512
  %63 = icmp eq i32 %refCount1.i9.i, 0, !dbg !2512
  tail call void @llvm.assume(i1 %63) #5, !dbg !2512
  tail call void @Tcl_AppendObjToObj(%Tcl_Obj* noalias nocapture nonnull %objPtr6.i, %Tcl_Obj* noalias nocapture nonnull %substringPtr) #5, !dbg !2513
  %64 = icmp sgt i32 %length.i.i, %to1.i, !dbg !2514
  br i1 %64, label %replace.subst.tail.i, label %tcl.strreplace.exit, !dbg !2514

replace.substr.front.shared.i:                    ; preds = %replace.substr.front.test.i
  %objPtr7.i = tail call noalias nonnull %Tcl_Obj* @Tcl_DuplicateObj(%Tcl_Obj* nocapture nonnull readonly %substringPtr) #5, !dbg !2515
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr7.i, i64 0, i32 0, !dbg !2516
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !2518
  %65 = icmp eq i32 %refCount1.i.i, 0, !dbg !2518
  tail call void @llvm.assume(i1 %65) #5, !dbg !2518
  %66 = icmp sgt i32 %length.i.i, %to1.i, !dbg !2519
  br i1 %66, label %replace.subst.tail.i, label %tcl.strreplace.exit, !dbg !2519

replace.subst.front.unshared.i:                   ; preds = %replace.substr.front.test.i
  %67 = icmp sgt i32 %length.i.i, %to1.i, !dbg !2520
  br i1 %67, label %replace.subst.tail.i, label %tcl.strreplace.exit, !dbg !2520

replace.subst.tail.i:                             ; preds = %replace.subst.front.unshared.i, %replace.substr.front.shared.i, %replace.substr.mid.i
  %tail.i = phi %Tcl_Obj* [ %objPtr6.i, %replace.substr.mid.i ], [ %objPtr7.i, %replace.substr.front.shared.i ], [ %substringPtr, %replace.subst.front.unshared.i ]
  %68 = add nsw i32 %to1.i, 1, !dbg !2521
  %69 = sext i32 %68 to i64, !dbg !2521
  %70 = getelementptr i16, i16* %ustr.i.i, i64 %69, !dbg !2521
  %71 = xor i32 %to1.i, -1, !dbg !2521
  %72 = add i32 %length.i.i, %71, !dbg !2521
  tail call void @Tcl_AppendUnicodeToObj(%Tcl_Obj* noalias nocapture nonnull %tail.i, i16* noalias nocapture nonnull readonly %70, i32 %72) #5, !dbg !2521
  br label %tcl.strreplace.exit, !dbg !2522

tcl.strreplace.exit:                              ; preds = %rangeCheck, %check.trivial.i, %replace.remove.tail.i, %in.place.bytes.i, %clear.i29.i, %in.place.unicode.i, %clear.i.i, %replace.remove.front.i, %replace.remove.body.i, %replace.remove.body.mid.i, %replace.substr.mid.i, %replace.substr.front.shared.i, %replace.subst.front.unshared.i, %replace.subst.tail.i
  %73 = phi %Tcl_Obj* [ %objPtr4.i, %replace.remove.front.i ], [ %objPtr5.i, %replace.remove.body.i ], [ %objPtr5.i, %replace.remove.body.mid.i ], [ %objPtr6.i, %replace.substr.mid.i ], [ %objPtr7.i, %replace.substr.front.shared.i ], [ %substringPtr, %replace.subst.front.unshared.i ], [ %tail.i, %replace.subst.tail.i ], [ %stringPtr, %replace.remove.tail.i ], [ %stringPtr, %rangeCheck ], [ %substringPtr, %check.trivial.i ], [ %33, %in.place.bytes.i ], [ %33, %clear.i29.i ], [ %33, %in.place.unicode.i ], [ %33, %clear.i.i ]
  %refCount.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %73, i64 0, i32 0, !dbg !2523
  %refCount1.i.i.i = load i32, i32* %refCount.i.i.i, align 4, !dbg !2526
  %74 = add nsw i32 %refCount1.i.i.i, 1, !dbg !2526
  store i32 %74, i32* %refCount.i.i.i, align 4, !dbg !2526
  %75 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %73, 1, !dbg !2527
  ret { i32, %Tcl_Obj* } %75, !dbg !2527

failed:                                           ; preds = %tcl.impl.getIndex.exit13, %tcl.impl.getIndex.exit
  store i32 1, i32* %ecvar, align 4, !dbg !2528
  ret { i32, %Tcl_Obj* } { i32 1, %Tcl_Obj* undef }, !dbg !2529
}

; Function Attrs: alwaysinline nounwind
define hidden nonnull %Tcl_Obj* @tcl.strmap(%Tcl_Obj* nonnull %sourceObj, %Tcl_Obj* nonnull %targetObj, %Tcl_Obj* nonnull %stringObj) local_unnamed_addr #6 !dbg !2530 {
enter:
  %lengthPtr.i22 = alloca i32, align 4, !dbg !2537
  %lengthPtr.i18 = alloca i32, align 4, !dbg !2539
  %lengthPtr.i = alloca i32, align 4, !dbg !2541
  %0 = icmp eq %Tcl_Obj* %targetObj, %sourceObj, !dbg !2543
  br i1 %0, label %done, label %trivial1, !dbg !2543

trivial1:                                         ; preds = %enter
  %1 = icmp eq %Tcl_Obj* %stringObj, %sourceObj, !dbg !2544
  br i1 %1, label %done, label %trivial2, !dbg !2544

trivial2:                                         ; preds = %trivial1
  %2 = bitcast i32* %lengthPtr.i to i8*, !dbg !2545
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2), !dbg !2545
  %ustr.i = call nonnull i16* @Tcl_GetUnicodeFromObj(%Tcl_Obj* noalias nocapture nonnull %stringObj, i32* noalias nocapture nonnull %lengthPtr.i) #5, !dbg !2545
  %length.i = load i32, i32* %lengthPtr.i, align 4, !dbg !2546
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2), !dbg !2547
  %3 = icmp eq i32 %length.i, 0, !dbg !2548
  br i1 %3, label %done, label %trivial3, !dbg !2548

trivial3:                                         ; preds = %trivial2
  %4 = bitcast i32* %lengthPtr.i18 to i8*, !dbg !2549
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4), !dbg !2549
  %ustr.i19 = call nonnull i16* @Tcl_GetUnicodeFromObj(%Tcl_Obj* noalias nocapture nonnull %sourceObj, i32* noalias nocapture nonnull %lengthPtr.i18) #5, !dbg !2549
  %length.i20 = load i32, i32* %lengthPtr.i18, align 4, !dbg !2550
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4), !dbg !2551
  %5 = icmp sgt i32 %length.i20, %length.i, !dbg !2552
  %6 = icmp eq i32 %length.i20, 0, !dbg !2552
  %7 = or i1 %5, %6, !dbg !2552
  br i1 %7, label %done, label %trivial4, !dbg !2552

trivial4:                                         ; preds = %trivial3
  %8 = icmp eq i32 %length.i, %length.i20, !dbg !2553
  br i1 %8, label %wholesale, label %map, !dbg !2553

wholesale:                                        ; preds = %trivial4
  %9 = shl i32 %length.i, 1, !dbg !2554
  %10 = bitcast i16* %ustr.i to i8*, !dbg !2554
  %11 = bitcast i16* %ustr.i19 to i8*, !dbg !2554
  %cmp = tail call i32 @memcmp(i8* nonnull %10, i8* nonnull %11, i32 %9), !dbg !2554
  %12 = icmp eq i32 %cmp, 0, !dbg !2555
  %13 = select i1 %12, %Tcl_Obj* %targetObj, %Tcl_Obj* %stringObj, !dbg !2555
  br label %done, !dbg !2556

map:                                              ; preds = %trivial4
  %14 = bitcast i32* %lengthPtr.i22 to i8*, !dbg !2557
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14), !dbg !2557
  %ustr.i23 = call nonnull i16* @Tcl_GetUnicodeFromObj(%Tcl_Obj* noalias nocapture nonnull %targetObj, i32* noalias nocapture nonnull %lengthPtr.i22) #5, !dbg !2557
  %length.i24 = load i32, i32* %lengthPtr.i22, align 4, !dbg !2558
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14), !dbg !2559
  %objPtr = tail call noalias nonnull %Tcl_Obj* @Tcl_NewUnicodeObj(i16* nocapture nonnull readonly %ustr.i, i32 0), !dbg !2560
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !2561
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !2563
  %15 = icmp eq i32 %refCount1.i, 0, !dbg !2563
  tail call void @llvm.assume(i1 %15) #5, !dbg !2563
  %source.string7 = load i16, i16* %ustr.i19, align 2, !dbg !2564
  %16 = sext i32 %length.i to i64, !dbg !2565
  %17 = getelementptr i16, i16* %ustr.i, i64 %16, !dbg !2565
  %18 = icmp slt i16* %ustr.i, %17, !dbg !2566
  br i1 %18, label %map.loop.test1.lr.ph, label %map.done.thread, !dbg !2566

map.done.thread:                                  ; preds = %map
  %refCount.i.i2836 = load i32, i32* %refCount.i, align 4, !dbg !2567
  %shared.i2937 = icmp slt i32 %refCount.i.i2836, 2, !dbg !2570
  tail call void @llvm.assume(i1 %shared.i2937), !dbg !2571
  br label %done, !dbg !2572

map.loop.test1.lr.ph:                             ; preds = %map
  %19 = icmp eq i32 %length.i20, 1, !dbg !2573
  %20 = shl i32 %length.i20, 1, !dbg !2573
  %21 = bitcast i16* %ustr.i19 to i8*, !dbg !2573
  %22 = sext i32 %length.i20 to i64, !dbg !2573
  br i1 %19, label %map.loop.test1.us, label %map.loop.test1, !dbg !2566

map.loop.test1.us:                                ; preds = %map.loop.test1.lr.ph, %map.loop.next.us
  %prev31.us = phi i16* [ %prev13.us, %map.loop.next.us ], [ %ustr.i, %map.loop.test1.lr.ph ]
  %cur30.us = phi i16* [ %cur15.us, %map.loop.next.us ], [ %ustr.i, %map.loop.test1.lr.ph ]
  %cur8.us = load i16, i16* %cur30.us, align 2, !dbg !2574
  %23 = icmp eq i16 %cur8.us, %source.string7, !dbg !2574
  br i1 %23, label %map.loop.test4.us, label %map.loop.next.us, !dbg !2574

map.loop.test4.us:                                ; preds = %map.loop.test1.us
  %24 = icmp eq i16* %prev31.us, %cur30.us, !dbg !2575
  br i1 %24, label %map.loop.body6.us, label %map.loop.body5.us, !dbg !2575

map.loop.body5.us:                                ; preds = %map.loop.test4.us
  %25 = ptrtoint i16* %cur30.us to i64
  %26 = ptrtoint i16* %prev31.us to i64
  %27 = sub i64 %25, %26
  %28 = lshr exact i64 %27, 1, !dbg !2576
  %len.us = trunc i64 %28 to i32, !dbg !2576
  tail call void @Tcl_AppendUnicodeToObj(%Tcl_Obj* noalias nocapture nonnull %objPtr, i16* noalias nocapture nonnull readonly %prev31.us, i32 %len.us), !dbg !2576
  br label %map.loop.body6.us, !dbg !2577

map.loop.body6.us:                                ; preds = %map.loop.body5.us, %map.loop.test4.us
  %prev10.us = phi i16* [ %cur30.us, %map.loop.body5.us ], [ %prev31.us, %map.loop.test4.us ]
  %prev11.us = getelementptr i16, i16* %prev10.us, i64 %22, !dbg !2578
  %cur12.us = getelementptr i16, i16* %prev11.us, i64 -1, !dbg !2579
  tail call void @Tcl_AppendUnicodeToObj(%Tcl_Obj* noalias nocapture nonnull %objPtr, i16* noalias nocapture nonnull readonly %ustr.i23, i32 %length.i24), !dbg !2580
  br label %map.loop.next.us, !dbg !2581

map.loop.next.us:                                 ; preds = %map.loop.body6.us, %map.loop.test1.us
  %prev13.us = phi i16* [ %prev31.us, %map.loop.test1.us ], [ %prev11.us, %map.loop.body6.us ]
  %cur14.us = phi i16* [ %cur30.us, %map.loop.test1.us ], [ %cur12.us, %map.loop.body6.us ]
  %cur15.us = getelementptr i16, i16* %cur14.us, i64 1, !dbg !2582
  %29 = icmp slt i16* %cur15.us, %17, !dbg !2566
  br i1 %29, label %map.loop.test1.us, label %map.done, !dbg !2566

map.loop.test1:                                   ; preds = %map.loop.test1.lr.ph, %map.loop.next
  %prev31 = phi i16* [ %prev13, %map.loop.next ], [ %ustr.i, %map.loop.test1.lr.ph ]
  %cur30 = phi i16* [ %cur15, %map.loop.next ], [ %ustr.i, %map.loop.test1.lr.ph ]
  %cur8 = load i16, i16* %cur30, align 2, !dbg !2574
  %30 = icmp eq i16 %cur8, %source.string7, !dbg !2574
  br i1 %30, label %map.loop.test3, label %map.loop.next, !dbg !2574

map.loop.test3:                                   ; preds = %map.loop.test1
  %31 = bitcast i16* %cur30 to i8*, !dbg !2583
  %cmp9 = tail call i32 @memcmp(i8* %31, i8* nonnull %21, i32 %20), !dbg !2583
  %32 = icmp eq i32 %cmp9, 0, !dbg !2584
  br i1 %32, label %map.loop.test4, label %map.loop.next, !dbg !2584

map.loop.test4:                                   ; preds = %map.loop.test3
  %33 = icmp eq i16* %prev31, %cur30, !dbg !2575
  br i1 %33, label %map.loop.body6, label %map.loop.body5, !dbg !2575

map.loop.body5:                                   ; preds = %map.loop.test4
  %34 = ptrtoint i16* %cur30 to i64
  %35 = ptrtoint i16* %prev31 to i64
  %36 = sub i64 %34, %35
  %37 = lshr exact i64 %36, 1, !dbg !2576
  %len = trunc i64 %37 to i32, !dbg !2576
  tail call void @Tcl_AppendUnicodeToObj(%Tcl_Obj* noalias nocapture nonnull %objPtr, i16* noalias nocapture nonnull readonly %prev31, i32 %len), !dbg !2576
  br label %map.loop.body6, !dbg !2577

map.loop.body6:                                   ; preds = %map.loop.test4, %map.loop.body5
  %prev10 = phi i16* [ %cur30, %map.loop.body5 ], [ %prev31, %map.loop.test4 ]
  %prev11 = getelementptr i16, i16* %prev10, i64 %22, !dbg !2578
  %cur12 = getelementptr i16, i16* %prev11, i64 -1, !dbg !2579
  tail call void @Tcl_AppendUnicodeToObj(%Tcl_Obj* noalias nocapture nonnull %objPtr, i16* noalias nocapture nonnull readonly %ustr.i23, i32 %length.i24), !dbg !2580
  br label %map.loop.next, !dbg !2581

map.loop.next:                                    ; preds = %map.loop.body6, %map.loop.test3, %map.loop.test1
  %prev13 = phi i16* [ %prev31, %map.loop.test1 ], [ %prev31, %map.loop.test3 ], [ %prev11, %map.loop.body6 ]
  %cur14 = phi i16* [ %cur30, %map.loop.test1 ], [ %cur30, %map.loop.test3 ], [ %cur12, %map.loop.body6 ]
  %cur15 = getelementptr i16, i16* %cur14, i64 1, !dbg !2582
  %38 = icmp slt i16* %cur15, %17, !dbg !2566
  br i1 %38, label %map.loop.test1, label %map.done, !dbg !2566

map.done:                                         ; preds = %map.loop.next, %map.loop.next.us
  %cur.lcssa = phi i16* [ %cur15.us, %map.loop.next.us ], [ %cur15, %map.loop.next ]
  %prev.lcssa = phi i16* [ %prev13.us, %map.loop.next.us ], [ %prev13, %map.loop.next ]
  %refCount.i.i28 = load i32, i32* %refCount.i, align 4, !dbg !2567
  %shared.i29 = icmp slt i32 %refCount.i.i28, 2, !dbg !2570
  tail call void @llvm.assume(i1 %shared.i29), !dbg !2571
  %39 = icmp eq i16* %prev.lcssa, %cur.lcssa, !dbg !2572
  br i1 %39, label %done, label %map.addLast, !dbg !2572

map.addLast:                                      ; preds = %map.done
  %40 = ptrtoint i16* %cur.lcssa to i64
  %41 = ptrtoint i16* %prev.lcssa to i64
  %42 = sub i64 %40, %41
  %43 = lshr exact i64 %42, 1, !dbg !2585
  %len16 = trunc i64 %43 to i32, !dbg !2585
  tail call void @Tcl_AppendUnicodeToObj(%Tcl_Obj* noalias nocapture nonnull %objPtr, i16* noalias nocapture nonnull readonly %prev.lcssa, i32 %len16), !dbg !2585
  %refCount.i.i26 = load i32, i32* %refCount.i, align 4, !dbg !2586
  %shared.i = icmp slt i32 %refCount.i.i26, 2, !dbg !2589
  tail call void @llvm.assume(i1 %shared.i), !dbg !2590
  br label %done, !dbg !2591

done:                                             ; preds = %map.done.thread, %map.addLast, %map.done, %wholesale, %trivial3, %trivial2, %trivial1, %enter
  %result = phi %Tcl_Obj* [ %stringObj, %enter ], [ %targetObj, %trivial1 ], [ %stringObj, %trivial2 ], [ %stringObj, %trivial3 ], [ %13, %wholesale ], [ %objPtr, %map.done ], [ %objPtr, %map.addLast ], [ %objPtr, %map.done.thread ]
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %result, i64 0, i32 0, !dbg !2592
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !2595
  %44 = add nsw i32 %refCount1.i.i, 1, !dbg !2595
  store i32 %44, i32* %refCount.i.i, align 4, !dbg !2595
  ret %Tcl_Obj* %result, !dbg !2596
}

; Function Attrs: alwaysinline nounwind
define hidden nonnull %Tcl_Obj* @tcl.strtrim(%Tcl_Obj* nonnull %stringObj, %Tcl_Obj* nocapture nonnull %trimsetObj, i32 %which) local_unnamed_addr #6 !dbg !2597 {
enter:
  %0 = alloca i16, align 2, !dbg !2604
  %1 = alloca i16, align 2, !dbg !2606
  %lengthPtr.i3 = alloca i32, align 4, !dbg !2608
  %lengthPtr.i = alloca i32, align 4, !dbg !2610
  %2 = bitcast i32* %lengthPtr.i to i8*, !dbg !2612
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2), !dbg !2612
  %str.i = call nonnull i8* @Tcl_GetStringFromObj(%Tcl_Obj* noalias nocapture nonnull %stringObj, i32* noalias nocapture nonnull %lengthPtr.i) #5, !dbg !2612
  %length.i = load i32, i32* %lengthPtr.i, align 4, !dbg !2613
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2), !dbg !2614
  %3 = bitcast i32* %lengthPtr.i3 to i8*, !dbg !2615
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3), !dbg !2615
  %str.i4 = call nonnull i8* @Tcl_GetStringFromObj(%Tcl_Obj* noalias nocapture nonnull %trimsetObj, i32* noalias nocapture nonnull %lengthPtr.i3) #5, !dbg !2615
  %length.i5 = load i32, i32* %lengthPtr.i3, align 4, !dbg !2616
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3), !dbg !2617
  %4 = icmp eq i32 %length.i, 0, !dbg !2618
  %5 = icmp eq i32 %length.i5, 0, !dbg !2618
  %6 = or i1 %4, %5, !dbg !2618
  br i1 %6, label %returnString, label %okToSearch, !dbg !2618

okToSearch:                                       ; preds = %enter
  %7 = icmp slt i32 %which, 1, !dbg !2619
  br i1 %7, label %computeLeft, label %next, !dbg !2619

computeLeft:                                      ; preds = %okToSearch
  %8 = bitcast i16* %1 to i8*, !dbg !2620
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %8), !dbg !2620
  br label %outerLoop.i, !dbg !2620

outerLoop.i:                                      ; preds = %computeLeft, %nextOuter.i
  %p.i = phi i8* [ %p4.i, %nextOuter.i ], [ %str.i, %computeLeft ]
  %numBytes.2.i = phi i32 [ %numBytes.3.i, %nextOuter.i ], [ %length.i, %computeLeft ]
  %pInc.i = call i32 @Tcl_UtfToUniChar(i8* noalias nocapture nonnull readonly %p.i, i16* noalias nocapture nonnull %1) #5, !dbg !2621
  %ch1.i = load i16, i16* %1, align 2, !dbg !2622
  br label %innerLoop.i, !dbg !2623

innerLoop.i:                                      ; preds = %nextInner.i, %outerLoop.i
  %q.i = phi i8* [ %str.i4, %outerLoop.i ], [ %q1.i, %nextInner.i ]
  %bytesLeft.i = phi i32 [ %length.i5, %outerLoop.i ], [ %bytesLeft2.i, %nextInner.i ]
  %qInc.i = call i32 @Tcl_UtfToUniChar(i8* noalias nocapture nonnull readonly %q.i, i16* noalias nocapture nonnull %1) #5, !dbg !2624
  %ch2.i = load i16, i16* %1, align 2, !dbg !2625
  %9 = icmp eq i16 %ch1.i, %ch2.i, !dbg !2626
  br i1 %9, label %doneInner.i, label %nextInner.i, !dbg !2626

nextInner.i:                                      ; preds = %innerLoop.i
  %10 = sext i32 %qInc.i to i64, !dbg !2627
  %q1.i = getelementptr i8, i8* %q.i, i64 %10, !dbg !2627
  %bytesLeft2.i = sub i32 %bytesLeft.i, %qInc.i, !dbg !2628
  %11 = icmp sgt i32 %bytesLeft2.i, 0, !dbg !2629
  br i1 %11, label %innerLoop.i, label %tcl.impl.trimleft.exit, !dbg !2629

doneInner.i:                                      ; preds = %innerLoop.i
  %12 = icmp slt i32 %bytesLeft.i, 1, !dbg !2630
  br i1 %12, label %tcl.impl.trimleft.exit, label %nextOuter.i, !dbg !2630

nextOuter.i:                                      ; preds = %doneInner.i
  %13 = sext i32 %pInc.i to i64, !dbg !2631
  %p4.i = getelementptr i8, i8* %p.i, i64 %13, !dbg !2631
  %numBytes.3.i = sub i32 %numBytes.2.i, %pInc.i, !dbg !2632
  %14 = icmp sgt i32 %numBytes.3.i, 0, !dbg !2633
  br i1 %14, label %outerLoop.i, label %tcl.impl.trimleft.exit, !dbg !2633

tcl.impl.trimleft.exit:                           ; preds = %doneInner.i, %nextOuter.i, %nextInner.i
  %p5.i = phi i8* [ %p.i, %nextInner.i ], [ %p.i, %doneInner.i ], [ %p4.i, %nextOuter.i ]
  %15 = ptrtoint i8* %p5.i to i64
  %16 = ptrtoint i8* %str.i to i64
  %17 = sub i64 %15, %16
  %18 = trunc i64 %17 to i32, !dbg !2634
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %8), !dbg !2634
  br label %next, !dbg !2635

next:                                             ; preds = %tcl.impl.trimleft.exit, %okToSearch
  %left1 = phi i32 [ 0, %okToSearch ], [ %18, %tcl.impl.trimleft.exit ]
  %19 = icmp sgt i32 %which, -1, !dbg !2636
  %20 = icmp sgt i32 %length.i, %left1, !dbg !2636
  %21 = and i1 %19, %20, !dbg !2636
  br i1 %21, label %outerLoop.preheader.i, label %createTrimmedString, !dbg !2636

outerLoop.preheader.i:                            ; preds = %next
  %22 = bitcast i16* %0 to i8*, !dbg !2637
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %22), !dbg !2637
  %23 = sext i32 %length.i to i64, !dbg !2638
  %p.0.i = getelementptr i8, i8* %str.i, i64 %23, !dbg !2638
  br label %outerLoop.i12, !dbg !2639

outerLoop.i12:                                    ; preds = %nextOuter.i21, %outerLoop.preheader.i
  %p.1.i = phi i8* [ %p.2.i, %nextOuter.i21 ], [ %p.0.i, %outerLoop.preheader.i ]
  %p.2.i = tail call nonnull i8* @Tcl_UtfPrev(i8* nocapture nonnull readonly %p.1.i, i8* nocapture nonnull readonly %str.i) #5, !dbg !2640
  %pInc.i10 = call i32 @Tcl_UtfToUniChar(i8* noalias nocapture nonnull readonly %p.2.i, i16* noalias nocapture nonnull %0) #5, !dbg !2641
  %ch1.i11 = load i16, i16* %0, align 2, !dbg !2642
  br label %innerLoop.i17, !dbg !2639

innerLoop.i17:                                    ; preds = %nextInner.i20, %outerLoop.i12
  %q.i13 = phi i8* [ %str.i4, %outerLoop.i12 ], [ %q1.i19, %nextInner.i20 ]
  %bytesLeft.i14 = phi i32 [ %length.i5, %outerLoop.i12 ], [ %bytesLeft.1.i, %nextInner.i20 ]
  %qInc.i15 = call i32 @Tcl_UtfToUniChar(i8* noalias nocapture nonnull readonly %q.i13, i16* noalias nocapture nonnull %0) #5, !dbg !2643
  %ch2.i16 = load i16, i16* %0, align 2, !dbg !2644
  %24 = icmp eq i16 %ch1.i11, %ch2.i16, !dbg !2645
  br i1 %24, label %doneInner.i18, label %nextInner.i20, !dbg !2645

doneInner.i18:                                    ; preds = %innerLoop.i17
  %25 = icmp slt i32 %bytesLeft.i14, 1, !dbg !2646
  br i1 %25, label %fixP.i, label %nextOuter.i21, !dbg !2646

nextInner.i20:                                    ; preds = %innerLoop.i17
  %26 = sext i32 %qInc.i15 to i64, !dbg !2647
  %q1.i19 = getelementptr i8, i8* %q.i13, i64 %26, !dbg !2647
  %bytesLeft.1.i = sub i32 %bytesLeft.i14, %qInc.i15, !dbg !2648
  %27 = icmp sgt i32 %bytesLeft.1.i, 0, !dbg !2649
  br i1 %27, label %innerLoop.i17, label %fixP.i, !dbg !2649

nextOuter.i21:                                    ; preds = %doneInner.i18
  %28 = icmp sgt i8* %p.2.i, %str.i, !dbg !2650
  br i1 %28, label %outerLoop.i12, label %tcl.impl.trimright.exit, !dbg !2650

fixP.i:                                           ; preds = %doneInner.i18, %nextInner.i20
  %29 = sext i32 %pInc.i10 to i64, !dbg !2651
  %p.4.i = getelementptr i8, i8* %p.2.i, i64 %29, !dbg !2651
  br label %tcl.impl.trimright.exit, !dbg !2652

tcl.impl.trimright.exit:                          ; preds = %nextOuter.i21, %fixP.i
  %p.5.i = phi i8* [ %p.4.i, %fixP.i ], [ %p.2.i, %nextOuter.i21 ]
  %30 = ptrtoint i8* %p.5.i to i64
  %31 = ptrtoint i8* %str.i to i64
  %32 = sub i64 %30, %31
  %33 = trunc i64 %32 to i32, !dbg !2653
  %34 = sub i32 %length.i, %33, !dbg !2653
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %22), !dbg !2653
  br label %createTrimmedString, !dbg !2654

createTrimmedString:                              ; preds = %tcl.impl.trimright.exit, %next
  %right2 = phi i32 [ 0, %next ], [ %34, %tcl.impl.trimright.exit ]
  %35 = or i32 %right2, %left1, !dbg !2655
  %36 = icmp eq i32 %35, 0, !dbg !2655
  br i1 %36, label %returnString, label %doTrim, !dbg !2655

doTrim:                                           ; preds = %createTrimmedString
  %37 = sext i32 %left1 to i64, !dbg !2656
  %C = getelementptr i8, i8* %str.i, i64 %37, !dbg !2656
  %A = sub i32 %length.i, %left1, !dbg !2656
  %B = sub i32 %A, %right2, !dbg !2656
  %objPtr = tail call noalias nonnull %Tcl_Obj* @Tcl_NewStringObj(i8* nocapture readonly %C, i32 %B), !dbg !2656
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !2657
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !2659
  %38 = icmp eq i32 %refCount1.i, 0, !dbg !2659
  tail call void @llvm.assume(i1 %38) #5, !dbg !2659
  br label %returnString, !dbg !2660

returnString:                                     ; preds = %doTrim, %createTrimmedString, %enter
  %result = phi %Tcl_Obj* [ %stringObj, %enter ], [ %stringObj, %createTrimmedString ], [ %objPtr, %doTrim ]
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %result, i64 0, i32 0, !dbg !2661
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !2664
  %39 = add nsw i32 %refCount1.i.i, 1, !dbg !2664
  store i32 %39, i32* %refCount.i.i, align 4, !dbg !2664
  ret %Tcl_Obj* %result, !dbg !2665
}

; Function Attrs: alwaysinline
define hidden nonnull %Tcl_Obj* @tcl.strcase(%Tcl_Obj* nonnull %string, i32 %kind) local_unnamed_addr #12 !dbg !2666 {
enter:
  %lengthPtr.i = alloca i32, align 4, !dbg !2672
  %refCountPtr.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %string, i64 0, i32 0, !dbg !2674
  %refCount.i.i = load i32, i32* %refCountPtr.i.i, align 4, !dbg !2674
  %shared.i = icmp sgt i32 %refCount.i.i, 1, !dbg !2677
  br i1 %shared.i, label %duplicate, label %apply, !dbg !2678

duplicate:                                        ; preds = %enter
  %0 = bitcast i32* %lengthPtr.i to i8*, !dbg !2679
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0), !dbg !2679
  %str.i = call nonnull i8* @Tcl_GetStringFromObj(%Tcl_Obj* noalias nocapture nonnull %string, i32* noalias nocapture nonnull %lengthPtr.i) #5, !dbg !2679
  %length.i = load i32, i32* %lengthPtr.i, align 4, !dbg !2680
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0), !dbg !2681
  %objPtr = tail call noalias nonnull %Tcl_Obj* @Tcl_NewStringObj(i8* nocapture nonnull readonly %str.i, i32 %length.i), !dbg !2682
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !2683
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !2685
  %1 = icmp eq i32 %refCount1.i, 0, !dbg !2685
  tail call void @llvm.assume(i1 %1) #5, !dbg !2685
  br label %apply, !dbg !2686

apply:                                            ; preds = %duplicate, %enter
  %string1 = phi %Tcl_Obj* [ %string, %enter ], [ %objPtr, %duplicate ]
  %copied = phi i1 [ false, %enter ], [ true, %duplicate ]
  %str = tail call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %string1), !dbg !2687
  switch i32 %kind, label %title [
    i32 0, label %upper
    i32 1, label %lower
  ], !dbg !2688

upper:                                            ; preds = %apply
  %len = tail call i32 @Tcl_UtfToUpper(i8* nocapture nonnull %str), !dbg !2689
  br label %set.length, !dbg !2690

lower:                                            ; preds = %apply
  %len2 = tail call i32 @Tcl_UtfToLower(i8* nocapture nonnull %str), !dbg !2691
  br label %set.length, !dbg !2692

title:                                            ; preds = %apply
  %len3 = tail call i32 @Tcl_UtfToTitle(i8* nocapture nonnull %str), !dbg !2693
  br label %set.length, !dbg !2694

set.length:                                       ; preds = %title, %lower, %upper
  %length = phi i32 [ %len, %upper ], [ %len2, %lower ], [ %len3, %title ]
  tail call void @Tcl_SetObjLength(%Tcl_Obj* nocapture nonnull %string1, i32 %length), !dbg !2695
  br i1 %copied, label %release.internal.representation, label %done, !dbg !2696

release.internal.representation:                  ; preds = %set.length
  %typePtr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %string1, i64 0, i32 3, !dbg !2697
  %typePtr1.i = load %ObjType*, %ObjType** %typePtr.i, align 8, !dbg !2699
  %2 = icmp eq %ObjType* %typePtr1.i, null, !dbg !2700
  br i1 %2, label %done, label %check.i, !dbg !2700

check.i:                                          ; preds = %release.internal.representation
  %freeIntRepProc.ptr.i = getelementptr %ObjType, %ObjType* %typePtr1.i, i64 0, i32 1, !dbg !2701
  %freeIntRepProc.i = load void (%Tcl_Obj*)*, void (%Tcl_Obj*)** %freeIntRepProc.ptr.i, align 8, !dbg !2701
  %3 = icmp eq void (%Tcl_Obj*)* %freeIntRepProc.i, null, !dbg !2702
  br i1 %3, label %clear.i, label %free.i, !dbg !2702

free.i:                                           ; preds = %check.i
  tail call void %freeIntRepProc.i(%Tcl_Obj* nonnull %string1), !dbg !2703
  br label %clear.i, !dbg !2704

clear.i:                                          ; preds = %free.i, %check.i
  store %ObjType* null, %ObjType** %typePtr.i, align 8, !dbg !2705
  br label %done, !dbg !2706

done:                                             ; preds = %clear.i, %release.internal.representation, %set.length
  %refCount.i.i4 = getelementptr %Tcl_Obj, %Tcl_Obj* %string1, i64 0, i32 0, !dbg !2707
  %refCount1.i.i = load i32, i32* %refCount.i.i4, align 4, !dbg !2710
  %4 = add nsw i32 %refCount1.i.i, 1, !dbg !2710
  store i32 %4, i32* %refCount.i.i4, align 4, !dbg !2710
  ret %Tcl_Obj* %string1, !dbg !2711
}

; Function Attrs: alwaysinline nounwind
define hidden %INT @tcl.maptoint(%Tcl_Obj* nocapture nonnull readonly %value, %HashTable* nocapture nonnull %mapping, i32 %notThere) local_unnamed_addr #6 !dbg !2712 {
enter:
  %key = bitcast %Tcl_Obj* %value to i8*, !dbg !2719
  %offsetPtr = tail call %HashEntry* @Tcl_FindHashEntry(%HashTable* noalias nocapture nonnull %mapping, i8* noalias nocapture nonnull readonly %key), !dbg !2719
  %0 = icmp eq %HashEntry* %offsetPtr, null, !dbg !2720
  br i1 %0, label %absent, label %present, !dbg !2720

present:                                          ; preds = %enter
  %clientData.ptr = getelementptr %HashEntry, %HashEntry* %offsetPtr, i64 0, i32 3, !dbg !2721
  %1 = bitcast i8** %clientData.ptr to i64*, !dbg !2721
  %clientData1 = load i64, i64* %1, align 8, !dbg !2721
  %offset = trunc i64 %clientData1 to i32, !dbg !2721
  %2 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %offset, 1, !dbg !2722
  ret %INT %2, !dbg !2722

absent:                                           ; preds = %enter
  %3 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %notThere, 1, !dbg !2723
  ret %INT %3, !dbg !2723
}

; Function Attrs: alwaysinline nounwind
define hidden noalias nonnull %Tcl_Obj* @tcl.concatenate(i32 %len, %Tcl_Obj** nocapture nonnull readonly %ary) local_unnamed_addr #6 !dbg !2724 {
enter:
  %objPtr = tail call noalias nonnull %Tcl_Obj* @Tcl_ConcatObj(i32 %len, %Tcl_Obj** nocapture nonnull readonly %ary), !dbg !2730
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !2731
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !2733
  %0 = icmp eq i32 %refCount1.i, 0, !dbg !2733
  tail call void @llvm.assume(i1 %0) #5, !dbg !2733
  store i32 1, i32* %refCount.i, align 4, !dbg !2734
  ret %Tcl_Obj* %objPtr, !dbg !2737
}

; Function Attrs: alwaysinline
define hidden noalias %Tcl_Obj* @tcl.impl.listDupe(%Interp* noalias nocapture %interp, %Tcl_Obj* noalias nocapture nonnull %obj) local_unnamed_addr #12 !dbg !2738 {
enter:
  %tclListType = load %ObjType*, %ObjType** @tclListType, align 8, !dbg !2744, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %typePtr.ptr = getelementptr %Tcl_Obj, %Tcl_Obj* %obj, i64 0, i32 3, !dbg !2745
  %typePtr = load %ObjType*, %ObjType** %typePtr.ptr, align 8, !dbg !2745
  %0 = icmp eq %ObjType* %typePtr, %tclListType, !dbg !2746
  br i1 %0, label %ok, label %forceType, !dbg !2746

forceType:                                        ; preds = %enter
  %setFromAnyProc.ptr.i = getelementptr %ObjType, %ObjType* %tclListType, i64 0, i32 4, !dbg !2747
  %setFromAnyProc.i = load i32 (%Interp*, %Tcl_Obj*)*, i32 (%Interp*, %Tcl_Obj*)** %setFromAnyProc.ptr.i, align 8, !dbg !2747, !alias.scope !2749, !noalias !2752
  %code.i = tail call i32 %setFromAnyProc.i(%Interp* nocapture %interp, %Tcl_Obj* nocapture nonnull %obj), !dbg !2755, !noalias !2749
  %1 = icmp eq i32 %code.i, 0, !dbg !2756
  br i1 %1, label %ok, label %fail, !dbg !2756

ok:                                               ; preds = %enter, %forceType
  %objPtr = tail call noalias nonnull %Tcl_Obj* @Tcl_NewObj(), !dbg !2757
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !2758
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !2760
  %2 = icmp eq i32 %refCount1.i, 0, !dbg !2760
  tail call void @llvm.assume(i1 %2) #5, !dbg !2760
  %bytes.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 1, !dbg !2761
  %bytes1.i = load i8*, i8** %bytes.i, align 8, !dbg !2763
  %3 = icmp eq i8* %bytes1.i, null, !dbg !2764
  br i1 %3, label %TclInvalidateStringRep.exit, label %act.i, !dbg !2764

act.i:                                            ; preds = %ok
  %tclEmptyStringRep.i = load i8*, i8** @tclEmptyStringRep, align 8, !dbg !2765, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %4 = icmp eq i8* %bytes1.i, %tclEmptyStringRep.i, !dbg !2765
  br i1 %4, label %clear.i, label %free.i, !dbg !2765

free.i:                                           ; preds = %act.i
  tail call void @Tcl_Free(i8* nonnull %bytes1.i) #5, !dbg !2766
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %bytes1.i) #5, !dbg !2767
  br label %clear.i, !dbg !2768

clear.i:                                          ; preds = %free.i, %act.i
  store i8* null, i8** %bytes.i, align 8, !dbg !2769
  br label %TclInvalidateStringRep.exit, !dbg !2770

TclInvalidateStringRep.exit:                      ; preds = %ok, %clear.i
  %dupIntRepProc.ptr = getelementptr %ObjType, %ObjType* %tclListType, i64 0, i32 2, !dbg !2771
  %dupIntRepProc = load void (%Tcl_Obj*, %Tcl_Obj*)*, void (%Tcl_Obj*, %Tcl_Obj*)** %dupIntRepProc.ptr, align 8, !dbg !2771
  tail call void %dupIntRepProc(%Tcl_Obj* nocapture nonnull %obj, %Tcl_Obj* nocapture nonnull %objPtr), !dbg !2772
  ret %Tcl_Obj* %objPtr, !dbg !2773

fail:                                             ; preds = %forceType
  ret %Tcl_Obj* null, !dbg !2774
}

; Function Attrs: alwaysinline nounwind
define hidden noalias nonnull %Tcl_Obj* @tcl.list.create(i32 %objc, %Tcl_Obj** nocapture nonnull readonly %objv) local_unnamed_addr #6 !dbg !2775 {
enter:
  %objPtr = tail call noalias nonnull %Tcl_Obj* @Tcl_NewListObj(i32 %objc, %Tcl_Obj** nocapture nonnull readonly %objv), !dbg !2779
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !2780
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !2782
  %0 = icmp eq i32 %refCount1.i, 0, !dbg !2782
  tail call void @llvm.assume(i1 %0) #5, !dbg !2782
  store i32 1, i32* %refCount.i, align 4, !dbg !2783
  ret %Tcl_Obj* %objPtr, !dbg !2786
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, %INT } @tcl.list.length(%Tcl_Obj* noalias nocapture nonnull %list, i32* noalias nocapture nonnull %ecvar) local_unnamed_addr #6 !dbg !2787 {
enter:
  %length = alloca i32, align 4, !dbg !2795
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !2796, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %code = call i32 @Tcl_ListObjLength(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %list, i32* noalias nocapture nonnull %length), !dbg !2797
  %0 = icmp eq i32 %code, 0, !dbg !2798
  br i1 %0, label %ok, label %fail, !dbg !2798

ok:                                               ; preds = %enter
  %length1 = load i32, i32* %length, align 4, !dbg !2799
  %1 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %length1, 1, !dbg !2799
  %2 = insertvalue { i32, %INT } { i32 0, %INT undef }, %INT %1, 1, !dbg !2799
  ret { i32, %INT } %2, !dbg !2799

fail:                                             ; preds = %enter
  store i32 1, i32* %ecvar, align 4, !dbg !2800
  ret { i32, %INT } { i32 1, %INT undef }, !dbg !2801
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, %Tcl_Obj* } @tcl.list.verify(%Tcl_Obj* noalias nonnull %value, i32* noalias nocapture nonnull %ecvar) local_unnamed_addr #6 !dbg !2802 {
enter:
  %length = alloca i32, align 4, !dbg !2808
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !2809, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %code = call i32 @Tcl_ListObjLength(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %value, i32* noalias nocapture nonnull %length), !dbg !2810
  %0 = icmp eq i32 %code, 0, !dbg !2811
  br i1 %0, label %ok, label %fail, !dbg !2811

ok:                                               ; preds = %enter
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value, i64 0, i32 0, !dbg !2812
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !2814
  %1 = add nsw i32 %refCount1.i, 1, !dbg !2814
  store i32 %1, i32* %refCount.i, align 4, !dbg !2814
  %2 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %value, 1, !dbg !2815
  ret { i32, %Tcl_Obj* } %2, !dbg !2815

fail:                                             ; preds = %enter
  store i32 1, i32* %ecvar, align 4, !dbg !2816
  ret { i32, %Tcl_Obj* } { i32 1, %Tcl_Obj* undef }, !dbg !2817
}

; Function Attrs: alwaysinline
define hidden { i32, %Tcl_Obj* } @tcl.list.append(%Tcl_Obj* nonnull %list, %Tcl_Obj* nonnull %value, i32* noalias nocapture nonnull %ecvar) local_unnamed_addr #12 !dbg !2818 {
enter:
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !2823, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %list, i64 0, i32 0, !dbg !2824
  %refCount.i.i = load i32, i32* %refCountPtr.i.i, align 4, !dbg !2824
  %shared.i = icmp sgt i32 %refCount.i.i, 1, !dbg !2827
  br i1 %shared.i, label %shared.duplicate, label %unshared, !dbg !2828

shared.duplicate:                                 ; preds = %enter
  %tclListType.i = load %ObjType*, %ObjType** @tclListType, align 8, !dbg !2829, !invariant.load !3, !noalias !2831, !nonnull !3, !dereferenceable !1051
  %typePtr.ptr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %list, i64 0, i32 3, !dbg !2835
  %typePtr.i = load %ObjType*, %ObjType** %typePtr.ptr.i, align 8, !dbg !2835, !alias.scope !2836, !noalias !2837
  %0 = icmp eq %ObjType* %typePtr.i, %tclListType.i, !dbg !2838
  br i1 %0, label %ok.i, label %forceType.i, !dbg !2838

forceType.i:                                      ; preds = %shared.duplicate
  %setFromAnyProc.ptr.i.i = getelementptr %ObjType, %ObjType* %tclListType.i, i64 0, i32 4, !dbg !2839
  %setFromAnyProc.i.i = load i32 (%Interp*, %Tcl_Obj*)*, i32 (%Interp*, %Tcl_Obj*)** %setFromAnyProc.ptr.i.i, align 8, !dbg !2839, !alias.scope !2841, !noalias !2844
  %code.i.i = tail call i32 %setFromAnyProc.i.i(%Interp* nocapture nonnull %interp, %Tcl_Obj* nocapture nonnull %list), !dbg !2847, !noalias !2841
  %1 = icmp eq i32 %code.i.i, 0, !dbg !2848
  br i1 %1, label %ok.i, label %error, !dbg !2848

ok.i:                                             ; preds = %forceType.i, %shared.duplicate
  %objPtr.i = tail call noalias nonnull %Tcl_Obj* @Tcl_NewObj(), !dbg !2849, !noalias !2831
  %refCount.i.i11 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr.i, i64 0, i32 0, !dbg !2850
  %refCount1.i.i12 = load i32, i32* %refCount.i.i11, align 4, !dbg !2852, !noalias !2831
  %2 = icmp eq i32 %refCount1.i.i12, 0, !dbg !2852
  tail call void @llvm.assume(i1 %2) #5, !dbg !2852, !noalias !2831
  %bytes.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr.i, i64 0, i32 1, !dbg !2853
  %bytes1.i.i = load i8*, i8** %bytes.i.i, align 8, !dbg !2855, !noalias !2831
  %3 = icmp eq i8* %bytes1.i.i, null, !dbg !2856
  br i1 %3, label %shared, label %act.i.i, !dbg !2856

act.i.i:                                          ; preds = %ok.i
  %tclEmptyStringRep.i.i = load i8*, i8** @tclEmptyStringRep, align 8, !dbg !2857, !invariant.load !3, !noalias !2831, !nonnull !3, !dereferenceable !1051
  %4 = icmp eq i8* %bytes1.i.i, %tclEmptyStringRep.i.i, !dbg !2857
  br i1 %4, label %clear.i.i, label %free.i.i, !dbg !2857

free.i.i:                                         ; preds = %act.i.i
  tail call void @Tcl_Free(i8* nonnull %bytes1.i.i) #5, !dbg !2858, !noalias !2831
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %bytes1.i.i) #5, !dbg !2859, !noalias !2831
  br label %clear.i.i, !dbg !2860

clear.i.i:                                        ; preds = %free.i.i, %act.i.i
  store i8* null, i8** %bytes.i.i, align 8, !dbg !2861, !noalias !2831
  br label %shared, !dbg !2862

shared:                                           ; preds = %clear.i.i, %ok.i
  %dupIntRepProc.ptr.i = getelementptr %ObjType, %ObjType* %tclListType.i, i64 0, i32 2, !dbg !2863
  %dupIntRepProc.i = load void (%Tcl_Obj*, %Tcl_Obj*)*, void (%Tcl_Obj*, %Tcl_Obj*)** %dupIntRepProc.ptr.i, align 8, !dbg !2863, !noalias !2831
  tail call void %dupIntRepProc.i(%Tcl_Obj* nocapture nonnull %list, %Tcl_Obj* nocapture nonnull %objPtr.i), !dbg !2864, !noalias !2837
  %code = tail call i32 @Tcl_ListObjAppendElement(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %objPtr.i, %Tcl_Obj* noalias nonnull %value), !dbg !2865
  br label %return, !dbg !2866

unshared:                                         ; preds = %enter
  %code2 = tail call i32 @Tcl_ListObjAppendElement(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %list, %Tcl_Obj* noalias nonnull %value), !dbg !2867
  %5 = icmp eq i32 %code2, 0, !dbg !2868
  br i1 %5, label %return, label %error, !dbg !2868

return:                                           ; preds = %unshared, %shared
  %list3 = phi %Tcl_Obj* [ %objPtr.i, %shared ], [ %list, %unshared ]
  %bytes.i = getelementptr %Tcl_Obj, %Tcl_Obj* %list3, i64 0, i32 1, !dbg !2869
  %bytes1.i = load i8*, i8** %bytes.i, align 8, !dbg !2871
  %6 = icmp eq i8* %bytes1.i, null, !dbg !2872
  br i1 %6, label %TclInvalidateStringRep.exit, label %act.i, !dbg !2872

act.i:                                            ; preds = %return
  %tclEmptyStringRep.i = load i8*, i8** @tclEmptyStringRep, align 8, !dbg !2873, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %7 = icmp eq i8* %bytes1.i, %tclEmptyStringRep.i, !dbg !2873
  br i1 %7, label %clear.i, label %free.i, !dbg !2873

free.i:                                           ; preds = %act.i
  tail call void @Tcl_Free(i8* nonnull %bytes1.i) #5, !dbg !2874
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %bytes1.i) #5, !dbg !2875
  br label %clear.i, !dbg !2876

clear.i:                                          ; preds = %free.i, %act.i
  store i8* null, i8** %bytes.i, align 8, !dbg !2877
  br label %TclInvalidateStringRep.exit, !dbg !2878

TclInvalidateStringRep.exit:                      ; preds = %return, %clear.i
  %refCount.i.i9 = getelementptr %Tcl_Obj, %Tcl_Obj* %list3, i64 0, i32 0, !dbg !2879
  %refCount1.i.i10 = load i32, i32* %refCount.i.i9, align 4, !dbg !2882
  %8 = add nsw i32 %refCount1.i.i10, 1, !dbg !2882
  store i32 %8, i32* %refCount.i.i9, align 4, !dbg !2882
  %refCountPtr.i.i6 = getelementptr %Tcl_Obj, %Tcl_Obj* %value, i64 0, i32 0, !dbg !2883
  %refCount.i.i7 = load i32, i32* %refCountPtr.i.i6, align 4, !dbg !2883
  %shared.i8 = icmp sgt i32 %refCount.i.i7, 1, !dbg !2886
  br i1 %shared.i8, label %exit, label %add.extra.reference.to.value, !dbg !2887

add.extra.reference.to.value:                     ; preds = %TclInvalidateStringRep.exit
  %9 = add nsw i32 %refCount.i.i7, 1, !dbg !2888
  store i32 %9, i32* %refCountPtr.i.i6, align 4, !dbg !2888
  br label %exit, !dbg !2891

exit:                                             ; preds = %add.extra.reference.to.value, %TclInvalidateStringRep.exit
  %10 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %list3, 1, !dbg !2892
  ret { i32, %Tcl_Obj* } %10, !dbg !2892

error:                                            ; preds = %forceType.i, %unshared
  store i32 1, i32* %ecvar, align 4, !dbg !2893
  ret { i32, %Tcl_Obj* } { i32 1, %Tcl_Obj* undef }, !dbg !2894
}

; Function Attrs: alwaysinline
define hidden { i32, %Tcl_Obj* } @tcl.list.concat(%Tcl_Obj* nonnull %list, %Tcl_Obj* nocapture nonnull %value, i32* noalias nocapture nonnull %ecvar) local_unnamed_addr #12 !dbg !2895 {
enter:
  %objc = alloca i32, align 4, !dbg !2900
  %objv = alloca %Tcl_Obj**, align 8, !dbg !2901
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !2902, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %code = call i32 @Tcl_ListObjLength(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %list, i32* noalias nocapture nonnull %objc), !dbg !2903
  %0 = icmp eq i32 %code, 0, !dbg !2904
  br i1 %0, label %check.value.for.listness, label %error, !dbg !2904

check.value.for.listness:                         ; preds = %enter
  %len = load i32, i32* %objc, align 4, !dbg !2905
  %code1 = call i32 @Tcl_ListObjGetElements(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %value, i32* noalias nocapture nonnull %objc, %Tcl_Obj*** noalias nocapture nonnull %objv), !dbg !2906
  %1 = icmp eq i32 %code1, 0, !dbg !2907
  br i1 %1, label %check.whether.to.duplicate, label %error, !dbg !2907

check.whether.to.duplicate:                       ; preds = %check.value.for.listness
  %refCountPtr.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %list, i64 0, i32 0, !dbg !2908
  %refCount.i.i = load i32, i32* %refCountPtr.i.i, align 4, !dbg !2908
  %shared.i = icmp sgt i32 %refCount.i.i, 1, !dbg !2911
  br i1 %shared.i, label %duplicate, label %concat, !dbg !2912

duplicate:                                        ; preds = %check.whether.to.duplicate
  %tclListType.i = load %ObjType*, %ObjType** @tclListType, align 8, !dbg !2913, !invariant.load !3, !noalias !2915, !nonnull !3, !dereferenceable !1051
  %typePtr.ptr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %list, i64 0, i32 3, !dbg !2919
  %typePtr.i = load %ObjType*, %ObjType** %typePtr.ptr.i, align 8, !dbg !2919, !alias.scope !2920, !noalias !2921
  %2 = icmp eq %ObjType* %typePtr.i, %tclListType.i, !dbg !2922
  br i1 %2, label %ok.i, label %forceType.i, !dbg !2922

forceType.i:                                      ; preds = %duplicate
  %setFromAnyProc.ptr.i.i = getelementptr %ObjType, %ObjType* %tclListType.i, i64 0, i32 4, !dbg !2923
  %setFromAnyProc.i.i = load i32 (%Interp*, %Tcl_Obj*)*, i32 (%Interp*, %Tcl_Obj*)** %setFromAnyProc.ptr.i.i, align 8, !dbg !2923, !alias.scope !2925, !noalias !2928
  %code.i.i = tail call i32 %setFromAnyProc.i.i(%Interp* nocapture null, %Tcl_Obj* nocapture nonnull %list), !dbg !2931, !noalias !2925
  %3 = icmp eq i32 %code.i.i, 0, !dbg !2932
  br i1 %3, label %ok.i, label %concat, !dbg !2932

ok.i:                                             ; preds = %forceType.i, %duplicate
  %objPtr.i = tail call noalias nonnull %Tcl_Obj* @Tcl_NewObj(), !dbg !2933, !noalias !2915
  %refCount.i.i7 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr.i, i64 0, i32 0, !dbg !2934
  %refCount1.i.i8 = load i32, i32* %refCount.i.i7, align 4, !dbg !2936, !noalias !2915
  %4 = icmp eq i32 %refCount1.i.i8, 0, !dbg !2936
  tail call void @llvm.assume(i1 %4) #5, !dbg !2936, !noalias !2915
  %bytes.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr.i, i64 0, i32 1, !dbg !2937
  %bytes1.i.i = load i8*, i8** %bytes.i.i, align 8, !dbg !2939, !noalias !2915
  %5 = icmp eq i8* %bytes1.i.i, null, !dbg !2940
  br i1 %5, label %TclInvalidateStringRep.exit.i, label %act.i.i, !dbg !2940

act.i.i:                                          ; preds = %ok.i
  %tclEmptyStringRep.i.i = load i8*, i8** @tclEmptyStringRep, align 8, !dbg !2941, !invariant.load !3, !noalias !2915, !nonnull !3, !dereferenceable !1051
  %6 = icmp eq i8* %bytes1.i.i, %tclEmptyStringRep.i.i, !dbg !2941
  br i1 %6, label %clear.i.i, label %free.i.i, !dbg !2941

free.i.i:                                         ; preds = %act.i.i
  tail call void @Tcl_Free(i8* nonnull %bytes1.i.i) #5, !dbg !2942, !noalias !2915
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %bytes1.i.i) #5, !dbg !2943, !noalias !2915
  br label %clear.i.i, !dbg !2944

clear.i.i:                                        ; preds = %free.i.i, %act.i.i
  store i8* null, i8** %bytes.i.i, align 8, !dbg !2945, !noalias !2915
  br label %TclInvalidateStringRep.exit.i, !dbg !2946

TclInvalidateStringRep.exit.i:                    ; preds = %clear.i.i, %ok.i
  %dupIntRepProc.ptr.i = getelementptr %ObjType, %ObjType* %tclListType.i, i64 0, i32 2, !dbg !2947
  %dupIntRepProc.i = load void (%Tcl_Obj*, %Tcl_Obj*)*, void (%Tcl_Obj*, %Tcl_Obj*)** %dupIntRepProc.ptr.i, align 8, !dbg !2947, !noalias !2915
  tail call void %dupIntRepProc.i(%Tcl_Obj* nocapture nonnull %list, %Tcl_Obj* nocapture nonnull %objPtr.i), !dbg !2948, !noalias !2921
  br label %concat, !dbg !2949

concat:                                           ; preds = %TclInvalidateStringRep.exit.i, %forceType.i, %check.whether.to.duplicate
  %list2 = phi %Tcl_Obj* [ %list, %check.whether.to.duplicate ], [ %objPtr.i, %TclInvalidateStringRep.exit.i ], [ null, %forceType.i ]
  %objc3 = load i32, i32* %objc, align 4, !dbg !2950
  %objv4 = load %Tcl_Obj**, %Tcl_Obj*** %objv, align 8, !dbg !2951
  %code5 = tail call i32 @Tcl_ListObjReplace(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %list2, i32 %len, i32 0, i32 %objc3, %Tcl_Obj** noalias nocapture nonnull readonly %objv4), !dbg !2952
  %refCount.i.i6 = getelementptr %Tcl_Obj, %Tcl_Obj* %list2, i64 0, i32 0, !dbg !2953
  %refCount1.i.i = load i32, i32* %refCount.i.i6, align 4, !dbg !2956
  %7 = add nsw i32 %refCount1.i.i, 1, !dbg !2956
  store i32 %7, i32* %refCount.i.i6, align 4, !dbg !2956
  %8 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %list2, 1, !dbg !2957
  ret { i32, %Tcl_Obj* } %8, !dbg !2957

error:                                            ; preds = %check.value.for.listness, %enter
  store i32 1, i32* %ecvar, align 4, !dbg !2958
  ret { i32, %Tcl_Obj* } { i32 1, %Tcl_Obj* undef }, !dbg !2959
}

; Function Attrs: alwaysinline
define hidden { i32, %Tcl_Obj* } @tcl.list.index(%Tcl_Obj* noalias nonnull %list, i32 %idxc, %Tcl_Obj** noalias nocapture nonnull readonly %idxv, i32* noalias nocapture nonnull %ecvar) local_unnamed_addr #12 !dbg !2960 {
enter:
  %index.i25 = alloca i32, align 4, !dbg !2968
  %index.i = alloca i32, align 4, !dbg !2970
  %"&listLen" = alloca i32, align 4, !dbg !2972
  %"&elemPtrs" = alloca %Tcl_Obj**, align 8, !dbg !2973
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !2974, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %list, i64 0, i32 0, !dbg !2975
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !2978
  %0 = add nsw i32 %refCount1.i.i, 1, !dbg !2978
  store i32 %0, i32* %refCount.i.i, align 4, !dbg !2978
  %1 = icmp sgt i32 %idxc, 0, !dbg !2979
  br i1 %1, label %loop.lr.ph, label %done, !dbg !2979

loop.lr.ph:                                       ; preds = %enter
  %tclListType.i = load %ObjType*, %ObjType** @tclListType, align 8, !dbg !2980, !invariant.load !3, !noalias !2982, !nonnull !3, !dereferenceable !1051
  %setFromAnyProc.ptr.i.i = getelementptr %ObjType, %ObjType* %tclListType.i, i64 0, i32 4, !dbg !2986
  %tclEmptyStringRep.i.i = load i8*, i8** @tclEmptyStringRep, align 8, !dbg !2988
  %dupIntRepProc.ptr.i = getelementptr %ObjType, %ObjType* %tclListType.i, i64 0, i32 2, !dbg !2980
  %2 = bitcast i32* %index.i to i8*, !dbg !2990
  %tclIntType.i = load %ObjType*, %ObjType** @tclIntType, align 8, !dbg !2990
  %3 = bitcast i32* %index.i25 to i8*, !dbg !2991
  br label %loop, !dbg !2979

loop:                                             ; preds = %loop.lr.ph, %tcl.dropReference.exit
  %"&i.046" = phi i32 [ 0, %loop.lr.ph ], [ %45, %tcl.dropReference.exit ]
  %"&list.045" = phi %Tcl_Obj* [ %list, %loop.lr.ph ], [ %"&list.1", %tcl.dropReference.exit ]
  store i32 0, i32* %"&listLen", align 4, !dbg !2992
  store %Tcl_Obj** null, %Tcl_Obj*** %"&elemPtrs", align 8, !dbg !2993
  %typePtr.ptr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %"&list.045", i64 0, i32 3, !dbg !2994
  %typePtr.i = load %ObjType*, %ObjType** %typePtr.ptr.i, align 8, !dbg !2994, !alias.scope !2995, !noalias !2996
  %4 = icmp eq %ObjType* %typePtr.i, %tclListType.i, !dbg !2997
  br i1 %4, label %ok.i, label %forceType.i, !dbg !2997

forceType.i:                                      ; preds = %loop
  %setFromAnyProc.i.i = load i32 (%Interp*, %Tcl_Obj*)*, i32 (%Interp*, %Tcl_Obj*)** %setFromAnyProc.ptr.i.i, align 8, !dbg !2998, !alias.scope !2999, !noalias !3002
  %code.i.i = tail call i32 %setFromAnyProc.i.i(%Interp* nocapture nonnull %interp, %Tcl_Obj* nocapture nonnull %"&list.045"), !dbg !3005, !noalias !2999
  %5 = icmp eq i32 %code.i.i, 0, !dbg !3006
  br i1 %5, label %ok.i, label %tcl.impl.listDupe.exit, !dbg !3006

ok.i:                                             ; preds = %forceType.i, %loop
  %objPtr.i = tail call noalias nonnull %Tcl_Obj* @Tcl_NewObj(), !dbg !3007, !noalias !2982
  %refCount.i.i11 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr.i, i64 0, i32 0, !dbg !3008
  %refCount1.i.i12 = load i32, i32* %refCount.i.i11, align 4, !dbg !3010, !noalias !2982
  %6 = icmp eq i32 %refCount1.i.i12, 0, !dbg !3010
  tail call void @llvm.assume(i1 %6) #5, !dbg !3010, !noalias !2982
  %bytes.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr.i, i64 0, i32 1, !dbg !3011
  %bytes1.i.i = load i8*, i8** %bytes.i.i, align 8, !dbg !3012, !noalias !2982
  %7 = icmp eq i8* %bytes1.i.i, null, !dbg !3013
  br i1 %7, label %TclInvalidateStringRep.exit.i, label %act.i.i, !dbg !3013

act.i.i:                                          ; preds = %ok.i
  %8 = icmp eq i8* %bytes1.i.i, %tclEmptyStringRep.i.i, !dbg !3014
  br i1 %8, label %clear.i.i, label %free.i.i, !dbg !3014

free.i.i:                                         ; preds = %act.i.i
  tail call void @Tcl_Free(i8* nonnull %bytes1.i.i) #5, !dbg !3015, !noalias !2982
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %bytes1.i.i) #5, !dbg !3016, !noalias !2982
  br label %clear.i.i, !dbg !3017

clear.i.i:                                        ; preds = %free.i.i, %act.i.i
  store i8* null, i8** %bytes.i.i, align 8, !dbg !3018, !noalias !2982
  br label %TclInvalidateStringRep.exit.i, !dbg !3019

TclInvalidateStringRep.exit.i:                    ; preds = %clear.i.i, %ok.i
  %dupIntRepProc.i = load void (%Tcl_Obj*, %Tcl_Obj*)*, void (%Tcl_Obj*, %Tcl_Obj*)** %dupIntRepProc.ptr.i, align 8, !dbg !3020, !noalias !2982
  tail call void %dupIntRepProc.i(%Tcl_Obj* nocapture nonnull %"&list.045", %Tcl_Obj* nocapture nonnull %objPtr.i), !dbg !3021, !noalias !2996
  br label %tcl.impl.listDupe.exit, !dbg !3022

tcl.impl.listDupe.exit:                           ; preds = %forceType.i, %TclInvalidateStringRep.exit.i
  %sublistCopy13 = phi %Tcl_Obj* [ %objPtr.i, %TclInvalidateStringRep.exit.i ], [ null, %forceType.i ]
  %refCount.i.i14 = getelementptr %Tcl_Obj, %Tcl_Obj* %"&list.045", i64 0, i32 0, !dbg !3023
  %refCount1.i.i15 = load i32, i32* %refCount.i.i14, align 4, !dbg !3026
  %9 = icmp slt i32 %refCount1.i.i15, 2, !dbg !3027
  br i1 %9, label %freeObject.i.i16, label %leave.i.i17, !dbg !3027

freeObject.i.i16:                                 ; preds = %tcl.impl.listDupe.exit
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %"&list.045") #5, !dbg !3028
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %"&list.045") #5, !dbg !3029
  br label %tcl.dropReference.exit18, !dbg !3030

leave.i.i17:                                      ; preds = %tcl.impl.listDupe.exit
  %10 = add nsw i32 %refCount1.i.i15, -1, !dbg !3026
  store i32 %10, i32* %refCount.i.i14, align 4, !dbg !3031
  br label %tcl.dropReference.exit18, !dbg !3032

tcl.dropReference.exit18:                         ; preds = %freeObject.i.i16, %leave.i.i17
  %11 = icmp eq %Tcl_Obj* %sublistCopy13, null, !dbg !3033
  br i1 %11, label %error, label %loop2, !dbg !3033

loop2:                                            ; preds = %tcl.dropReference.exit18
  %code = call i32 @Tcl_ListObjGetElements(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %sublistCopy13, i32* noalias nocapture nonnull %"&listLen", %Tcl_Obj*** noalias nocapture nonnull %"&elemPtrs"), !dbg !3034
  %listLen = load i32, i32* %"&listLen", align 4, !dbg !3035
  %elemPtrs = load %Tcl_Obj**, %Tcl_Obj*** %"&elemPtrs", align 8, !dbg !3036
  %12 = sext i32 %"&i.046" to i64, !dbg !3037
  %13 = getelementptr %Tcl_Obj*, %Tcl_Obj** %idxv, i64 %12, !dbg !3037
  %14 = load %Tcl_Obj*, %Tcl_Obj** %13, align 8, !dbg !3037
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2), !dbg !3038
  %typePtr.ptr.i19 = getelementptr %Tcl_Obj, %Tcl_Obj* %14, i64 0, i32 3, !dbg !3038
  %typePtr.i20 = load %ObjType*, %ObjType** %typePtr.ptr.i19, align 8, !dbg !3038, !alias.scope !3039, !noalias !3042
  %15 = icmp eq %ObjType* %typePtr.i20, %tclIntType.i, !dbg !3038
  br i1 %15, label %direct.i, label %call.i, !dbg !3038

direct.i:                                         ; preds = %loop2
  %internalRep.i = getelementptr %Tcl_Obj, %Tcl_Obj* %14, i64 0, i32 4, !dbg !3044
  %16 = bitcast %InternalRepresentation* %internalRep.i to i32*, !dbg !3045
  %longValue.i = load i32, i32* %16, align 4, !dbg !3045, !alias.scope !3039, !noalias !3042
  %17 = insertvalue { i1, i32 } { i1 true, i32 undef }, i32 %longValue.i, 1, !dbg !3045
  br label %tcl.impl.getIndex.exit, !dbg !3045

call.i:                                           ; preds = %loop2
  %18 = add i32 %listLen, -1, !dbg !3037
  %code.i = call i32 @TclGetIntForIndex(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %14, i32 %18, i32* noalias nocapture nonnull %index.i) #5, !dbg !3046
  %19 = icmp eq i32 %code.i, 0, !dbg !3047
  %20 = insertvalue { i1, i32 } undef, i1 %19, 0, !dbg !3047
  %index1.i = load i32, i32* %index.i, align 4, !dbg !3048, !noalias !3049
  %21 = insertvalue { i1, i32 } %20, i32 %index1.i, 1, !dbg !3048
  br label %tcl.impl.getIndex.exit, !dbg !3048

tcl.impl.getIndex.exit:                           ; preds = %call.i, %direct.i
  %22 = phi { i1, i32 } [ %17, %direct.i ], [ %21, %call.i ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2), !dbg !2990
  %getIndex.index = extractvalue { i1, i32 } %22, 1, !dbg !3037
  %getIndex.result = extractvalue { i1, i32 } %22, 0, !dbg !3037
  br i1 %getIndex.result, label %loopIndex, label %loopNext, !dbg !3037

loopIndex:                                        ; preds = %tcl.impl.getIndex.exit
  %23 = icmp sgt i32 %getIndex.index, -1, !dbg !3050
  %24 = icmp slt i32 %getIndex.index, %listLen, !dbg !3050
  %25 = and i1 %23, %24, !dbg !3050
  br i1 %25, label %loopIndexInRange, label %loopIndexOutOfRange, !dbg !3050

loopIndexInRange:                                 ; preds = %loopIndex
  %26 = sext i32 %getIndex.index to i64, !dbg !3051
  %27 = getelementptr %Tcl_Obj*, %Tcl_Obj** %elemPtrs, i64 %26, !dbg !3051
  %list2 = load %Tcl_Obj*, %Tcl_Obj** %27, align 8, !dbg !3051
  %refCount.i.i21 = getelementptr %Tcl_Obj, %Tcl_Obj* %list2, i64 0, i32 0, !dbg !3052
  %refCount1.i.i22 = load i32, i32* %refCount.i.i21, align 4, !dbg !3055
  %28 = add nsw i32 %refCount1.i.i22, 1, !dbg !3055
  store i32 %28, i32* %refCount.i.i21, align 4, !dbg !3055
  br label %loopNext, !dbg !3056

loopIndexOutOfRange:                              ; preds = %loopIndex, %tcl.impl.getIndex.exit35
  %"&i.1" = phi i32 [ %i4, %tcl.impl.getIndex.exit35 ], [ %"&i.046", %loopIndex ], !dbg !3057
  %i4 = add nsw i32 %"&i.1", 1, !dbg !3058
  %29 = icmp slt i32 %i4, %idxc, !dbg !3059
  br i1 %29, label %loopIndexValidityCheck, label %loopEmpty, !dbg !3059

loopEmpty:                                        ; preds = %loopIndexOutOfRange
  %objPtr = tail call noalias nonnull %Tcl_Obj* @Tcl_NewObj(), !dbg !3060
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !3061
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !3063
  %30 = icmp eq i32 %refCount1.i, 0, !dbg !3063
  tail call void @llvm.assume(i1 %30) #5, !dbg !3063
  store i32 1, i32* %refCount.i, align 4, !dbg !3064
  br label %loopNext, !dbg !3067

loopIndexValidityCheck:                           ; preds = %loopIndexOutOfRange
  %31 = sext i32 %i4 to i64, !dbg !3068
  %32 = getelementptr %Tcl_Obj*, %Tcl_Obj** %idxv, i64 %31, !dbg !3068
  %33 = load %Tcl_Obj*, %Tcl_Obj** %32, align 8, !dbg !3068
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3), !dbg !3069
  %typePtr.ptr.i26 = getelementptr %Tcl_Obj, %Tcl_Obj* %33, i64 0, i32 3, !dbg !3069
  %typePtr.i27 = load %ObjType*, %ObjType** %typePtr.ptr.i26, align 8, !dbg !3069, !alias.scope !3070, !noalias !3073
  %34 = icmp eq %ObjType* %typePtr.i27, %tclIntType.i, !dbg !3069
  br i1 %34, label %direct.i31, label %call.i34, !dbg !3069

direct.i31:                                       ; preds = %loopIndexValidityCheck
  %internalRep.i29 = getelementptr %Tcl_Obj, %Tcl_Obj* %33, i64 0, i32 4, !dbg !3075
  %35 = bitcast %InternalRepresentation* %internalRep.i29 to i32*, !dbg !3076
  %longValue.i30 = load i32, i32* %35, align 4, !dbg !3076, !alias.scope !3070, !noalias !3073
  %36 = insertvalue { i1, i32 } { i1 true, i32 undef }, i32 %longValue.i30, 1, !dbg !3076
  br label %tcl.impl.getIndex.exit35, !dbg !3076

call.i34:                                         ; preds = %loopIndexValidityCheck
  %code.i32 = call i32 @TclGetIntForIndex(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %33, i32 -1, i32* noalias nocapture nonnull %index.i25) #5, !dbg !3077
  %37 = icmp eq i32 %code.i32, 0, !dbg !3078
  %38 = insertvalue { i1, i32 } undef, i1 %37, 0, !dbg !3078
  %index1.i33 = load i32, i32* %index.i25, align 4, !dbg !3079, !noalias !3080
  %39 = insertvalue { i1, i32 } %38, i32 %index1.i33, 1, !dbg !3079
  br label %tcl.impl.getIndex.exit35, !dbg !3079

tcl.impl.getIndex.exit35:                         ; preds = %call.i34, %direct.i31
  %40 = phi { i1, i32 } [ %36, %direct.i31 ], [ %39, %call.i34 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3), !dbg !2991
  %getIndex.result6 = extractvalue { i1, i32 } %40, 0, !dbg !3068
  br i1 %getIndex.result6, label %loopIndexOutOfRange, label %loopIndexBad, !dbg !3068

loopIndexBad:                                     ; preds = %tcl.impl.getIndex.exit35
  %refCount.i.i36 = getelementptr %Tcl_Obj, %Tcl_Obj* %sublistCopy13, i64 0, i32 0, !dbg !3081
  %refCount1.i.i37 = load i32, i32* %refCount.i.i36, align 4, !dbg !3084
  %41 = icmp slt i32 %refCount1.i.i37, 2, !dbg !3085
  br i1 %41, label %freeObject.i.i38, label %leave.i.i39, !dbg !3085

freeObject.i.i38:                                 ; preds = %loopIndexBad
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %sublistCopy13) #5, !dbg !3086
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %sublistCopy13) #5, !dbg !3087
  br label %error, !dbg !3088

leave.i.i39:                                      ; preds = %loopIndexBad
  %42 = add nsw i32 %refCount1.i.i37, -1, !dbg !3084
  store i32 %42, i32* %refCount.i.i36, align 4, !dbg !3089
  br label %error, !dbg !3090

loopNext:                                         ; preds = %loopEmpty, %loopIndexInRange, %tcl.impl.getIndex.exit
  %"&list.1" = phi %Tcl_Obj* [ %list2, %loopIndexInRange ], [ %objPtr, %loopEmpty ], [ null, %tcl.impl.getIndex.exit ], !dbg !3057
  %"&i.2" = phi i32 [ %"&i.046", %loopIndexInRange ], [ %i4, %loopEmpty ], [ %"&i.046", %tcl.impl.getIndex.exit ], !dbg !3057
  %refCount.i.i9 = getelementptr %Tcl_Obj, %Tcl_Obj* %sublistCopy13, i64 0, i32 0, !dbg !3091
  %refCount1.i.i10 = load i32, i32* %refCount.i.i9, align 4, !dbg !3094
  %43 = icmp slt i32 %refCount1.i.i10, 2, !dbg !3095
  br i1 %43, label %freeObject.i.i, label %leave.i.i, !dbg !3095

freeObject.i.i:                                   ; preds = %loopNext
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %sublistCopy13) #5, !dbg !3096
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %sublistCopy13) #5, !dbg !3097
  br label %tcl.dropReference.exit, !dbg !3098

leave.i.i:                                        ; preds = %loopNext
  %44 = add nsw i32 %refCount1.i.i10, -1, !dbg !3094
  store i32 %44, i32* %refCount.i.i9, align 4, !dbg !3099
  br label %tcl.dropReference.exit, !dbg !3100

tcl.dropReference.exit:                           ; preds = %freeObject.i.i, %leave.i.i
  %45 = add i32 %"&i.2", 1, !dbg !3101
  %46 = icmp slt i32 %45, %idxc, !dbg !2979
  %47 = icmp ne %Tcl_Obj* %"&list.1", null, !dbg !2979
  %48 = and i1 %47, %46, !dbg !2979
  br i1 %48, label %loop, label %done, !dbg !2979

done:                                             ; preds = %tcl.dropReference.exit, %enter
  %"&list.0.lcssa" = phi %Tcl_Obj* [ %list, %enter ], [ %"&list.1", %tcl.dropReference.exit ], !dbg !3057
  %49 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %"&list.0.lcssa", 1, !dbg !3102
  ret { i32, %Tcl_Obj* } %49, !dbg !3102

error:                                            ; preds = %tcl.dropReference.exit18, %leave.i.i39, %freeObject.i.i38
  store i32 1, i32* %ecvar, align 4, !dbg !3103
  ret { i32, %Tcl_Obj* } { i32 1, %Tcl_Obj* undef }, !dbg !3104
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, %Tcl_Obj* } @tcl.list.index1(%Tcl_Obj* noalias nocapture nonnull %list, %INT %index, i32* noalias nocapture nonnull %ecvar) local_unnamed_addr #6 !dbg !3105 {
enter:
  %objc = alloca i32, align 4, !dbg !3112
  %objv = alloca %Tcl_Obj**, align 8, !dbg !3113
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !3114, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %0 = extractvalue %INT %index, 0, !dbg !3115
  %1 = extractvalue %INT %index, 1, !dbg !3115
  %2 = extractvalue %INT %index, 2, !dbg !3115
  %3 = trunc i64 %2 to i32, !dbg !3115
  %4 = select i1 %0, i32 %3, i32 %1, !dbg !3115
  %code = call i32 @Tcl_ListObjGetElements(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %list, i32* noalias nocapture nonnull %objc, %Tcl_Obj*** noalias nocapture nonnull %objv), !dbg !3117
  %5 = icmp eq i32 %code, 0, !dbg !3118
  br i1 %5, label %ok, label %fail, !dbg !3118

ok:                                               ; preds = %enter
  %6 = icmp sgt i32 %4, -1, !dbg !3119
  %objc1 = load i32, i32* %objc, align 4, !dbg !3119
  %7 = icmp slt i32 %4, %objc1, !dbg !3119
  %8 = and i1 %6, %7, !dbg !3119
  br i1 %8, label %real.index, label %out.of.bounds, !dbg !3119

real.index:                                       ; preds = %ok
  %objv2 = load %Tcl_Obj**, %Tcl_Obj*** %objv, align 8, !dbg !3120
  %9 = sext i32 %4 to i64, !dbg !3121
  %10 = getelementptr %Tcl_Obj*, %Tcl_Obj** %objv2, i64 %9, !dbg !3121
  %objPtr = load %Tcl_Obj*, %Tcl_Obj** %10, align 8, !dbg !3121
  %refCount.i.i4 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !3122
  %refCount1.i.i5 = load i32, i32* %refCount.i.i4, align 4, !dbg !3125
  %11 = add nsw i32 %refCount1.i.i5, 1, !dbg !3125
  store i32 %11, i32* %refCount.i.i4, align 4, !dbg !3125
  %12 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %objPtr, 1, !dbg !3126
  ret { i32, %Tcl_Obj* } %12, !dbg !3126

out.of.bounds:                                    ; preds = %ok
  %objPtr3 = tail call noalias nonnull %Tcl_Obj* @Tcl_NewObj(), !dbg !3127
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr3, i64 0, i32 0, !dbg !3128
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !3130
  %13 = icmp eq i32 %refCount1.i, 0, !dbg !3130
  tail call void @llvm.assume(i1 %13) #5, !dbg !3130
  store i32 1, i32* %refCount.i, align 4, !dbg !3131
  %14 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %objPtr3, 1, !dbg !3134
  ret { i32, %Tcl_Obj* } %14, !dbg !3134

fail:                                             ; preds = %enter
  store i32 1, i32* %ecvar, align 4, !dbg !3135
  ret { i32, %Tcl_Obj* } { i32 1, %Tcl_Obj* undef }, !dbg !3136
}

; Function Attrs: alwaysinline
define hidden { i32, %Tcl_Obj* } @tcl.list.indexList(%Tcl_Obj* nonnull %list, %Tcl_Obj* nocapture nonnull %index, i32* noalias nocapture nonnull %ecvar) local_unnamed_addr #12 !dbg !3137 {
enter:
  %index.i25.i = alloca i32, align 4, !dbg !3142
  %index.i.i = alloca i32, align 4, !dbg !3145
  %"&listLen.i" = alloca i32, align 4, !dbg !3147
  %"&elemPtrs.i" = alloca %Tcl_Obj**, align 8, !dbg !3148
  %index.i = alloca i32, align 4, !dbg !3149
  %objc = alloca i32, align 4, !dbg !3151
  %objv = alloca %Tcl_Obj**, align 8, !dbg !3152
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !3153, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %code = call i32 @Tcl_ListObjGetElements(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %list, i32* noalias nocapture nonnull %objc, %Tcl_Obj*** noalias nocapture nonnull %objv), !dbg !3154
  %0 = icmp eq i32 %code, 0, !dbg !3155
  br i1 %0, label %checkType, label %notList, !dbg !3155

notList:                                          ; preds = %forceType.i, %enter
  store i32 1, i32* %ecvar, align 4, !dbg !3156
  ret { i32, %Tcl_Obj* } { i32 1, %Tcl_Obj* undef }, !dbg !3157

checkType:                                        ; preds = %enter
  %typePtr.ptr = getelementptr %Tcl_Obj, %Tcl_Obj* %index, i64 0, i32 3, !dbg !3158
  %typePtr = load %ObjType*, %ObjType** %typePtr.ptr, align 8, !dbg !3158
  %tclListType = load %ObjType*, %ObjType** @tclListType, align 8, !dbg !3158, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %1 = icmp eq %ObjType* %typePtr, %tclListType, !dbg !3158
  br i1 %1, label %slowPath, label %checkIndex, !dbg !3158

checkIndex:                                       ; preds = %checkType
  %objc1 = load i32, i32* %objc, align 4, !dbg !3159
  %2 = bitcast i32* %index.i to i8*, !dbg !3160
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2), !dbg !3160
  %tclIntType.i = load %ObjType*, %ObjType** @tclIntType, align 8, !dbg !3160, !invariant.load !3, !noalias !3161, !nonnull !3, !dereferenceable !1051
  %3 = icmp eq %ObjType* %typePtr, %tclIntType.i, !dbg !3160
  br i1 %3, label %direct.i, label %call.i, !dbg !3160

direct.i:                                         ; preds = %checkIndex
  %internalRep.i = getelementptr %Tcl_Obj, %Tcl_Obj* %index, i64 0, i32 4, !dbg !3165
  %4 = bitcast %InternalRepresentation* %internalRep.i to i32*, !dbg !3166
  %longValue.i = load i32, i32* %4, align 4, !dbg !3166, !alias.scope !3167, !noalias !3168
  %5 = insertvalue { i1, i32 } { i1 true, i32 undef }, i32 %longValue.i, 1, !dbg !3166
  br label %tcl.impl.getIndex.exit, !dbg !3166

call.i:                                           ; preds = %checkIndex
  %code.i = call i32 @TclGetIntForIndex(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %index, i32 %objc1, i32* noalias nocapture nonnull %index.i) #5, !dbg !3169
  %6 = icmp eq i32 %code.i, 0, !dbg !3170
  %7 = insertvalue { i1, i32 } undef, i1 %6, 0, !dbg !3170
  %index1.i = load i32, i32* %index.i, align 4, !dbg !3171, !noalias !3161
  %8 = insertvalue { i1, i32 } %7, i32 %index1.i, 1, !dbg !3171
  br label %tcl.impl.getIndex.exit, !dbg !3171

tcl.impl.getIndex.exit:                           ; preds = %call.i, %direct.i
  %9 = phi { i1, i32 } [ %5, %direct.i ], [ %8, %call.i ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2), !dbg !3172
  %getIndex.index = extractvalue { i1, i32 } %9, 1, !dbg !3173
  %getIndex.result = extractvalue { i1, i32 } %9, 0, !dbg !3173
  br i1 %getIndex.result, label %immediateIndex, label %tcl.impl.getIndex.exit.slowPath_crit_edge, !dbg !3173

tcl.impl.getIndex.exit.slowPath_crit_edge:        ; preds = %tcl.impl.getIndex.exit
  %typePtr.i12.pre = load %ObjType*, %ObjType** %typePtr.ptr, align 8, !dbg !3174, !alias.scope !3176, !noalias !3179
  br label %slowPath, !dbg !3173

immediateIndex:                                   ; preds = %tcl.impl.getIndex.exit
  %10 = icmp sgt i32 %getIndex.index, -1, !dbg !3181
  %11 = icmp slt i32 %getIndex.index, %objc1, !dbg !3181
  %12 = and i1 %10, %11, !dbg !3181
  br i1 %12, label %real.index, label %out.of.bounds, !dbg !3181

real.index:                                       ; preds = %immediateIndex
  %objv2 = load %Tcl_Obj**, %Tcl_Obj*** %objv, align 8, !dbg !3182
  %13 = sext i32 %getIndex.index to i64, !dbg !3183
  %14 = getelementptr %Tcl_Obj*, %Tcl_Obj** %objv2, i64 %13, !dbg !3183
  %objPtr = load %Tcl_Obj*, %Tcl_Obj** %14, align 8, !dbg !3183
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !3184
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !3187
  %15 = add nsw i32 %refCount1.i.i, 1, !dbg !3187
  store i32 %15, i32* %refCount.i.i, align 4, !dbg !3187
  %16 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %objPtr, 1, !dbg !3188
  ret { i32, %Tcl_Obj* } %16, !dbg !3188

out.of.bounds:                                    ; preds = %immediateIndex
  %objPtr3 = tail call noalias nonnull %Tcl_Obj* @Tcl_NewObj(), !dbg !3189
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr3, i64 0, i32 0, !dbg !3190
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !3192
  %17 = icmp eq i32 %refCount1.i, 0, !dbg !3192
  tail call void @llvm.assume(i1 %17) #5, !dbg !3192
  store i32 1, i32* %refCount.i, align 4, !dbg !3193
  %18 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %objPtr3, 1, !dbg !3196
  ret { i32, %Tcl_Obj* } %18, !dbg !3196

slowPath:                                         ; preds = %tcl.impl.getIndex.exit.slowPath_crit_edge, %checkType
  %typePtr.i12 = phi %ObjType* [ %typePtr.i12.pre, %tcl.impl.getIndex.exit.slowPath_crit_edge ], [ %typePtr, %checkType ], !dbg !3174
  %19 = icmp eq %ObjType* %typePtr.i12, %tclListType, !dbg !3197
  br i1 %19, label %ok.i, label %forceType.i, !dbg !3197

forceType.i:                                      ; preds = %slowPath
  %setFromAnyProc.ptr.i.i = getelementptr %ObjType, %ObjType* %tclListType, i64 0, i32 4, !dbg !3198
  %setFromAnyProc.i.i = load i32 (%Interp*, %Tcl_Obj*)*, i32 (%Interp*, %Tcl_Obj*)** %setFromAnyProc.ptr.i.i, align 8, !dbg !3198, !alias.scope !3200, !noalias !3203
  %code.i.i13 = tail call i32 %setFromAnyProc.i.i(%Interp* nocapture nonnull %interp, %Tcl_Obj* nocapture nonnull %index), !dbg !3206, !noalias !3200
  %20 = icmp eq i32 %code.i.i13, 0, !dbg !3207
  br i1 %20, label %ok.i, label %notList, !dbg !3207

ok.i:                                             ; preds = %forceType.i, %slowPath
  %objPtr.i14 = tail call noalias nonnull %Tcl_Obj* @Tcl_NewObj(), !dbg !3208, !noalias !3209
  %refCount.i.i15 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr.i14, i64 0, i32 0, !dbg !3210
  %refCount1.i.i16 = load i32, i32* %refCount.i.i15, align 4, !dbg !3212, !noalias !3209
  %21 = icmp eq i32 %refCount1.i.i16, 0, !dbg !3212
  tail call void @llvm.assume(i1 %21) #5, !dbg !3212, !noalias !3209
  %bytes.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr.i14, i64 0, i32 1, !dbg !3213
  %bytes1.i.i = load i8*, i8** %bytes.i.i, align 8, !dbg !3215, !noalias !3209
  %22 = icmp eq i8* %bytes1.i.i, null, !dbg !3216
  br i1 %22, label %okIndex, label %act.i.i, !dbg !3216

act.i.i:                                          ; preds = %ok.i
  %tclEmptyStringRep.i.i = load i8*, i8** @tclEmptyStringRep, align 8, !dbg !3217, !invariant.load !3, !noalias !3209, !nonnull !3, !dereferenceable !1051
  %23 = icmp eq i8* %bytes1.i.i, %tclEmptyStringRep.i.i, !dbg !3217
  br i1 %23, label %clear.i.i, label %free.i.i, !dbg !3217

free.i.i:                                         ; preds = %act.i.i
  tail call void @Tcl_Free(i8* nonnull %bytes1.i.i) #5, !dbg !3218, !noalias !3209
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %bytes1.i.i) #5, !dbg !3219, !noalias !3209
  br label %clear.i.i, !dbg !3220

clear.i.i:                                        ; preds = %free.i.i, %act.i.i
  store i8* null, i8** %bytes.i.i, align 8, !dbg !3221, !noalias !3209
  br label %okIndex, !dbg !3222

okIndex:                                          ; preds = %clear.i.i, %ok.i
  %dupIntRepProc.ptr.i = getelementptr %ObjType, %ObjType* %tclListType, i64 0, i32 2, !dbg !3223
  %dupIntRepProc.i = load void (%Tcl_Obj*, %Tcl_Obj*)*, void (%Tcl_Obj*, %Tcl_Obj*)** %dupIntRepProc.ptr.i, align 8, !dbg !3223, !noalias !3209
  tail call void %dupIntRepProc.i(%Tcl_Obj* nocapture nonnull %index, %Tcl_Obj* nocapture nonnull %objPtr.i14), !dbg !3224, !noalias !3179
  %internalRep = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr.i14, i64 0, i32 4, i32 0, !dbg !3225
  %24 = bitcast i8** %internalRep to %TclList**, !dbg !3225
  %listRep = load %TclList*, %TclList** %24, align 8, !dbg !3225
  %elemCount.ptr = getelementptr %TclList, %TclList* %listRep, i64 0, i32 2, !dbg !3226
  %elemCount = load i32, i32* %elemCount.ptr, align 4, !dbg !3226
  %elements = getelementptr %TclList, %TclList* %listRep, i64 0, i32 4, !dbg !3226
  %25 = bitcast i32* %"&listLen.i" to i8*, !dbg !3227
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %25), !dbg !3227
  %26 = bitcast %Tcl_Obj*** %"&elemPtrs.i" to i8*, !dbg !3227
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26), !dbg !3227
  %refCount.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %list, i64 0, i32 0, !dbg !3228
  %refCount1.i.i.i = load i32, i32* %refCount.i.i.i, align 4, !dbg !3231, !alias.scope !3232, !noalias !3235
  %27 = add nsw i32 %refCount1.i.i.i, 1, !dbg !3231
  store i32 %27, i32* %refCount.i.i.i, align 4, !dbg !3231, !alias.scope !3232, !noalias !3235
  %28 = icmp sgt i32 %elemCount, 0, !dbg !3238
  br i1 %28, label %loop.lr.ph.i, label %done.i, !dbg !3238

loop.lr.ph.i:                                     ; preds = %okIndex
  %setFromAnyProc.ptr.i.i.i = getelementptr %ObjType, %ObjType* %tclListType, i64 0, i32 4, !dbg !3239
  %tclEmptyStringRep.i.i.i = load i8*, i8** @tclEmptyStringRep, align 8, !dbg !3242, !noalias !3235
  %29 = bitcast i32* %index.i.i to i8*, !dbg !3244
  %tclIntType.i.i = load %ObjType*, %ObjType** @tclIntType, align 8, !dbg !3244, !noalias !3235
  %30 = bitcast i32* %index.i25.i to i8*, !dbg !3245
  br label %loop.i, !dbg !3238

loop.i:                                           ; preds = %tcl.dropReference.exit.i, %loop.lr.ph.i
  %"&i.046.i" = phi i32 [ 0, %loop.lr.ph.i ], [ %72, %tcl.dropReference.exit.i ]
  %"&list.045.i" = phi %Tcl_Obj* [ %list, %loop.lr.ph.i ], [ %"&list.1.i", %tcl.dropReference.exit.i ]
  store i32 0, i32* %"&listLen.i", align 4, !dbg !3246, !noalias !3247
  store %Tcl_Obj** null, %Tcl_Obj*** %"&elemPtrs.i", align 8, !dbg !3248, !noalias !3247
  %typePtr.ptr.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %"&list.045.i", i64 0, i32 3, !dbg !3249
  %typePtr.i.i = load %ObjType*, %ObjType** %typePtr.ptr.i.i, align 8, !dbg !3249, !alias.scope !3250, !noalias !3253
  %31 = icmp eq %ObjType* %typePtr.i.i, %tclListType, !dbg !3255
  br i1 %31, label %ok.i.i, label %forceType.i.i, !dbg !3255

forceType.i.i:                                    ; preds = %loop.i
  %setFromAnyProc.i.i.i = load i32 (%Interp*, %Tcl_Obj*)*, i32 (%Interp*, %Tcl_Obj*)** %setFromAnyProc.ptr.i.i.i, align 8, !dbg !3256, !alias.scope !3257, !noalias !3260
  %code.i.i.i = tail call i32 %setFromAnyProc.i.i.i(%Interp* nocapture nonnull %interp, %Tcl_Obj* nocapture nonnull %"&list.045.i"), !dbg !3263, !noalias !3264
  %32 = icmp eq i32 %code.i.i.i, 0, !dbg !3265
  br i1 %32, label %ok.i.i, label %tcl.impl.listDupe.exit.i, !dbg !3265

ok.i.i:                                           ; preds = %forceType.i.i, %loop.i
  %objPtr.i.i = tail call noalias nonnull %Tcl_Obj* @Tcl_NewObj(), !dbg !3266, !noalias !3267
  %refCount.i.i11.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr.i.i, i64 0, i32 0, !dbg !3268
  %refCount1.i.i12.i = load i32, i32* %refCount.i.i11.i, align 4, !dbg !3270, !noalias !3271
  %33 = icmp eq i32 %refCount1.i.i12.i, 0, !dbg !3270
  tail call void @llvm.assume(i1 %33) #5, !dbg !3270, !noalias !3267
  %bytes.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr.i.i, i64 0, i32 1, !dbg !3272
  %bytes1.i.i.i = load i8*, i8** %bytes.i.i.i, align 8, !dbg !3273, !noalias !3271
  %34 = icmp eq i8* %bytes1.i.i.i, null, !dbg !3274
  br i1 %34, label %TclInvalidateStringRep.exit.i.i, label %act.i.i.i, !dbg !3274

act.i.i.i:                                        ; preds = %ok.i.i
  %35 = icmp eq i8* %bytes1.i.i.i, %tclEmptyStringRep.i.i.i, !dbg !3275
  br i1 %35, label %clear.i.i.i, label %free.i.i.i, !dbg !3275

free.i.i.i:                                       ; preds = %act.i.i.i
  tail call void @Tcl_Free(i8* nonnull %bytes1.i.i.i) #5, !dbg !3276, !noalias !3267
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %bytes1.i.i.i) #5, !dbg !3277, !noalias !3267
  br label %clear.i.i.i, !dbg !3278

clear.i.i.i:                                      ; preds = %free.i.i.i, %act.i.i.i
  store i8* null, i8** %bytes.i.i.i, align 8, !dbg !3279, !noalias !3271
  br label %TclInvalidateStringRep.exit.i.i, !dbg !3280

TclInvalidateStringRep.exit.i.i:                  ; preds = %clear.i.i.i, %ok.i.i
  %dupIntRepProc.i.i = load void (%Tcl_Obj*, %Tcl_Obj*)*, void (%Tcl_Obj*, %Tcl_Obj*)** %dupIntRepProc.ptr.i, align 8, !dbg !3281, !noalias !3267
  tail call void %dupIntRepProc.i.i(%Tcl_Obj* nocapture nonnull %"&list.045.i", %Tcl_Obj* nocapture nonnull %objPtr.i.i), !dbg !3282, !noalias !3253
  br label %tcl.impl.listDupe.exit.i, !dbg !3283

tcl.impl.listDupe.exit.i:                         ; preds = %TclInvalidateStringRep.exit.i.i, %forceType.i.i
  %sublistCopy13.i = phi %Tcl_Obj* [ %objPtr.i.i, %TclInvalidateStringRep.exit.i.i ], [ null, %forceType.i.i ]
  %refCount.i.i14.i = getelementptr %Tcl_Obj, %Tcl_Obj* %"&list.045.i", i64 0, i32 0, !dbg !3284
  %refCount1.i.i15.i = load i32, i32* %refCount.i.i14.i, align 4, !dbg !3287, !noalias !3235
  %36 = icmp slt i32 %refCount1.i.i15.i, 2, !dbg !3288
  br i1 %36, label %freeObject.i.i16.i, label %leave.i.i17.i, !dbg !3288

freeObject.i.i16.i:                               ; preds = %tcl.impl.listDupe.exit.i
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %"&list.045.i") #5, !dbg !3289, !noalias !3235
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %"&list.045.i") #5, !dbg !3290, !noalias !3235
  br label %tcl.dropReference.exit18.i, !dbg !3291

leave.i.i17.i:                                    ; preds = %tcl.impl.listDupe.exit.i
  %37 = add nsw i32 %refCount1.i.i15.i, -1, !dbg !3287
  store i32 %37, i32* %refCount.i.i14.i, align 4, !dbg !3292, !noalias !3235
  br label %tcl.dropReference.exit18.i, !dbg !3293

tcl.dropReference.exit18.i:                       ; preds = %leave.i.i17.i, %freeObject.i.i16.i
  %38 = icmp eq %Tcl_Obj* %sublistCopy13.i, null, !dbg !3294
  br i1 %38, label %error.i, label %loop2.i, !dbg !3294

loop2.i:                                          ; preds = %tcl.dropReference.exit18.i
  %code.i6 = call i32 @Tcl_ListObjGetElements(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %sublistCopy13.i, i32* noalias nocapture nonnull %"&listLen.i", %Tcl_Obj*** noalias nocapture nonnull %"&elemPtrs.i"), !dbg !3295, !noalias !3235
  %listLen.i = load i32, i32* %"&listLen.i", align 4, !dbg !3296, !noalias !3247
  %elemPtrs.i = load %Tcl_Obj**, %Tcl_Obj*** %"&elemPtrs.i", align 8, !dbg !3297, !noalias !3247
  %39 = sext i32 %"&i.046.i" to i64, !dbg !3298
  %40 = getelementptr %Tcl_Obj*, %Tcl_Obj** %elements, i64 %39, !dbg !3298
  %41 = load %Tcl_Obj*, %Tcl_Obj** %40, align 8, !dbg !3298, !alias.scope !3299, !noalias !3300
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %29), !dbg !3301, !noalias !3247
  %typePtr.ptr.i19.i = getelementptr %Tcl_Obj, %Tcl_Obj* %41, i64 0, i32 3, !dbg !3301
  %typePtr.i20.i = load %ObjType*, %ObjType** %typePtr.ptr.i19.i, align 8, !dbg !3301, !alias.scope !3302, !noalias !3305
  %42 = icmp eq %ObjType* %typePtr.i20.i, %tclIntType.i.i, !dbg !3301
  br i1 %42, label %direct.i.i, label %call.i.i, !dbg !3301

direct.i.i:                                       ; preds = %loop2.i
  %internalRep.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %41, i64 0, i32 4, !dbg !3307
  %43 = bitcast %InternalRepresentation* %internalRep.i.i to i32*, !dbg !3308
  %longValue.i.i = load i32, i32* %43, align 4, !dbg !3308, !alias.scope !3302, !noalias !3305
  %44 = insertvalue { i1, i32 } { i1 true, i32 undef }, i32 %longValue.i.i, 1, !dbg !3308
  br label %tcl.impl.getIndex.exit.i, !dbg !3308

call.i.i:                                         ; preds = %loop2.i
  %45 = add i32 %listLen.i, -1, !dbg !3298
  %code.i.i = call i32 @TclGetIntForIndex(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %41, i32 %45, i32* noalias nocapture nonnull %index.i.i) #5, !dbg !3309, !noalias !3235
  %46 = icmp eq i32 %code.i.i, 0, !dbg !3310
  %47 = insertvalue { i1, i32 } undef, i1 %46, 0, !dbg !3310
  %index1.i.i = load i32, i32* %index.i.i, align 4, !dbg !3311, !noalias !3312
  %48 = insertvalue { i1, i32 } %47, i32 %index1.i.i, 1, !dbg !3311
  br label %tcl.impl.getIndex.exit.i, !dbg !3311

tcl.impl.getIndex.exit.i:                         ; preds = %call.i.i, %direct.i.i
  %49 = phi { i1, i32 } [ %44, %direct.i.i ], [ %48, %call.i.i ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %29), !dbg !3244, !noalias !3247
  %getIndex.index.i = extractvalue { i1, i32 } %49, 1, !dbg !3298
  %getIndex.result.i = extractvalue { i1, i32 } %49, 0, !dbg !3298
  br i1 %getIndex.result.i, label %loopIndex.i, label %loopNext.i, !dbg !3298

loopIndex.i:                                      ; preds = %tcl.impl.getIndex.exit.i
  %50 = icmp sgt i32 %getIndex.index.i, -1, !dbg !3313
  %51 = icmp slt i32 %getIndex.index.i, %listLen.i, !dbg !3313
  %52 = and i1 %50, %51, !dbg !3313
  br i1 %52, label %loopIndexInRange.i, label %loopIndexOutOfRange.i, !dbg !3313

loopIndexInRange.i:                               ; preds = %loopIndex.i
  %53 = sext i32 %getIndex.index.i to i64, !dbg !3314
  %54 = getelementptr %Tcl_Obj*, %Tcl_Obj** %elemPtrs.i, i64 %53, !dbg !3314
  %list2.i = load %Tcl_Obj*, %Tcl_Obj** %54, align 8, !dbg !3314, !noalias !3235
  %refCount.i.i21.i = getelementptr %Tcl_Obj, %Tcl_Obj* %list2.i, i64 0, i32 0, !dbg !3315
  %refCount1.i.i22.i = load i32, i32* %refCount.i.i21.i, align 4, !dbg !3318, !noalias !3235
  %55 = add nsw i32 %refCount1.i.i22.i, 1, !dbg !3318
  store i32 %55, i32* %refCount.i.i21.i, align 4, !dbg !3318, !noalias !3235
  br label %loopNext.i, !dbg !3319

loopIndexOutOfRange.i:                            ; preds = %loopIndex.i, %tcl.impl.getIndex.exit35.i
  %"&i.1.i" = phi i32 [ %i4.i, %tcl.impl.getIndex.exit35.i ], [ %"&i.046.i", %loopIndex.i ], !dbg !3320
  %i4.i = add nsw i32 %"&i.1.i", 1, !dbg !3321
  %56 = icmp slt i32 %i4.i, %elemCount, !dbg !3322
  br i1 %56, label %loopIndexValidityCheck.i, label %loopEmpty.i, !dbg !3322

loopEmpty.i:                                      ; preds = %loopIndexOutOfRange.i
  %objPtr.i = tail call noalias nonnull %Tcl_Obj* @Tcl_NewObj(), !dbg !3323, !noalias !3235
  %refCount.i.i7 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr.i, i64 0, i32 0, !dbg !3324
  %refCount1.i.i8 = load i32, i32* %refCount.i.i7, align 4, !dbg !3326, !noalias !3247
  %57 = icmp eq i32 %refCount1.i.i8, 0, !dbg !3326
  tail call void @llvm.assume(i1 %57) #5, !dbg !3326, !noalias !3235
  store i32 1, i32* %refCount.i.i7, align 4, !dbg !3327, !noalias !3247
  br label %loopNext.i, !dbg !3330

loopIndexValidityCheck.i:                         ; preds = %loopIndexOutOfRange.i
  %58 = sext i32 %i4.i to i64, !dbg !3331
  %59 = getelementptr %Tcl_Obj*, %Tcl_Obj** %elements, i64 %58, !dbg !3331
  %60 = load %Tcl_Obj*, %Tcl_Obj** %59, align 8, !dbg !3331, !alias.scope !3299, !noalias !3300
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %30), !dbg !3332, !noalias !3247
  %typePtr.ptr.i26.i = getelementptr %Tcl_Obj, %Tcl_Obj* %60, i64 0, i32 3, !dbg !3332
  %typePtr.i27.i = load %ObjType*, %ObjType** %typePtr.ptr.i26.i, align 8, !dbg !3332, !alias.scope !3333, !noalias !3336
  %61 = icmp eq %ObjType* %typePtr.i27.i, %tclIntType.i.i, !dbg !3332
  br i1 %61, label %direct.i31.i, label %call.i34.i, !dbg !3332

direct.i31.i:                                     ; preds = %loopIndexValidityCheck.i
  %internalRep.i29.i = getelementptr %Tcl_Obj, %Tcl_Obj* %60, i64 0, i32 4, !dbg !3338
  %62 = bitcast %InternalRepresentation* %internalRep.i29.i to i32*, !dbg !3339
  %longValue.i30.i = load i32, i32* %62, align 4, !dbg !3339, !alias.scope !3333, !noalias !3336
  %63 = insertvalue { i1, i32 } { i1 true, i32 undef }, i32 %longValue.i30.i, 1, !dbg !3339
  br label %tcl.impl.getIndex.exit35.i, !dbg !3339

call.i34.i:                                       ; preds = %loopIndexValidityCheck.i
  %code.i32.i = call i32 @TclGetIntForIndex(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %60, i32 -1, i32* noalias nocapture nonnull %index.i25.i) #5, !dbg !3340, !noalias !3235
  %64 = icmp eq i32 %code.i32.i, 0, !dbg !3341
  %65 = insertvalue { i1, i32 } undef, i1 %64, 0, !dbg !3341
  %index1.i33.i = load i32, i32* %index.i25.i, align 4, !dbg !3342, !noalias !3343
  %66 = insertvalue { i1, i32 } %65, i32 %index1.i33.i, 1, !dbg !3342
  br label %tcl.impl.getIndex.exit35.i, !dbg !3342

tcl.impl.getIndex.exit35.i:                       ; preds = %call.i34.i, %direct.i31.i
  %67 = phi { i1, i32 } [ %63, %direct.i31.i ], [ %66, %call.i34.i ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %30), !dbg !3245, !noalias !3247
  %getIndex.result6.i = extractvalue { i1, i32 } %67, 0, !dbg !3331
  br i1 %getIndex.result6.i, label %loopIndexOutOfRange.i, label %loopIndexBad.i, !dbg !3331

loopIndexBad.i:                                   ; preds = %tcl.impl.getIndex.exit35.i
  %refCount.i.i36.i = getelementptr %Tcl_Obj, %Tcl_Obj* %sublistCopy13.i, i64 0, i32 0, !dbg !3344
  %refCount1.i.i37.i = load i32, i32* %refCount.i.i36.i, align 4, !dbg !3347, !noalias !3247
  %68 = icmp slt i32 %refCount1.i.i37.i, 2, !dbg !3348
  br i1 %68, label %freeObject.i.i38.i, label %leave.i.i39.i, !dbg !3348

freeObject.i.i38.i:                               ; preds = %loopIndexBad.i
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %sublistCopy13.i) #5, !dbg !3349, !noalias !3235
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %sublistCopy13.i) #5, !dbg !3350, !noalias !3247
  br label %error.i, !dbg !3351

leave.i.i39.i:                                    ; preds = %loopIndexBad.i
  %69 = add nsw i32 %refCount1.i.i37.i, -1, !dbg !3347
  store i32 %69, i32* %refCount.i.i36.i, align 4, !dbg !3352, !noalias !3247
  br label %error.i, !dbg !3353

loopNext.i:                                       ; preds = %loopEmpty.i, %loopIndexInRange.i, %tcl.impl.getIndex.exit.i
  %"&list.1.i" = phi %Tcl_Obj* [ %list2.i, %loopIndexInRange.i ], [ %objPtr.i, %loopEmpty.i ], [ null, %tcl.impl.getIndex.exit.i ], !dbg !3320
  %"&i.2.i" = phi i32 [ %"&i.046.i", %loopIndexInRange.i ], [ %i4.i, %loopEmpty.i ], [ %"&i.046.i", %tcl.impl.getIndex.exit.i ], !dbg !3320
  %refCount.i.i9.i = getelementptr %Tcl_Obj, %Tcl_Obj* %sublistCopy13.i, i64 0, i32 0, !dbg !3354
  %refCount1.i.i10.i = load i32, i32* %refCount.i.i9.i, align 4, !dbg !3357, !noalias !3247
  %70 = icmp slt i32 %refCount1.i.i10.i, 2, !dbg !3358
  br i1 %70, label %freeObject.i.i.i, label %leave.i.i.i, !dbg !3358

freeObject.i.i.i:                                 ; preds = %loopNext.i
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %sublistCopy13.i) #5, !dbg !3359, !noalias !3235
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %sublistCopy13.i) #5, !dbg !3360, !noalias !3247
  br label %tcl.dropReference.exit.i, !dbg !3361

leave.i.i.i:                                      ; preds = %loopNext.i
  %71 = add nsw i32 %refCount1.i.i10.i, -1, !dbg !3357
  store i32 %71, i32* %refCount.i.i9.i, align 4, !dbg !3362, !noalias !3247
  br label %tcl.dropReference.exit.i, !dbg !3363

tcl.dropReference.exit.i:                         ; preds = %leave.i.i.i, %freeObject.i.i.i
  %72 = add i32 %"&i.2.i", 1, !dbg !3364
  %73 = icmp slt i32 %72, %elemCount, !dbg !3238
  %74 = icmp ne %Tcl_Obj* %"&list.1.i", null, !dbg !3238
  %75 = and i1 %74, %73, !dbg !3238
  br i1 %75, label %loop.i, label %done.i, !dbg !3238

done.i:                                           ; preds = %tcl.dropReference.exit.i, %okIndex
  %"&list.0.lcssa.i" = phi %Tcl_Obj* [ %list, %okIndex ], [ %"&list.1.i", %tcl.dropReference.exit.i ], !dbg !3320
  %76 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %"&list.0.lcssa.i", 1, !dbg !3365
  br label %tcl.list.index.exit, !dbg !3365

error.i:                                          ; preds = %tcl.dropReference.exit18.i, %leave.i.i39.i, %freeObject.i.i38.i
  store i32 1, i32* %ecvar, align 4, !dbg !3366, !alias.scope !3367, !noalias !3368
  br label %tcl.list.index.exit, !dbg !3369

tcl.list.index.exit:                              ; preds = %error.i, %done.i
  %77 = phi { i32, %Tcl_Obj* } [ %76, %done.i ], [ { i32 1, %Tcl_Obj* undef }, %error.i ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %25), !dbg !3320
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26), !dbg !3320
  %refCount1.i.i5 = load i32, i32* %refCount.i.i15, align 4, !dbg !3370
  %78 = icmp slt i32 %refCount1.i.i5, 2, !dbg !3373
  br i1 %78, label %freeObject.i.i, label %leave.i.i, !dbg !3373

freeObject.i.i:                                   ; preds = %tcl.list.index.exit
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %objPtr.i14) #5, !dbg !3374
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %objPtr.i14) #5, !dbg !3375
  br label %tcl.dropReference.exit, !dbg !3376

leave.i.i:                                        ; preds = %tcl.list.index.exit
  %79 = add nsw i32 %refCount1.i.i5, -1, !dbg !3370
  store i32 %79, i32* %refCount.i.i15, align 4, !dbg !3377
  br label %tcl.dropReference.exit, !dbg !3378

tcl.dropReference.exit:                           ; preds = %freeObject.i.i, %leave.i.i
  ret { i32, %Tcl_Obj* } %77, !dbg !3379
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, %Tcl_Obj* } @tcl.list.range(%Tcl_Obj* nonnull %list, %Tcl_Obj* nocapture nonnull %from, %Tcl_Obj* nocapture nonnull %to, i32* noalias nocapture nonnull %ecvar) local_unnamed_addr #6 !dbg !3380 {
enter:
  %index.i14 = alloca i32, align 4, !dbg !3386
  %index.i = alloca i32, align 4, !dbg !3388
  %0 = alloca i32, align 4, !dbg !3390
  %1 = alloca %Tcl_Obj**, align 8, !dbg !3391
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !3392, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %code = call i32 @Tcl_ListObjLength(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %list, i32* noalias nocapture nonnull %0), !dbg !3393
  %2 = icmp eq i32 %code, 0, !dbg !3394
  br i1 %2, label %getFrom, label %error, !dbg !3394

getFrom:                                          ; preds = %enter
  %objc = load i32, i32* %0, align 4, !dbg !3395
  %3 = add i32 %objc, -1, !dbg !3396
  %4 = bitcast i32* %index.i to i8*, !dbg !3397
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4), !dbg !3397
  %typePtr.ptr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %from, i64 0, i32 3, !dbg !3397
  %typePtr.i = load %ObjType*, %ObjType** %typePtr.ptr.i, align 8, !dbg !3397, !alias.scope !3398, !noalias !3401
  %tclIntType.i = load %ObjType*, %ObjType** @tclIntType, align 8, !dbg !3397, !invariant.load !3, !noalias !3403, !nonnull !3, !dereferenceable !1051
  %5 = icmp eq %ObjType* %typePtr.i, %tclIntType.i, !dbg !3397
  br i1 %5, label %direct.i, label %call.i, !dbg !3397

direct.i:                                         ; preds = %getFrom
  %internalRep.i = getelementptr %Tcl_Obj, %Tcl_Obj* %from, i64 0, i32 4, !dbg !3404
  %6 = bitcast %InternalRepresentation* %internalRep.i to i32*, !dbg !3405
  %longValue.i = load i32, i32* %6, align 4, !dbg !3405, !alias.scope !3398, !noalias !3401
  %7 = insertvalue { i1, i32 } { i1 true, i32 undef }, i32 %longValue.i, 1, !dbg !3405
  br label %tcl.impl.getIndex.exit, !dbg !3405

call.i:                                           ; preds = %getFrom
  %code.i = call i32 @TclGetIntForIndex(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %from, i32 %3, i32* noalias nocapture nonnull %index.i) #5, !dbg !3406
  %8 = icmp eq i32 %code.i, 0, !dbg !3407
  %9 = insertvalue { i1, i32 } undef, i1 %8, 0, !dbg !3407
  %index1.i = load i32, i32* %index.i, align 4, !dbg !3408, !noalias !3403
  %10 = insertvalue { i1, i32 } %9, i32 %index1.i, 1, !dbg !3408
  br label %tcl.impl.getIndex.exit, !dbg !3408

tcl.impl.getIndex.exit:                           ; preds = %call.i, %direct.i
  %11 = phi { i1, i32 } [ %7, %direct.i ], [ %10, %call.i ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4), !dbg !3409
  %getIndex.index = extractvalue { i1, i32 } %11, 1, !dbg !3410
  %getIndex.result = extractvalue { i1, i32 } %11, 0, !dbg !3410
  br i1 %getIndex.result, label %getTo, label %error, !dbg !3410

getTo:                                            ; preds = %tcl.impl.getIndex.exit
  %12 = bitcast i32* %index.i14 to i8*, !dbg !3411
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12), !dbg !3411
  %typePtr.ptr.i15 = getelementptr %Tcl_Obj, %Tcl_Obj* %to, i64 0, i32 3, !dbg !3411
  %typePtr.i16 = load %ObjType*, %ObjType** %typePtr.ptr.i15, align 8, !dbg !3411, !alias.scope !3412, !noalias !3415
  %13 = icmp eq %ObjType* %typePtr.i16, %tclIntType.i, !dbg !3411
  br i1 %13, label %direct.i20, label %call.i23, !dbg !3411

direct.i20:                                       ; preds = %getTo
  %internalRep.i18 = getelementptr %Tcl_Obj, %Tcl_Obj* %to, i64 0, i32 4, !dbg !3417
  %14 = bitcast %InternalRepresentation* %internalRep.i18 to i32*, !dbg !3418
  %longValue.i19 = load i32, i32* %14, align 4, !dbg !3418, !alias.scope !3412, !noalias !3415
  %15 = insertvalue { i1, i32 } { i1 true, i32 undef }, i32 %longValue.i19, 1, !dbg !3418
  br label %tcl.impl.getIndex.exit24, !dbg !3418

call.i23:                                         ; preds = %getTo
  %code.i21 = call i32 @TclGetIntForIndex(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %to, i32 %3, i32* noalias nocapture nonnull %index.i14) #5, !dbg !3419
  %16 = icmp eq i32 %code.i21, 0, !dbg !3420
  %17 = insertvalue { i1, i32 } undef, i1 %16, 0, !dbg !3420
  %index1.i22 = load i32, i32* %index.i14, align 4, !dbg !3421, !noalias !3422
  %18 = insertvalue { i1, i32 } %17, i32 %index1.i22, 1, !dbg !3421
  br label %tcl.impl.getIndex.exit24, !dbg !3421

tcl.impl.getIndex.exit24:                         ; preds = %call.i23, %direct.i20
  %19 = phi { i1, i32 } [ %15, %direct.i20 ], [ %18, %call.i23 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12), !dbg !3423
  %getIndex.index1 = extractvalue { i1, i32 } %19, 1, !dbg !3424
  %getIndex.result2 = extractvalue { i1, i32 } %19, 0, !dbg !3424
  br i1 %getIndex.result2, label %clamp, label %error, !dbg !3424

clamp:                                            ; preds = %tcl.impl.getIndex.exit24
  %20 = icmp slt i32 %getIndex.index, -1, !dbg !3425
  %21 = add i32 %objc, 1, !dbg !3425
  %22 = add i32 %getIndex.index, %21, !dbg !3425
  %23 = icmp slt i32 %objc, %getIndex.index, !dbg !3425
  %min = select i1 %23, i32 %objc, i32 %getIndex.index, !dbg !3425
  %from3 = select i1 %20, i32 %22, i32 %min, !dbg !3425
  %24 = icmp sgt i32 %from3, -1, !dbg !3426
  %from4 = select i1 %24, i32 %from3, i32 -1, !dbg !3426
  %25 = icmp slt i32 %getIndex.index1, -1, !dbg !3427
  %26 = add i32 %getIndex.index1, %21, !dbg !3427
  %27 = icmp slt i32 %objc, %getIndex.index1, !dbg !3427
  %min5 = select i1 %27, i32 %objc, i32 %getIndex.index1, !dbg !3427
  %to6 = select i1 %25, i32 %26, i32 %min5, !dbg !3427
  %28 = icmp sgt i32 %to6, -1, !dbg !3428
  %to7 = select i1 %28, i32 %to6, i32 -1, !dbg !3428
  %29 = icmp sle i32 %from4, %to7, !dbg !3429
  %30 = icmp slt i32 %from4, %objc, !dbg !3429
  %31 = and i1 %30, %28, !dbg !3429
  %32 = and i1 %31, %29, !dbg !3429
  br i1 %32, label %sublist, label %empty, !dbg !3429

sublist:                                          ; preds = %clamp
  %code8 = call i32 @Tcl_ListObjGetElements(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %list, i32* noalias nocapture nonnull %0, %Tcl_Obj*** noalias nocapture nonnull %1), !dbg !3430
  %objv = load %Tcl_Obj**, %Tcl_Obj*** %1, align 8, !dbg !3431
  %33 = icmp sgt i32 %from4, 0, !dbg !3432
  %from9 = select i1 %33, i32 %from3, i32 0, !dbg !3432
  %34 = icmp slt i32 %3, %to7, !dbg !3433
  %to10 = select i1 %34, i32 %3, i32 %to7, !dbg !3433
  %35 = icmp eq i32 %from9, 0, !dbg !3434
  %36 = icmp sgt i32 %3, %to7, !dbg !3434
  %refCountPtr.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %list, i64 0, i32 0, !dbg !3435
  %refCount.i.i = load i32, i32* %refCountPtr.i.i, align 4, !dbg !3435
  %shared.i = icmp slt i32 %refCount.i.i, 2, !dbg !3438
  %37 = and i1 %36, %shared.i, !dbg !3434
  %38 = and i1 %35, %37, !dbg !3434
  br i1 %38, label %sublist.inPlace.check, label %sublist.new, !dbg !3434

sublist.inPlace.check:                            ; preds = %sublist
  %internalRep = getelementptr %Tcl_Obj, %Tcl_Obj* %list, i64 0, i32 4, i32 0, !dbg !3439
  %39 = bitcast i8** %internalRep to %TclList**, !dbg !3439
  %listPtr = load %TclList*, %TclList** %39, align 8, !dbg !3439
  %refCount.ptr = getelementptr %TclList, %TclList* %listPtr, i64 0, i32 0, !dbg !3440
  %refCount = load i32, i32* %refCount.ptr, align 4, !dbg !3440
  %40 = icmp eq i32 %refCount, 1, !dbg !3440
  br i1 %40, label %sublist.inPlace, label %sublist.new, !dbg !3440

sublist.inPlace:                                  ; preds = %sublist.inPlace.check
  %onePast = add i32 %to10, 1, !dbg !3441
  %41 = icmp slt i32 %onePast, %objc, !dbg !3442
  br i1 %41, label %sublist.inPlace.loop.body, label %sublist.inPlace.done, !dbg !3442

sublist.inPlace.loop.body:                        ; preds = %sublist.inPlace, %tcl.dropReference.exit
  %index30 = phi i32 [ %index11, %tcl.dropReference.exit ], [ %onePast, %sublist.inPlace ]
  %index11 = add nsw i32 %index30, 1, !dbg !3443
  %42 = sext i32 %index30 to i64, !dbg !3444
  %43 = getelementptr %Tcl_Obj*, %Tcl_Obj** %objv, i64 %42, !dbg !3444
  %objPtr = load %Tcl_Obj*, %Tcl_Obj** %43, align 8, !dbg !3444
  %refCount.i.i28 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !3445
  %refCount1.i.i29 = load i32, i32* %refCount.i.i28, align 4, !dbg !3448
  %44 = icmp slt i32 %refCount1.i.i29, 2, !dbg !3449
  br i1 %44, label %freeObject.i.i, label %leave.i.i, !dbg !3449

freeObject.i.i:                                   ; preds = %sublist.inPlace.loop.body
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %objPtr) #5, !dbg !3450
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %objPtr) #5, !dbg !3451
  br label %tcl.dropReference.exit, !dbg !3452

leave.i.i:                                        ; preds = %sublist.inPlace.loop.body
  %45 = add nsw i32 %refCount1.i.i29, -1, !dbg !3448
  store i32 %45, i32* %refCount.i.i28, align 4, !dbg !3453
  br label %tcl.dropReference.exit, !dbg !3454

tcl.dropReference.exit:                           ; preds = %freeObject.i.i, %leave.i.i
  %46 = icmp slt i32 %index11, %objc, !dbg !3442
  br i1 %46, label %sublist.inPlace.loop.body, label %sublist.inPlace.done, !dbg !3442

sublist.inPlace.done:                             ; preds = %tcl.dropReference.exit, %sublist.inPlace
  %listPtr.elemCount = getelementptr %TclList, %TclList* %listPtr, i64 0, i32 2, !dbg !3455
  store i32 %onePast, i32* %listPtr.elemCount, align 4, !dbg !3455
  %listPtr.canonicalFlag = getelementptr %TclList, %TclList* %listPtr, i64 0, i32 3, !dbg !3456
  store i32 1, i32* %listPtr.canonicalFlag, align 4, !dbg !3456
  %bytes.i = getelementptr %Tcl_Obj, %Tcl_Obj* %list, i64 0, i32 1, !dbg !3457
  %bytes1.i = load i8*, i8** %bytes.i, align 8, !dbg !3459
  %47 = icmp eq i8* %bytes1.i, null, !dbg !3460
  br i1 %47, label %ok, label %act.i, !dbg !3460

act.i:                                            ; preds = %sublist.inPlace.done
  %tclEmptyStringRep.i = load i8*, i8** @tclEmptyStringRep, align 8, !dbg !3461, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %48 = icmp eq i8* %bytes1.i, %tclEmptyStringRep.i, !dbg !3461
  br i1 %48, label %clear.i, label %free.i, !dbg !3461

free.i:                                           ; preds = %act.i
  tail call void @Tcl_Free(i8* nonnull %bytes1.i) #5, !dbg !3462
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %bytes1.i) #5, !dbg !3463
  br label %clear.i, !dbg !3464

clear.i:                                          ; preds = %free.i, %act.i
  store i8* null, i8** %bytes.i, align 8, !dbg !3465
  br label %ok, !dbg !3466

sublist.new:                                      ; preds = %sublist.inPlace.check, %sublist
  %49 = sub i32 1, %from9, !dbg !3467
  %50 = add i32 %49, %to10, !dbg !3467
  %51 = sext i32 %from9 to i64, !dbg !3467
  %52 = getelementptr %Tcl_Obj*, %Tcl_Obj** %objv, i64 %51, !dbg !3467
  %objPtr12 = tail call noalias nonnull %Tcl_Obj* @Tcl_NewListObj(i32 %50, %Tcl_Obj** nocapture readonly %52), !dbg !3467
  %refCount.i26 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr12, i64 0, i32 0, !dbg !3468
  %refCount1.i27 = load i32, i32* %refCount.i26, align 4, !dbg !3470
  %53 = icmp eq i32 %refCount1.i27, 0, !dbg !3470
  tail call void @llvm.assume(i1 %53) #5, !dbg !3470
  br label %ok, !dbg !3471

empty:                                            ; preds = %clamp
  %objPtr13 = tail call noalias nonnull %Tcl_Obj* @Tcl_NewObj(), !dbg !3472
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr13, i64 0, i32 0, !dbg !3473
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !3475
  %54 = icmp eq i32 %refCount1.i, 0, !dbg !3475
  tail call void @llvm.assume(i1 %54) #5, !dbg !3475
  br label %ok, !dbg !3476

ok:                                               ; preds = %clear.i, %sublist.inPlace.done, %empty, %sublist.new
  %result = phi %Tcl_Obj* [ %objPtr12, %sublist.new ], [ %objPtr13, %empty ], [ %list, %sublist.inPlace.done ], [ %list, %clear.i ]
  %refCount.i.i25 = getelementptr %Tcl_Obj, %Tcl_Obj* %result, i64 0, i32 0, !dbg !3477
  %refCount1.i.i = load i32, i32* %refCount.i.i25, align 4, !dbg !3480
  %55 = add nsw i32 %refCount1.i.i, 1, !dbg !3480
  store i32 %55, i32* %refCount.i.i25, align 4, !dbg !3480
  %56 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %result, 1, !dbg !3481
  ret { i32, %Tcl_Obj* } %56, !dbg !3481

error:                                            ; preds = %tcl.impl.getIndex.exit24, %tcl.impl.getIndex.exit, %enter
  store i32 1, i32* %ecvar, align 4, !dbg !3482
  ret { i32, %Tcl_Obj* } { i32 1, %Tcl_Obj* undef }, !dbg !3483
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, %Tcl_Obj* } @tcl.list.range1(%Tcl_Obj* nonnull %list, %INT %from, %INT %to, i32* noalias nocapture nonnull %ecvar) local_unnamed_addr #6 !dbg !3484 {
enter:
  %objc = alloca i32, align 4, !dbg !3492
  %objv = alloca %Tcl_Obj**, align 8, !dbg !3493
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !3494, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %0 = extractvalue %INT %from, 0, !dbg !3495
  %1 = extractvalue %INT %from, 1, !dbg !3495
  %2 = extractvalue %INT %from, 2, !dbg !3495
  %3 = trunc i64 %2 to i32, !dbg !3495
  %from115 = select i1 %0, i32 %3, i32 %1, !dbg !3495
  %4 = extractvalue %INT %to, 0, !dbg !3497
  %5 = extractvalue %INT %to, 1, !dbg !3497
  %6 = extractvalue %INT %to, 2, !dbg !3497
  %7 = trunc i64 %6 to i32, !dbg !3497
  %to221 = select i1 %4, i32 %7, i32 %5, !dbg !3497
  %code = call i32 @Tcl_ListObjGetElements(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %list, i32* noalias nocapture nonnull %objc, %Tcl_Obj*** noalias nocapture nonnull %objv), !dbg !3499
  %8 = icmp eq i32 %code, 0, !dbg !3500
  br i1 %8, label %clamp, label %error, !dbg !3500

clamp:                                            ; preds = %enter
  %objc3 = load i32, i32* %objc, align 4, !dbg !3501
  %objv4 = load %Tcl_Obj**, %Tcl_Obj*** %objv, align 8, !dbg !3502
  %9 = icmp slt i32 %from115, -1, !dbg !3503
  %10 = add i32 %objc3, 1, !dbg !3503
  %11 = add i32 %10, %from115, !dbg !3503
  %12 = icmp slt i32 %objc3, %from115, !dbg !3503
  %min = select i1 %12, i32 %objc3, i32 %from115, !dbg !3503
  %from5 = select i1 %9, i32 %11, i32 %min, !dbg !3503
  %13 = icmp sgt i32 %from5, -1, !dbg !3504
  %from6 = select i1 %13, i32 %from5, i32 -1, !dbg !3504
  %14 = icmp slt i32 %to221, -1, !dbg !3505
  %15 = add i32 %10, %to221, !dbg !3505
  %16 = icmp slt i32 %objc3, %to221, !dbg !3505
  %min7 = select i1 %16, i32 %objc3, i32 %to221, !dbg !3505
  %to8 = select i1 %14, i32 %15, i32 %min7, !dbg !3505
  %17 = icmp sgt i32 %to8, -1, !dbg !3506
  %to9 = select i1 %17, i32 %to8, i32 -1, !dbg !3506
  %18 = icmp sle i32 %from6, %to9, !dbg !3507
  %19 = icmp slt i32 %from6, %objc3, !dbg !3507
  %20 = and i1 %17, %19, !dbg !3507
  %21 = and i1 %18, %20, !dbg !3507
  br i1 %21, label %sublist, label %empty, !dbg !3507

sublist:                                          ; preds = %clamp
  %22 = icmp sgt i32 %from6, 0, !dbg !3508
  %from10 = select i1 %22, i32 %from5, i32 0, !dbg !3508
  %23 = add nsw i32 %objc3, -1, !dbg !3509
  %24 = icmp slt i32 %23, %to9, !dbg !3509
  %to11 = select i1 %24, i32 %23, i32 %to9, !dbg !3509
  %25 = icmp eq i32 %from10, 0, !dbg !3510
  %26 = icmp sgt i32 %23, %to9, !dbg !3510
  %refCountPtr.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %list, i64 0, i32 0, !dbg !3511
  %refCount.i.i24 = load i32, i32* %refCountPtr.i.i, align 4, !dbg !3511
  %shared.i = icmp slt i32 %refCount.i.i24, 2, !dbg !3514
  %27 = and i1 %26, %shared.i, !dbg !3510
  %28 = and i1 %25, %27, !dbg !3510
  br i1 %28, label %sublist.inPlace.check, label %sublist.new, !dbg !3510

sublist.inPlace.check:                            ; preds = %sublist
  %internalRep = getelementptr %Tcl_Obj, %Tcl_Obj* %list, i64 0, i32 4, i32 0, !dbg !3515
  %29 = bitcast i8** %internalRep to %TclList**, !dbg !3515
  %listPtr = load %TclList*, %TclList** %29, align 8, !dbg !3515
  %refCount.ptr = getelementptr %TclList, %TclList* %listPtr, i64 0, i32 0, !dbg !3516
  %refCount = load i32, i32* %refCount.ptr, align 4, !dbg !3516
  %30 = icmp eq i32 %refCount, 1, !dbg !3516
  br i1 %30, label %sublist.inPlace, label %sublist.new, !dbg !3516

sublist.inPlace:                                  ; preds = %sublist.inPlace.check
  %onePast = add nsw i32 %to11, 1, !dbg !3517
  %31 = icmp slt i32 %onePast, %objc3, !dbg !3518
  br i1 %31, label %sublist.inPlace.free, label %sublist.inPlace.done, !dbg !3518

sublist.inPlace.free:                             ; preds = %sublist.inPlace, %tcl.dropReference.exit
  %index25 = phi i32 [ %index12, %tcl.dropReference.exit ], [ %onePast, %sublist.inPlace ]
  %index12 = add nsw i32 %index25, 1, !dbg !3519
  %32 = sext i32 %index25 to i64, !dbg !3520
  %33 = getelementptr %Tcl_Obj*, %Tcl_Obj** %objv4, i64 %32, !dbg !3520
  %objPtr = load %Tcl_Obj*, %Tcl_Obj** %33, align 8, !dbg !3520
  %refCount.i.i22 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !3521
  %refCount1.i.i23 = load i32, i32* %refCount.i.i22, align 4, !dbg !3524
  %34 = icmp slt i32 %refCount1.i.i23, 2, !dbg !3525
  br i1 %34, label %freeObject.i.i, label %leave.i.i, !dbg !3525

freeObject.i.i:                                   ; preds = %sublist.inPlace.free
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %objPtr) #5, !dbg !3526
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %objPtr) #5, !dbg !3527
  br label %tcl.dropReference.exit, !dbg !3528

leave.i.i:                                        ; preds = %sublist.inPlace.free
  %35 = add nsw i32 %refCount1.i.i23, -1, !dbg !3524
  store i32 %35, i32* %refCount.i.i22, align 4, !dbg !3529
  br label %tcl.dropReference.exit, !dbg !3530

tcl.dropReference.exit:                           ; preds = %freeObject.i.i, %leave.i.i
  %36 = icmp slt i32 %index12, %objc3, !dbg !3518
  br i1 %36, label %sublist.inPlace.free, label %sublist.inPlace.done, !dbg !3518

sublist.inPlace.done:                             ; preds = %tcl.dropReference.exit, %sublist.inPlace
  %listPtr.elemCount = getelementptr %TclList, %TclList* %listPtr, i64 0, i32 2, !dbg !3531
  store i32 %onePast, i32* %listPtr.elemCount, align 4, !dbg !3531
  %listPtr.canonicalFlag = getelementptr %TclList, %TclList* %listPtr, i64 0, i32 3, !dbg !3532
  store i32 1, i32* %listPtr.canonicalFlag, align 4, !dbg !3532
  %bytes.i = getelementptr %Tcl_Obj, %Tcl_Obj* %list, i64 0, i32 1, !dbg !3533
  %bytes1.i = load i8*, i8** %bytes.i, align 8, !dbg !3535
  %37 = icmp eq i8* %bytes1.i, null, !dbg !3536
  br i1 %37, label %ok, label %act.i, !dbg !3536

act.i:                                            ; preds = %sublist.inPlace.done
  %tclEmptyStringRep.i = load i8*, i8** @tclEmptyStringRep, align 8, !dbg !3537, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %38 = icmp eq i8* %bytes1.i, %tclEmptyStringRep.i, !dbg !3537
  br i1 %38, label %clear.i, label %free.i, !dbg !3537

free.i:                                           ; preds = %act.i
  tail call void @Tcl_Free(i8* nonnull %bytes1.i) #5, !dbg !3538
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %bytes1.i) #5, !dbg !3539
  br label %clear.i, !dbg !3540

clear.i:                                          ; preds = %free.i, %act.i
  store i8* null, i8** %bytes.i, align 8, !dbg !3541
  br label %ok, !dbg !3542

sublist.new:                                      ; preds = %sublist.inPlace.check, %sublist
  %39 = sub i32 1, %from10, !dbg !3543
  %40 = add i32 %39, %to11, !dbg !3543
  %41 = sext i32 %from10 to i64, !dbg !3543
  %42 = getelementptr %Tcl_Obj*, %Tcl_Obj** %objv4, i64 %41, !dbg !3543
  %objPtr13 = tail call noalias nonnull %Tcl_Obj* @Tcl_NewListObj(i32 %40, %Tcl_Obj** nocapture readonly %42), !dbg !3543
  %refCount.i16 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr13, i64 0, i32 0, !dbg !3544
  %refCount1.i17 = load i32, i32* %refCount.i16, align 4, !dbg !3546
  %43 = icmp eq i32 %refCount1.i17, 0, !dbg !3546
  tail call void @llvm.assume(i1 %43) #5, !dbg !3546
  br label %ok, !dbg !3547

empty:                                            ; preds = %clamp
  %objPtr14 = tail call noalias nonnull %Tcl_Obj* @Tcl_NewObj(), !dbg !3548
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr14, i64 0, i32 0, !dbg !3549
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !3551
  %44 = icmp eq i32 %refCount1.i, 0, !dbg !3551
  tail call void @llvm.assume(i1 %44) #5, !dbg !3551
  br label %ok, !dbg !3552

ok:                                               ; preds = %clear.i, %sublist.inPlace.done, %empty, %sublist.new
  %result = phi %Tcl_Obj* [ %objPtr13, %sublist.new ], [ %objPtr14, %empty ], [ %list, %sublist.inPlace.done ], [ %list, %clear.i ]
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %result, i64 0, i32 0, !dbg !3553
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !3556
  %45 = add nsw i32 %refCount1.i.i, 1, !dbg !3556
  store i32 %45, i32* %refCount.i.i, align 4, !dbg !3556
  %46 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %result, 1, !dbg !3557
  ret { i32, %Tcl_Obj* } %46, !dbg !3557

error:                                            ; preds = %enter
  store i32 1, i32* %ecvar, align 4, !dbg !3558
  ret { i32, %Tcl_Obj* } { i32 1, %Tcl_Obj* undef }, !dbg !3559
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, %Tcl_Obj* } @tcl.list.set(%Tcl_Obj* nonnull %list, i32 %idxc, %Tcl_Obj** noalias nocapture nonnull readonly %idxv, %Tcl_Obj* nonnull %elem, i32* noalias nocapture nonnull %ecvar) local_unnamed_addr #6 !dbg !3560 {
enter:
  %index.i = alloca i32, align 4, !dbg !3569
  %0 = alloca i32, align 4, !dbg !3571
  %1 = alloca %Tcl_Obj**, align 8, !dbg !3572
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !3573, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %2 = icmp eq i32 %idxc, 0, !dbg !3574
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %list, i64 0, i32 0, !dbg !3575
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !3575
  br i1 %2, label %doNothing, label %sharedCheck, !dbg !3574

doNothing:                                        ; preds = %enter
  %3 = add nsw i32 %refCount1.i.i, 1, !dbg !3576
  store i32 %3, i32* %refCount.i.i, align 4, !dbg !3576
  %4 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %list, 1, !dbg !3579
  ret { i32, %Tcl_Obj* } %4, !dbg !3579

sharedCheck:                                      ; preds = %enter
  %shared.i30 = icmp sgt i32 %refCount1.i.i, 1, !dbg !3580
  br i1 %shared.i30, label %duplicate, label %prepareToLoop, !dbg !3582

duplicate:                                        ; preds = %sharedCheck
  %objPtr = tail call noalias nonnull %Tcl_Obj* @Tcl_DuplicateObj(%Tcl_Obj* nocapture nonnull readonly %list), !dbg !3583
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !3584
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !3586
  %5 = icmp eq i32 %refCount1.i, 0, !dbg !3586
  tail call void @llvm.assume(i1 %5) #5, !dbg !3586
  br label %prepareToLoop, !dbg !3587

prepareToLoop:                                    ; preds = %duplicate, %sharedCheck
  %retValue = phi %Tcl_Obj* [ %list, %sharedCheck ], [ %objPtr, %duplicate ]
  %code69 = call i32 @Tcl_ListObjGetElements(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %retValue, i32* noalias nocapture nonnull %0, %Tcl_Obj*** noalias nocapture nonnull %1), !dbg !3588
  %6 = icmp eq i32 %code69, 0, !dbg !3588
  br i1 %6, label %loop2.lr.ph, label %loopFailDone, !dbg !3588

loop2.lr.ph:                                      ; preds = %prepareToLoop
  %7 = bitcast i32* %index.i to i8*, !dbg !3589
  %tclIntType.i = load %ObjType*, %ObjType** @tclIntType, align 8, !dbg !3589, !invariant.load !3, !noalias !3590, !nonnull !3, !dereferenceable !1051
  br label %loop2, !dbg !3588

loopFail.preheader:                               ; preds = %tcl.impl.getIndex.exit
  %8 = icmp eq %Tcl_Obj* %.02072, null, !dbg !3594
  br i1 %8, label %loopFailDone, label %loopFailDrop.preheader, !dbg !3594

loopFailDrop.preheader:                           ; preds = %loop8, %loopFail.preheader
  %.168.ph = phi %Tcl_Obj* [ %.02072, %loopFail.preheader ], [ %.073, %loop8 ]
  br label %loopFailDrop, !dbg !3594

loop2:                                            ; preds = %loop2.lr.ph, %loop8
  %.073 = phi %Tcl_Obj* [ %retValue, %loop2.lr.ph ], [ %sublist57, %loop8 ]
  %.02072 = phi %Tcl_Obj* [ null, %loop2.lr.ph ], [ %.073, %loop8 ]
  %.02171 = phi %Tcl_Obj** [ %idxv, %loop2.lr.ph ], [ %16, %loop8 ]
  %.02270 = phi i32 [ %idxc, %loop2.lr.ph ], [ %20, %loop8 ]
  %elemCount = load i32, i32* %0, align 4, !dbg !3595
  %elemPtrs = load %Tcl_Obj**, %Tcl_Obj*** %1, align 8, !dbg !3596
  %indexArray3 = load %Tcl_Obj*, %Tcl_Obj** %.02171, align 8, !dbg !3597
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7), !dbg !3598
  %typePtr.ptr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %indexArray3, i64 0, i32 3, !dbg !3598
  %typePtr.i = load %ObjType*, %ObjType** %typePtr.ptr.i, align 8, !dbg !3598, !alias.scope !3599, !noalias !3600
  %9 = icmp eq %ObjType* %typePtr.i, %tclIntType.i, !dbg !3598
  br i1 %9, label %direct.i, label %call.i, !dbg !3598

direct.i:                                         ; preds = %loop2
  %internalRep.i = getelementptr %Tcl_Obj, %Tcl_Obj* %indexArray3, i64 0, i32 4, !dbg !3601
  %10 = bitcast %InternalRepresentation* %internalRep.i to i32*, !dbg !3602
  %longValue.i = load i32, i32* %10, align 4, !dbg !3602, !alias.scope !3599, !noalias !3600
  %11 = insertvalue { i1, i32 } { i1 true, i32 undef }, i32 %longValue.i, 1, !dbg !3602
  br label %tcl.impl.getIndex.exit, !dbg !3602

call.i:                                           ; preds = %loop2
  %code.i = call i32 @TclGetIntForIndex(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %indexArray3, i32 %elemCount, i32* noalias nocapture nonnull %index.i) #5, !dbg !3603
  %12 = icmp eq i32 %code.i, 0, !dbg !3604
  %13 = insertvalue { i1, i32 } undef, i1 %12, 0, !dbg !3604
  %index1.i = load i32, i32* %index.i, align 4, !dbg !3605, !noalias !3590
  %14 = insertvalue { i1, i32 } %13, i32 %index1.i, 1, !dbg !3605
  br label %tcl.impl.getIndex.exit, !dbg !3605

tcl.impl.getIndex.exit:                           ; preds = %call.i, %direct.i
  %15 = phi { i1, i32 } [ %11, %direct.i ], [ %14, %call.i ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7), !dbg !3589
  %getIndex.index = extractvalue { i1, i32 } %15, 1, !dbg !3597
  %getIndex.result = extractvalue { i1, i32 } %15, 0, !dbg !3597
  br i1 %getIndex.result, label %loop3, label %loopFail.preheader, !dbg !3597

loop3:                                            ; preds = %tcl.impl.getIndex.exit
  %16 = getelementptr %Tcl_Obj*, %Tcl_Obj** %.02171, i64 1, !dbg !3606
  %17 = icmp slt i32 %getIndex.index, 0, !dbg !3607
  %18 = icmp sgt i32 %getIndex.index, %elemCount, !dbg !3607
  %19 = or i1 %17, %18, !dbg !3607
  br i1 %19, label %loopRangeFail, label %loop4, !dbg !3607

loop4:                                            ; preds = %loop3
  %20 = add i32 %.02270, -1, !dbg !3608
  %21 = icmp sgt i32 %20, 0, !dbg !3609
  br i1 %21, label %loop5, label %loopEnd.preheader, !dbg !3609

loop5:                                            ; preds = %loop4
  %22 = icmp eq i32 %getIndex.index, %elemCount, !dbg !3610
  br i1 %22, label %appendSublist, label %existingElem, !dbg !3610

existingElem:                                     ; preds = %loop5
  %23 = sext i32 %getIndex.index to i64, !dbg !3611
  %24 = getelementptr %Tcl_Obj*, %Tcl_Obj** %elemPtrs, i64 %23, !dbg !3611
  %25 = load %Tcl_Obj*, %Tcl_Obj** %24, align 8, !dbg !3611
  %refCountPtr.i.i52 = getelementptr %Tcl_Obj, %Tcl_Obj* %25, i64 0, i32 0, !dbg !3612
  %refCount.i.i53 = load i32, i32* %refCountPtr.i.i52, align 4, !dbg !3612
  %shared.i54 = icmp sgt i32 %refCount.i.i53, 1, !dbg !3615
  br i1 %shared.i54, label %dupeElem, label %setSublist, !dbg !3616

dupeElem:                                         ; preds = %existingElem
  %objPtr6 = tail call noalias nonnull %Tcl_Obj* @Tcl_DuplicateObj(%Tcl_Obj* nocapture nonnull readonly %25), !dbg !3617
  %refCount.i50 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr6, i64 0, i32 0, !dbg !3618
  %refCount1.i51 = load i32, i32* %refCount.i50, align 4, !dbg !3620
  %26 = icmp eq i32 %refCount1.i51, 0, !dbg !3620
  tail call void @llvm.assume(i1 %26) #5, !dbg !3620
  br label %setSublist, !dbg !3621

appendSublist:                                    ; preds = %loop5
  %objPtr4 = tail call noalias nonnull %Tcl_Obj* @Tcl_NewObj(), !dbg !3622
  %refCount.i40 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr4, i64 0, i32 0, !dbg !3623
  %refCount1.i41 = load i32, i32* %refCount.i40, align 4, !dbg !3625
  %27 = icmp eq i32 %refCount1.i41, 0, !dbg !3625
  tail call void @llvm.assume(i1 %27) #5, !dbg !3625
  %code7 = tail call i32 @Tcl_ListObjAppendElement(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %.073, %Tcl_Obj* noalias nonnull %objPtr4), !dbg !3626
  br label %loop7, !dbg !3627

setSublist:                                       ; preds = %dupeElem, %existingElem
  %sublist.ph = phi %Tcl_Obj* [ %objPtr6, %dupeElem ], [ %25, %existingElem ]
  %code8 = tail call i32 @TclListObjSetElement(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %.073, i32 %getIndex.index, %Tcl_Obj* noalias nonnull %sublist.ph), !dbg !3628
  br label %loop7, !dbg !3629

loop7:                                            ; preds = %setSublist, %appendSublist
  %sublist57 = phi %Tcl_Obj* [ %sublist.ph, %setSublist ], [ %objPtr4, %appendSublist ]
  %refCountPtr.i.i47 = getelementptr %Tcl_Obj, %Tcl_Obj* %sublist57, i64 0, i32 0, !dbg !3630
  %refCount.i.i48 = load i32, i32* %refCountPtr.i.i47, align 4, !dbg !3630
  %shared.i49 = icmp sgt i32 %refCount.i.i48, 1, !dbg !3633
  br i1 %shared.i49, label %mustDuplicate, label %loop8, !dbg !3634

mustDuplicate:                                    ; preds = %loop7
  %objPtr10 = tail call noalias nonnull %Tcl_Obj* @Tcl_DuplicateObj(%Tcl_Obj* nocapture nonnull readonly %sublist57), !dbg !3635
  %refCount.i45 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr10, i64 0, i32 0, !dbg !3636
  %refCount1.i46 = load i32, i32* %refCount.i45, align 4, !dbg !3638
  %28 = icmp eq i32 %refCount1.i46, 0, !dbg !3638
  tail call void @llvm.assume(i1 %28) #5, !dbg !3638
  %code11 = tail call i32 @TclListObjSetElement(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %.073, i32 %getIndex.index, %Tcl_Obj* noalias nonnull %objPtr10), !dbg !3639
  br label %loop8, !dbg !3640

loop8:                                            ; preds = %mustDuplicate, %loop7
  %internalRep = getelementptr %Tcl_Obj, %Tcl_Obj* %.073, i64 0, i32 4, i32 1, !dbg !3641
  %29 = bitcast i8** %internalRep to %Tcl_Obj**, !dbg !3641
  store %Tcl_Obj* %.02072, %Tcl_Obj** %29, align 8, !dbg !3641
  %code = call i32 @Tcl_ListObjGetElements(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %sublist57, i32* noalias nocapture nonnull %0, %Tcl_Obj*** noalias nocapture nonnull %1), !dbg !3588
  %30 = icmp eq i32 %code, 0, !dbg !3588
  br i1 %30, label %loop2, label %loopFailDrop.preheader, !dbg !3588

loopRangeFail:                                    ; preds = %loop3
  %str.0 = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.0, align 8, !dbg !3642, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i43 = getelementptr %Tcl_Obj, %Tcl_Obj* %str.0, i64 0, i32 0, !dbg !3643
  %refCount.i44 = load i32, i32* %refCountPtr.i43, align 4, !dbg !3643
  %31 = icmp sgt i32 %refCount.i44, 1, !dbg !3642
  tail call void @llvm.assume(i1 %31), !dbg !3642
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %str.0), !dbg !3642
  %str.1 = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.1, align 8, !dbg !3645, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %str.1, i64 0, i32 0, !dbg !3646
  %refCount.i42 = load i32, i32* %refCountPtr.i, align 4, !dbg !3646
  %32 = icmp sgt i32 %refCount.i42, 1, !dbg !3645
  tail call void @llvm.assume(i1 %32), !dbg !3645
  tail call void @Tcl_SetObjErrorCode(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %str.1), !dbg !3645
  br label %loopEnd.preheader, !dbg !3648

loopEnd.preheader:                                ; preds = %loop4, %loopRangeFail
  %33 = icmp eq %Tcl_Obj* %.02072, null, !dbg !3649
  br i1 %33, label %terminalSet, label %loopEndDrop.lr.ph, !dbg !3649

loopEndDrop.lr.ph:                                ; preds = %loopEnd.preheader
  %tclEmptyStringRep.i33 = load i8*, i8** @tclEmptyStringRep, align 8, !dbg !3650
  br label %loopEndDrop, !dbg !3649

loopFailDrop:                                     ; preds = %loopFailDrop.preheader, %loopFailDrop
  %.168 = phi %Tcl_Obj* [ %35, %loopFailDrop ], [ %.168.ph, %loopFailDrop.preheader ]
  %internalRep13 = getelementptr %Tcl_Obj, %Tcl_Obj* %.168, i64 0, i32 4, i32 1, !dbg !3652
  %34 = bitcast i8** %internalRep13 to %Tcl_Obj**, !dbg !3652
  %35 = load %Tcl_Obj*, %Tcl_Obj** %34, align 8, !dbg !3653
  store %Tcl_Obj* null, %Tcl_Obj** %34, align 8, !dbg !3654
  %36 = icmp eq %Tcl_Obj* %35, null, !dbg !3594
  br i1 %36, label %loopFailDone, label %loopFailDrop, !dbg !3594

loopFailDone:                                     ; preds = %loopFailDrop, %prepareToLoop, %loopFail.preheader
  %37 = icmp eq %Tcl_Obj* %retValue, %list, !dbg !3655
  br i1 %37, label %loopFailExit, label %loopFailDropOverall, !dbg !3655

loopFailDropOverall:                              ; preds = %loopFailDone
  %refCount.i.i38 = getelementptr %Tcl_Obj, %Tcl_Obj* %retValue, i64 0, i32 0, !dbg !3656
  %refCount1.i.i39 = load i32, i32* %refCount.i.i38, align 4, !dbg !3659
  %38 = icmp slt i32 %refCount1.i.i39, 2, !dbg !3660
  br i1 %38, label %freeObject.i.i, label %leave.i.i, !dbg !3660

freeObject.i.i:                                   ; preds = %loopFailDropOverall
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %retValue) #5, !dbg !3661
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %retValue) #5, !dbg !3662
  br label %loopFailExit, !dbg !3663

leave.i.i:                                        ; preds = %loopFailDropOverall
  %39 = add nsw i32 %refCount1.i.i39, -1, !dbg !3659
  store i32 %39, i32* %refCount.i.i38, align 4, !dbg !3664
  br label %loopFailExit, !dbg !3665

loopFailExit:                                     ; preds = %leave.i.i, %freeObject.i.i, %loopFailDone
  store i32 1, i32* %ecvar, align 4, !dbg !3666
  ret { i32, %Tcl_Obj* } { i32 1, %Tcl_Obj* undef }, !dbg !3667

loopEndDrop:                                      ; preds = %loopEndDrop.lr.ph, %TclInvalidateStringRep.exit37
  %.267 = phi %Tcl_Obj* [ %.02072, %loopEndDrop.lr.ph ], [ %41, %TclInvalidateStringRep.exit37 ]
  %internalRep14 = getelementptr %Tcl_Obj, %Tcl_Obj* %.267, i64 0, i32 4, i32 1, !dbg !3668
  %40 = bitcast i8** %internalRep14 to %Tcl_Obj**, !dbg !3668
  %41 = load %Tcl_Obj*, %Tcl_Obj** %40, align 8, !dbg !3669
  store %Tcl_Obj* null, %Tcl_Obj** %40, align 8, !dbg !3670
  %bytes.i31 = getelementptr %Tcl_Obj, %Tcl_Obj* %.267, i64 0, i32 1, !dbg !3671
  %bytes1.i32 = load i8*, i8** %bytes.i31, align 8, !dbg !3672
  %42 = icmp eq i8* %bytes1.i32, null, !dbg !3673
  br i1 %42, label %TclInvalidateStringRep.exit37, label %act.i34, !dbg !3673

act.i34:                                          ; preds = %loopEndDrop
  %43 = icmp eq i8* %bytes1.i32, %tclEmptyStringRep.i33, !dbg !3674
  br i1 %43, label %clear.i36, label %free.i35, !dbg !3674

free.i35:                                         ; preds = %act.i34
  tail call void @Tcl_Free(i8* nonnull %bytes1.i32) #5, !dbg !3675
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %bytes1.i32) #5, !dbg !3676
  br label %clear.i36, !dbg !3677

clear.i36:                                        ; preds = %free.i35, %act.i34
  store i8* null, i8** %bytes.i31, align 8, !dbg !3678
  br label %TclInvalidateStringRep.exit37, !dbg !3679

TclInvalidateStringRep.exit37:                    ; preds = %loopEndDrop, %clear.i36
  %44 = icmp eq %Tcl_Obj* %41, null, !dbg !3649
  br i1 %44, label %terminalSet, label %loopEndDrop, !dbg !3649

terminalSet:                                      ; preds = %TclInvalidateStringRep.exit37, %loopEnd.preheader
  %code15 = call i32 @Tcl_ListObjLength(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %.073, i32* noalias nocapture nonnull %0), !dbg !3680
  %45 = load i32, i32* %0, align 4, !dbg !3681
  %46 = icmp eq i32 %getIndex.index, %45, !dbg !3681
  br i1 %46, label %termSetAdd, label %termSetSet, !dbg !3681

termSetAdd:                                       ; preds = %terminalSet
  %code16 = tail call i32 @Tcl_ListObjAppendElement(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %.073, %Tcl_Obj* noalias nonnull %elem), !dbg !3682
  br label %exit, !dbg !3683

termSetSet:                                       ; preds = %terminalSet
  %code17 = tail call i32 @TclListObjSetElement(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %.073, i32 %getIndex.index, %Tcl_Obj* noalias nonnull %elem), !dbg !3684
  br label %exit, !dbg !3685

exit:                                             ; preds = %termSetSet, %termSetAdd
  %bytes.i = getelementptr %Tcl_Obj, %Tcl_Obj* %.073, i64 0, i32 1, !dbg !3686
  %bytes1.i = load i8*, i8** %bytes.i, align 8, !dbg !3688
  %47 = icmp eq i8* %bytes1.i, null, !dbg !3689
  br i1 %47, label %TclInvalidateStringRep.exit, label %act.i, !dbg !3689

act.i:                                            ; preds = %exit
  %tclEmptyStringRep.i = load i8*, i8** @tclEmptyStringRep, align 8, !dbg !3690, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %48 = icmp eq i8* %bytes1.i, %tclEmptyStringRep.i, !dbg !3690
  br i1 %48, label %clear.i, label %free.i, !dbg !3690

free.i:                                           ; preds = %act.i
  tail call void @Tcl_Free(i8* nonnull %bytes1.i) #5, !dbg !3691
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %bytes1.i) #5, !dbg !3692
  br label %clear.i, !dbg !3693

clear.i:                                          ; preds = %free.i, %act.i
  store i8* null, i8** %bytes.i, align 8, !dbg !3694
  br label %TclInvalidateStringRep.exit, !dbg !3695

TclInvalidateStringRep.exit:                      ; preds = %exit, %clear.i
  %refCount.i.i26 = getelementptr %Tcl_Obj, %Tcl_Obj* %retValue, i64 0, i32 0, !dbg !3696
  %refCount1.i.i27 = load i32, i32* %refCount.i.i26, align 4, !dbg !3699
  %49 = add nsw i32 %refCount1.i.i27, 1, !dbg !3699
  store i32 %49, i32* %refCount.i.i26, align 4, !dbg !3699
  %refCountPtr.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %elem, i64 0, i32 0, !dbg !3700
  %refCount.i.i25 = load i32, i32* %refCountPtr.i.i, align 4, !dbg !3700
  %shared.i = icmp sgt i32 %refCount.i.i25, 1, !dbg !3703
  br i1 %shared.i, label %exit2, label %exit1, !dbg !3704

exit1:                                            ; preds = %TclInvalidateStringRep.exit
  %50 = add nsw i32 %refCount.i.i25, 1, !dbg !3705
  store i32 %50, i32* %refCountPtr.i.i, align 4, !dbg !3705
  br label %exit2, !dbg !3708

exit2:                                            ; preds = %exit1, %TclInvalidateStringRep.exit
  %51 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %retValue, 1, !dbg !3709
  ret { i32, %Tcl_Obj* } %51, !dbg !3709
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, %Tcl_Obj* } @tcl.list.set1(%Tcl_Obj* nonnull %list, %INT %idx, %Tcl_Obj* nonnull %elem, i32* noalias nocapture nonnull %ecvar) local_unnamed_addr #6 !dbg !3710 {
enter:
  %objc = alloca i32, align 4, !dbg !3718
  %objv = alloca %Tcl_Obj**, align 8, !dbg !3719
  %0 = extractvalue %INT %idx, 0, !dbg !3720
  %1 = extractvalue %INT %idx, 1, !dbg !3720
  %2 = extractvalue %INT %idx, 2, !dbg !3720
  %3 = trunc i64 %2 to i32, !dbg !3720
  %index9 = select i1 %0, i32 %3, i32 %1, !dbg !3720
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !3722, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %list, i64 0, i32 0, !dbg !3723
  %refCount.i.i.i10 = load i32, i32* %refCountPtr.i.i.i, align 4, !dbg !3723
  %shared.i.i = icmp sgt i32 %refCount.i.i.i10, 1, !dbg !3727
  br i1 %shared.i.i, label %duplicated.i11, label %obj.dedup.exit, !dbg !3728

duplicated.i11:                                   ; preds = %enter
  %duplicateObj.i = tail call noalias nonnull %Tcl_Obj* @Tcl_DuplicateObj(%Tcl_Obj* nocapture nonnull readonly %list) #5, !dbg !3729
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %duplicateObj.i, i64 0, i32 0, !dbg !3730
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !3732
  %4 = icmp eq i32 %refCount1.i.i, 0, !dbg !3732
  tail call void @llvm.assume(i1 %4) #5, !dbg !3732
  br label %obj.dedup.exit, !dbg !3733

obj.dedup.exit:                                   ; preds = %enter, %duplicated.i11
  %list.sink = phi %Tcl_Obj* [ %duplicateObj.i, %duplicated.i11 ], [ %list, %enter ]
  %code = call i32 @Tcl_ListObjGetElements(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %list.sink, i32* noalias nocapture nonnull %objc, %Tcl_Obj*** noalias nocapture nonnull %objv), !dbg !3734
  %5 = icmp eq i32 %code, 1, !dbg !3735
  br i1 %5, label %failure.exit, label %range.check, !dbg !3735

range.check:                                      ; preds = %obj.dedup.exit
  %objc3 = load i32, i32* %objc, align 4, !dbg !3736
  %6 = icmp slt i32 %index9, 0, !dbg !3737
  %7 = icmp sgt i32 %index9, %objc3, !dbg !3737
  %8 = or i1 %6, %7, !dbg !3737
  br i1 %8, label %failure.outOfRange, label %operation.check, !dbg !3737

operation.check:                                  ; preds = %range.check
  %refCountPtr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %list.sink, i64 0, i32 0, !dbg !3738
  %refCount.i = load i32, i32* %refCountPtr.i, align 4, !dbg !3738
  %9 = icmp eq i32 %index9, %objc3, !dbg !3740
  br i1 %9, label %append, label %set, !dbg !3740

append:                                           ; preds = %operation.check
  %code4 = tail call i32 @Tcl_ListObjAppendElement(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %list.sink, %Tcl_Obj* noalias nonnull %elem), !dbg !3741
  br label %done, !dbg !3742

set:                                              ; preds = %operation.check
  %code5 = tail call i32 @TclListObjSetElement(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %list.sink, i32 %index9, %Tcl_Obj* noalias nonnull %elem), !dbg !3743
  br label %done, !dbg !3744

done:                                             ; preds = %set, %append
  %refCount.i22 = load i32, i32* %refCountPtr.i, align 4, !dbg !3745
  %10 = icmp eq i32 %refCount.i, %refCount.i22, !dbg !3747
  tail call void @llvm.assume(i1 %10), !dbg !3747
  %bytes.i = getelementptr %Tcl_Obj, %Tcl_Obj* %list.sink, i64 0, i32 1, !dbg !3748
  %bytes1.i = load i8*, i8** %bytes.i, align 8, !dbg !3750
  %11 = icmp eq i8* %bytes1.i, null, !dbg !3751
  br i1 %11, label %TclInvalidateStringRep.exit, label %act.i, !dbg !3751

act.i:                                            ; preds = %done
  %tclEmptyStringRep.i = load i8*, i8** @tclEmptyStringRep, align 8, !dbg !3752, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %12 = icmp eq i8* %bytes1.i, %tclEmptyStringRep.i, !dbg !3752
  br i1 %12, label %clear.i, label %free.i, !dbg !3752

free.i:                                           ; preds = %act.i
  tail call void @Tcl_Free(i8* nonnull %bytes1.i) #5, !dbg !3753
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %bytes1.i) #5, !dbg !3754
  %refCount1.i.i20.pre.pre = load i32, i32* %refCountPtr.i, align 4, !dbg !3755
  br label %clear.i, !dbg !3758

clear.i:                                          ; preds = %free.i, %act.i
  %refCount1.i.i20.pre = phi i32 [ %refCount1.i.i20.pre.pre, %free.i ], [ %refCount.i, %act.i ], !dbg !3755
  store i8* null, i8** %bytes.i, align 8, !dbg !3759
  br label %TclInvalidateStringRep.exit, !dbg !3760

TclInvalidateStringRep.exit:                      ; preds = %done, %clear.i
  %refCount1.i.i20 = phi i32 [ %refCount.i, %done ], [ %refCount1.i.i20.pre, %clear.i ], !dbg !3755
  %13 = add nsw i32 %refCount1.i.i20, 1, !dbg !3755
  store i32 %13, i32* %refCountPtr.i, align 4, !dbg !3755
  %refCountPtr.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %elem, i64 0, i32 0, !dbg !3761
  %refCount.i.i18 = load i32, i32* %refCountPtr.i.i, align 4, !dbg !3761
  %shared.i = icmp sgt i32 %refCount.i.i18, 1, !dbg !3764
  br i1 %shared.i, label %exit1, label %exit, !dbg !3765

exit:                                             ; preds = %TclInvalidateStringRep.exit
  %14 = add nsw i32 %refCount.i.i18, 1, !dbg !3766
  store i32 %14, i32* %refCountPtr.i.i, align 4, !dbg !3766
  br label %exit1, !dbg !3769

exit1:                                            ; preds = %exit, %TclInvalidateStringRep.exit
  %15 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %list.sink, 1, !dbg !3770
  ret { i32, %Tcl_Obj* } %15, !dbg !3770

failure.outOfRange:                               ; preds = %range.check
  %str.0 = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.0, align 8, !dbg !3771, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i14 = getelementptr %Tcl_Obj, %Tcl_Obj* %str.0, i64 0, i32 0, !dbg !3772
  %refCount.i15 = load i32, i32* %refCountPtr.i14, align 4, !dbg !3772
  %16 = icmp sgt i32 %refCount.i15, 1, !dbg !3771
  tail call void @llvm.assume(i1 %16), !dbg !3771
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %str.0), !dbg !3771
  %str.1 = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.1, align 8, !dbg !3774, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i12 = getelementptr %Tcl_Obj, %Tcl_Obj* %str.1, i64 0, i32 0, !dbg !3775
  %refCount.i13 = load i32, i32* %refCountPtr.i12, align 4, !dbg !3775
  %17 = icmp sgt i32 %refCount.i13, 1, !dbg !3774
  tail call void @llvm.assume(i1 %17), !dbg !3774
  tail call void @Tcl_SetObjErrorCode(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %str.1), !dbg !3774
  br label %failure.exit, !dbg !3777

failure.exit:                                     ; preds = %failure.outOfRange, %obj.dedup.exit
  br i1 %shared.i.i, label %duplicated.i, label %obj.cleanup.exit, !dbg !3778

duplicated.i:                                     ; preds = %failure.exit
  %refCount.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %list.sink, i64 0, i32 0, !dbg !3780
  %refCount1.i.i.i = load i32, i32* %refCount.i.i.i, align 4, !dbg !3783
  %18 = icmp slt i32 %refCount1.i.i.i, 2, !dbg !3784
  br i1 %18, label %freeObject.i.i.i, label %leave.i.i.i, !dbg !3784

freeObject.i.i.i:                                 ; preds = %duplicated.i
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %list.sink) #5, !dbg !3785
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %list.sink) #5, !dbg !3786
  br label %obj.cleanup.exit, !dbg !3787

leave.i.i.i:                                      ; preds = %duplicated.i
  %19 = add nsw i32 %refCount1.i.i.i, -1, !dbg !3783
  store i32 %19, i32* %refCount.i.i.i, align 4, !dbg !3788
  br label %obj.cleanup.exit, !dbg !3789

obj.cleanup.exit:                                 ; preds = %failure.exit, %freeObject.i.i.i, %leave.i.i.i
  store i32 1, i32* %ecvar, align 4, !dbg !3790
  ret { i32, %Tcl_Obj* } { i32 1, %Tcl_Obj* undef }, !dbg !3791
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, %Tcl_Obj* } @tcl.list.setList(%Tcl_Obj* nonnull %list, %Tcl_Obj* nonnull %idxArg, %Tcl_Obj* nonnull %elem, i32* noalias nocapture nonnull %ecvar) local_unnamed_addr #6 !dbg !3792 {
enter:
  %index.i.i4 = alloca i32, align 4, !dbg !3798
  %0 = alloca i32, align 4, !dbg !3801
  %1 = alloca %Tcl_Obj**, align 8, !dbg !3802
  %index.i.i = alloca i32, align 4, !dbg !3803
  %2 = alloca i32, align 4, !dbg !3806
  %3 = alloca %Tcl_Obj**, align 8, !dbg !3807
  %index.i = alloca i32, align 4, !dbg !3808
  %4 = alloca i32, align 4, !dbg !3810
  %5 = alloca %Tcl_Obj**, align 8, !dbg !3811
  %typePtr.ptr = getelementptr %Tcl_Obj, %Tcl_Obj* %idxArg, i64 0, i32 3, !dbg !3812
  %typePtr = load %ObjType*, %ObjType** %typePtr.ptr, align 8, !dbg !3812
  %tclListType = load %ObjType*, %ObjType** @tclListType, align 8, !dbg !3812, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %6 = icmp eq %ObjType* %typePtr, %tclListType, !dbg !3812
  br i1 %6, label %copy, label %check.index, !dbg !3812

check.index:                                      ; preds = %enter
  %7 = bitcast i32* %index.i to i8*, !dbg !3813
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7), !dbg !3813
  %tclIntType.i = load %ObjType*, %ObjType** @tclIntType, align 8, !dbg !3813, !invariant.load !3, !noalias !3814, !nonnull !3, !dereferenceable !1051
  %8 = icmp eq %ObjType* %typePtr, %tclIntType.i, !dbg !3813
  br i1 %8, label %direct.i, label %call.i, !dbg !3813

direct.i:                                         ; preds = %check.index
  %internalRep.i = getelementptr %Tcl_Obj, %Tcl_Obj* %idxArg, i64 0, i32 4, !dbg !3818
  %9 = bitcast %InternalRepresentation* %internalRep.i to i32*, !dbg !3819
  %longValue.i = load i32, i32* %9, align 4, !dbg !3819, !alias.scope !3820, !noalias !3821
  %10 = insertvalue { i1, i32 } { i1 true, i32 undef }, i32 %longValue.i, 1, !dbg !3819
  br label %tcl.impl.getIndex.exit, !dbg !3819

call.i:                                           ; preds = %check.index
  %code.i = call i32 @TclGetIntForIndex(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %idxArg, i32 0, i32* noalias nocapture nonnull %index.i) #5, !dbg !3822
  %11 = icmp eq i32 %code.i, 0, !dbg !3823
  %12 = insertvalue { i1, i32 } undef, i1 %11, 0, !dbg !3823
  %index1.i = load i32, i32* %index.i, align 4, !dbg !3824, !noalias !3814
  %13 = insertvalue { i1, i32 } %12, i32 %index1.i, 1, !dbg !3824
  br label %tcl.impl.getIndex.exit, !dbg !3824

tcl.impl.getIndex.exit:                           ; preds = %call.i, %direct.i
  %14 = phi { i1, i32 } [ %10, %direct.i ], [ %13, %call.i ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7), !dbg !3825
  %getIndex.result = extractvalue { i1, i32 } %14, 0, !dbg !3826
  br i1 %getIndex.result, label %flat, label %copy, !dbg !3826

flat:                                             ; preds = %copy, %tcl.impl.getIndex.exit
  %15 = bitcast i32* %2 to i8*, !dbg !3827
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15), !dbg !3827
  %16 = bitcast %Tcl_Obj*** %3 to i8*, !dbg !3827
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16), !dbg !3827
  %interp.i = load %Interp*, %Interp** @tclInterp, align 8, !dbg !3827, !invariant.load !3, !noalias !3828, !nonnull !3, !dereferenceable !1051
  %refCount.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %list, i64 0, i32 0, !dbg !3832
  %refCount1.i.i.i = load i32, i32* %refCount.i.i.i, align 4, !dbg !3832, !noalias !3828
  %shared.i30.i = icmp sgt i32 %refCount1.i.i.i, 1, !dbg !3833
  br i1 %shared.i30.i, label %duplicate.i, label %prepareToLoop.i, !dbg !3835

duplicate.i:                                      ; preds = %flat
  %objPtr.i = tail call noalias nonnull %Tcl_Obj* @Tcl_DuplicateObj(%Tcl_Obj* nocapture nonnull readonly %list) #5, !dbg !3836, !noalias !3828
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr.i, i64 0, i32 0, !dbg !3837
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !3839, !noalias !3828
  %17 = icmp eq i32 %refCount1.i.i, 0, !dbg !3839
  tail call void @llvm.assume(i1 %17) #5, !dbg !3839, !noalias !3828
  br label %prepareToLoop.i, !dbg !3840

prepareToLoop.i:                                  ; preds = %duplicate.i, %flat
  %retValue.i = phi %Tcl_Obj* [ %list, %flat ], [ %objPtr.i, %duplicate.i ]
  %code69.i = call i32 @Tcl_ListObjGetElements(%Interp* noalias nocapture nonnull %interp.i, %Tcl_Obj* noalias nocapture nonnull %retValue.i, i32* noalias nocapture nonnull %2, %Tcl_Obj*** noalias nocapture nonnull %3) #5, !dbg !3841, !noalias !3828
  %18 = icmp eq i32 %code69.i, 0, !dbg !3841
  br i1 %18, label %loop2.i, label %loopFailDone.i, !dbg !3841

loop2.i:                                          ; preds = %prepareToLoop.i
  %19 = bitcast i32* %index.i.i to i8*, !dbg !3842
  %tclIntType.i.i = load %ObjType*, %ObjType** @tclIntType, align 8, !dbg !3842, !invariant.load !3, !noalias !3843, !nonnull !3, !dereferenceable !1051
  %elemCount.i.pre = load i32, i32* %2, align 4, !dbg !3847, !noalias !3828
  %typePtr.i.i.pre = load %ObjType*, %ObjType** %typePtr.ptr, align 8, !dbg !3848, !alias.scope !3849, !noalias !3850
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #5, !dbg !3848, !noalias !3828
  %20 = icmp eq %ObjType* %typePtr.i.i.pre, %tclIntType.i.i, !dbg !3848
  br i1 %20, label %direct.i.i, label %call.i.i, !dbg !3848

direct.i.i:                                       ; preds = %loop2.i
  %internalRep.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %idxArg, i64 0, i32 4, !dbg !3851
  %21 = bitcast %InternalRepresentation* %internalRep.i.i to i32*, !dbg !3852
  %longValue.i.i = load i32, i32* %21, align 4, !dbg !3852, !alias.scope !3849, !noalias !3850
  %22 = insertvalue { i1, i32 } { i1 true, i32 undef }, i32 %longValue.i.i, 1, !dbg !3852
  br label %tcl.impl.getIndex.exit.i, !dbg !3852

call.i.i:                                         ; preds = %loop2.i
  %code.i.i = call i32 @TclGetIntForIndex(%Interp* noalias nocapture nonnull %interp.i, %Tcl_Obj* noalias nocapture nonnull %idxArg, i32 %elemCount.i.pre, i32* noalias nocapture nonnull %index.i.i) #5, !dbg !3853, !noalias !3828
  %23 = icmp eq i32 %code.i.i, 0, !dbg !3854
  %24 = insertvalue { i1, i32 } undef, i1 %23, 0, !dbg !3854
  %index1.i.i = load i32, i32* %index.i.i, align 4, !dbg !3855, !noalias !3843
  %25 = insertvalue { i1, i32 } %24, i32 %index1.i.i, 1, !dbg !3855
  br label %tcl.impl.getIndex.exit.i, !dbg !3855

tcl.impl.getIndex.exit.i:                         ; preds = %call.i.i, %direct.i.i
  %26 = phi { i1, i32 } [ %22, %direct.i.i ], [ %25, %call.i.i ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #5, !dbg !3842, !noalias !3828
  %getIndex.index.i = extractvalue { i1, i32 } %26, 1, !dbg !3856
  %getIndex.result.i = extractvalue { i1, i32 } %26, 0, !dbg !3856
  br i1 %getIndex.result.i, label %loop3.i, label %loopFailDone.i, !dbg !3856

loop3.i:                                          ; preds = %tcl.impl.getIndex.exit.i
  %27 = icmp slt i32 %getIndex.index.i, 0, !dbg !3857
  %28 = icmp sgt i32 %getIndex.index.i, %elemCount.i.pre, !dbg !3857
  %29 = or i1 %27, %28, !dbg !3857
  br i1 %29, label %loopRangeFail.i, label %terminalSet.i, !dbg !3857

loopRangeFail.i:                                  ; preds = %loop3.i
  %str.0.i = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.0, align 8, !dbg !3858, !invariant.load !3, !noalias !3828, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i43.i = getelementptr %Tcl_Obj, %Tcl_Obj* %str.0.i, i64 0, i32 0, !dbg !3859
  %refCount.i44.i = load i32, i32* %refCountPtr.i43.i, align 4, !dbg !3859, !noalias !3828
  %30 = icmp sgt i32 %refCount.i44.i, 1, !dbg !3858
  tail call void @llvm.assume(i1 %30) #5, !dbg !3858, !noalias !3828
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp.i, %Tcl_Obj* noalias nonnull %str.0.i) #5, !dbg !3858, !noalias !3828
  %str.1.i = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.1, align 8, !dbg !3861, !invariant.load !3, !noalias !3828, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %str.1.i, i64 0, i32 0, !dbg !3862
  %refCount.i42.i = load i32, i32* %refCountPtr.i.i, align 4, !dbg !3862, !noalias !3828
  %31 = icmp sgt i32 %refCount.i42.i, 1, !dbg !3861
  tail call void @llvm.assume(i1 %31) #5, !dbg !3861, !noalias !3828
  tail call void @Tcl_SetObjErrorCode(%Interp* noalias nocapture nonnull %interp.i, %Tcl_Obj* noalias nonnull %str.1.i) #5, !dbg !3861, !noalias !3828
  br label %terminalSet.i, !dbg !3864

loopFailDone.i:                                   ; preds = %tcl.impl.getIndex.exit.i, %prepareToLoop.i
  %32 = icmp eq %Tcl_Obj* %retValue.i, %list, !dbg !3865
  br i1 %32, label %loopFailExit.i, label %loopFailDropOverall.i, !dbg !3865

loopFailDropOverall.i:                            ; preds = %loopFailDone.i
  %refCount.i.i38.i = getelementptr %Tcl_Obj, %Tcl_Obj* %retValue.i, i64 0, i32 0, !dbg !3866
  %refCount1.i.i39.i = load i32, i32* %refCount.i.i38.i, align 4, !dbg !3869, !noalias !3828
  %33 = icmp slt i32 %refCount1.i.i39.i, 2, !dbg !3870
  br i1 %33, label %freeObject.i.i.i, label %leave.i.i.i, !dbg !3870

freeObject.i.i.i:                                 ; preds = %loopFailDropOverall.i
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %retValue.i) #5, !dbg !3871, !noalias !3828
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %retValue.i) #5, !dbg !3872, !noalias !3828
  br label %loopFailExit.i, !dbg !3873

leave.i.i.i:                                      ; preds = %loopFailDropOverall.i
  %34 = add nsw i32 %refCount1.i.i39.i, -1, !dbg !3869
  store i32 %34, i32* %refCount.i.i38.i, align 4, !dbg !3874, !noalias !3828
  br label %loopFailExit.i, !dbg !3875

loopFailExit.i:                                   ; preds = %leave.i.i.i, %freeObject.i.i.i, %loopFailDone.i
  store i32 1, i32* %ecvar, align 4, !dbg !3876, !alias.scope !3877, !noalias !3878
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15), !dbg !3879
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16), !dbg !3879
  br label %tcl.list.set.exit, !dbg !3879

terminalSet.i:                                    ; preds = %loopRangeFail.i, %loop3.i
  %code15.i = call i32 @Tcl_ListObjLength(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %retValue.i, i32* noalias nocapture nonnull %2) #5, !dbg !3880, !noalias !3828
  %35 = load i32, i32* %2, align 4, !dbg !3881, !noalias !3828
  %36 = icmp eq i32 %getIndex.index.i, %35, !dbg !3881
  br i1 %36, label %termSetAdd.i, label %termSetSet.i, !dbg !3881

termSetAdd.i:                                     ; preds = %terminalSet.i
  %code16.i = tail call i32 @Tcl_ListObjAppendElement(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %retValue.i, %Tcl_Obj* noalias nonnull %elem) #5, !dbg !3882, !noalias !3828
  br label %exit.i, !dbg !3883

termSetSet.i:                                     ; preds = %terminalSet.i
  %code17.i = tail call i32 @TclListObjSetElement(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %retValue.i, i32 %getIndex.index.i, %Tcl_Obj* noalias nonnull %elem) #5, !dbg !3884, !noalias !3828
  br label %exit.i, !dbg !3885

exit.i:                                           ; preds = %termSetSet.i, %termSetAdd.i
  %bytes.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %retValue.i, i64 0, i32 1, !dbg !3886
  %bytes1.i.i = load i8*, i8** %bytes.i.i, align 8, !dbg !3888, !noalias !3828
  %37 = icmp eq i8* %bytes1.i.i, null, !dbg !3889
  br i1 %37, label %TclInvalidateStringRep.exit.i, label %act.i.i, !dbg !3889

act.i.i:                                          ; preds = %exit.i
  %tclEmptyStringRep.i.i = load i8*, i8** @tclEmptyStringRep, align 8, !dbg !3890, !invariant.load !3, !noalias !3828, !nonnull !3, !dereferenceable !1051
  %38 = icmp eq i8* %bytes1.i.i, %tclEmptyStringRep.i.i, !dbg !3890
  br i1 %38, label %clear.i.i, label %free.i.i, !dbg !3890

free.i.i:                                         ; preds = %act.i.i
  tail call void @Tcl_Free(i8* nonnull %bytes1.i.i) #5, !dbg !3891, !noalias !3828
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %bytes1.i.i) #5, !dbg !3892, !noalias !3828
  br label %clear.i.i, !dbg !3893

clear.i.i:                                        ; preds = %free.i.i, %act.i.i
  store i8* null, i8** %bytes.i.i, align 8, !dbg !3894, !noalias !3828
  br label %TclInvalidateStringRep.exit.i, !dbg !3895

TclInvalidateStringRep.exit.i:                    ; preds = %clear.i.i, %exit.i
  %refCount.i.i26.i = getelementptr %Tcl_Obj, %Tcl_Obj* %retValue.i, i64 0, i32 0, !dbg !3896
  %refCount1.i.i27.i = load i32, i32* %refCount.i.i26.i, align 4, !dbg !3899, !noalias !3828
  %39 = add nsw i32 %refCount1.i.i27.i, 1, !dbg !3899
  store i32 %39, i32* %refCount.i.i26.i, align 4, !dbg !3899, !noalias !3828
  %refCountPtr.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %elem, i64 0, i32 0, !dbg !3900
  %refCount.i.i25.i = load i32, i32* %refCountPtr.i.i.i, align 4, !dbg !3900, !noalias !3828
  %shared.i.i = icmp sgt i32 %refCount.i.i25.i, 1, !dbg !3903
  br i1 %shared.i.i, label %exit2.i, label %exit1.i, !dbg !3904

exit1.i:                                          ; preds = %TclInvalidateStringRep.exit.i
  %40 = add nsw i32 %refCount.i.i25.i, 1, !dbg !3905
  store i32 %40, i32* %refCountPtr.i.i.i, align 4, !dbg !3905, !noalias !3828
  br label %exit2.i, !dbg !3908

exit2.i:                                          ; preds = %exit1.i, %TclInvalidateStringRep.exit.i
  %41 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %retValue.i, 1, !dbg !3909
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15), !dbg !3909
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16), !dbg !3909
  br label %tcl.list.set.exit, !dbg !3909

tcl.list.set.exit:                                ; preds = %leave.i.i, %freeObject.i.i, %exit2.i, %loopFailExit.i
  %42 = phi { i32, %Tcl_Obj* } [ { i32 1, %Tcl_Obj* undef }, %loopFailExit.i ], [ %41, %exit2.i ], [ %101, %freeObject.i.i ], [ %101, %leave.i.i ]
  ret { i32, %Tcl_Obj* } %42, !dbg !3910

copy:                                             ; preds = %tcl.impl.getIndex.exit, %enter
  %code = call i32 @Tcl_ListObjGetElements(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %idxArg, i32* noalias nocapture nonnull %4, %Tcl_Obj*** noalias nocapture nonnull %5), !dbg !3911
  %43 = icmp eq i32 %code, 0, !dbg !3912
  br i1 %43, label %delegate, label %flat, !dbg !3912

delegate:                                         ; preds = %copy
  %44 = load i32, i32* %4, align 4, !dbg !3913
  %45 = load %Tcl_Obj**, %Tcl_Obj*** %5, align 8, !dbg !3913
  %objPtr = tail call noalias nonnull %Tcl_Obj* @Tcl_NewListObj(i32 %44, %Tcl_Obj** nocapture readonly %45), !dbg !3913
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !3914
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !3916
  %46 = icmp eq i32 %refCount1.i, 0, !dbg !3916
  tail call void @llvm.assume(i1 %46) #5, !dbg !3916
  %code1 = call i32 @Tcl_ListObjGetElements(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %objPtr, i32* noalias nocapture nonnull %4, %Tcl_Obj*** noalias nocapture nonnull %5), !dbg !3917
  %47 = load i32, i32* %4, align 4, !dbg !3918
  %48 = load %Tcl_Obj**, %Tcl_Obj*** %5, align 8, !dbg !3918
  %49 = bitcast i32* %0 to i8*, !dbg !3919
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %49), !dbg !3919
  %50 = bitcast %Tcl_Obj*** %1 to i8*, !dbg !3919
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %50), !dbg !3919
  %interp.i5 = load %Interp*, %Interp** @tclInterp, align 8, !dbg !3919, !invariant.load !3, !noalias !3920, !nonnull !3, !dereferenceable !1051
  %51 = icmp eq i32 %47, 0, !dbg !3924
  %refCount.i.i.i6 = getelementptr %Tcl_Obj, %Tcl_Obj* %list, i64 0, i32 0, !dbg !3925
  %refCount1.i.i.i7 = load i32, i32* %refCount.i.i.i6, align 4, !dbg !3925, !noalias !3920
  br i1 %51, label %doNothing.i, label %sharedCheck.i, !dbg !3924

doNothing.i:                                      ; preds = %delegate
  %52 = add nsw i32 %refCount1.i.i.i7, 1, !dbg !3926
  store i32 %52, i32* %refCount.i.i.i6, align 4, !dbg !3926, !noalias !3920
  %53 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %list, 1, !dbg !3929
  br label %tcl.list.set.exit122, !dbg !3929

sharedCheck.i:                                    ; preds = %delegate
  %shared.i30.i8 = icmp sgt i32 %refCount1.i.i.i7, 1, !dbg !3930
  br i1 %shared.i30.i8, label %duplicate.i12, label %prepareToLoop.i15, !dbg !3932

duplicate.i12:                                    ; preds = %sharedCheck.i
  %objPtr.i9 = tail call noalias nonnull %Tcl_Obj* @Tcl_DuplicateObj(%Tcl_Obj* nocapture nonnull readonly %list) #5, !dbg !3933, !noalias !3920
  %refCount.i.i10 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr.i9, i64 0, i32 0, !dbg !3934
  %refCount1.i.i11 = load i32, i32* %refCount.i.i10, align 4, !dbg !3936, !noalias !3920
  %54 = icmp eq i32 %refCount1.i.i11, 0, !dbg !3936
  tail call void @llvm.assume(i1 %54) #5, !dbg !3936, !noalias !3920
  br label %prepareToLoop.i15, !dbg !3937

prepareToLoop.i15:                                ; preds = %duplicate.i12, %sharedCheck.i
  %retValue.i13 = phi %Tcl_Obj* [ %list, %sharedCheck.i ], [ %objPtr.i9, %duplicate.i12 ]
  %code69.i14 = call i32 @Tcl_ListObjGetElements(%Interp* noalias nocapture nonnull %interp.i5, %Tcl_Obj* noalias nocapture nonnull %retValue.i13, i32* noalias nocapture nonnull %0, %Tcl_Obj*** noalias nocapture nonnull %1) #5, !dbg !3938, !noalias !3920
  %55 = icmp eq i32 %code69.i14, 0, !dbg !3938
  br i1 %55, label %loop2.lr.ph.i17, label %loopFailDone.i85, !dbg !3938

loop2.lr.ph.i17:                                  ; preds = %prepareToLoop.i15
  %56 = bitcast i32* %index.i.i4 to i8*, !dbg !3939
  %tclIntType.i.i16 = load %ObjType*, %ObjType** @tclIntType, align 8, !dbg !3939, !invariant.load !3, !noalias !3940, !nonnull !3, !dereferenceable !1051
  br label %loop2.i30, !dbg !3938

loopFail.preheader.i18:                           ; preds = %tcl.impl.getIndex.exit.i39
  %57 = icmp eq %Tcl_Obj* %.02072.i22, null, !dbg !3944
  br i1 %57, label %loopFailDone.i85, label %loopFailDrop.i84.preheader, !dbg !3944

loopFailDrop.i84.preheader:                       ; preds = %loop8.i71, %loopFail.preheader.i18
  %.168.i82.ph = phi %Tcl_Obj* [ %.02072.i22, %loopFail.preheader.i18 ], [ %.073.i21, %loop8.i71 ]
  br label %loopFailDrop.i84, !dbg !3944

loop2.i30:                                        ; preds = %loop8.i71, %loop2.lr.ph.i17
  %.073.i21 = phi %Tcl_Obj* [ %retValue.i13, %loop2.lr.ph.i17 ], [ %sublist57.i59, %loop8.i71 ]
  %.02072.i22 = phi %Tcl_Obj* [ null, %loop2.lr.ph.i17 ], [ %.073.i21, %loop8.i71 ]
  %.02171.i23 = phi %Tcl_Obj** [ %48, %loop2.lr.ph.i17 ], [ %65, %loop8.i71 ]
  %.02270.i24 = phi i32 [ %47, %loop2.lr.ph.i17 ], [ %69, %loop8.i71 ]
  %elemCount.i25 = load i32, i32* %0, align 4, !dbg !3945, !noalias !3920
  %elemPtrs.i26 = load %Tcl_Obj**, %Tcl_Obj*** %1, align 8, !dbg !3946, !noalias !3920
  %indexArray3.i27 = load %Tcl_Obj*, %Tcl_Obj** %.02171.i23, align 8, !dbg !3947, !alias.scope !3948, !noalias !3949
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %56) #5, !dbg !3950, !noalias !3920
  %typePtr.ptr.i.i28 = getelementptr %Tcl_Obj, %Tcl_Obj* %indexArray3.i27, i64 0, i32 3, !dbg !3950
  %typePtr.i.i29 = load %ObjType*, %ObjType** %typePtr.ptr.i.i28, align 8, !dbg !3950, !alias.scope !3951, !noalias !3952
  %58 = icmp eq %ObjType* %typePtr.i.i29, %tclIntType.i.i16, !dbg !3950
  br i1 %58, label %direct.i.i33, label %call.i.i36, !dbg !3950

direct.i.i33:                                     ; preds = %loop2.i30
  %internalRep.i.i31 = getelementptr %Tcl_Obj, %Tcl_Obj* %indexArray3.i27, i64 0, i32 4, !dbg !3953
  %59 = bitcast %InternalRepresentation* %internalRep.i.i31 to i32*, !dbg !3954
  %longValue.i.i32 = load i32, i32* %59, align 4, !dbg !3954, !alias.scope !3951, !noalias !3952
  %60 = insertvalue { i1, i32 } { i1 true, i32 undef }, i32 %longValue.i.i32, 1, !dbg !3954
  br label %tcl.impl.getIndex.exit.i39, !dbg !3954

call.i.i36:                                       ; preds = %loop2.i30
  %code.i.i34 = call i32 @TclGetIntForIndex(%Interp* noalias nocapture nonnull %interp.i5, %Tcl_Obj* noalias nocapture nonnull %indexArray3.i27, i32 %elemCount.i25, i32* noalias nocapture nonnull %index.i.i4) #5, !dbg !3955, !noalias !3920
  %61 = icmp eq i32 %code.i.i34, 0, !dbg !3956
  %62 = insertvalue { i1, i32 } undef, i1 %61, 0, !dbg !3956
  %index1.i.i35 = load i32, i32* %index.i.i4, align 4, !dbg !3957, !noalias !3940
  %63 = insertvalue { i1, i32 } %62, i32 %index1.i.i35, 1, !dbg !3957
  br label %tcl.impl.getIndex.exit.i39, !dbg !3957

tcl.impl.getIndex.exit.i39:                       ; preds = %call.i.i36, %direct.i.i33
  %64 = phi { i1, i32 } [ %60, %direct.i.i33 ], [ %63, %call.i.i36 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %56) #5, !dbg !3939, !noalias !3920
  %getIndex.index.i37 = extractvalue { i1, i32 } %64, 1, !dbg !3947
  %getIndex.result.i38 = extractvalue { i1, i32 } %64, 0, !dbg !3947
  br i1 %getIndex.result.i38, label %loop3.i40, label %loopFail.preheader.i18, !dbg !3947

loop3.i40:                                        ; preds = %tcl.impl.getIndex.exit.i39
  %65 = getelementptr %Tcl_Obj*, %Tcl_Obj** %.02171.i23, i64 1, !dbg !3958
  %66 = icmp slt i32 %getIndex.index.i37, 0, !dbg !3959
  %67 = icmp sgt i32 %getIndex.index.i37, %elemCount.i25, !dbg !3959
  %68 = or i1 %66, %67, !dbg !3959
  br i1 %68, label %loopRangeFail.i78, label %loop4.i41, !dbg !3959

loop4.i41:                                        ; preds = %loop3.i40
  %69 = add i32 %.02270.i24, -1, !dbg !3960
  %70 = icmp sgt i32 %69, 0, !dbg !3961
  br i1 %70, label %loop5.i42, label %loopEnd.preheader.i79, !dbg !3961

loop5.i42:                                        ; preds = %loop4.i41
  %71 = icmp eq i32 %getIndex.index.i37, %elemCount.i25, !dbg !3962
  br i1 %71, label %appendSublist.i55, label %existingElem.i46, !dbg !3962

existingElem.i46:                                 ; preds = %loop5.i42
  %72 = sext i32 %getIndex.index.i37 to i64, !dbg !3963
  %73 = getelementptr %Tcl_Obj*, %Tcl_Obj** %elemPtrs.i26, i64 %72, !dbg !3963
  %74 = load %Tcl_Obj*, %Tcl_Obj** %73, align 8, !dbg !3963, !noalias !3920
  %refCountPtr.i.i52.i43 = getelementptr %Tcl_Obj, %Tcl_Obj* %74, i64 0, i32 0, !dbg !3964
  %refCount.i.i53.i44 = load i32, i32* %refCountPtr.i.i52.i43, align 4, !dbg !3964, !noalias !3920
  %shared.i54.i45 = icmp sgt i32 %refCount.i.i53.i44, 1, !dbg !3967
  br i1 %shared.i54.i45, label %dupeElem.i50, label %setSublist.i58, !dbg !3968

dupeElem.i50:                                     ; preds = %existingElem.i46
  %objPtr6.i47 = tail call noalias nonnull %Tcl_Obj* @Tcl_DuplicateObj(%Tcl_Obj* nocapture nonnull readonly %74) #5, !dbg !3969, !noalias !3920
  %refCount.i50.i48 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr6.i47, i64 0, i32 0, !dbg !3970
  %refCount1.i51.i49 = load i32, i32* %refCount.i50.i48, align 4, !dbg !3972, !noalias !3920
  %75 = icmp eq i32 %refCount1.i51.i49, 0, !dbg !3972
  tail call void @llvm.assume(i1 %75) #5, !dbg !3972, !noalias !3920
  br label %setSublist.i58, !dbg !3973

appendSublist.i55:                                ; preds = %loop5.i42
  %objPtr4.i51 = tail call noalias nonnull %Tcl_Obj* @Tcl_NewObj() #5, !dbg !3974, !noalias !3920
  %refCount.i40.i52 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr4.i51, i64 0, i32 0, !dbg !3975
  %refCount1.i41.i53 = load i32, i32* %refCount.i40.i52, align 4, !dbg !3977, !noalias !3920
  %76 = icmp eq i32 %refCount1.i41.i53, 0, !dbg !3977
  tail call void @llvm.assume(i1 %76) #5, !dbg !3977, !noalias !3920
  %code7.i54 = tail call i32 @Tcl_ListObjAppendElement(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %.073.i21, %Tcl_Obj* noalias nonnull %objPtr4.i51) #5, !dbg !3978, !noalias !3920
  br label %loop7.i63, !dbg !3979

setSublist.i58:                                   ; preds = %dupeElem.i50, %existingElem.i46
  %sublist.ph.i56 = phi %Tcl_Obj* [ %objPtr6.i47, %dupeElem.i50 ], [ %74, %existingElem.i46 ]
  %code8.i57 = tail call i32 @TclListObjSetElement(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %.073.i21, i32 %getIndex.index.i37, %Tcl_Obj* noalias nonnull %sublist.ph.i56) #5, !dbg !3980, !noalias !3920
  br label %loop7.i63, !dbg !3981

loop7.i63:                                        ; preds = %setSublist.i58, %appendSublist.i55
  %sublist57.i59 = phi %Tcl_Obj* [ %sublist.ph.i56, %setSublist.i58 ], [ %objPtr4.i51, %appendSublist.i55 ]
  %refCountPtr.i.i47.i60 = getelementptr %Tcl_Obj, %Tcl_Obj* %sublist57.i59, i64 0, i32 0, !dbg !3982
  %refCount.i.i48.i61 = load i32, i32* %refCountPtr.i.i47.i60, align 4, !dbg !3982, !noalias !3920
  %shared.i49.i62 = icmp sgt i32 %refCount.i.i48.i61, 1, !dbg !3985
  br i1 %shared.i49.i62, label %mustDuplicate.i68, label %loop8.i71, !dbg !3986

mustDuplicate.i68:                                ; preds = %loop7.i63
  %objPtr10.i64 = tail call noalias nonnull %Tcl_Obj* @Tcl_DuplicateObj(%Tcl_Obj* nocapture nonnull readonly %sublist57.i59) #5, !dbg !3987, !noalias !3920
  %refCount.i45.i65 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr10.i64, i64 0, i32 0, !dbg !3988
  %refCount1.i46.i66 = load i32, i32* %refCount.i45.i65, align 4, !dbg !3990, !noalias !3920
  %77 = icmp eq i32 %refCount1.i46.i66, 0, !dbg !3990
  tail call void @llvm.assume(i1 %77) #5, !dbg !3990, !noalias !3920
  %code11.i67 = tail call i32 @TclListObjSetElement(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %.073.i21, i32 %getIndex.index.i37, %Tcl_Obj* noalias nonnull %objPtr10.i64) #5, !dbg !3991, !noalias !3920
  br label %loop8.i71, !dbg !3992

loop8.i71:                                        ; preds = %mustDuplicate.i68, %loop7.i63
  %internalRep.i69 = getelementptr %Tcl_Obj, %Tcl_Obj* %.073.i21, i64 0, i32 4, i32 1, !dbg !3993
  %78 = bitcast i8** %internalRep.i69 to %Tcl_Obj**, !dbg !3993
  store %Tcl_Obj* %.02072.i22, %Tcl_Obj** %78, align 8, !dbg !3993, !noalias !3920
  %code.i70 = call i32 @Tcl_ListObjGetElements(%Interp* noalias nocapture nonnull %interp.i5, %Tcl_Obj* noalias nocapture nonnull %sublist57.i59, i32* noalias nocapture nonnull %0, %Tcl_Obj*** noalias nocapture nonnull %1) #5, !dbg !3938, !noalias !3920
  %79 = icmp eq i32 %code.i70, 0, !dbg !3938
  br i1 %79, label %loop2.i30, label %loopFailDrop.i84.preheader, !dbg !3938

loopRangeFail.i78:                                ; preds = %loop3.i40
  %str.0.i72 = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.0, align 8, !dbg !3994, !invariant.load !3, !noalias !3920, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i43.i73 = getelementptr %Tcl_Obj, %Tcl_Obj* %str.0.i72, i64 0, i32 0, !dbg !3995
  %refCount.i44.i74 = load i32, i32* %refCountPtr.i43.i73, align 4, !dbg !3995, !noalias !3920
  %80 = icmp sgt i32 %refCount.i44.i74, 1, !dbg !3994
  tail call void @llvm.assume(i1 %80) #5, !dbg !3994, !noalias !3920
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp.i5, %Tcl_Obj* noalias nonnull %str.0.i72) #5, !dbg !3994, !noalias !3920
  %str.1.i75 = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.1, align 8, !dbg !3997, !invariant.load !3, !noalias !3920, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i.i76 = getelementptr %Tcl_Obj, %Tcl_Obj* %str.1.i75, i64 0, i32 0, !dbg !3998
  %refCount.i42.i77 = load i32, i32* %refCountPtr.i.i76, align 4, !dbg !3998, !noalias !3920
  %81 = icmp sgt i32 %refCount.i42.i77, 1, !dbg !3997
  tail call void @llvm.assume(i1 %81) #5, !dbg !3997, !noalias !3920
  tail call void @Tcl_SetObjErrorCode(%Interp* noalias nocapture nonnull %interp.i5, %Tcl_Obj* noalias nonnull %str.1.i75) #5, !dbg !3997, !noalias !3920
  br label %loopEnd.preheader.i79, !dbg !4000

loopEnd.preheader.i79:                            ; preds = %loop4.i41, %loopRangeFail.i78
  %82 = icmp eq %Tcl_Obj* %.02072.i22, null, !dbg !4001
  br i1 %82, label %terminalSet.i102, label %loopEndDrop.lr.ph.i81, !dbg !4001

loopEndDrop.lr.ph.i81:                            ; preds = %loopEnd.preheader.i79
  %tclEmptyStringRep.i33.i80 = load i8*, i8** @tclEmptyStringRep, align 8, !dbg !4002, !noalias !3920
  br label %loopEndDrop.i96, !dbg !4001

loopFailDrop.i84:                                 ; preds = %loopFailDrop.i84.preheader, %loopFailDrop.i84
  %.168.i82 = phi %Tcl_Obj* [ %84, %loopFailDrop.i84 ], [ %.168.i82.ph, %loopFailDrop.i84.preheader ]
  %internalRep13.i83 = getelementptr %Tcl_Obj, %Tcl_Obj* %.168.i82, i64 0, i32 4, i32 1, !dbg !4004
  %83 = bitcast i8** %internalRep13.i83 to %Tcl_Obj**, !dbg !4004
  %84 = load %Tcl_Obj*, %Tcl_Obj** %83, align 8, !dbg !4005, !noalias !3920
  store %Tcl_Obj* null, %Tcl_Obj** %83, align 8, !dbg !4006, !noalias !3920
  %85 = icmp eq %Tcl_Obj* %84, null, !dbg !3944
  br i1 %85, label %loopFailDone.i85, label %loopFailDrop.i84, !dbg !3944

loopFailDone.i85:                                 ; preds = %loopFailDrop.i84, %loopFail.preheader.i18, %prepareToLoop.i15
  %86 = icmp eq %Tcl_Obj* %retValue.i13, %list, !dbg !4007
  br i1 %86, label %loopFailExit.i91, label %loopFailDropOverall.i88, !dbg !4007

loopFailDropOverall.i88:                          ; preds = %loopFailDone.i85
  %refCount.i.i38.i86 = getelementptr %Tcl_Obj, %Tcl_Obj* %retValue.i13, i64 0, i32 0, !dbg !4008
  %refCount1.i.i39.i87 = load i32, i32* %refCount.i.i38.i86, align 4, !dbg !4011, !noalias !3920
  %87 = icmp slt i32 %refCount1.i.i39.i87, 2, !dbg !4012
  br i1 %87, label %freeObject.i.i.i89, label %leave.i.i.i90, !dbg !4012

freeObject.i.i.i89:                               ; preds = %loopFailDropOverall.i88
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %retValue.i13) #5, !dbg !4013, !noalias !3920
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %retValue.i13) #5, !dbg !4014, !noalias !3920
  br label %loopFailExit.i91, !dbg !4015

leave.i.i.i90:                                    ; preds = %loopFailDropOverall.i88
  %88 = add nsw i32 %refCount1.i.i39.i87, -1, !dbg !4011
  store i32 %88, i32* %refCount.i.i38.i86, align 4, !dbg !4016, !noalias !3920
  br label %loopFailExit.i91, !dbg !4017

loopFailExit.i91:                                 ; preds = %leave.i.i.i90, %freeObject.i.i.i89, %loopFailDone.i85
  store i32 1, i32* %ecvar, align 4, !dbg !4018, !alias.scope !3949, !noalias !3948
  br label %tcl.list.set.exit122, !dbg !4019

loopEndDrop.i96:                                  ; preds = %TclInvalidateStringRep.exit37.i100, %loopEndDrop.lr.ph.i81
  %.267.i92 = phi %Tcl_Obj* [ %.02072.i22, %loopEndDrop.lr.ph.i81 ], [ %90, %TclInvalidateStringRep.exit37.i100 ]
  %internalRep14.i93 = getelementptr %Tcl_Obj, %Tcl_Obj* %.267.i92, i64 0, i32 4, i32 1, !dbg !4020
  %89 = bitcast i8** %internalRep14.i93 to %Tcl_Obj**, !dbg !4020
  %90 = load %Tcl_Obj*, %Tcl_Obj** %89, align 8, !dbg !4021, !noalias !3920
  store %Tcl_Obj* null, %Tcl_Obj** %89, align 8, !dbg !4022, !noalias !3920
  %bytes.i31.i94 = getelementptr %Tcl_Obj, %Tcl_Obj* %.267.i92, i64 0, i32 1, !dbg !4023
  %bytes1.i32.i95 = load i8*, i8** %bytes.i31.i94, align 8, !dbg !4024, !noalias !3920
  %91 = icmp eq i8* %bytes1.i32.i95, null, !dbg !4025
  br i1 %91, label %TclInvalidateStringRep.exit37.i100, label %act.i34.i97, !dbg !4025

act.i34.i97:                                      ; preds = %loopEndDrop.i96
  %92 = icmp eq i8* %bytes1.i32.i95, %tclEmptyStringRep.i33.i80, !dbg !4026
  br i1 %92, label %clear.i36.i99, label %free.i35.i98, !dbg !4026

free.i35.i98:                                     ; preds = %act.i34.i97
  tail call void @Tcl_Free(i8* nonnull %bytes1.i32.i95) #5, !dbg !4027, !noalias !3920
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %bytes1.i32.i95) #5, !dbg !4028, !noalias !3920
  br label %clear.i36.i99, !dbg !4029

clear.i36.i99:                                    ; preds = %free.i35.i98, %act.i34.i97
  store i8* null, i8** %bytes.i31.i94, align 8, !dbg !4030, !noalias !3920
  br label %TclInvalidateStringRep.exit37.i100, !dbg !4031

TclInvalidateStringRep.exit37.i100:               ; preds = %clear.i36.i99, %loopEndDrop.i96
  %93 = icmp eq %Tcl_Obj* %90, null, !dbg !4001
  br i1 %93, label %terminalSet.i102, label %loopEndDrop.i96, !dbg !4001

terminalSet.i102:                                 ; preds = %TclInvalidateStringRep.exit37.i100, %loopEnd.preheader.i79
  %code15.i101 = call i32 @Tcl_ListObjLength(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %.073.i21, i32* noalias nocapture nonnull %0) #5, !dbg !4032, !noalias !3920
  %94 = load i32, i32* %0, align 4, !dbg !4033, !noalias !3920
  %95 = icmp eq i32 %getIndex.index.i37, %94, !dbg !4033
  br i1 %95, label %termSetAdd.i104, label %termSetSet.i106, !dbg !4033

termSetAdd.i104:                                  ; preds = %terminalSet.i102
  %code16.i103 = tail call i32 @Tcl_ListObjAppendElement(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %.073.i21, %Tcl_Obj* noalias nonnull %elem) #5, !dbg !4034, !noalias !3920
  br label %exit.i109, !dbg !4035

termSetSet.i106:                                  ; preds = %terminalSet.i102
  %code17.i105 = tail call i32 @TclListObjSetElement(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %.073.i21, i32 %getIndex.index.i37, %Tcl_Obj* noalias nonnull %elem) #5, !dbg !4036, !noalias !3920
  br label %exit.i109, !dbg !4037

exit.i109:                                        ; preds = %termSetSet.i106, %termSetAdd.i104
  %bytes.i.i107 = getelementptr %Tcl_Obj, %Tcl_Obj* %.073.i21, i64 0, i32 1, !dbg !4038
  %bytes1.i.i108 = load i8*, i8** %bytes.i.i107, align 8, !dbg !4040, !noalias !3920
  %96 = icmp eq i8* %bytes1.i.i108, null, !dbg !4041
  br i1 %96, label %TclInvalidateStringRep.exit.i119, label %act.i.i111, !dbg !4041

act.i.i111:                                       ; preds = %exit.i109
  %tclEmptyStringRep.i.i110 = load i8*, i8** @tclEmptyStringRep, align 8, !dbg !4042, !invariant.load !3, !noalias !3920, !nonnull !3, !dereferenceable !1051
  %97 = icmp eq i8* %bytes1.i.i108, %tclEmptyStringRep.i.i110, !dbg !4042
  br i1 %97, label %clear.i.i113, label %free.i.i112, !dbg !4042

free.i.i112:                                      ; preds = %act.i.i111
  tail call void @Tcl_Free(i8* nonnull %bytes1.i.i108) #5, !dbg !4043, !noalias !3920
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %bytes1.i.i108) #5, !dbg !4044, !noalias !3920
  br label %clear.i.i113, !dbg !4045

clear.i.i113:                                     ; preds = %free.i.i112, %act.i.i111
  store i8* null, i8** %bytes.i.i107, align 8, !dbg !4046, !noalias !3920
  br label %TclInvalidateStringRep.exit.i119, !dbg !4047

TclInvalidateStringRep.exit.i119:                 ; preds = %clear.i.i113, %exit.i109
  %refCount.i.i26.i114 = getelementptr %Tcl_Obj, %Tcl_Obj* %retValue.i13, i64 0, i32 0, !dbg !4048
  %refCount1.i.i27.i115 = load i32, i32* %refCount.i.i26.i114, align 4, !dbg !4051, !noalias !3920
  %98 = add nsw i32 %refCount1.i.i27.i115, 1, !dbg !4051
  store i32 %98, i32* %refCount.i.i26.i114, align 4, !dbg !4051, !noalias !3920
  %refCountPtr.i.i.i116 = getelementptr %Tcl_Obj, %Tcl_Obj* %elem, i64 0, i32 0, !dbg !4052
  %refCount.i.i25.i117 = load i32, i32* %refCountPtr.i.i.i116, align 4, !dbg !4052, !noalias !3920
  %shared.i.i118 = icmp sgt i32 %refCount.i.i25.i117, 1, !dbg !4055
  br i1 %shared.i.i118, label %exit2.i121, label %exit1.i120, !dbg !4056

exit1.i120:                                       ; preds = %TclInvalidateStringRep.exit.i119
  %99 = add nsw i32 %refCount.i.i25.i117, 1, !dbg !4057
  store i32 %99, i32* %refCountPtr.i.i.i116, align 4, !dbg !4057, !noalias !3920
  br label %exit2.i121, !dbg !4060

exit2.i121:                                       ; preds = %exit1.i120, %TclInvalidateStringRep.exit.i119
  %100 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %retValue.i13, 1, !dbg !4061
  br label %tcl.list.set.exit122, !dbg !4061

tcl.list.set.exit122:                             ; preds = %exit2.i121, %loopFailExit.i91, %doNothing.i
  %101 = phi { i32, %Tcl_Obj* } [ %53, %doNothing.i ], [ { i32 1, %Tcl_Obj* undef }, %loopFailExit.i91 ], [ %100, %exit2.i121 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %49), !dbg !3925
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %50), !dbg !3925
  %refCount1.i.i124 = load i32, i32* %refCount.i, align 4, !dbg !4062
  %102 = icmp slt i32 %refCount1.i.i124, 2, !dbg !4065
  br i1 %102, label %freeObject.i.i, label %leave.i.i, !dbg !4065

freeObject.i.i:                                   ; preds = %tcl.list.set.exit122
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %objPtr) #5, !dbg !4066
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %objPtr) #5, !dbg !4067
  br label %tcl.list.set.exit, !dbg !4068

leave.i.i:                                        ; preds = %tcl.list.set.exit122
  %103 = add nsw i32 %refCount1.i.i124, -1, !dbg !4062
  store i32 %103, i32* %refCount.i, align 4, !dbg !4069
  br label %tcl.list.set.exit, !dbg !4070
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, i1 } @tcl.list.in(%Tcl_Obj* nocapture nonnull %value, %Tcl_Obj* nocapture nonnull %list, i32* noalias nocapture nonnull %ecVar) local_unnamed_addr #6 !dbg !4071 {
enter:
  %lengthPtr.i2 = alloca i32, align 4, !dbg !4080
  %lengthPtr.i = alloca i32, align 4, !dbg !4082
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !4084, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %0 = bitcast i32* %lengthPtr.i to i8*, !dbg !4085
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0), !dbg !4085
  %str.i = call nonnull i8* @Tcl_GetStringFromObj(%Tcl_Obj* noalias nocapture nonnull %value, i32* noalias nocapture nonnull %lengthPtr.i) #5, !dbg !4085
  %length.i = load i32, i32* %lengthPtr.i, align 4, !dbg !4086
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0), !dbg !4087
  %1 = alloca i32, align 4, !dbg !4088
  %2 = alloca %Tcl_Obj**, align 8, !dbg !4089
  %code = call i32 @Tcl_ListObjGetElements(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %list, i32* noalias nocapture nonnull %1, %Tcl_Obj*** noalias nocapture nonnull %2), !dbg !4090
  %3 = icmp eq i32 %code, 0, !dbg !4091
  br i1 %3, label %realCheck, label %fail, !dbg !4091

realCheck:                                        ; preds = %enter
  %objc = load i32, i32* %1, align 4, !dbg !4092
  %objv = load %Tcl_Obj**, %Tcl_Obj*** %2, align 8, !dbg !4093
  %4 = icmp sgt i32 %objc, 0, !dbg !4094
  br i1 %4, label %loop.preheader, label %done, !dbg !4094

loop.preheader:                                   ; preds = %realCheck
  %5 = bitcast i32* %lengthPtr.i2 to i8*, !dbg !4095
  br label %loop, !dbg !4096

loop:                                             ; preds = %loop.preheader, %loopNext
  %i = phi i32 [ %i1, %loopNext ], [ 0, %loop.preheader ]
  %6 = zext i32 %i to i64, !dbg !4097
  %7 = getelementptr %Tcl_Obj*, %Tcl_Obj** %objv, i64 %6, !dbg !4097
  %obj = load %Tcl_Obj*, %Tcl_Obj** %7, align 8, !dbg !4097
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5), !dbg !4098
  %str.i3 = call nonnull i8* @Tcl_GetStringFromObj(%Tcl_Obj* noalias nocapture nonnull %obj, i32* noalias nocapture nonnull %lengthPtr.i2) #5, !dbg !4098
  %length.i4 = load i32, i32* %lengthPtr.i2, align 4, !dbg !4099
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5), !dbg !4100
  %8 = icmp eq i32 %length.i, %length.i4, !dbg !4096
  br i1 %8, label %loopCompare, label %loopNext, !dbg !4096

loopCompare:                                      ; preds = %loop
  %cmp = tail call i32 @memcmp(i8* nonnull %str.i, i8* nonnull %str.i3, i32 %length.i), !dbg !4101
  %9 = icmp eq i32 %cmp, 0, !dbg !4101
  br i1 %9, label %done, label %loopNext, !dbg !4101

loopNext:                                         ; preds = %loopCompare, %loop
  %i1 = add nuw nsw i32 %i, 1, !dbg !4102
  %10 = icmp slt i32 %i1, %objc, !dbg !4103
  br i1 %10, label %loop, label %done, !dbg !4103

fail:                                             ; preds = %enter
  store i32 1, i32* %ecVar, align 4, !dbg !4104
  ret { i32, i1 } { i32 1, i1 undef }, !dbg !4105

done:                                             ; preds = %loopNext, %loopCompare, %realCheck
  %flag = phi i1 [ false, %realCheck ], [ true, %loopCompare ], [ false, %loopNext ]
  %11 = insertvalue { i32, i1 } { i32 0, i1 undef }, i1 %flag, 1, !dbg !4106
  ret { i32, i1 } %11, !dbg !4106
}

; Function Attrs: alwaysinline
define hidden %Tcl_Obj* @tcl.list.unshare(%Tcl_Obj* nonnull %list) local_unnamed_addr #12 !dbg !4107 {
enter:
  %refCountPtr.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %list, i64 0, i32 0, !dbg !4110
  %refCount.i.i = load i32, i32* %refCountPtr.i.i, align 4, !dbg !4110
  %shared.i = icmp sgt i32 %refCount.i.i, 1, !dbg !4113
  br i1 %shared.i, label %unshare, label %done, !dbg !4114

unshare:                                          ; preds = %enter
  %tclListType.i = load %ObjType*, %ObjType** @tclListType, align 8, !dbg !4115, !invariant.load !3, !noalias !4117, !nonnull !3, !dereferenceable !1051
  %typePtr.ptr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %list, i64 0, i32 3, !dbg !4121
  %typePtr.i = load %ObjType*, %ObjType** %typePtr.ptr.i, align 8, !dbg !4121, !alias.scope !4122, !noalias !4123
  %0 = icmp eq %ObjType* %typePtr.i, %tclListType.i, !dbg !4124
  br i1 %0, label %ok.i, label %forceType.i, !dbg !4124

forceType.i:                                      ; preds = %unshare
  %setFromAnyProc.ptr.i.i = getelementptr %ObjType, %ObjType* %tclListType.i, i64 0, i32 4, !dbg !4125
  %setFromAnyProc.i.i = load i32 (%Interp*, %Tcl_Obj*)*, i32 (%Interp*, %Tcl_Obj*)** %setFromAnyProc.ptr.i.i, align 8, !dbg !4125, !alias.scope !4127, !noalias !4130
  %code.i.i = tail call i32 %setFromAnyProc.i.i(%Interp* nocapture null, %Tcl_Obj* nocapture nonnull %list), !dbg !4133, !noalias !4127
  br label %ok.i, !dbg !4134

ok.i:                                             ; preds = %forceType.i, %unshare
  %objPtr.i = tail call noalias nonnull %Tcl_Obj* @Tcl_NewObj(), !dbg !4135, !noalias !4117
  %refCount.i.i3 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr.i, i64 0, i32 0, !dbg !4136
  %refCount1.i.i4 = load i32, i32* %refCount.i.i3, align 4, !dbg !4138, !noalias !4117
  %1 = icmp eq i32 %refCount1.i.i4, 0, !dbg !4138
  tail call void @llvm.assume(i1 %1) #5, !dbg !4138, !noalias !4117
  %bytes.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr.i, i64 0, i32 1, !dbg !4139
  %bytes1.i.i = load i8*, i8** %bytes.i.i, align 8, !dbg !4141, !noalias !4117
  %2 = icmp eq i8* %bytes1.i.i, null, !dbg !4142
  br i1 %2, label %TclInvalidateStringRep.exit.i, label %act.i.i, !dbg !4142

act.i.i:                                          ; preds = %ok.i
  %tclEmptyStringRep.i.i = load i8*, i8** @tclEmptyStringRep, align 8, !dbg !4143, !invariant.load !3, !noalias !4117, !nonnull !3, !dereferenceable !1051
  %3 = icmp eq i8* %bytes1.i.i, %tclEmptyStringRep.i.i, !dbg !4143
  br i1 %3, label %clear.i.i, label %free.i.i, !dbg !4143

free.i.i:                                         ; preds = %act.i.i
  tail call void @Tcl_Free(i8* nonnull %bytes1.i.i) #5, !dbg !4144, !noalias !4117
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %bytes1.i.i) #5, !dbg !4145, !noalias !4117
  br label %clear.i.i, !dbg !4146

clear.i.i:                                        ; preds = %free.i.i, %act.i.i
  store i8* null, i8** %bytes.i.i, align 8, !dbg !4147, !noalias !4117
  br label %TclInvalidateStringRep.exit.i, !dbg !4148

TclInvalidateStringRep.exit.i:                    ; preds = %clear.i.i, %ok.i
  %dupIntRepProc.ptr.i = getelementptr %ObjType, %ObjType* %tclListType.i, i64 0, i32 2, !dbg !4149
  %dupIntRepProc.i = load void (%Tcl_Obj*, %Tcl_Obj*)*, void (%Tcl_Obj*, %Tcl_Obj*)** %dupIntRepProc.ptr.i, align 8, !dbg !4149, !noalias !4117
  tail call void %dupIntRepProc.i(%Tcl_Obj* nocapture nonnull %list, %Tcl_Obj* nocapture nonnull %objPtr.i), !dbg !4150, !noalias !4123
  %refCount1.i.i.pre = load i32, i32* %refCount.i.i3, align 4, !dbg !4151
  br label %done, !dbg !4154

done:                                             ; preds = %TclInvalidateStringRep.exit.i, %enter
  %refCount1.i.i = phi i32 [ %refCount.i.i, %enter ], [ %refCount1.i.i.pre, %TclInvalidateStringRep.exit.i ], !dbg !4151
  %copy1 = phi %Tcl_Obj* [ %list, %enter ], [ %objPtr.i, %TclInvalidateStringRep.exit.i ]
  %refCount.i.i2 = getelementptr %Tcl_Obj, %Tcl_Obj* %copy1, i64 0, i32 0, !dbg !4155
  %4 = add nsw i32 %refCount1.i.i, 1, !dbg !4151
  store i32 %4, i32* %refCount.i.i2, align 4, !dbg !4151
  ret %Tcl_Obj* %copy1, !dbg !4156
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, i32 } @tcl.list.foreach.start.step({ i32, i32 } %steps_init, %Tcl_Obj* noalias nocapture nonnull %list, i32 %stride) local_unnamed_addr #6 !dbg !4157 {
enter:
  %0 = alloca i32, align 4, !dbg !4166
  %1 = extractvalue { i32, i32 } %steps_init, 0, !dbg !4167
  %2 = icmp eq i32 %1, 0, !dbg !4167
  br i1 %2, label %listLength, label %earlierError, !dbg !4167

earlierError:                                     ; preds = %lengthOk, %listLength, %enter
  %merge = phi { i32, i32 } [ %steps_init, %enter ], [ %8, %lengthOk ], [ { i32 1, i32 undef }, %listLength ]
  ret { i32, i32 } %merge, !dbg !4168

listLength:                                       ; preds = %enter
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !4169, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %code = call i32 @Tcl_ListObjLength(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %list, i32* noalias nocapture nonnull %0), !dbg !4170
  %3 = icmp eq i32 %code, 0, !dbg !4171
  br i1 %3, label %lengthOk, label %earlierError, !dbg !4171

lengthOk:                                         ; preds = %listLength
  %4 = extractvalue { i32, i32 } %steps_init, 1, !dbg !4172
  %objc = load i32, i32* %0, align 4, !dbg !4173
  %5 = add i32 %stride, -1, !dbg !4174
  %6 = add i32 %5, %objc, !dbg !4174
  %count = sdiv i32 %6, %stride, !dbg !4174
  %7 = icmp sgt i32 %4, %count, !dbg !4175
  %steps = select i1 %7, i32 %4, i32 %count, !dbg !4175
  %8 = insertvalue { i32, i32 } { i32 0, i32 undef }, i32 %steps, 1, !dbg !4175
  br label %earlierError, !dbg !4176
}

; Function Attrs: alwaysinline nofree norecurse nounwind writeonly
define hidden { i32, %FOREACH } @tcl.list.foreach.start.finish({ i32, i32 } %steps, i32* noalias nocapture nonnull %ecvar) local_unnamed_addr #18 !dbg !4177 {
enter:
  %0 = extractvalue { i32, i32 } %steps, 0, !dbg !4186
  %1 = icmp eq i32 %0, 0, !dbg !4186
  br i1 %1, label %success, label %failure, !dbg !4186

failure:                                          ; preds = %enter
  store i32 1, i32* %ecvar, align 4, !dbg !4187
  ret { i32, %FOREACH } { i32 1, %FOREACH undef }, !dbg !4188

success:                                          ; preds = %enter
  %2 = extractvalue { i32, i32 } %steps, 1, !dbg !4189
  %3 = insertvalue %FOREACH { i32 0, i32 undef }, i32 %2, 1, !dbg !4189
  %4 = insertvalue { i32, %FOREACH } { i32 0, %FOREACH undef }, %FOREACH %3, 1, !dbg !4190
  ret { i32, %FOREACH } %4, !dbg !4190
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden %INT @tcl.list.foreach.getStep(%FOREACH %pair) local_unnamed_addr #0 !dbg !4191 {
enter:
  %0 = extractvalue %FOREACH %pair, 0, !dbg !4196
  %1 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %0, 1, !dbg !4196
  ret %INT %1, !dbg !4196
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden i1 @tcl.list.foreach.mayStep(%FOREACH %pair) local_unnamed_addr #0 !dbg !4197 {
enter:
  %0 = extractvalue %FOREACH %pair, 0, !dbg !4201
  %1 = extractvalue %FOREACH %pair, 1, !dbg !4202
  %2 = icmp slt i32 %0, %1, !dbg !4203
  ret i1 %2, !dbg !4203
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden %FOREACH @tcl.list.foreach.nextStep(%FOREACH %pair) local_unnamed_addr #0 !dbg !4204 {
enter:
  %0 = extractvalue %FOREACH %pair, 0, !dbg !4209
  %1 = add i32 %0, 1, !dbg !4210
  %2 = insertvalue %FOREACH %pair, i32 %1, 0, !dbg !4210
  ret %FOREACH %2, !dbg !4210
}

; Function Attrs: alwaysinline nounwind
define hidden i1 @tcl.dict.exists1(%Tcl_Obj* nocapture nonnull %dict, %Tcl_Obj* nocapture nonnull readonly %key) local_unnamed_addr #6 !dbg !4211 {
enter:
  %valueVar = alloca %Tcl_Obj*, align 8, !dbg !4217
  store %Tcl_Obj* null, %Tcl_Obj** %valueVar, align 8, !dbg !4218
  %code = call i32 @Tcl_DictObjGet(%Interp* nocapture null, %Tcl_Obj* nocapture nonnull %dict, %Tcl_Obj* nocapture nonnull readonly %key, %Tcl_Obj** nocapture nonnull %valueVar), !dbg !4219
  %0 = icmp eq i32 %code, 0, !dbg !4220
  %value = load %Tcl_Obj*, %Tcl_Obj** %valueVar, align 8, !dbg !4220
  %1 = icmp ne %Tcl_Obj* %value, null, !dbg !4220
  %exists = and i1 %0, %1, !dbg !4220
  ret i1 %exists, !dbg !4220
}

; Function Attrs: alwaysinline nounwind
define hidden i1 @tcl.dict.exists(%Tcl_Obj* noalias nocapture nonnull %dict, i32 %keyc, %Tcl_Obj** noalias nocapture nonnull readonly %keyv) local_unnamed_addr #6 !dbg !4221 {
enter:
  %dummy = alloca i32, align 4, !dbg !4228
  %valueVar = alloca %Tcl_Obj*, align 8, !dbg !4229
  %0 = icmp eq i32 %keyc, 0, !dbg !4230
  br i1 %0, label %verify, label %exists, !dbg !4230

verify:                                           ; preds = %enter
  %code = call i32 @Tcl_DictObjSize(%Interp* nocapture null, %Tcl_Obj* nocapture nonnull %dict, i32* nocapture nonnull %dummy), !dbg !4231
  %1 = icmp eq i32 %code, 0, !dbg !4232
  ret i1 %1, !dbg !4232

exists:                                           ; preds = %enter
  %2 = add i32 %keyc, -1, !dbg !4233
  %dictObj = tail call %Tcl_Obj* @TclTraceDictPath(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %dict, i32 %2, %Tcl_Obj** noalias nocapture nonnull readonly %keyv, i32 0), !dbg !4234
  %3 = icmp eq %Tcl_Obj* %dictObj, null, !dbg !4235
  br i1 %3, label %notOK, label %lookup, !dbg !4235

lookup:                                           ; preds = %exists
  store %Tcl_Obj* null, %Tcl_Obj** %valueVar, align 8, !dbg !4236
  %4 = sext i32 %2 to i64, !dbg !4237
  %5 = getelementptr %Tcl_Obj*, %Tcl_Obj** %keyv, i64 %4, !dbg !4237
  %key = load %Tcl_Obj*, %Tcl_Obj** %5, align 8, !dbg !4237
  %code1 = call i32 @Tcl_DictObjGet(%Interp* nocapture null, %Tcl_Obj* nocapture nonnull %dictObj, %Tcl_Obj* nocapture nonnull readonly %key, %Tcl_Obj** nocapture nonnull %valueVar), !dbg !4238
  %6 = icmp eq i32 %code1, 0, !dbg !4239
  %value = load %Tcl_Obj*, %Tcl_Obj** %valueVar, align 8, !dbg !4239
  %7 = icmp ne %Tcl_Obj* %value, null, !dbg !4239
  %exists2 = and i1 %6, %7, !dbg !4239
  ret i1 %exists2, !dbg !4239

notOK:                                            ; preds = %exists
  ret i1 false, !dbg !4240
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, %INT } @tcl.dict.size(%Tcl_Obj* nocapture nonnull %dict, i32* noalias nocapture nonnull %ecvar) local_unnamed_addr #6 !dbg !4241 {
enter:
  %size = alloca i32, align 4, !dbg !4245
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !4246, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %code = call i32 @Tcl_DictObjSize(%Interp* nocapture nonnull %interp, %Tcl_Obj* nocapture nonnull %dict, i32* nocapture nonnull %size), !dbg !4247
  %0 = icmp eq i32 %code, 0, !dbg !4248
  br i1 %0, label %ok, label %fail, !dbg !4248

ok:                                               ; preds = %enter
  %size1 = load i32, i32* %size, align 4, !dbg !4249
  %1 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %size1, 1, !dbg !4249
  %2 = insertvalue { i32, %INT } { i32 0, %INT undef }, %INT %1, 1, !dbg !4249
  ret { i32, %INT } %2, !dbg !4249

fail:                                             ; preds = %enter
  store i32 1, i32* %ecvar, align 4, !dbg !4250
  ret { i32, %INT } { i32 1, %INT undef }, !dbg !4251
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, %Tcl_Obj* } @tcl.dict.get1(%Tcl_Obj* nocapture nonnull %dict, %Tcl_Obj* nocapture nonnull %key, i32* noalias nocapture nonnull %ecvar) local_unnamed_addr #6 !dbg !4252 {
enter:
  %valueVar = alloca %Tcl_Obj*, align 8, !dbg !4257
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !4258, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %code = call i32 @Tcl_DictObjGet(%Interp* nocapture nonnull %interp, %Tcl_Obj* nocapture nonnull %dict, %Tcl_Obj* nocapture nonnull readonly %key, %Tcl_Obj** nocapture nonnull %valueVar), !dbg !4259
  %0 = icmp eq i32 %code, 0, !dbg !4260
  br i1 %0, label %OK, label %notOK, !dbg !4260

OK:                                               ; preds = %enter
  %value = load %Tcl_Obj*, %Tcl_Obj** %valueVar, align 8, !dbg !4261
  %1 = icmp eq %Tcl_Obj* %value, null, !dbg !4262
  br i1 %1, label %fail, label %return, !dbg !4262

return:                                           ; preds = %OK
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value, i64 0, i32 0, !dbg !4263
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !4266
  %2 = add nsw i32 %refCount1.i.i, 1, !dbg !4266
  store i32 %2, i32* %refCount.i.i, align 4, !dbg !4266
  %3 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %value, 1, !dbg !4267
  ret { i32, %Tcl_Obj* } %3, !dbg !4267

fail:                                             ; preds = %OK
  %str = tail call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %key), !dbg !4268
  %objPtr = tail call noalias nonnull %Tcl_Obj* (i8*, ...) @Tcl_ObjPrintf(i8* nocapture nonnull readonly getelementptr inbounds ([33 x i8], [33 x i8]* @string.constant.14, i64 0, i64 0), i8* nocapture nonnull %str), !dbg !4269
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !4270
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !4272
  %4 = icmp eq i32 %refCount1.i, 0, !dbg !4272
  tail call void @llvm.assume(i1 %4) #5, !dbg !4272
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %objPtr), !dbg !4269
  tail call void (%Interp*, ...) @Tcl_SetErrorCode(%Interp* nocapture nonnull %interp, i8* nocapture getelementptr inbounds ([4 x i8], [4 x i8]* @string.constant.44, i64 0, i64 0), i8* nocapture getelementptr inbounds ([7 x i8], [7 x i8]* @string.constant.45, i64 0, i64 0), i8* nocapture getelementptr inbounds ([5 x i8], [5 x i8]* @string.constant.17, i64 0, i64 0), i8* nocapture nonnull %str, i8* nocapture null), !dbg !4273
  br label %notOK, !dbg !4274

notOK:                                            ; preds = %fail, %enter
  store i32 1, i32* %ecvar, align 4, !dbg !4275
  ret { i32, %Tcl_Obj* } { i32 1, %Tcl_Obj* undef }, !dbg !4276
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, %Tcl_Obj* } @tcl.dict.get(%Tcl_Obj* noalias nonnull %dict, i32 %keyc, %Tcl_Obj** noalias nocapture nonnull readonly %keyv, i32* noalias nocapture nonnull %ecvar) local_unnamed_addr #6 !dbg !4277 {
enter:
  %dummy = alloca i32, align 4, !dbg !4283
  %valueVar = alloca %Tcl_Obj*, align 8, !dbg !4284
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !4285, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %0 = icmp eq i32 %keyc, 0, !dbg !4286
  br i1 %0, label %verify, label %get, !dbg !4286

verify:                                           ; preds = %enter
  %code = call i32 @Tcl_DictObjSize(%Interp* nocapture nonnull %interp, %Tcl_Obj* nocapture nonnull %dict, i32* nocapture nonnull %dummy), !dbg !4287
  %1 = icmp eq i32 %code, 0, !dbg !4288
  br i1 %1, label %return, label %notOK, !dbg !4288

get:                                              ; preds = %enter
  %2 = add i32 %keyc, -1, !dbg !4289
  %dictObj = tail call %Tcl_Obj* @TclTraceDictPath(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %dict, i32 %2, %Tcl_Obj** noalias nocapture nonnull readonly %keyv, i32 0), !dbg !4290
  %3 = icmp eq %Tcl_Obj* %dictObj, null, !dbg !4291
  br i1 %3, label %notOK, label %lookup, !dbg !4291

lookup:                                           ; preds = %get
  %4 = sext i32 %2 to i64, !dbg !4292
  %5 = getelementptr %Tcl_Obj*, %Tcl_Obj** %keyv, i64 %4, !dbg !4292
  %key = load %Tcl_Obj*, %Tcl_Obj** %5, align 8, !dbg !4292
  %code1 = call i32 @Tcl_DictObjGet(%Interp* nocapture nonnull %interp, %Tcl_Obj* nocapture nonnull %dictObj, %Tcl_Obj* nocapture nonnull readonly %key, %Tcl_Obj** nocapture nonnull %valueVar), !dbg !4293
  %6 = icmp eq i32 %code1, 0, !dbg !4294
  br i1 %6, label %OK, label %fail, !dbg !4294

OK:                                               ; preds = %lookup
  %value = load %Tcl_Obj*, %Tcl_Obj** %valueVar, align 8, !dbg !4295
  %7 = icmp eq %Tcl_Obj* %value, null, !dbg !4296
  br i1 %7, label %fail, label %return, !dbg !4296

return:                                           ; preds = %OK, %verify
  %value2 = phi %Tcl_Obj* [ %dict, %verify ], [ %value, %OK ]
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value2, i64 0, i32 0, !dbg !4297
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !4300
  %8 = add nsw i32 %refCount1.i.i, 1, !dbg !4300
  store i32 %8, i32* %refCount.i.i, align 4, !dbg !4300
  %9 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %value2, 1, !dbg !4301
  ret { i32, %Tcl_Obj* } %9, !dbg !4301

fail:                                             ; preds = %OK, %lookup
  %str = tail call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %key), !dbg !4302
  %objPtr = tail call noalias nonnull %Tcl_Obj* (i8*, ...) @Tcl_ObjPrintf(i8* nocapture nonnull readonly getelementptr inbounds ([33 x i8], [33 x i8]* @string.constant.14, i64 0, i64 0), i8* nocapture nonnull %str), !dbg !4303
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !4304
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !4306
  %10 = icmp eq i32 %refCount1.i, 0, !dbg !4306
  tail call void @llvm.assume(i1 %10) #5, !dbg !4306
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %objPtr), !dbg !4303
  tail call void (%Interp*, ...) @Tcl_SetErrorCode(%Interp* nocapture nonnull %interp, i8* nocapture getelementptr inbounds ([4 x i8], [4 x i8]* @string.constant.44, i64 0, i64 0), i8* nocapture getelementptr inbounds ([7 x i8], [7 x i8]* @string.constant.45, i64 0, i64 0), i8* nocapture getelementptr inbounds ([5 x i8], [5 x i8]* @string.constant.17, i64 0, i64 0), i8* nocapture nonnull %str, i8* nocapture null), !dbg !4307
  br label %notOK, !dbg !4308

notOK:                                            ; preds = %get, %fail, %verify
  store i32 1, i32* %ecvar, align 4, !dbg !4309
  ret { i32, %Tcl_Obj* } { i32 1, %Tcl_Obj* undef }, !dbg !4310
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, { i1, %Tcl_Obj* } } @tcl.dict.get1.empty(%Tcl_Obj* nocapture nonnull %dict, %Tcl_Obj* nocapture nonnull readonly %key, i32* noalias nocapture nonnull %ecvar) local_unnamed_addr #6 !dbg !4311 {
enter:
  %valueVar = alloca %Tcl_Obj*, align 8, !dbg !4318
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !4319, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %code = call i32 @Tcl_DictObjGet(%Interp* nocapture nonnull %interp, %Tcl_Obj* nocapture nonnull %dict, %Tcl_Obj* nocapture nonnull readonly %key, %Tcl_Obj** nocapture nonnull %valueVar), !dbg !4320
  %0 = icmp eq i32 %code, 0, !dbg !4321
  br i1 %0, label %OK, label %notOK, !dbg !4321

OK:                                               ; preds = %enter
  %value = load %Tcl_Obj*, %Tcl_Obj** %valueVar, align 8, !dbg !4322
  %1 = icmp eq %Tcl_Obj* %value, null, !dbg !4323
  br i1 %1, label %empty, label %return, !dbg !4323

return:                                           ; preds = %OK
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value, i64 0, i32 0, !dbg !4324
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !4327
  %2 = add nsw i32 %refCount1.i.i, 1, !dbg !4327
  store i32 %2, i32* %refCount.i.i, align 4, !dbg !4327
  %3 = insertvalue { i1, %Tcl_Obj* } { i1 false, %Tcl_Obj* undef }, %Tcl_Obj* %value, 1, !dbg !4328
  %4 = insertvalue { i32, { i1, %Tcl_Obj* } } { i32 0, { i1, %Tcl_Obj* } undef }, { i1, %Tcl_Obj* } %3, 1, !dbg !4328
  ret { i32, { i1, %Tcl_Obj* } } %4, !dbg !4328

empty:                                            ; preds = %OK
  ret { i32, { i1, %Tcl_Obj* } } { i32 0, { i1, %Tcl_Obj* } { i1 true, %Tcl_Obj* undef } }, !dbg !4329

notOK:                                            ; preds = %enter
  store i32 1, i32* %ecvar, align 4, !dbg !4330
  ret { i32, { i1, %Tcl_Obj* } } { i32 1, { i1, %Tcl_Obj* } undef }, !dbg !4331
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, %Tcl_Obj* } @tcl.dict.set1(%Tcl_Obj* nonnull %dict, %Tcl_Obj* nonnull %key, %Tcl_Obj* nonnull %value, i32* noalias nocapture nonnull %ecvar) local_unnamed_addr #6 !dbg !4332 {
enter:
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !4338, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %dict, i64 0, i32 0, !dbg !4339
  %refCount.i.i.i = load i32, i32* %refCountPtr.i.i.i, align 4, !dbg !4339
  %shared.i.i = icmp sgt i32 %refCount.i.i.i, 1, !dbg !4343
  br i1 %shared.i.i, label %duplicated.i, label %obj.dedup.exit, !dbg !4344

duplicated.i:                                     ; preds = %enter
  %duplicateObj.i = tail call noalias nonnull %Tcl_Obj* @Tcl_DuplicateObj(%Tcl_Obj* nocapture nonnull readonly %dict) #5, !dbg !4345
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %duplicateObj.i, i64 0, i32 0, !dbg !4346
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !4348
  %0 = icmp eq i32 %refCount1.i.i, 0, !dbg !4348
  tail call void @llvm.assume(i1 %0) #5, !dbg !4348
  br label %obj.dedup.exit, !dbg !4349

obj.dedup.exit:                                   ; preds = %enter, %duplicated.i
  %dict.sink = phi %Tcl_Obj* [ %duplicateObj.i, %duplicated.i ], [ %dict, %enter ]
  %code = tail call i32 @Tcl_DictObjPut(%Interp* nocapture nonnull %interp, %Tcl_Obj* nocapture nonnull %dict.sink, %Tcl_Obj* nonnull %key, %Tcl_Obj* nonnull %value), !dbg !4350
  %1 = icmp eq i32 %code, 0, !dbg !4351
  br i1 %1, label %OK, label %notOK, !dbg !4351

OK:                                               ; preds = %obj.dedup.exit
  %refCount.i.i3 = getelementptr %Tcl_Obj, %Tcl_Obj* %dict.sink, i64 0, i32 0, !dbg !4352
  %refCount1.i.i4 = load i32, i32* %refCount.i.i3, align 4, !dbg !4355
  %2 = add nsw i32 %refCount1.i.i4, 1, !dbg !4355
  store i32 %2, i32* %refCount.i.i3, align 4, !dbg !4355
  %refCountPtr.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value, i64 0, i32 0, !dbg !4356
  %refCount.i.i7 = load i32, i32* %refCountPtr.i.i, align 4, !dbg !4356
  %shared.i = icmp sgt i32 %refCount.i.i7, 1, !dbg !4359
  br i1 %shared.i, label %exit1, label %exit, !dbg !4360

exit:                                             ; preds = %OK
  %3 = add nsw i32 %refCount.i.i7, 1, !dbg !4361
  store i32 %3, i32* %refCountPtr.i.i, align 4, !dbg !4361
  br label %exit1, !dbg !4364

exit1:                                            ; preds = %exit, %OK
  %4 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %dict.sink, 1, !dbg !4365
  ret { i32, %Tcl_Obj* } %4, !dbg !4365

notOK:                                            ; preds = %obj.dedup.exit
  br i1 %shared.i.i, label %duplicated.i6, label %obj.cleanup.exit, !dbg !4366

duplicated.i6:                                    ; preds = %notOK
  %refCount.i.i.i5 = getelementptr %Tcl_Obj, %Tcl_Obj* %dict.sink, i64 0, i32 0, !dbg !4368
  %refCount1.i.i.i = load i32, i32* %refCount.i.i.i5, align 4, !dbg !4371
  %5 = icmp slt i32 %refCount1.i.i.i, 2, !dbg !4372
  br i1 %5, label %freeObject.i.i.i, label %leave.i.i.i, !dbg !4372

freeObject.i.i.i:                                 ; preds = %duplicated.i6
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %dict.sink) #5, !dbg !4373
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %dict.sink) #5, !dbg !4374
  br label %obj.cleanup.exit, !dbg !4375

leave.i.i.i:                                      ; preds = %duplicated.i6
  %6 = add nsw i32 %refCount1.i.i.i, -1, !dbg !4371
  store i32 %6, i32* %refCount.i.i.i5, align 4, !dbg !4376
  br label %obj.cleanup.exit, !dbg !4377

obj.cleanup.exit:                                 ; preds = %notOK, %freeObject.i.i.i, %leave.i.i.i
  store i32 1, i32* %ecvar, align 4, !dbg !4378
  ret { i32, %Tcl_Obj* } { i32 1, %Tcl_Obj* undef }, !dbg !4379
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, %Tcl_Obj* } @tcl.dict.set(%Tcl_Obj* nonnull %dict, i32 %pathlen, %Tcl_Obj** noalias nocapture nonnull readonly %pathobjs, %Tcl_Obj* nonnull %value, i32* noalias nocapture nonnull %ecvar) local_unnamed_addr #6 !dbg !4380 {
enter:
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !4387, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %dict, i64 0, i32 0, !dbg !4388
  %refCount.i.i.i = load i32, i32* %refCountPtr.i.i.i, align 4, !dbg !4388
  %shared.i.i = icmp sgt i32 %refCount.i.i.i, 1, !dbg !4392
  br i1 %shared.i.i, label %duplicated.i, label %obj.dedup.exit, !dbg !4393

duplicated.i:                                     ; preds = %enter
  %duplicateObj.i = tail call noalias nonnull %Tcl_Obj* @Tcl_DuplicateObj(%Tcl_Obj* nocapture nonnull readonly %dict) #5, !dbg !4394
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %duplicateObj.i, i64 0, i32 0, !dbg !4395
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !4397
  %0 = icmp eq i32 %refCount1.i.i, 0, !dbg !4397
  tail call void @llvm.assume(i1 %0) #5, !dbg !4397
  br label %obj.dedup.exit, !dbg !4398

obj.dedup.exit:                                   ; preds = %enter, %duplicated.i
  %dict.sink = phi %Tcl_Obj* [ %duplicateObj.i, %duplicated.i ], [ %dict, %enter ]
  %code = tail call i32 @Tcl_DictObjPutKeyList(%Interp* nocapture nonnull %interp, %Tcl_Obj* nocapture nonnull %dict.sink, i32 %pathlen, %Tcl_Obj** nocapture nonnull readonly %pathobjs, %Tcl_Obj* nonnull %value), !dbg !4399
  %1 = icmp eq i32 %code, 0, !dbg !4400
  br i1 %1, label %OK, label %notOK, !dbg !4400

OK:                                               ; preds = %obj.dedup.exit
  %refCount.i.i3 = getelementptr %Tcl_Obj, %Tcl_Obj* %dict.sink, i64 0, i32 0, !dbg !4401
  %refCount1.i.i4 = load i32, i32* %refCount.i.i3, align 4, !dbg !4404
  %2 = add nsw i32 %refCount1.i.i4, 1, !dbg !4404
  store i32 %2, i32* %refCount.i.i3, align 4, !dbg !4404
  %refCountPtr.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value, i64 0, i32 0, !dbg !4405
  %refCount.i.i7 = load i32, i32* %refCountPtr.i.i, align 4, !dbg !4405
  %shared.i = icmp sgt i32 %refCount.i.i7, 1, !dbg !4408
  br i1 %shared.i, label %exit1, label %exit, !dbg !4409

exit:                                             ; preds = %OK
  %3 = add nsw i32 %refCount.i.i7, 1, !dbg !4410
  store i32 %3, i32* %refCountPtr.i.i, align 4, !dbg !4410
  br label %exit1, !dbg !4413

exit1:                                            ; preds = %exit, %OK
  %4 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %dict.sink, 1, !dbg !4414
  ret { i32, %Tcl_Obj* } %4, !dbg !4414

notOK:                                            ; preds = %obj.dedup.exit
  br i1 %shared.i.i, label %duplicated.i6, label %obj.cleanup.exit, !dbg !4415

duplicated.i6:                                    ; preds = %notOK
  %refCount.i.i.i5 = getelementptr %Tcl_Obj, %Tcl_Obj* %dict.sink, i64 0, i32 0, !dbg !4417
  %refCount1.i.i.i = load i32, i32* %refCount.i.i.i5, align 4, !dbg !4420
  %5 = icmp slt i32 %refCount1.i.i.i, 2, !dbg !4421
  br i1 %5, label %freeObject.i.i.i, label %leave.i.i.i, !dbg !4421

freeObject.i.i.i:                                 ; preds = %duplicated.i6
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %dict.sink) #5, !dbg !4422
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %dict.sink) #5, !dbg !4423
  br label %obj.cleanup.exit, !dbg !4424

leave.i.i.i:                                      ; preds = %duplicated.i6
  %6 = add nsw i32 %refCount1.i.i.i, -1, !dbg !4420
  store i32 %6, i32* %refCount.i.i.i5, align 4, !dbg !4425
  br label %obj.cleanup.exit, !dbg !4426

obj.cleanup.exit:                                 ; preds = %notOK, %freeObject.i.i.i, %leave.i.i.i
  store i32 1, i32* %ecvar, align 4, !dbg !4427
  ret { i32, %Tcl_Obj* } { i32 1, %Tcl_Obj* undef }, !dbg !4428
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, %Tcl_Obj* } @tcl.dict.unset1(%Tcl_Obj* nonnull %dict, %Tcl_Obj* nocapture nonnull readonly %key, i32* noalias nocapture nonnull %ecvar) local_unnamed_addr #6 !dbg !4429 {
enter:
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !4434, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %dict, i64 0, i32 0, !dbg !4435
  %refCount.i.i.i = load i32, i32* %refCountPtr.i.i.i, align 4, !dbg !4435
  %shared.i.i = icmp sgt i32 %refCount.i.i.i, 1, !dbg !4439
  br i1 %shared.i.i, label %duplicated.i, label %obj.dedup.exit, !dbg !4440

duplicated.i:                                     ; preds = %enter
  %duplicateObj.i = tail call noalias nonnull %Tcl_Obj* @Tcl_DuplicateObj(%Tcl_Obj* nocapture nonnull readonly %dict) #5, !dbg !4441
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %duplicateObj.i, i64 0, i32 0, !dbg !4442
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !4444
  %0 = icmp eq i32 %refCount1.i.i, 0, !dbg !4444
  tail call void @llvm.assume(i1 %0) #5, !dbg !4444
  br label %obj.dedup.exit, !dbg !4445

obj.dedup.exit:                                   ; preds = %enter, %duplicated.i
  %dict.sink = phi %Tcl_Obj* [ %duplicateObj.i, %duplicated.i ], [ %dict, %enter ]
  %code = tail call i32 @Tcl_DictObjRemove(%Interp* nocapture nonnull %interp, %Tcl_Obj* nocapture nonnull %dict.sink, %Tcl_Obj* nocapture nonnull readonly %key), !dbg !4446
  %1 = icmp eq i32 %code, 0, !dbg !4447
  br i1 %1, label %OK, label %notOK, !dbg !4447

OK:                                               ; preds = %obj.dedup.exit
  %refCount.i.i2 = getelementptr %Tcl_Obj, %Tcl_Obj* %dict.sink, i64 0, i32 0, !dbg !4448
  %refCount1.i.i3 = load i32, i32* %refCount.i.i2, align 4, !dbg !4451
  %2 = add nsw i32 %refCount1.i.i3, 1, !dbg !4451
  store i32 %2, i32* %refCount.i.i2, align 4, !dbg !4451
  %3 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %dict.sink, 1, !dbg !4452
  ret { i32, %Tcl_Obj* } %3, !dbg !4452

notOK:                                            ; preds = %obj.dedup.exit
  br i1 %shared.i.i, label %duplicated.i5, label %obj.cleanup.exit, !dbg !4453

duplicated.i5:                                    ; preds = %notOK
  %refCount.i.i.i4 = getelementptr %Tcl_Obj, %Tcl_Obj* %dict.sink, i64 0, i32 0, !dbg !4455
  %refCount1.i.i.i = load i32, i32* %refCount.i.i.i4, align 4, !dbg !4458
  %4 = icmp slt i32 %refCount1.i.i.i, 2, !dbg !4459
  br i1 %4, label %freeObject.i.i.i, label %leave.i.i.i, !dbg !4459

freeObject.i.i.i:                                 ; preds = %duplicated.i5
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %dict.sink) #5, !dbg !4460
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %dict.sink) #5, !dbg !4461
  br label %obj.cleanup.exit, !dbg !4462

leave.i.i.i:                                      ; preds = %duplicated.i5
  %5 = add nsw i32 %refCount1.i.i.i, -1, !dbg !4458
  store i32 %5, i32* %refCount.i.i.i4, align 4, !dbg !4463
  br label %obj.cleanup.exit, !dbg !4464

obj.cleanup.exit:                                 ; preds = %notOK, %freeObject.i.i.i, %leave.i.i.i
  store i32 1, i32* %ecvar, align 4, !dbg !4465
  ret { i32, %Tcl_Obj* } { i32 1, %Tcl_Obj* undef }, !dbg !4466
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, %Tcl_Obj* } @tcl.dict.unset(%Tcl_Obj* noalias nonnull %dict, i32 %pathlen, %Tcl_Obj** noalias nocapture nonnull readonly %pathobjs, i32* noalias nocapture nonnull %ecvar) local_unnamed_addr #6 !dbg !4467 {
enter:
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !4473, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %dict, i64 0, i32 0, !dbg !4474
  %refCount.i.i.i = load i32, i32* %refCountPtr.i.i.i, align 4, !dbg !4474
  %shared.i.i = icmp sgt i32 %refCount.i.i.i, 1, !dbg !4478
  br i1 %shared.i.i, label %duplicated.i, label %obj.dedup.exit, !dbg !4479

duplicated.i:                                     ; preds = %enter
  %duplicateObj.i = tail call noalias nonnull %Tcl_Obj* @Tcl_DuplicateObj(%Tcl_Obj* nocapture nonnull readonly %dict) #5, !dbg !4480
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %duplicateObj.i, i64 0, i32 0, !dbg !4481
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !4483
  %0 = icmp eq i32 %refCount1.i.i, 0, !dbg !4483
  tail call void @llvm.assume(i1 %0) #5, !dbg !4483
  br label %obj.dedup.exit, !dbg !4484

obj.dedup.exit:                                   ; preds = %enter, %duplicated.i
  %dict.sink = phi %Tcl_Obj* [ %duplicateObj.i, %duplicated.i ], [ %dict, %enter ]
  %code = tail call i32 @Tcl_DictObjRemoveKeyList(%Interp* nocapture nonnull %interp, %Tcl_Obj* nocapture nonnull %dict.sink, i32 %pathlen, %Tcl_Obj** nocapture nonnull readonly %pathobjs), !dbg !4485
  %1 = icmp eq i32 %code, 0, !dbg !4486
  br i1 %1, label %OK, label %notOK, !dbg !4486

OK:                                               ; preds = %obj.dedup.exit
  %2 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %dict.sink, 1, !dbg !4487
  ret { i32, %Tcl_Obj* } %2, !dbg !4487

notOK:                                            ; preds = %obj.dedup.exit
  br i1 %shared.i.i, label %duplicated.i3, label %obj.cleanup.exit, !dbg !4488

duplicated.i3:                                    ; preds = %notOK
  %refCount.i.i.i2 = getelementptr %Tcl_Obj, %Tcl_Obj* %dict.sink, i64 0, i32 0, !dbg !4490
  %refCount1.i.i.i = load i32, i32* %refCount.i.i.i2, align 4, !dbg !4493
  %3 = icmp slt i32 %refCount1.i.i.i, 2, !dbg !4494
  br i1 %3, label %freeObject.i.i.i, label %leave.i.i.i, !dbg !4494

freeObject.i.i.i:                                 ; preds = %duplicated.i3
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %dict.sink) #5, !dbg !4495
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %dict.sink) #5, !dbg !4496
  br label %obj.cleanup.exit, !dbg !4497

leave.i.i.i:                                      ; preds = %duplicated.i3
  %4 = add nsw i32 %refCount1.i.i.i, -1, !dbg !4493
  store i32 %4, i32* %refCount.i.i.i2, align 4, !dbg !4498
  br label %obj.cleanup.exit, !dbg !4499

obj.cleanup.exit:                                 ; preds = %notOK, %freeObject.i.i.i, %leave.i.i.i
  store i32 1, i32* %ecvar, align 4, !dbg !4500
  ret { i32, %Tcl_Obj* } { i32 1, %Tcl_Obj* undef }, !dbg !4501
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, %Tcl_Obj* } @tcl.dict.set1.empty(%Tcl_Obj* nonnull %dict, %Tcl_Obj* nonnull %key, { i1, %Tcl_Obj* } %value, i32* noalias nocapture nonnull %ecvar) local_unnamed_addr #6 !dbg !4502 {
enter:
  %0 = extractvalue { i1, %Tcl_Obj* } %value, 0, !dbg !4510
  br i1 %0, label %real.unset, label %real.set, !dbg !4510

real.set:                                         ; preds = %enter
  %1 = extractvalue { i1, %Tcl_Obj* } %value, 1, !dbg !4511
  %interp.i = load %Interp*, %Interp** @tclInterp, align 8, !dbg !4512, !invariant.load !3, !noalias !4514, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %dict, i64 0, i32 0, !dbg !4517
  %refCount.i.i.i.i = load i32, i32* %refCountPtr.i.i.i.i, align 4, !dbg !4517, !noalias !4514
  %shared.i.i.i = icmp sgt i32 %refCount.i.i.i.i, 1, !dbg !4521
  br i1 %shared.i.i.i, label %duplicated.i.i, label %obj.dedup.exit.i, !dbg !4522

duplicated.i.i:                                   ; preds = %real.set
  %duplicateObj.i.i = tail call noalias nonnull %Tcl_Obj* @Tcl_DuplicateObj(%Tcl_Obj* nocapture nonnull readonly %dict) #5, !dbg !4523, !noalias !4514
  %refCount.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %duplicateObj.i.i, i64 0, i32 0, !dbg !4524
  %refCount1.i.i.i = load i32, i32* %refCount.i.i.i, align 4, !dbg !4526, !noalias !4514
  %2 = icmp eq i32 %refCount1.i.i.i, 0, !dbg !4526
  tail call void @llvm.assume(i1 %2) #5, !dbg !4526, !noalias !4514
  br label %obj.dedup.exit.i, !dbg !4527

obj.dedup.exit.i:                                 ; preds = %real.set, %duplicated.i.i
  %dict.sink = phi %Tcl_Obj* [ %duplicateObj.i.i, %duplicated.i.i ], [ %dict, %real.set ]
  %code.i = tail call i32 @Tcl_DictObjPut(%Interp* nocapture nonnull %interp.i, %Tcl_Obj* nocapture nonnull %dict.sink, %Tcl_Obj* nonnull %key, %Tcl_Obj* nonnull %1) #5, !dbg !4528, !noalias !4514
  %3 = icmp eq i32 %code.i, 0, !dbg !4529
  br i1 %3, label %OK.i, label %notOK.i, !dbg !4529

OK.i:                                             ; preds = %obj.dedup.exit.i
  %refCount.i.i3.i = getelementptr %Tcl_Obj, %Tcl_Obj* %dict.sink, i64 0, i32 0, !dbg !4530
  %refCount1.i.i4.i = load i32, i32* %refCount.i.i3.i, align 4, !dbg !4533, !noalias !4514
  %4 = add nsw i32 %refCount1.i.i4.i, 1, !dbg !4533
  store i32 %4, i32* %refCount.i.i3.i, align 4, !dbg !4533, !noalias !4514
  %refCountPtr.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %1, i64 0, i32 0, !dbg !4534
  %refCount.i.i7.i = load i32, i32* %refCountPtr.i.i.i, align 4, !dbg !4534, !noalias !4514
  %shared.i.i = icmp sgt i32 %refCount.i.i7.i, 1, !dbg !4537
  br i1 %shared.i.i, label %exit1.i, label %exit.i, !dbg !4538

exit.i:                                           ; preds = %OK.i
  %5 = add nsw i32 %refCount.i.i7.i, 1, !dbg !4539
  store i32 %5, i32* %refCountPtr.i.i.i, align 4, !dbg !4539, !noalias !4514
  br label %exit1.i, !dbg !4542

exit1.i:                                          ; preds = %exit.i, %OK.i
  %6 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %dict.sink, 1, !dbg !4543
  br label %tcl.dict.set1.exit, !dbg !4543

notOK.i:                                          ; preds = %obj.dedup.exit.i
  br i1 %shared.i.i.i, label %duplicated.i6.i, label %obj.cleanup.exit.i, !dbg !4544

duplicated.i6.i:                                  ; preds = %notOK.i
  %refCount.i.i.i5.i = getelementptr %Tcl_Obj, %Tcl_Obj* %dict.sink, i64 0, i32 0, !dbg !4546
  %refCount1.i.i.i.i = load i32, i32* %refCount.i.i.i5.i, align 4, !dbg !4549, !noalias !4514
  %7 = icmp slt i32 %refCount1.i.i.i.i, 2, !dbg !4550
  br i1 %7, label %freeObject.i.i.i.i, label %leave.i.i.i.i, !dbg !4550

freeObject.i.i.i.i:                               ; preds = %duplicated.i6.i
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %dict.sink) #5, !dbg !4551, !noalias !4514
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %dict.sink) #5, !dbg !4552, !noalias !4514
  br label %obj.cleanup.exit.i, !dbg !4553

leave.i.i.i.i:                                    ; preds = %duplicated.i6.i
  %8 = add nsw i32 %refCount1.i.i.i.i, -1, !dbg !4549
  store i32 %8, i32* %refCount.i.i.i5.i, align 4, !dbg !4554, !noalias !4514
  br label %obj.cleanup.exit.i, !dbg !4555

obj.cleanup.exit.i:                               ; preds = %leave.i.i.i.i, %freeObject.i.i.i.i, %notOK.i
  store i32 1, i32* %ecvar, align 4, !dbg !4556, !alias.scope !4514
  br label %tcl.dict.set1.exit, !dbg !4557

tcl.dict.set1.exit:                               ; preds = %OK.i12, %obj.cleanup.exit.i17, %obj.cleanup.exit.i, %exit1.i
  %9 = phi { i32, %Tcl_Obj* } [ %6, %exit1.i ], [ { i32 1, %Tcl_Obj* undef }, %obj.cleanup.exit.i ], [ %13, %OK.i12 ], [ { i32 1, %Tcl_Obj* undef }, %obj.cleanup.exit.i17 ]
  ret { i32, %Tcl_Obj* } %9, !dbg !4558

real.unset:                                       ; preds = %enter
  %interp.i1 = load %Interp*, %Interp** @tclInterp, align 8, !dbg !4559, !invariant.load !3, !noalias !4561, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i.i.i.i2 = getelementptr %Tcl_Obj, %Tcl_Obj* %dict, i64 0, i32 0, !dbg !4564
  %refCount.i.i.i.i3 = load i32, i32* %refCountPtr.i.i.i.i2, align 4, !dbg !4564, !noalias !4561
  %shared.i.i.i4 = icmp sgt i32 %refCount.i.i.i.i3, 1, !dbg !4568
  br i1 %shared.i.i.i4, label %duplicated.i.i8, label %obj.dedup.exit.i11, !dbg !4569

duplicated.i.i8:                                  ; preds = %real.unset
  %duplicateObj.i.i5 = tail call noalias nonnull %Tcl_Obj* @Tcl_DuplicateObj(%Tcl_Obj* nocapture nonnull readonly %dict) #5, !dbg !4570, !noalias !4561
  %refCount.i.i.i6 = getelementptr %Tcl_Obj, %Tcl_Obj* %duplicateObj.i.i5, i64 0, i32 0, !dbg !4571
  %refCount1.i.i.i7 = load i32, i32* %refCount.i.i.i6, align 4, !dbg !4573, !noalias !4561
  %10 = icmp eq i32 %refCount1.i.i.i7, 0, !dbg !4573
  tail call void @llvm.assume(i1 %10) #5, !dbg !4573, !noalias !4561
  br label %obj.dedup.exit.i11, !dbg !4574

obj.dedup.exit.i11:                               ; preds = %real.unset, %duplicated.i.i8
  %dict.sink18 = phi %Tcl_Obj* [ %duplicateObj.i.i5, %duplicated.i.i8 ], [ %dict, %real.unset ]
  %code.i10 = tail call i32 @Tcl_DictObjRemove(%Interp* nocapture nonnull %interp.i1, %Tcl_Obj* nocapture nonnull %dict.sink18, %Tcl_Obj* nocapture nonnull readonly %key) #5, !dbg !4575, !noalias !4561
  %11 = icmp eq i32 %code.i10, 0, !dbg !4576
  br i1 %11, label %OK.i12, label %notOK.i13, !dbg !4576

OK.i12:                                           ; preds = %obj.dedup.exit.i11
  %refCount.i.i2.i = getelementptr %Tcl_Obj, %Tcl_Obj* %dict.sink18, i64 0, i32 0, !dbg !4577
  %refCount1.i.i3.i = load i32, i32* %refCount.i.i2.i, align 4, !dbg !4580, !noalias !4561
  %12 = add nsw i32 %refCount1.i.i3.i, 1, !dbg !4580
  store i32 %12, i32* %refCount.i.i2.i, align 4, !dbg !4580, !noalias !4561
  %13 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %dict.sink18, 1, !dbg !4581
  br label %tcl.dict.set1.exit, !dbg !4581

notOK.i13:                                        ; preds = %obj.dedup.exit.i11
  br i1 %shared.i.i.i4, label %duplicated.i5.i, label %obj.cleanup.exit.i17, !dbg !4582

duplicated.i5.i:                                  ; preds = %notOK.i13
  %refCount.i.i.i4.i = getelementptr %Tcl_Obj, %Tcl_Obj* %dict.sink18, i64 0, i32 0, !dbg !4584
  %refCount1.i.i.i.i14 = load i32, i32* %refCount.i.i.i4.i, align 4, !dbg !4587, !noalias !4561
  %14 = icmp slt i32 %refCount1.i.i.i.i14, 2, !dbg !4588
  br i1 %14, label %freeObject.i.i.i.i15, label %leave.i.i.i.i16, !dbg !4588

freeObject.i.i.i.i15:                             ; preds = %duplicated.i5.i
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %dict.sink18) #5, !dbg !4589, !noalias !4561
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %dict.sink18) #5, !dbg !4590, !noalias !4561
  br label %obj.cleanup.exit.i17, !dbg !4591

leave.i.i.i.i16:                                  ; preds = %duplicated.i5.i
  %15 = add nsw i32 %refCount1.i.i.i.i14, -1, !dbg !4587
  store i32 %15, i32* %refCount.i.i.i4.i, align 4, !dbg !4592, !noalias !4561
  br label %obj.cleanup.exit.i17, !dbg !4593

obj.cleanup.exit.i17:                             ; preds = %leave.i.i.i.i16, %freeObject.i.i.i.i15, %notOK.i13
  store i32 1, i32* %ecvar, align 4, !dbg !4594, !alias.scope !4561
  br label %tcl.dict.set1.exit, !dbg !4595
}

; Function Attrs: alwaysinline nofree norecurse nounwind
define hidden void @tcl.dict.addIterReference(%DICTFOR* nocapture nonnull %iter) local_unnamed_addr #10 !dbg !4596 {
enter:
  %ref = getelementptr %DICTFOR, %DICTFOR* %iter, i64 0, i32 4, !dbg !4613
  %ref1 = load i32, i32* %ref, align 4, !dbg !4614
  %0 = add i32 %ref1, 1, !dbg !4615
  store i32 %0, i32* %ref, align 4, !dbg !4615
  ret void, !dbg !4616
}

; Function Attrs: alwaysinline nofree norecurse nounwind
define hidden void @tcl.dict.addIterFailReference({ i32, %DICTFOR* } %value) local_unnamed_addr #10 !dbg !4617 {
enter:
  %0 = extractvalue { i32, %DICTFOR* } %value, 0, !dbg !4624
  %1 = icmp eq i32 %0, 0, !dbg !4624
  br i1 %1, label %release, label %nothing, !dbg !4624

nothing:                                          ; preds = %enter
  ret void, !dbg !4625

release:                                          ; preds = %enter
  %2 = extractvalue { i32, %DICTFOR* } %value, 1, !dbg !4626
  %ref.i = getelementptr %DICTFOR, %DICTFOR* %2, i64 0, i32 4, !dbg !4627
  %ref1.i = load i32, i32* %ref.i, align 4, !dbg !4629
  %3 = add i32 %ref1.i, 1, !dbg !4630
  store i32 %3, i32* %ref.i, align 4, !dbg !4630
  ret void, !dbg !4631
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, %DICTFOR* } @tcl.dict.iterStart(%Tcl_Obj* nonnull %dict, i32* noalias nocapture nonnull %ecvar) local_unnamed_addr #6 !dbg !4632 {
enter:
  %done = alloca i32, align 4, !dbg !4638
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !4639, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %ptr = tail call noalias nonnull i8* @Tcl_Alloc(i32 56), !dbg !4640
  tail call void @llvm.lifetime.start.p0i8(i64 -1, i8* nonnull %ptr), !dbg !4640
  %keyPtr = getelementptr i8, i8* %ptr, i64 32, !dbg !4641
  %0 = bitcast i8* %keyPtr to %Tcl_Obj**, !dbg !4641
  %valuePtr = getelementptr i8, i8* %ptr, i64 40, !dbg !4642
  %1 = bitcast i8* %valuePtr to %Tcl_Obj**, !dbg !4642
  %search = bitcast i8* %ptr to %DictSearch*, !dbg !4643
  %code = call i32 @Tcl_DictObjFirst(%Interp* nocapture nonnull %interp, %Tcl_Obj* nonnull %dict, %DictSearch* nocapture nonnull %search, %Tcl_Obj** nocapture nonnull %0, %Tcl_Obj** nocapture nonnull %1, i32* nocapture nonnull %done), !dbg !4644
  %2 = icmp eq i32 %code, 0, !dbg !4645
  br i1 %2, label %ok, label %failed, !dbg !4645

ok:                                               ; preds = %enter
  %ptr1 = bitcast i8* %ptr to %DICTFOR*, !dbg !4640
  %ptr1.dict = getelementptr i8, i8* %ptr, i64 24, !dbg !4646
  %3 = bitcast i8* %ptr1.dict to %Tcl_Obj**, !dbg !4646
  store %Tcl_Obj* %dict, %Tcl_Obj** %3, align 8, !dbg !4646
  %ptr1.ref = getelementptr i8, i8* %ptr, i64 48, !dbg !4647
  %4 = bitcast i8* %ptr1.ref to i32*, !dbg !4647
  %done3 = load i32, i32* %done, align 4, !dbg !4648
  %5 = icmp ne i32 %done3, 0, !dbg !4648
  %ptr1.done = getelementptr i8, i8* %ptr, i64 52, !dbg !4648
  %6 = bitcast i8* %ptr1.done to i1*, !dbg !4648
  store i1 %5, i1* %6, align 1, !dbg !4648
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %dict, i64 0, i32 0, !dbg !4649
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !4652
  %7 = add nsw i32 %refCount1.i.i, 1, !dbg !4652
  store i32 %7, i32* %refCount.i.i, align 4, !dbg !4652
  store i32 1, i32* %4, align 4, !dbg !4653
  %8 = insertvalue { i32, %DICTFOR* } { i32 0, %DICTFOR* undef }, %DICTFOR* %ptr1, 1, !dbg !4655
  ret { i32, %DICTFOR* } %8, !dbg !4655

failed:                                           ; preds = %enter
  tail call void @Tcl_Free(i8* nonnull %ptr), !dbg !4656
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %ptr), !dbg !4656
  store i32 1, i32* %ecvar, align 4, !dbg !4657
  ret { i32, %DICTFOR* } { i32 1, %DICTFOR* undef }, !dbg !4658
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #11

; Function Attrs: alwaysinline nounwind
define hidden nonnull %DICTFOR* @tcl.dict.iterNext(%DICTFOR* nonnull returned %iter) local_unnamed_addr #6 !dbg !4659 {
enter:
  %done = alloca i32, align 4, !dbg !4664
  %done.ptr = getelementptr %DICTFOR, %DICTFOR* %iter, i64 0, i32 5, !dbg !4665
  %done1 = load i1, i1* %done.ptr, align 1, !dbg !4665
  br i1 %done1, label %finished, label %nextStep, !dbg !4665

nextStep:                                         ; preds = %enter
  %keyPtr = getelementptr %DICTFOR, %DICTFOR* %iter, i64 0, i32 2, !dbg !4666
  %valuePtr = getelementptr %DICTFOR, %DICTFOR* %iter, i64 0, i32 3, !dbg !4667
  %search = getelementptr %DICTFOR, %DICTFOR* %iter, i64 0, i32 0, !dbg !4668
  call void @Tcl_DictObjNext(%DictSearch* nocapture nonnull %search, %Tcl_Obj** nocapture nonnull %keyPtr, %Tcl_Obj** nocapture nonnull %valuePtr, i32* nocapture nonnull %done), !dbg !4669
  %done2 = load i32, i32* %done, align 4, !dbg !4670
  %0 = icmp ne i32 %done2, 0, !dbg !4670
  store i1 %0, i1* %done.ptr, align 1, !dbg !4670
  br label %finished, !dbg !4671

finished:                                         ; preds = %nextStep, %enter
  %ref.i = getelementptr %DICTFOR, %DICTFOR* %iter, i64 0, i32 4, !dbg !4672
  %ref1.i = load i32, i32* %ref.i, align 4, !dbg !4674
  %1 = add i32 %ref1.i, 1, !dbg !4675
  store i32 %1, i32* %ref.i, align 4, !dbg !4675
  ret %DICTFOR* %iter, !dbg !4676
}

; Function Attrs: alwaysinline nounwind
define hidden void @tcl.dict.dropIterReference(%DICTFOR* nonnull %iter) local_unnamed_addr #6 !dbg !4677 {
enter:
  %ref = getelementptr %DICTFOR, %DICTFOR* %iter, i64 0, i32 4, !dbg !4680
  %ref1 = load i32, i32* %ref, align 4, !dbg !4681
  %0 = add i32 %ref1, -1, !dbg !4682
  store i32 %0, i32* %ref, align 4, !dbg !4682
  %1 = icmp sgt i32 %ref1, 1, !dbg !4683
  br i1 %1, label %done, label %free, !dbg !4683

free:                                             ; preds = %enter
  %search = getelementptr %DICTFOR, %DICTFOR* %iter, i64 0, i32 0, !dbg !4684
  tail call void @Tcl_DictObjDone(%DictSearch* nocapture nonnull %search), !dbg !4685
  %dict.ptr = getelementptr %DICTFOR, %DICTFOR* %iter, i64 0, i32 1, !dbg !4686
  %dict = load %Tcl_Obj*, %Tcl_Obj** %dict.ptr, align 8, !dbg !4686
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %dict, i64 0, i32 0, !dbg !4687
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !4690
  %2 = icmp slt i32 %refCount1.i.i, 2, !dbg !4691
  br i1 %2, label %freeObject.i.i, label %leave.i.i, !dbg !4691

freeObject.i.i:                                   ; preds = %free
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %dict) #5, !dbg !4692
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %dict) #5, !dbg !4693
  br label %tcl.dropReference.exit, !dbg !4694

leave.i.i:                                        ; preds = %free
  %3 = add nsw i32 %refCount1.i.i, -1, !dbg !4690
  store i32 %3, i32* %refCount.i.i, align 4, !dbg !4695
  br label %tcl.dropReference.exit, !dbg !4696

tcl.dropReference.exit:                           ; preds = %freeObject.i.i, %leave.i.i
  %ptr = bitcast %DICTFOR* %iter to i8*, !dbg !4697
  tail call void @Tcl_Free(i8* nonnull %ptr), !dbg !4697
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %ptr), !dbg !4697
  ret void, !dbg !4698

done:                                             ; preds = %enter
  ret void, !dbg !4699
}

; Function Attrs: alwaysinline nounwind
define hidden void @tcl.dict.dropIterFailReference({ i32, %DICTFOR* } %iter) local_unnamed_addr #6 !dbg !4700 {
enter:
  %0 = extractvalue { i32, %DICTFOR* } %iter, 0, !dbg !4703
  %1 = icmp eq i32 %0, 0, !dbg !4703
  br i1 %1, label %release, label %nothing, !dbg !4703

nothing:                                          ; preds = %tcl.dropReference.exit.i, %release, %enter
  ret void, !dbg !4704

release:                                          ; preds = %enter
  %2 = extractvalue { i32, %DICTFOR* } %iter, 1, !dbg !4705
  %ref.i = getelementptr %DICTFOR, %DICTFOR* %2, i64 0, i32 4, !dbg !4706
  %ref1.i = load i32, i32* %ref.i, align 4, !dbg !4708
  %3 = add i32 %ref1.i, -1, !dbg !4709
  store i32 %3, i32* %ref.i, align 4, !dbg !4709
  %4 = icmp sgt i32 %ref1.i, 1, !dbg !4710
  br i1 %4, label %nothing, label %free.i, !dbg !4710

free.i:                                           ; preds = %release
  %search.i = getelementptr %DICTFOR, %DICTFOR* %2, i64 0, i32 0, !dbg !4711
  tail call void @Tcl_DictObjDone(%DictSearch* nocapture nonnull %search.i) #5, !dbg !4712
  %dict.ptr.i = getelementptr %DICTFOR, %DICTFOR* %2, i64 0, i32 1, !dbg !4713
  %dict.i = load %Tcl_Obj*, %Tcl_Obj** %dict.ptr.i, align 8, !dbg !4713
  %refCount.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %dict.i, i64 0, i32 0, !dbg !4714
  %refCount1.i.i.i = load i32, i32* %refCount.i.i.i, align 4, !dbg !4717
  %5 = icmp slt i32 %refCount1.i.i.i, 2, !dbg !4718
  br i1 %5, label %freeObject.i.i.i, label %leave.i.i.i, !dbg !4718

freeObject.i.i.i:                                 ; preds = %free.i
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %dict.i) #5, !dbg !4719
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %dict.i) #5, !dbg !4720
  br label %tcl.dropReference.exit.i, !dbg !4721

leave.i.i.i:                                      ; preds = %free.i
  %6 = add nsw i32 %refCount1.i.i.i, -1, !dbg !4717
  store i32 %6, i32* %refCount.i.i.i, align 4, !dbg !4722
  br label %tcl.dropReference.exit.i, !dbg !4723

tcl.dropReference.exit.i:                         ; preds = %leave.i.i.i, %freeObject.i.i.i
  %ptr.i = bitcast %DICTFOR* %2 to i8*, !dbg !4724
  tail call void @Tcl_Free(i8* nonnull %ptr.i) #5, !dbg !4724
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %ptr.i) #5, !dbg !4724
  br label %nothing, !dbg !4725
}

; Function Attrs: alwaysinline nounwind
define hidden %Tcl_Obj* @tcl.dict.iterKey(%DICTFOR* nocapture nonnull readonly %iter) local_unnamed_addr #6 !dbg !4726 {
enter:
  %done.ptr = getelementptr %DICTFOR, %DICTFOR* %iter, i64 0, i32 5, !dbg !4731
  %done = load i1, i1* %done.ptr, align 1, !dbg !4731
  br i1 %done, label %alloc, label %real, !dbg !4731

alloc:                                            ; preds = %enter
  %objPtr = tail call noalias nonnull %Tcl_Obj* @Tcl_NewObj(), !dbg !4732
  br label %save, !dbg !4733

real:                                             ; preds = %enter
  %key.ptr = getelementptr %DICTFOR, %DICTFOR* %iter, i64 0, i32 2, !dbg !4734
  %key = load %Tcl_Obj*, %Tcl_Obj** %key.ptr, align 8, !dbg !4734
  %refCount.i.i.phi.trans.insert = getelementptr %Tcl_Obj, %Tcl_Obj* %key, i64 0, i32 0, !dbg !4735
  %refCount1.i.i.pre = load i32, i32* %refCount.i.i.phi.trans.insert, align 4, !dbg !4738
  %phitmp = add i32 %refCount1.i.i.pre, 1, !dbg !4739
  br label %save, !dbg !4739

save:                                             ; preds = %real, %alloc
  %refCount1.i.i = phi i32 [ %phitmp, %real ], [ 1, %alloc ]
  %obj = phi %Tcl_Obj* [ %key, %real ], [ %objPtr, %alloc ]
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %obj, i64 0, i32 0, !dbg !4740
  store i32 %refCount1.i.i, i32* %refCount.i.i, align 4, !dbg !4738
  ret %Tcl_Obj* %obj, !dbg !4741
}

; Function Attrs: alwaysinline nounwind
define hidden %Tcl_Obj* @tcl.dict.iterValue(%DICTFOR* nocapture nonnull readonly %iter) local_unnamed_addr #6 !dbg !4742 {
enter:
  %done.ptr = getelementptr %DICTFOR, %DICTFOR* %iter, i64 0, i32 5, !dbg !4745
  %done = load i1, i1* %done.ptr, align 1, !dbg !4745
  br i1 %done, label %alloc, label %real, !dbg !4745

alloc:                                            ; preds = %enter
  %objPtr = tail call noalias nonnull %Tcl_Obj* @Tcl_NewObj(), !dbg !4746
  br label %save, !dbg !4747

real:                                             ; preds = %enter
  %value.ptr = getelementptr %DICTFOR, %DICTFOR* %iter, i64 0, i32 3, !dbg !4748
  %value = load %Tcl_Obj*, %Tcl_Obj** %value.ptr, align 8, !dbg !4748
  %refCount.i.i.phi.trans.insert = getelementptr %Tcl_Obj, %Tcl_Obj* %value, i64 0, i32 0, !dbg !4749
  %refCount1.i.i.pre = load i32, i32* %refCount.i.i.phi.trans.insert, align 4, !dbg !4752
  %phitmp = add i32 %refCount1.i.i.pre, 1, !dbg !4753
  br label %save, !dbg !4753

save:                                             ; preds = %real, %alloc
  %refCount1.i.i = phi i32 [ %phitmp, %real ], [ 1, %alloc ]
  %obj = phi %Tcl_Obj* [ %value, %real ], [ %objPtr, %alloc ]
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %obj, i64 0, i32 0, !dbg !4754
  store i32 %refCount1.i.i, i32* %refCount.i.i, align 4, !dbg !4752
  ret %Tcl_Obj* %obj, !dbg !4755
}

; Function Attrs: alwaysinline norecurse nounwind readonly
define hidden i1 @tcl.dict.iterDone(%DICTFOR* nocapture nonnull readonly %iter) local_unnamed_addr #15 !dbg !4756 {
enter:
  %done.ptr = getelementptr %DICTFOR, %DICTFOR* %iter, i64 0, i32 5, !dbg !4760
  %done = load i1, i1* %done.ptr, align 1, !dbg !4760
  ret i1 %done, !dbg !4760
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, %Tcl_Obj* } @tcl.dict.append(%Tcl_Obj* nonnull %dict, %Tcl_Obj* nonnull %key, %Tcl_Obj* nonnull %value, i32* noalias nocapture nonnull %ecvar) local_unnamed_addr #6 !dbg !4761 {
enter:
  %valuePtr = alloca %Tcl_Obj*, align 8, !dbg !4767
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !4768, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %dict, i64 0, i32 0, !dbg !4769
  %refCount.i.i.i = load i32, i32* %refCountPtr.i.i.i, align 4, !dbg !4769
  %shared.i.i = icmp sgt i32 %refCount.i.i.i, 1, !dbg !4773
  br i1 %shared.i.i, label %duplicated.i, label %obj.dedup.exit, !dbg !4774

duplicated.i:                                     ; preds = %enter
  %duplicateObj.i = tail call noalias nonnull %Tcl_Obj* @Tcl_DuplicateObj(%Tcl_Obj* nocapture nonnull readonly %dict) #5, !dbg !4775
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %duplicateObj.i, i64 0, i32 0, !dbg !4776
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !4778
  %0 = icmp eq i32 %refCount1.i.i, 0, !dbg !4778
  tail call void @llvm.assume(i1 %0) #5, !dbg !4778
  br label %obj.dedup.exit, !dbg !4779

obj.dedup.exit:                                   ; preds = %enter, %duplicated.i
  %dict.sink = phi %Tcl_Obj* [ %duplicateObj.i, %duplicated.i ], [ %dict, %enter ]
  %code = call i32 @Tcl_DictObjGet(%Interp* nocapture nonnull %interp, %Tcl_Obj* nocapture nonnull %dict.sink, %Tcl_Obj* nocapture nonnull readonly %key, %Tcl_Obj** nocapture nonnull %valuePtr), !dbg !4780
  %1 = icmp eq i32 %code, 0, !dbg !4781
  br i1 %1, label %OK, label %notOK, !dbg !4781

OK:                                               ; preds = %obj.dedup.exit
  %value.in.dict = load %Tcl_Obj*, %Tcl_Obj** %valuePtr, align 8, !dbg !4782
  %2 = icmp eq %Tcl_Obj* %value.in.dict, null, !dbg !4783
  br i1 %2, label %set, label %append, !dbg !4783

set:                                              ; preds = %OK
  %code2 = tail call i32 @Tcl_DictObjPut(%Interp* nocapture null, %Tcl_Obj* nocapture nonnull %dict.sink, %Tcl_Obj* nonnull %key, %Tcl_Obj* nonnull %value), !dbg !4784
  br label %done, !dbg !4785

append:                                           ; preds = %OK
  %refCountPtr.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value.in.dict, i64 0, i32 0, !dbg !4786
  %refCount.i.i4 = load i32, i32* %refCountPtr.i.i, align 4, !dbg !4786
  %shared.i = icmp sgt i32 %refCount.i.i4, 1, !dbg !4789
  br i1 %shared.i, label %dupePut, label %directUpdate, !dbg !4790

directUpdate:                                     ; preds = %append
  tail call void @Tcl_AppendObjToObj(%Tcl_Obj* noalias nocapture nonnull %value.in.dict, %Tcl_Obj* noalias nocapture nonnull %value), !dbg !4791
  %bytes.i = getelementptr %Tcl_Obj, %Tcl_Obj* %dict.sink, i64 0, i32 1, !dbg !4792
  %bytes1.i = load i8*, i8** %bytes.i, align 8, !dbg !4794
  %3 = icmp eq i8* %bytes1.i, null, !dbg !4795
  br i1 %3, label %done, label %act.i, !dbg !4795

act.i:                                            ; preds = %directUpdate
  %tclEmptyStringRep.i = load i8*, i8** @tclEmptyStringRep, align 8, !dbg !4796, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %4 = icmp eq i8* %bytes1.i, %tclEmptyStringRep.i, !dbg !4796
  br i1 %4, label %clear.i, label %free.i, !dbg !4796

free.i:                                           ; preds = %act.i
  tail call void @Tcl_Free(i8* nonnull %bytes1.i) #5, !dbg !4797
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %bytes1.i) #5, !dbg !4798
  br label %clear.i, !dbg !4799

clear.i:                                          ; preds = %free.i, %act.i
  store i8* null, i8** %bytes.i, align 8, !dbg !4800
  br label %done, !dbg !4801

dupePut:                                          ; preds = %append
  %objPtr = tail call noalias nonnull %Tcl_Obj* @Tcl_DuplicateObj(%Tcl_Obj* nocapture nonnull readonly %value.in.dict), !dbg !4802
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !4803
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !4805
  %5 = icmp eq i32 %refCount1.i, 0, !dbg !4805
  tail call void @llvm.assume(i1 %5) #5, !dbg !4805
  tail call void @Tcl_AppendObjToObj(%Tcl_Obj* noalias nocapture nonnull %objPtr, %Tcl_Obj* noalias nocapture nonnull %value), !dbg !4806
  %code3 = tail call i32 @Tcl_DictObjPut(%Interp* nocapture null, %Tcl_Obj* nocapture nonnull %dict.sink, %Tcl_Obj* nocapture nonnull %key, %Tcl_Obj* nonnull %objPtr), !dbg !4807
  br label %done, !dbg !4808

done:                                             ; preds = %clear.i, %directUpdate, %dupePut, %set
  %refCount.i.i7 = getelementptr %Tcl_Obj, %Tcl_Obj* %dict.sink, i64 0, i32 0, !dbg !4809
  %refCount1.i.i8 = load i32, i32* %refCount.i.i7, align 4, !dbg !4812
  %6 = add nsw i32 %refCount1.i.i8, 1, !dbg !4812
  store i32 %6, i32* %refCount.i.i7, align 4, !dbg !4812
  %7 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %dict.sink, 1, !dbg !4813
  ret { i32, %Tcl_Obj* } %7, !dbg !4813

notOK:                                            ; preds = %obj.dedup.exit
  br i1 %shared.i.i, label %duplicated.i6, label %obj.cleanup.exit, !dbg !4814

duplicated.i6:                                    ; preds = %notOK
  %refCount.i.i.i5 = getelementptr %Tcl_Obj, %Tcl_Obj* %dict.sink, i64 0, i32 0, !dbg !4816
  %refCount1.i.i.i = load i32, i32* %refCount.i.i.i5, align 4, !dbg !4819
  %8 = icmp slt i32 %refCount1.i.i.i, 2, !dbg !4820
  br i1 %8, label %freeObject.i.i.i, label %leave.i.i.i, !dbg !4820

freeObject.i.i.i:                                 ; preds = %duplicated.i6
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %dict.sink) #5, !dbg !4821
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %dict.sink) #5, !dbg !4822
  br label %obj.cleanup.exit, !dbg !4823

leave.i.i.i:                                      ; preds = %duplicated.i6
  %9 = add nsw i32 %refCount1.i.i.i, -1, !dbg !4819
  store i32 %9, i32* %refCount.i.i.i5, align 4, !dbg !4824
  br label %obj.cleanup.exit, !dbg !4825

obj.cleanup.exit:                                 ; preds = %notOK, %freeObject.i.i.i, %leave.i.i.i
  store i32 1, i32* %ecvar, align 4, !dbg !4826
  ret { i32, %Tcl_Obj* } { i32 1, %Tcl_Obj* undef }, !dbg !4827
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, %Tcl_Obj* } @tcl.dict.incr(%Tcl_Obj* nonnull %dict, %Tcl_Obj* nonnull %key, %INT %value, i32* noalias nocapture nonnull %ecvar) local_unnamed_addr #6 !dbg !4828 {
enter:
  %valuePtr = alloca %Tcl_Obj*, align 8, !dbg !4836
  %intPtr = alloca i64, align 8, !dbg !4837
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !4838, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %dict, i64 0, i32 0, !dbg !4839
  %refCount.i.i.i = load i32, i32* %refCountPtr.i.i.i, align 4, !dbg !4839
  %shared.i.i = icmp sgt i32 %refCount.i.i.i, 1, !dbg !4843
  br i1 %shared.i.i, label %duplicated.i, label %obj.dedup.exit, !dbg !4844

duplicated.i:                                     ; preds = %enter
  %duplicateObj.i = tail call noalias nonnull %Tcl_Obj* @Tcl_DuplicateObj(%Tcl_Obj* nocapture nonnull readonly %dict) #5, !dbg !4845
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %duplicateObj.i, i64 0, i32 0, !dbg !4846
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !4848
  %0 = icmp eq i32 %refCount1.i.i, 0, !dbg !4848
  tail call void @llvm.assume(i1 %0) #5, !dbg !4848
  br label %obj.dedup.exit, !dbg !4849

obj.dedup.exit:                                   ; preds = %enter, %duplicated.i
  %dict.sink = phi %Tcl_Obj* [ %duplicateObj.i, %duplicated.i ], [ %dict, %enter ]
  %code = call i32 @Tcl_DictObjGet(%Interp* nocapture nonnull %interp, %Tcl_Obj* nocapture nonnull %dict.sink, %Tcl_Obj* nocapture nonnull readonly %key, %Tcl_Obj** nocapture nonnull %valuePtr), !dbg !4850
  %1 = icmp eq i32 %code, 0, !dbg !4851
  br i1 %1, label %OK, label %notOK, !dbg !4851

OK:                                               ; preds = %obj.dedup.exit
  %value.in.dict = load %Tcl_Obj*, %Tcl_Obj** %valuePtr, align 8, !dbg !4852
  %2 = icmp eq %Tcl_Obj* %value.in.dict, null, !dbg !4853
  br i1 %2, label %set, label %add, !dbg !4853

set:                                              ; preds = %OK
  %3 = extractvalue %INT %value, 0, !dbg !4854
  br i1 %3, label %op.64bit.i, label %op.32bit.i, !dbg !4854

op.32bit.i:                                       ; preds = %set
  %4 = extractvalue %INT %value, 1, !dbg !4856
  %objPtr.i = tail call noalias nonnull %Tcl_Obj* @Tcl_NewIntObj(i32 %4) #5, !dbg !4856
  br label %done, !dbg !4857

op.64bit.i:                                       ; preds = %set
  %5 = extractvalue %INT %value, 2, !dbg !4858
  %objPtr1.i = tail call noalias nonnull %Tcl_Obj* @Tcl_NewWideIntObj(i64 %5) #5, !dbg !4858
  br label %done, !dbg !4859

add:                                              ; preds = %OK
  %code3 = call i32 @Tcl_GetWideIntFromObj(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %value.in.dict, i64* noalias nocapture nonnull %intPtr), !dbg !4860
  %6 = icmp eq i32 %code3, 0, !dbg !4861
  br i1 %6, label %op.64bit.i29, label %notOK, !dbg !4861

op.64bit.i29:                                     ; preds = %add
  %int = load i64, i64* %intPtr, align 8, !dbg !4862
  %.pre.i = extractvalue %INT %value, 0, !dbg !4863
  %7 = extractvalue %INT %value, 2, !dbg !4865
  %8 = extractvalue %INT %value, 1, !dbg !4865
  %9 = sext i32 %8 to i64, !dbg !4865
  %10 = select i1 %.pre.i, i64 %7, i64 %9, !dbg !4865
  %z.643.i = add i64 %int, %10, !dbg !4867
  %objPtr1.i22 = tail call noalias nonnull %Tcl_Obj* @Tcl_NewWideIntObj(i64 %z.643.i) #5, !dbg !4868
  br label %done, !dbg !4870

done:                                             ; preds = %op.64bit.i29, %op.32bit.i, %op.64bit.i
  %objPtr1.i22.sink39 = phi %Tcl_Obj* [ %objPtr1.i22, %op.64bit.i29 ], [ %objPtr.i, %op.32bit.i ], [ %objPtr1.i, %op.64bit.i ]
  %refCount.i6.i23 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr1.i22.sink39, i64 0, i32 0, !dbg !4871
  %refCount1.i7.i24 = load i32, i32* %refCount.i6.i23, align 4, !dbg !4871
  %11 = icmp eq i32 %refCount1.i7.i24, 0, !dbg !4871
  tail call void @llvm.assume(i1 %11) #5, !dbg !4871
  %typePtr.ptr2.i25 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr1.i22.sink39, i64 0, i32 3, !dbg !4871
  %typePtr3.i26 = load %ObjType*, %ObjType** %typePtr.ptr2.i25, align 8, !dbg !4871, !nonnull !3
  %tclWideIntType4.i27 = load %ObjType*, %ObjType** @tclWideIntType, align 8, !dbg !4871, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %12 = icmp eq %ObjType* %typePtr3.i26, %tclWideIntType4.i27, !dbg !4871
  %tclIntType5.i28 = load %ObjType*, %ObjType** @tclIntType, align 8, !dbg !4871, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %13 = icmp eq %ObjType* %typePtr3.i26, %tclIntType5.i28, !dbg !4871
  %14 = or i1 %12, %13, !dbg !4871
  tail call void @llvm.assume(i1 %14) #5, !dbg !4871
  %code8 = tail call i32 @Tcl_DictObjPut(%Interp* nocapture null, %Tcl_Obj* nocapture nonnull %dict.sink, %Tcl_Obj* nonnull %key, %Tcl_Obj* nonnull %objPtr1.i22.sink39), !dbg !4872
  %refCount.i.i32 = getelementptr %Tcl_Obj, %Tcl_Obj* %dict.sink, i64 0, i32 0, !dbg !4873
  %refCount1.i.i33 = load i32, i32* %refCount.i.i32, align 4, !dbg !4876
  %15 = add nsw i32 %refCount1.i.i33, 1, !dbg !4876
  store i32 %15, i32* %refCount.i.i32, align 4, !dbg !4876
  %16 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %dict.sink, 1, !dbg !4877
  ret { i32, %Tcl_Obj* } %16, !dbg !4877

notOK:                                            ; preds = %add, %obj.dedup.exit
  br i1 %shared.i.i, label %duplicated.i35, label %obj.cleanup.exit, !dbg !4878

duplicated.i35:                                   ; preds = %notOK
  %refCount.i.i.i34 = getelementptr %Tcl_Obj, %Tcl_Obj* %dict.sink, i64 0, i32 0, !dbg !4880
  %refCount1.i.i.i = load i32, i32* %refCount.i.i.i34, align 4, !dbg !4883
  %17 = icmp slt i32 %refCount1.i.i.i, 2, !dbg !4884
  br i1 %17, label %freeObject.i.i.i, label %leave.i.i.i, !dbg !4884

freeObject.i.i.i:                                 ; preds = %duplicated.i35
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %dict.sink) #5, !dbg !4885
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %dict.sink) #5, !dbg !4886
  br label %obj.cleanup.exit, !dbg !4887

leave.i.i.i:                                      ; preds = %duplicated.i35
  %18 = add nsw i32 %refCount1.i.i.i, -1, !dbg !4883
  store i32 %18, i32* %refCount.i.i.i34, align 4, !dbg !4888
  br label %obj.cleanup.exit, !dbg !4889

obj.cleanup.exit:                                 ; preds = %notOK, %freeObject.i.i.i, %leave.i.i.i
  store i32 1, i32* %ecvar, align 4, !dbg !4890
  ret { i32, %Tcl_Obj* } { i32 1, %Tcl_Obj* undef }, !dbg !4891
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, %Tcl_Obj* } @tcl.dict.lappend(%Tcl_Obj* nonnull %dict, %Tcl_Obj* nonnull %key, %Tcl_Obj* nonnull %value, i32* noalias nocapture nonnull %ecvar) local_unnamed_addr #6 !dbg !4892 {
enter:
  %valuePtr = alloca %Tcl_Obj*, align 8, !dbg !4898
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !4899, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %dict, i64 0, i32 0, !dbg !4900
  %refCount.i.i.i = load i32, i32* %refCountPtr.i.i.i, align 4, !dbg !4900
  %shared.i.i = icmp sgt i32 %refCount.i.i.i, 1, !dbg !4904
  br i1 %shared.i.i, label %duplicated.i, label %obj.dedup.exit, !dbg !4905

duplicated.i:                                     ; preds = %enter
  %duplicateObj.i = tail call noalias nonnull %Tcl_Obj* @Tcl_DuplicateObj(%Tcl_Obj* nocapture nonnull readonly %dict) #5, !dbg !4906
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %duplicateObj.i, i64 0, i32 0, !dbg !4907
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !4909
  %0 = icmp eq i32 %refCount1.i.i, 0, !dbg !4909
  tail call void @llvm.assume(i1 %0) #5, !dbg !4909
  br label %obj.dedup.exit, !dbg !4910

obj.dedup.exit:                                   ; preds = %enter, %duplicated.i
  %dict.sink = phi %Tcl_Obj* [ %duplicateObj.i, %duplicated.i ], [ %dict, %enter ]
  %code = call i32 @Tcl_DictObjGet(%Interp* nocapture nonnull %interp, %Tcl_Obj* nocapture nonnull %dict.sink, %Tcl_Obj* nocapture nonnull readonly %key, %Tcl_Obj** nocapture nonnull %valuePtr), !dbg !4911
  %1 = icmp eq i32 %code, 0, !dbg !4912
  br i1 %1, label %OK, label %notOK, !dbg !4912

OK:                                               ; preds = %obj.dedup.exit
  %value.in.dict = load %Tcl_Obj*, %Tcl_Obj** %valuePtr, align 8, !dbg !4913
  %2 = icmp eq %Tcl_Obj* %value.in.dict, null, !dbg !4914
  br i1 %2, label %set, label %append, !dbg !4914

set:                                              ; preds = %OK
  store %Tcl_Obj* %value, %Tcl_Obj** %valuePtr, align 8, !dbg !4915
  %objPtr = call noalias nonnull %Tcl_Obj* @Tcl_NewListObj(i32 1, %Tcl_Obj** nocapture nonnull readonly %valuePtr), !dbg !4916
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !4917
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !4919
  %3 = icmp eq i32 %refCount1.i, 0, !dbg !4919
  tail call void @llvm.assume(i1 %3) #5, !dbg !4919
  %code2 = tail call i32 @Tcl_DictObjPut(%Interp* nocapture null, %Tcl_Obj* nocapture nonnull %dict.sink, %Tcl_Obj* nonnull %key, %Tcl_Obj* nonnull %objPtr), !dbg !4920
  br label %done, !dbg !4921

append:                                           ; preds = %OK
  %refCountPtr.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value.in.dict, i64 0, i32 0, !dbg !4922
  %refCount.i.i9 = load i32, i32* %refCountPtr.i.i, align 4, !dbg !4922
  %shared.i = icmp sgt i32 %refCount.i.i9, 1, !dbg !4925
  br i1 %shared.i, label %dupePut, label %directUpdate, !dbg !4926

directUpdate:                                     ; preds = %append
  %code3 = tail call i32 @Tcl_ListObjAppendElement(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %value.in.dict, %Tcl_Obj* noalias nonnull %value), !dbg !4927
  %4 = icmp eq i32 %code3, 0, !dbg !4928
  br i1 %4, label %dictUpdateOK, label %notOK, !dbg !4928

dictUpdateOK:                                     ; preds = %directUpdate
  %bytes.i = getelementptr %Tcl_Obj, %Tcl_Obj* %dict.sink, i64 0, i32 1, !dbg !4929
  %bytes1.i = load i8*, i8** %bytes.i, align 8, !dbg !4931
  %5 = icmp eq i8* %bytes1.i, null, !dbg !4932
  br i1 %5, label %done, label %act.i, !dbg !4932

act.i:                                            ; preds = %dictUpdateOK
  %tclEmptyStringRep.i = load i8*, i8** @tclEmptyStringRep, align 8, !dbg !4933, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %6 = icmp eq i8* %bytes1.i, %tclEmptyStringRep.i, !dbg !4933
  br i1 %6, label %clear.i, label %free.i, !dbg !4933

free.i:                                           ; preds = %act.i
  tail call void @Tcl_Free(i8* nonnull %bytes1.i) #5, !dbg !4934
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %bytes1.i) #5, !dbg !4935
  br label %clear.i, !dbg !4936

clear.i:                                          ; preds = %free.i, %act.i
  store i8* null, i8** %bytes.i, align 8, !dbg !4937
  br label %done, !dbg !4938

dupePut:                                          ; preds = %append
  %objPtr4 = tail call noalias nonnull %Tcl_Obj* @Tcl_DuplicateObj(%Tcl_Obj* nocapture nonnull readonly %value.in.dict), !dbg !4939
  %refCount.i12 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr4, i64 0, i32 0, !dbg !4940
  %refCount1.i13 = load i32, i32* %refCount.i12, align 4, !dbg !4942
  %7 = icmp eq i32 %refCount1.i13, 0, !dbg !4942
  tail call void @llvm.assume(i1 %7) #5, !dbg !4942
  %code5 = tail call i32 @Tcl_ListObjAppendElement(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %objPtr4, %Tcl_Obj* noalias nonnull %value), !dbg !4943
  %8 = icmp eq i32 %code5, 0, !dbg !4944
  br i1 %8, label %dupeUpdateOK, label %dupeNotOK, !dbg !4944

dupeUpdateOK:                                     ; preds = %dupePut
  %code6 = tail call i32 @Tcl_DictObjPut(%Interp* nocapture null, %Tcl_Obj* nocapture nonnull %dict.sink, %Tcl_Obj* nocapture nonnull %key, %Tcl_Obj* nonnull %objPtr4), !dbg !4945
  br label %done, !dbg !4946

done:                                             ; preds = %clear.i, %dictUpdateOK, %dupeUpdateOK, %set
  %refCount.i.i14 = getelementptr %Tcl_Obj, %Tcl_Obj* %dict.sink, i64 0, i32 0, !dbg !4947
  %refCount1.i.i15 = load i32, i32* %refCount.i.i14, align 4, !dbg !4950
  %9 = add nsw i32 %refCount1.i.i15, 1, !dbg !4950
  store i32 %9, i32* %refCount.i.i14, align 4, !dbg !4950
  %10 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %dict.sink, 1, !dbg !4951
  ret { i32, %Tcl_Obj* } %10, !dbg !4951

dupeNotOK:                                        ; preds = %dupePut
  %refCount1.i.i11 = load i32, i32* %refCount.i12, align 4, !dbg !4952
  %11 = icmp slt i32 %refCount1.i.i11, 2, !dbg !4955
  br i1 %11, label %freeObject.i.i, label %leave.i.i, !dbg !4955

freeObject.i.i:                                   ; preds = %dupeNotOK
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %objPtr4) #5, !dbg !4956
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %objPtr4) #5, !dbg !4957
  br label %notOK, !dbg !4958

leave.i.i:                                        ; preds = %dupeNotOK
  %12 = add nsw i32 %refCount1.i.i11, -1, !dbg !4952
  store i32 %12, i32* %refCount.i12, align 4, !dbg !4959
  br label %notOK, !dbg !4960

notOK:                                            ; preds = %leave.i.i, %freeObject.i.i, %directUpdate, %obj.dedup.exit
  br i1 %shared.i.i, label %duplicated.i8, label %obj.cleanup.exit, !dbg !4961

duplicated.i8:                                    ; preds = %notOK
  %refCount.i.i.i7 = getelementptr %Tcl_Obj, %Tcl_Obj* %dict.sink, i64 0, i32 0, !dbg !4963
  %refCount1.i.i.i = load i32, i32* %refCount.i.i.i7, align 4, !dbg !4966
  %13 = icmp slt i32 %refCount1.i.i.i, 2, !dbg !4967
  br i1 %13, label %freeObject.i.i.i, label %leave.i.i.i, !dbg !4967

freeObject.i.i.i:                                 ; preds = %duplicated.i8
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %dict.sink) #5, !dbg !4968
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %dict.sink) #5, !dbg !4969
  br label %obj.cleanup.exit, !dbg !4970

leave.i.i.i:                                      ; preds = %duplicated.i8
  %14 = add nsw i32 %refCount1.i.i.i, -1, !dbg !4966
  store i32 %14, i32* %refCount.i.i.i7, align 4, !dbg !4971
  br label %obj.cleanup.exit, !dbg !4972

obj.cleanup.exit:                                 ; preds = %notOK, %freeObject.i.i.i, %leave.i.i.i
  store i32 1, i32* %ecvar, align 4, !dbg !4973
  ret { i32, %Tcl_Obj* } { i32 1, %Tcl_Obj* undef }, !dbg !4974
}

; Function Attrs: alwaysinline nounwind
define hidden i1 @tcl.streq(%Tcl_Obj* nonnull %value1Ptr, %Tcl_Obj* nonnull %value2Ptr) local_unnamed_addr #6 !dbg !4975 {
enter:
  %lengthPtr.i27 = alloca i32, align 4, !dbg !4979
  %lengthPtr.i20 = alloca i32, align 4, !dbg !4981
  %lengthPtr.i14 = alloca i32, align 4, !dbg !4983
  %lengthPtr.i = alloca i32, align 4, !dbg !4985
  %0 = icmp eq %Tcl_Obj* %value1Ptr, %value2Ptr, !dbg !4987
  br i1 %0, label %identical, label %nexttest, !dbg !4987

nexttest:                                         ; preds = %enter
  %tclByteArrayType.i = load %ObjType*, %ObjType** @tclByteArrayType, align 8, !dbg !4988, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %typePtr.ptr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value1Ptr, i64 0, i32 3, !dbg !4990
  %typePtr.i = load %ObjType*, %ObjType** %typePtr.ptr.i, align 8, !dbg !4990
  %1 = icmp eq %ObjType* %tclByteArrayType.i, %typePtr.i, !dbg !4991
  br i1 %1, label %puretest.i, label %notBA.i, !dbg !4991

puretest.i:                                       ; preds = %nexttest
  %bytes.ptr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value1Ptr, i64 0, i32 1, !dbg !4992
  %bytes.i = load i8*, i8** %bytes.ptr.i, align 8, !dbg !4992
  %2 = icmp eq i8* %bytes.i, null, !dbg !4992
  br i1 %2, label %tcl.isPureByteArray.exit, label %notBA.i, !dbg !4992

notBA.i:                                          ; preds = %puretest.i, %nexttest
  br label %tcl.isPureByteArray.exit

tcl.isPureByteArray.exit:                         ; preds = %puretest.i, %notBA.i
  %merge.i = phi i1 [ true, %puretest.i ], [ false, %notBA.i ]
  %typePtr.ptr.i6 = getelementptr %Tcl_Obj, %Tcl_Obj* %value2Ptr, i64 0, i32 3, !dbg !4993
  %typePtr.i7 = load %ObjType*, %ObjType** %typePtr.ptr.i6, align 8, !dbg !4993
  %3 = icmp eq %ObjType* %tclByteArrayType.i, %typePtr.i7, !dbg !4995
  br i1 %3, label %puretest.i10, label %nexttest2, !dbg !4995

puretest.i10:                                     ; preds = %tcl.isPureByteArray.exit
  %bytes.ptr.i8 = getelementptr %Tcl_Obj, %Tcl_Obj* %value2Ptr, i64 0, i32 1, !dbg !4996
  %bytes.i9 = load i8*, i8** %bytes.ptr.i8, align 8, !dbg !4996
  %4 = icmp eq i8* %bytes.i9, null, !dbg !4996
  %or.cond = and i1 %merge.i, %4, !dbg !4996
  br i1 %or.cond, label %byteArrays, label %nexttest2, !dbg !4996

nexttest2:                                        ; preds = %puretest.i10, %tcl.isPureByteArray.exit
  %tclStringType.i = load %ObjType*, %ObjType** @tclStringType, align 8, !dbg !4997, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %5 = icmp eq %ObjType* %typePtr.i, %tclStringType.i, !dbg !4999
  %6 = icmp eq %ObjType* %typePtr.i7, %tclStringType.i, !dbg !5000
  %7 = and i1 %5, %6, !dbg !5002
  br i1 %7, label %unicodeStrings, label %UTF8Strings, !dbg !5002

identical:                                        ; preds = %different, %compareUTF8Strings, %compareUnicodeStrings, %compareByteArrays, %enter
  %merge = phi i1 [ true, %compareUTF8Strings ], [ true, %compareUnicodeStrings ], [ true, %compareByteArrays ], [ true, %enter ], [ false, %different ]
  ret i1 %merge, !dbg !5003

different:                                        ; preds = %compareUTF8Strings, %UTF8Strings, %compareUnicodeStrings, %unicodeStrings, %compareByteArrays, %byteArrays
  br label %identical

byteArrays:                                       ; preds = %puretest.i10
  %8 = bitcast i32* %lengthPtr.i27 to i8*, !dbg !5004
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8), !dbg !5004
  %bytes.i28 = call nonnull i8* @Tcl_GetByteArrayFromObj(%Tcl_Obj* noalias nocapture nonnull %value1Ptr, i32* noalias nocapture nonnull %lengthPtr.i27) #5, !dbg !5004
  %length.i29 = load i32, i32* %lengthPtr.i27, align 4, !dbg !5005
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8), !dbg !5006
  %9 = bitcast i32* %lengthPtr.i20 to i8*, !dbg !5007
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9), !dbg !5007
  %bytes.i21 = call nonnull i8* @Tcl_GetByteArrayFromObj(%Tcl_Obj* noalias nocapture nonnull %value2Ptr, i32* noalias nocapture nonnull %lengthPtr.i20) #5, !dbg !5007
  %length.i22 = load i32, i32* %lengthPtr.i20, align 4, !dbg !5008
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9), !dbg !5009
  %10 = icmp eq i32 %length.i29, %length.i22, !dbg !5010
  br i1 %10, label %compareByteArrays, label %different, !dbg !5010

compareByteArrays:                                ; preds = %byteArrays
  %cmp = tail call i32 @memcmp(i8* nonnull %bytes.i28, i8* nonnull %bytes.i21, i32 %length.i29), !dbg !5011
  %11 = icmp eq i32 %cmp, 0, !dbg !5012
  br i1 %11, label %identical, label %different, !dbg !5012

unicodeStrings:                                   ; preds = %nexttest2
  %length = tail call i32 @Tcl_GetCharLength(%Tcl_Obj* nocapture nonnull %value1Ptr), !dbg !5013
  %length1 = tail call i32 @Tcl_GetCharLength(%Tcl_Obj* nocapture nonnull %value2Ptr), !dbg !5014
  %12 = icmp eq i32 %length, %length1, !dbg !5014
  br i1 %12, label %compareUnicodeStrings, label %different, !dbg !5014

compareUnicodeStrings:                            ; preds = %unicodeStrings
  %ustr = tail call nonnull i16* @Tcl_GetUnicode(%Tcl_Obj* nocapture nonnull %value1Ptr), !dbg !5015
  %ustr2 = tail call nonnull i16* @Tcl_GetUnicode(%Tcl_Obj* nocapture nonnull %value2Ptr), !dbg !5016
  %13 = shl i32 %length, 1, !dbg !5017
  %14 = bitcast i16* %ustr to i8*, !dbg !5018
  %15 = bitcast i16* %ustr2 to i8*, !dbg !5018
  %cmp3 = tail call i32 @memcmp(i8* nonnull %14, i8* nonnull %15, i32 %13), !dbg !5018
  %16 = icmp eq i32 %cmp3, 0, !dbg !5019
  br i1 %16, label %identical, label %different, !dbg !5019

UTF8Strings:                                      ; preds = %nexttest2
  %17 = bitcast i32* %lengthPtr.i14 to i8*, !dbg !5020
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17), !dbg !5020
  %str.i15 = call nonnull i8* @Tcl_GetStringFromObj(%Tcl_Obj* noalias nocapture nonnull %value1Ptr, i32* noalias nocapture nonnull %lengthPtr.i14) #5, !dbg !5020
  %length.i16 = load i32, i32* %lengthPtr.i14, align 4, !dbg !5021
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17), !dbg !5022
  %18 = bitcast i32* %lengthPtr.i to i8*, !dbg !5023
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18), !dbg !5023
  %str.i = call nonnull i8* @Tcl_GetStringFromObj(%Tcl_Obj* noalias nocapture nonnull %value2Ptr, i32* noalias nocapture nonnull %lengthPtr.i) #5, !dbg !5023
  %length.i = load i32, i32* %lengthPtr.i, align 4, !dbg !5024
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18), !dbg !5025
  %19 = icmp eq i32 %length.i16, %length.i, !dbg !5026
  br i1 %19, label %compareUTF8Strings, label %different, !dbg !5026

compareUTF8Strings:                               ; preds = %UTF8Strings
  %cmp4 = tail call i32 @memcmp(i8* nonnull %str.i15, i8* nonnull %str.i, i32 %length.i16), !dbg !5027
  %20 = icmp eq i32 %cmp4, 0, !dbg !5028
  br i1 %20, label %identical, label %different, !dbg !5028
}

; Function Attrs: alwaysinline nounwind
define hidden i32 @tcl.strcmp(%Tcl_Obj* nonnull %value1Ptr, %Tcl_Obj* nonnull %value2Ptr) local_unnamed_addr #6 !dbg !5029 {
enter:
  %lengthPtr.i20 = alloca i32, align 4, !dbg !5035
  %lengthPtr.i = alloca i32, align 4, !dbg !5037
  %0 = icmp eq %Tcl_Obj* %value1Ptr, %value2Ptr, !dbg !5039
  br i1 %0, label %identical, label %nexttest, !dbg !5039

nexttest:                                         ; preds = %enter
  %tclByteArrayType.i = load %ObjType*, %ObjType** @tclByteArrayType, align 8, !dbg !5040, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %typePtr.ptr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value1Ptr, i64 0, i32 3, !dbg !5042
  %typePtr.i = load %ObjType*, %ObjType** %typePtr.ptr.i, align 8, !dbg !5042
  %1 = icmp eq %ObjType* %tclByteArrayType.i, %typePtr.i, !dbg !5043
  br i1 %1, label %puretest.i, label %nexttest2, !dbg !5043

puretest.i:                                       ; preds = %nexttest
  %bytes.ptr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value1Ptr, i64 0, i32 1, !dbg !5044
  %bytes.i = load i8*, i8** %bytes.ptr.i, align 8, !dbg !5044
  %2 = icmp eq i8* %bytes.i, null, !dbg !5044
  br i1 %2, label %testBA2, label %nexttest2, !dbg !5044

testBA2:                                          ; preds = %puretest.i
  %typePtr.ptr.i12 = getelementptr %Tcl_Obj, %Tcl_Obj* %value2Ptr, i64 0, i32 3, !dbg !5045
  %typePtr.i13 = load %ObjType*, %ObjType** %typePtr.ptr.i12, align 8, !dbg !5045
  %3 = icmp eq %ObjType* %tclByteArrayType.i, %typePtr.i13, !dbg !5047
  br i1 %3, label %puretest.i16, label %nexttest2, !dbg !5047

puretest.i16:                                     ; preds = %testBA2
  %bytes.ptr.i14 = getelementptr %Tcl_Obj, %Tcl_Obj* %value2Ptr, i64 0, i32 1, !dbg !5048
  %bytes.i15 = load i8*, i8** %bytes.ptr.i14, align 8, !dbg !5048
  %4 = icmp eq i8* %bytes.i15, null, !dbg !5048
  br i1 %4, label %byteArrays, label %nexttest2, !dbg !5048

nexttest2:                                        ; preds = %puretest.i16, %testBA2, %puretest.i, %nexttest
  %tclStringType.i = load %ObjType*, %ObjType** @tclStringType, align 8, !dbg !5049, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %5 = icmp eq %ObjType* %typePtr.i, %tclStringType.i, !dbg !5051
  %typePtr.ptr.i27 = getelementptr %Tcl_Obj, %Tcl_Obj* %value2Ptr, i64 0, i32 3, !dbg !5052
  %typePtr.i28 = load %ObjType*, %ObjType** %typePtr.ptr.i27, align 8, !dbg !5052
  %6 = icmp eq %ObjType* %typePtr.i28, %tclStringType.i, !dbg !5054
  %7 = and i1 %5, %6, !dbg !5055
  br i1 %7, label %unicode, label %UTF8, !dbg !5055

identical:                                        ; preds = %enter
  ret i32 0, !dbg !5056

byteArrays:                                       ; preds = %puretest.i16
  %8 = bitcast i32* %lengthPtr.i20 to i8*, !dbg !5057
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8), !dbg !5057
  %bytes.i21 = call nonnull i8* @Tcl_GetByteArrayFromObj(%Tcl_Obj* noalias nocapture nonnull %value1Ptr, i32* noalias nocapture nonnull %lengthPtr.i20) #5, !dbg !5057
  %length.i22 = load i32, i32* %lengthPtr.i20, align 4, !dbg !5058
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8), !dbg !5059
  %9 = bitcast i32* %lengthPtr.i to i8*, !dbg !5060
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9), !dbg !5060
  %bytes.i10 = call nonnull i8* @Tcl_GetByteArrayFromObj(%Tcl_Obj* noalias nocapture nonnull %value2Ptr, i32* noalias nocapture nonnull %lengthPtr.i) #5, !dbg !5060
  %length.i = load i32, i32* %lengthPtr.i, align 4, !dbg !5061
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9), !dbg !5062
  %10 = sub i32 %length.i22, %length.i, !dbg !5063
  %11 = icmp slt i32 %length.i22, %length.i, !dbg !5064
  %min = select i1 %11, i32 %length.i22, i32 %length.i, !dbg !5064
  %cmp = tail call i32 @memcmp(i8* nonnull %bytes.i21, i8* nonnull %bytes.i10, i32 %min), !dbg !5064
  br label %result, !dbg !5065

unicode:                                          ; preds = %nexttest2
  %length = tail call i32 @Tcl_GetCharLength(%Tcl_Obj* nocapture nonnull %value1Ptr), !dbg !5066
  %length1 = tail call i32 @Tcl_GetCharLength(%Tcl_Obj* nocapture nonnull %value2Ptr), !dbg !5067
  %12 = sub i32 %length, %length1, !dbg !5068
  %ustr = tail call nonnull i16* @Tcl_GetUnicode(%Tcl_Obj* nocapture nonnull %value1Ptr), !dbg !5069
  %ustr2 = tail call nonnull i16* @Tcl_GetUnicode(%Tcl_Obj* nocapture nonnull %value2Ptr), !dbg !5069
  %13 = icmp slt i32 %length, %length1, !dbg !5069
  %min3 = select i1 %13, i32 %length, i32 %length1, !dbg !5069
  %cmp4 = tail call i32 @Tcl_UniCharNcmp(i16* nocapture nonnull readonly %ustr, i16* nocapture nonnull readonly %ustr2, i32 %min3), !dbg !5069
  br label %result, !dbg !5070

UTF8:                                             ; preds = %nexttest2
  %str = tail call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %value1Ptr), !dbg !5071
  %str5 = tail call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %value2Ptr), !dbg !5072
  %length6 = tail call i32 @Tcl_GetCharLength(%Tcl_Obj* nocapture nonnull %value1Ptr), !dbg !5073
  %length7 = tail call i32 @Tcl_GetCharLength(%Tcl_Obj* nocapture nonnull %value2Ptr), !dbg !5074
  %14 = sub i32 %length6, %length7, !dbg !5075
  %15 = icmp slt i32 %length6, %length7, !dbg !5076
  %min8 = select i1 %15, i32 %length6, i32 %length7, !dbg !5076
  %cmp9 = tail call i32 @TclpUtfNcmp2(i8* nocapture nonnull %str, i8* nocapture nonnull %str5, i32 %min8), !dbg !5076
  br label %result, !dbg !5077

result:                                           ; preds = %UTF8, %unicode, %byteArrays
  %16 = phi i32 [ %cmp, %byteArrays ], [ %cmp4, %unicode ], [ %cmp9, %UTF8 ]
  %17 = phi i32 [ %10, %byteArrays ], [ %12, %unicode ], [ %14, %UTF8 ]
  %18 = icmp eq i32 %16, 0, !dbg !5078
  %19 = select i1 %18, i32 %17, i32 %16, !dbg !5078
  ret i32 %19, !dbg !5078
}

; Function Attrs: alwaysinline nounwind
define hidden i1 @tcl.strmatch(%INT %nocase, %Tcl_Obj* nocapture nonnull %pattern, %Tcl_Obj* nocapture nonnull %string) local_unnamed_addr #6 !dbg !5079 {
enter:
  %lengthPtr.i2 = alloca i32, align 4, !dbg !5086
  %lengthPtr.i = alloca i32, align 4, !dbg !5088
  %0 = extractvalue %INT %nocase, 0, !dbg !5090
  %1 = extractvalue %INT %nocase, 1, !dbg !5090
  %2 = extractvalue %INT %nocase, 2, !dbg !5090
  %3 = trunc i64 %2 to i32, !dbg !5090
  %4 = select i1 %0, i32 %3, i32 %1, !dbg !5090
  %tclStringType.i = load %ObjType*, %ObjType** @tclStringType, align 8, !dbg !5092, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %typePtr.ptr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %pattern, i64 0, i32 3, !dbg !5094
  %typePtr.i = load %ObjType*, %ObjType** %typePtr.ptr.i, align 8, !dbg !5094
  %5 = icmp eq %ObjType* %typePtr.i, %tclStringType.i, !dbg !5095
  br i1 %5, label %test2, label %ordinaryMatch, !dbg !5096

test2:                                            ; preds = %enter
  %typePtr.ptr.i7 = getelementptr %Tcl_Obj, %Tcl_Obj* %string, i64 0, i32 3, !dbg !5097
  %typePtr.i8 = load %ObjType*, %ObjType** %typePtr.ptr.i7, align 8, !dbg !5097
  %6 = icmp eq %ObjType* %typePtr.i8, %tclStringType.i, !dbg !5099
  br i1 %6, label %unicodeMatch, label %ordinaryMatch, !dbg !5100

ordinaryMatch:                                    ; preds = %test2, %enter
  %str = tail call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %pattern), !dbg !5101
  %str1 = tail call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %string), !dbg !5102
  %7 = tail call i32 @Tcl_StringCaseMatch(i8* nocapture nonnull readonly %str1, i8* nocapture nonnull readonly %str, i32 %4), !dbg !5103
  %8 = icmp ne i32 %7, 0, !dbg !5104
  ret i1 %8, !dbg !5104

unicodeMatch:                                     ; preds = %test2
  %9 = bitcast i32* %lengthPtr.i2 to i8*, !dbg !5105
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9), !dbg !5105
  %ustr.i3 = call nonnull i16* @Tcl_GetUnicodeFromObj(%Tcl_Obj* noalias nocapture nonnull %pattern, i32* noalias nocapture nonnull %lengthPtr.i2) #5, !dbg !5105
  %length.i4 = load i32, i32* %lengthPtr.i2, align 4, !dbg !5106
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9), !dbg !5107
  %10 = bitcast i32* %lengthPtr.i to i8*, !dbg !5108
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10), !dbg !5108
  %ustr.i = call nonnull i16* @Tcl_GetUnicodeFromObj(%Tcl_Obj* noalias nocapture nonnull %string, i32* noalias nocapture nonnull %lengthPtr.i) #5, !dbg !5108
  %length.i = load i32, i32* %lengthPtr.i, align 4, !dbg !5109
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10), !dbg !5110
  %11 = tail call i32 @TclUniCharMatch(i16* nocapture nonnull %ustr.i, i32 %length.i, i16* nocapture nonnull %ustr.i3, i32 %length.i4, i32 %4), !dbg !5111
  %12 = icmp ne i32 %11, 0, !dbg !5112
  ret i1 %12, !dbg !5112
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, i1 } @tcl.regexp(%INT %flags, %Tcl_Obj* nocapture nonnull %regexp, %Tcl_Obj* nocapture nonnull %string, i32* noalias nocapture nonnull %errorCode) local_unnamed_addr #6 !dbg !5113 {
enter:
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !5121, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %0 = extractvalue %INT %flags, 0, !dbg !5122
  %1 = extractvalue %INT %flags, 1, !dbg !5122
  %2 = extractvalue %INT %flags, 2, !dbg !5122
  %3 = trunc i64 %2 to i32, !dbg !5122
  %4 = select i1 %0, i32 %3, i32 %1, !dbg !5122
  %rePtr = tail call %RegExp* @Tcl_GetRegExpFromObj(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %regexp, i32 %4), !dbg !5124
  %5 = icmp eq %RegExp* %rePtr, null, !dbg !5125
  br i1 %5, label %re.error, label %re.exec, !dbg !5125

re.exec:                                          ; preds = %enter
  %code = tail call i32 @Tcl_RegExpExecObj(%Interp* noalias nocapture nonnull %interp, %RegExp* noalias nocapture nonnull %rePtr, %Tcl_Obj* noalias nocapture nonnull %string, i32 0, i32 0, i32 0), !dbg !5126
  %6 = icmp sgt i32 %code, -1, !dbg !5127
  br i1 %6, label %re.done, label %re.error, !dbg !5127

re.done:                                          ; preds = %re.exec
  store i32 0, i32* %errorCode, align 4, !dbg !5128
  %7 = icmp ne i32 %code, 0, !dbg !5129
  %8 = insertvalue { i32, i1 } { i32 0, i1 undef }, i1 %7, 1, !dbg !5129
  ret { i32, i1 } %8, !dbg !5129

re.error:                                         ; preds = %enter, %re.exec
  store i32 1, i32* %errorCode, align 4, !dbg !5130
  ret { i32, i1 } { i32 1, i1 undef }, !dbg !5131
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, %INT } @tcl.div(%INT %x, %INT %y, i32* noalias nocapture %ecvar) local_unnamed_addr #6 !dbg !5132 {
enter:
  %0 = extractvalue %INT %y, 0, !dbg !5139
  %1 = extractvalue %INT %y, 1, !dbg !5139
  %2 = sext i32 %1 to i64, !dbg !5139
  %3 = extractvalue %INT %y, 2, !dbg !5139
  %x.64210.i = select i1 %0, i64 %3, i64 %2, !dbg !5139
  %z.bit1.i = icmp eq i64 %x.64210.i, 0, !dbg !5141
  br i1 %z.bit1.i, label %error, label %check1, !dbg !5142

check1:                                           ; preds = %enter
  %4 = extractvalue %INT %x, 0, !dbg !5143
  br i1 %4, label %tcl.int.64.exit7, label %check2, !dbg !5143

check2:                                           ; preds = %check1
  %5 = extractvalue %INT %x, 1, !dbg !5144
  br i1 %0, label %tcl.int.64.exit7.thread, label %op.32bit, !dbg !5145

op.32bit:                                         ; preds = %check2
  %6 = sdiv i32 %5, %1, !dbg !5146
  %7 = icmp sgt i32 %6, 0, !dbg !5148
  br i1 %7, label %tcl.div.32.exit, label %nextcheck.i10, !dbg !5148

nextcheck.i10:                                    ; preds = %op.32bit
  %8 = icmp slt i32 %6, 0, !dbg !5149
  br i1 %8, label %innercheck.i12, label %zerocase.i11, !dbg !5149

zerocase.i11:                                     ; preds = %nextcheck.i10
  %9 = icmp slt i32 %5, 0, !dbg !5150
  %10 = icmp sgt i32 %1, 0, !dbg !5150
  %11 = and i1 %9, %10, !dbg !5150
  %12 = icmp sgt i32 %5, 0, !dbg !5150
  %13 = icmp slt i32 %1, 0, !dbg !5150
  %14 = and i1 %12, %13, !dbg !5150
  %15 = or i1 %11, %14, !dbg !5150
  br i1 %15, label %innercheck.i12, label %tcl.div.32.exit, !dbg !5150

innercheck.i12:                                   ; preds = %zerocase.i11, %nextcheck.i10
  %16 = mul i32 %6, %1, !dbg !5151
  %17 = icmp ne i32 %16, %5, !dbg !5151
  %18 = zext i1 %17 to i32, !dbg !5151
  %spec.select = sub i32 %6, %18, !dbg !5151
  br label %tcl.div.32.exit, !dbg !5151

tcl.div.32.exit:                                  ; preds = %innercheck.i12, %op.32bit, %zerocase.i11
  %19 = phi i32 [ 0, %zerocase.i11 ], [ %6, %op.32bit ], [ %spec.select, %innercheck.i12 ]
  %20 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %19, 1, !dbg !5152
  %21 = insertvalue { i32, %INT } { i32 0, %INT undef }, %INT %20, 1, !dbg !5152
  ret { i32, %INT } %21, !dbg !5152

tcl.int.64.exit7.thread:                          ; preds = %check2
  %22 = sext i32 %5 to i64, !dbg !5153
  br label %x64.i, !dbg !5155

tcl.int.64.exit7:                                 ; preds = %check1
  %23 = extractvalue %INT %x, 2, !dbg !5157
  br i1 %0, label %x64.i, label %tcl.int.64.exit, !dbg !5155

x64.i:                                            ; preds = %tcl.int.64.exit7.thread, %tcl.int.64.exit7
  %x.64816 = phi i64 [ %22, %tcl.int.64.exit7.thread ], [ %23, %tcl.int.64.exit7 ]
  br label %tcl.int.64.exit, !dbg !5158

tcl.int.64.exit:                                  ; preds = %tcl.int.64.exit7, %x64.i
  %x.64815 = phi i64 [ %x.64816, %x64.i ], [ %23, %tcl.int.64.exit7 ]
  %y.644 = phi i64 [ %3, %x64.i ], [ %2, %tcl.int.64.exit7 ]
  %24 = sdiv i64 %x.64815, %y.644, !dbg !5159
  %25 = icmp sgt i64 %24, 0, !dbg !5161
  br i1 %25, label %tcl.div.64.exit, label %nextcheck.i, !dbg !5161

nextcheck.i:                                      ; preds = %tcl.int.64.exit
  %26 = icmp slt i64 %24, 0, !dbg !5162
  br i1 %26, label %innercheck.i, label %zerocase.i, !dbg !5162

zerocase.i:                                       ; preds = %nextcheck.i
  %27 = icmp slt i64 %x.64815, 0, !dbg !5163
  %28 = icmp sgt i64 %y.644, 0, !dbg !5163
  %29 = and i1 %27, %28, !dbg !5163
  %30 = icmp sgt i64 %x.64815, 0, !dbg !5163
  %31 = icmp slt i64 %y.644, 0, !dbg !5163
  %32 = and i1 %30, %31, !dbg !5163
  %33 = or i1 %29, %32, !dbg !5163
  br i1 %33, label %innercheck.i, label %tcl.div.64.exit, !dbg !5163

innercheck.i:                                     ; preds = %zerocase.i, %nextcheck.i
  %34 = mul i64 %24, %y.644, !dbg !5164
  %35 = icmp ne i64 %34, %x.64815, !dbg !5164
  %36 = zext i1 %35 to i64, !dbg !5164
  %spec.select17 = sub i64 %24, %36, !dbg !5164
  br label %tcl.div.64.exit, !dbg !5164

tcl.div.64.exit:                                  ; preds = %innercheck.i, %tcl.int.64.exit, %zerocase.i
  %37 = phi i64 [ 0, %zerocase.i ], [ %24, %tcl.int.64.exit ], [ %spec.select17, %innercheck.i ]
  %38 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %37, 2, !dbg !5165
  %39 = insertvalue { i32, %INT } { i32 0, %INT undef }, %INT %38, 1, !dbg !5165
  ret { i32, %INT } %39, !dbg !5165

error:                                            ; preds = %enter
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !5166, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %exception.message = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.2, align 8, !dbg !5166, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i2 = getelementptr %Tcl_Obj, %Tcl_Obj* %exception.message, i64 0, i32 0, !dbg !5167
  %refCount.i3 = load i32, i32* %refCountPtr.i2, align 4, !dbg !5167
  %40 = icmp sgt i32 %refCount.i3, 1, !dbg !5166
  tail call void @llvm.assume(i1 %40), !dbg !5166
  %exception.code = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.3, align 8, !dbg !5166, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %exception.code, i64 0, i32 0, !dbg !5169
  %refCount.i = load i32, i32* %refCountPtr.i, align 4, !dbg !5169
  %41 = icmp sgt i32 %refCount.i, 1, !dbg !5166
  tail call void @llvm.assume(i1 %41), !dbg !5166
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %exception.message), !dbg !5166
  tail call void @Tcl_SetObjErrorCode(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %exception.code), !dbg !5166
  store i32 1, i32* %ecvar, align 4, !dbg !5166
  ret { i32, %INT } { i32 1, %INT undef }, !dbg !5171
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, double } @tcl.div.double(double %x, double %y, i32* noalias nocapture %ecvar) local_unnamed_addr #6 !dbg !5172 {
enter:
  %0 = fcmp oeq double %x, 0.000000e+00, !dbg !5181
  %1 = fcmp oeq double %y, 0.000000e+00, !dbg !5181
  %2 = and i1 %0, %1, !dbg !5181
  br i1 %2, label %error, label %normal, !dbg !5181

normal:                                           ; preds = %enter
  %3 = fdiv double %x, %y, !dbg !5182
  %4 = insertvalue { i32, double } { i32 0, double undef }, double %3, 1, !dbg !5182
  ret { i32, double } %4, !dbg !5182

error:                                            ; preds = %enter
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !5183, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %exception.message = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.4, align 8, !dbg !5183, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %exception.message, i64 0, i32 0, !dbg !5184
  %refCount.i = load i32, i32* %refCountPtr.i, align 4, !dbg !5184
  %5 = icmp sgt i32 %refCount.i, 1, !dbg !5183
  tail call void @llvm.assume(i1 %5), !dbg !5183
  %exception.code = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.5, align 8, !dbg !5183, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i2 = getelementptr %Tcl_Obj, %Tcl_Obj* %exception.code, i64 0, i32 0, !dbg !5186
  %refCount.i3 = load i32, i32* %refCountPtr.i2, align 4, !dbg !5186
  %6 = icmp sgt i32 %refCount.i3, 1, !dbg !5183
  tail call void @llvm.assume(i1 %6), !dbg !5183
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %exception.message), !dbg !5183
  tail call void @Tcl_SetObjErrorCode(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %exception.code), !dbg !5183
  store i32 1, i32* %ecvar, align 4, !dbg !5183
  ret { i32, double } { i32 1, double undef }, !dbg !5188
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, %INT } @tcl.mod(%INT %x, %INT %y, i32* noalias nocapture %ecvar) local_unnamed_addr #6 !dbg !5189 {
enter:
  %0 = extractvalue %INT %y, 0, !dbg !5194
  %1 = extractvalue %INT %y, 1, !dbg !5194
  %2 = sext i32 %1 to i64, !dbg !5194
  %3 = extractvalue %INT %y, 2, !dbg !5194
  %x.64210.i = select i1 %0, i64 %3, i64 %2, !dbg !5194
  %z.bit1.i = icmp eq i64 %x.64210.i, 0, !dbg !5196
  br i1 %z.bit1.i, label %error, label %check1, !dbg !5197

check1:                                           ; preds = %enter
  %4 = extractvalue %INT %x, 0, !dbg !5198
  br i1 %4, label %tcl.int.64.exit7, label %check2, !dbg !5198

check2:                                           ; preds = %check1
  %5 = extractvalue %INT %x, 1, !dbg !5199
  br i1 %0, label %tcl.int.64.exit7.thread, label %op.32bit, !dbg !5200

op.32bit:                                         ; preds = %check2
  %6 = sdiv i32 %5, %1, !dbg !5201
  %7 = icmp sgt i32 %6, 0, !dbg !5203
  br i1 %7, label %tcl.div.32.exit, label %nextcheck.i10, !dbg !5203

nextcheck.i10:                                    ; preds = %op.32bit
  %8 = icmp slt i32 %6, 0, !dbg !5204
  br i1 %8, label %innercheck.i12, label %zerocase.i11, !dbg !5204

zerocase.i11:                                     ; preds = %nextcheck.i10
  %9 = icmp slt i32 %5, 0, !dbg !5205
  %10 = icmp sgt i32 %1, 0, !dbg !5205
  %11 = and i1 %9, %10, !dbg !5205
  %12 = icmp sgt i32 %5, 0, !dbg !5205
  %13 = icmp slt i32 %1, 0, !dbg !5205
  %14 = and i1 %12, %13, !dbg !5205
  %15 = or i1 %11, %14, !dbg !5205
  br i1 %15, label %innercheck.i12, label %tcl.div.32.exit, !dbg !5205

innercheck.i12:                                   ; preds = %zerocase.i11, %nextcheck.i10
  %16 = mul i32 %6, %1, !dbg !5206
  %17 = icmp ne i32 %16, %5, !dbg !5206
  %18 = zext i1 %17 to i32, !dbg !5206
  %spec.select = sub i32 %6, %18, !dbg !5206
  br label %tcl.div.32.exit, !dbg !5206

tcl.div.32.exit:                                  ; preds = %innercheck.i12, %op.32bit, %zerocase.i11
  %19 = phi i32 [ 0, %zerocase.i11 ], [ %6, %op.32bit ], [ %spec.select, %innercheck.i12 ]
  %20 = mul i32 %19, %1, !dbg !5207
  %21 = sub i32 %5, %20, !dbg !5207
  %22 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %21, 1, !dbg !5208
  %23 = insertvalue { i32, %INT } { i32 0, %INT undef }, %INT %22, 1, !dbg !5208
  ret { i32, %INT } %23, !dbg !5208

tcl.int.64.exit7.thread:                          ; preds = %check2
  %24 = sext i32 %5 to i64, !dbg !5209
  br label %x64.i, !dbg !5211

tcl.int.64.exit7:                                 ; preds = %check1
  %25 = extractvalue %INT %x, 2, !dbg !5213
  br i1 %0, label %x64.i, label %tcl.int.64.exit, !dbg !5211

x64.i:                                            ; preds = %tcl.int.64.exit7.thread, %tcl.int.64.exit7
  %x.64816 = phi i64 [ %24, %tcl.int.64.exit7.thread ], [ %25, %tcl.int.64.exit7 ]
  br label %tcl.int.64.exit, !dbg !5214

tcl.int.64.exit:                                  ; preds = %tcl.int.64.exit7, %x64.i
  %x.64815 = phi i64 [ %x.64816, %x64.i ], [ %25, %tcl.int.64.exit7 ]
  %y.644 = phi i64 [ %3, %x64.i ], [ %2, %tcl.int.64.exit7 ]
  %26 = sdiv i64 %x.64815, %y.644, !dbg !5215
  %27 = icmp sgt i64 %26, 0, !dbg !5217
  br i1 %27, label %tcl.div.64.exit, label %nextcheck.i, !dbg !5217

nextcheck.i:                                      ; preds = %tcl.int.64.exit
  %28 = icmp slt i64 %26, 0, !dbg !5218
  br i1 %28, label %innercheck.i, label %zerocase.i, !dbg !5218

zerocase.i:                                       ; preds = %nextcheck.i
  %29 = icmp slt i64 %x.64815, 0, !dbg !5219
  %30 = icmp sgt i64 %y.644, 0, !dbg !5219
  %31 = and i1 %29, %30, !dbg !5219
  %32 = icmp sgt i64 %x.64815, 0, !dbg !5219
  %33 = icmp slt i64 %y.644, 0, !dbg !5219
  %34 = and i1 %32, %33, !dbg !5219
  %35 = or i1 %31, %34, !dbg !5219
  br i1 %35, label %innercheck.i, label %tcl.div.64.exit, !dbg !5219

innercheck.i:                                     ; preds = %zerocase.i, %nextcheck.i
  %36 = mul i64 %26, %y.644, !dbg !5220
  %37 = icmp ne i64 %36, %x.64815, !dbg !5220
  %38 = zext i1 %37 to i64, !dbg !5220
  %spec.select19 = sub i64 %26, %38, !dbg !5220
  br label %tcl.div.64.exit, !dbg !5220

tcl.div.64.exit:                                  ; preds = %innercheck.i, %tcl.int.64.exit, %zerocase.i
  %39 = phi i64 [ 0, %zerocase.i ], [ %26, %tcl.int.64.exit ], [ %spec.select19, %innercheck.i ]
  %40 = mul i64 %39, %y.644, !dbg !5221
  %41 = sub i64 %x.64815, %40, !dbg !5221
  %42 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %41, 2, !dbg !5222
  %43 = insertvalue { i32, %INT } { i32 0, %INT undef }, %INT %42, 1, !dbg !5222
  ret { i32, %INT } %43, !dbg !5222

error:                                            ; preds = %enter
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !5223, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %exception.message = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.2, align 8, !dbg !5223, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i2 = getelementptr %Tcl_Obj, %Tcl_Obj* %exception.message, i64 0, i32 0, !dbg !5224
  %refCount.i3 = load i32, i32* %refCountPtr.i2, align 4, !dbg !5224
  %44 = icmp sgt i32 %refCount.i3, 1, !dbg !5223
  tail call void @llvm.assume(i1 %44), !dbg !5223
  %exception.code = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.3, align 8, !dbg !5223, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %exception.code, i64 0, i32 0, !dbg !5226
  %refCount.i = load i32, i32* %refCountPtr.i, align 4, !dbg !5226
  %45 = icmp sgt i32 %refCount.i, 1, !dbg !5223
  tail call void @llvm.assume(i1 %45), !dbg !5223
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %exception.message), !dbg !5223
  tail call void @Tcl_SetObjErrorCode(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %exception.code), !dbg !5223
  store i32 1, i32* %ecvar, align 4, !dbg !5223
  ret { i32, %INT } { i32 1, %INT undef }, !dbg !5228
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, %NUMERIC } @tcl.div.numeric(%NUMERIC %left, %NUMERIC %right, i32* noalias nocapture %ecvar) local_unnamed_addr #6 !dbg !5229 {
enter:
  %0 = extractvalue %NUMERIC %left, 0, !dbg !5237
  %1 = extractvalue %NUMERIC %right, 0, !dbg !5237
  %.demorgan = or i1 %0, %1, !dbg !5237
  %2 = extractvalue %NUMERIC %left, 1, !dbg !5238
  br i1 %.demorgan, label %doubles, label %ints, !dbg !5237

ints:                                             ; preds = %enter
  %3 = extractvalue %NUMERIC %right, 1, !dbg !5239
  %4 = extractvalue %INT %3, 0, !dbg !5240
  %5 = extractvalue %INT %3, 1, !dbg !5240
  %6 = sext i32 %5 to i64, !dbg !5240
  %7 = extractvalue %INT %3, 2, !dbg !5240
  %x.64210.i.i = select i1 %4, i64 %7, i64 %6, !dbg !5240
  %z.bit1.i.i = icmp eq i64 %x.64210.i.i, 0, !dbg !5243
  br i1 %z.bit1.i.i, label %error.i, label %check1.i, !dbg !5244

check1.i:                                         ; preds = %ints
  %8 = extractvalue %INT %2, 0, !dbg !5245
  br i1 %8, label %tcl.int.64.exit7.i, label %check2.i, !dbg !5245

check2.i:                                         ; preds = %check1.i
  %9 = extractvalue %INT %2, 1, !dbg !5246
  br i1 %4, label %tcl.int.64.exit7.thread.i, label %op.32bit.i, !dbg !5247

op.32bit.i:                                       ; preds = %check2.i
  %10 = sdiv i32 %9, %5, !dbg !5248
  %11 = icmp sgt i32 %10, 0, !dbg !5250
  br i1 %11, label %tcl.div.32.exit.i, label %nextcheck.i10.i, !dbg !5250

nextcheck.i10.i:                                  ; preds = %op.32bit.i
  %12 = icmp slt i32 %10, 0, !dbg !5251
  br i1 %12, label %innercheck.i12.i, label %zerocase.i11.i, !dbg !5251

zerocase.i11.i:                                   ; preds = %nextcheck.i10.i
  %13 = icmp slt i32 %9, 0, !dbg !5252
  %14 = icmp sgt i32 %5, 0, !dbg !5252
  %15 = and i1 %13, %14, !dbg !5252
  %16 = icmp sgt i32 %9, 0, !dbg !5252
  %17 = icmp slt i32 %5, 0, !dbg !5252
  %18 = and i1 %16, %17, !dbg !5252
  %19 = or i1 %15, %18, !dbg !5252
  br i1 %19, label %innercheck.i12.i, label %tcl.div.32.exit.i, !dbg !5252

innercheck.i12.i:                                 ; preds = %zerocase.i11.i, %nextcheck.i10.i
  %20 = mul i32 %10, %5, !dbg !5253
  %21 = icmp ne i32 %20, %9, !dbg !5253
  %22 = zext i1 %21 to i32, !dbg !5253
  %spec.select.i = sub i32 %10, %22, !dbg !5253
  br label %tcl.div.32.exit.i, !dbg !5253

tcl.div.32.exit.i:                                ; preds = %innercheck.i12.i, %zerocase.i11.i, %op.32bit.i
  %23 = phi i32 [ 0, %zerocase.i11.i ], [ %10, %op.32bit.i ], [ %spec.select.i, %innercheck.i12.i ]
  %24 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %23, 1, !dbg !5254
  %25 = insertvalue { i32, %INT } { i32 0, %INT undef }, %INT %24, 1, !dbg !5254
  br label %tcl.div.exit, !dbg !5254

tcl.int.64.exit7.thread.i:                        ; preds = %check2.i
  %26 = sext i32 %9 to i64, !dbg !5255
  br label %x64.i.i, !dbg !5257

tcl.int.64.exit7.i:                               ; preds = %check1.i
  %27 = extractvalue %INT %2, 2, !dbg !5259
  br i1 %4, label %x64.i.i, label %tcl.int.64.exit.i, !dbg !5257

x64.i.i:                                          ; preds = %tcl.int.64.exit7.i, %tcl.int.64.exit7.thread.i
  %x.64816.i = phi i64 [ %26, %tcl.int.64.exit7.thread.i ], [ %27, %tcl.int.64.exit7.i ]
  br label %tcl.int.64.exit.i, !dbg !5260

tcl.int.64.exit.i:                                ; preds = %x64.i.i, %tcl.int.64.exit7.i
  %x.64815.i = phi i64 [ %x.64816.i, %x64.i.i ], [ %27, %tcl.int.64.exit7.i ]
  %y.644.i = phi i64 [ %7, %x64.i.i ], [ %6, %tcl.int.64.exit7.i ]
  %28 = sdiv i64 %x.64815.i, %y.644.i, !dbg !5261
  %29 = icmp sgt i64 %28, 0, !dbg !5263
  br i1 %29, label %tcl.div.64.exit.i, label %nextcheck.i.i, !dbg !5263

nextcheck.i.i:                                    ; preds = %tcl.int.64.exit.i
  %30 = icmp slt i64 %28, 0, !dbg !5264
  br i1 %30, label %innercheck.i.i, label %zerocase.i.i, !dbg !5264

zerocase.i.i:                                     ; preds = %nextcheck.i.i
  %31 = icmp slt i64 %x.64815.i, 0, !dbg !5265
  %32 = icmp sgt i64 %y.644.i, 0, !dbg !5265
  %33 = and i1 %31, %32, !dbg !5265
  %34 = icmp sgt i64 %x.64815.i, 0, !dbg !5265
  %35 = icmp slt i64 %y.644.i, 0, !dbg !5265
  %36 = and i1 %34, %35, !dbg !5265
  %37 = or i1 %33, %36, !dbg !5265
  br i1 %37, label %innercheck.i.i, label %tcl.div.64.exit.i, !dbg !5265

innercheck.i.i:                                   ; preds = %zerocase.i.i, %nextcheck.i.i
  %38 = mul i64 %28, %y.644.i, !dbg !5266
  %39 = icmp ne i64 %38, %x.64815.i, !dbg !5266
  %40 = zext i1 %39 to i64, !dbg !5266
  %spec.select17.i = sub i64 %28, %40, !dbg !5266
  br label %tcl.div.64.exit.i, !dbg !5266

tcl.div.64.exit.i:                                ; preds = %innercheck.i.i, %zerocase.i.i, %tcl.int.64.exit.i
  %41 = phi i64 [ 0, %zerocase.i.i ], [ %28, %tcl.int.64.exit.i ], [ %spec.select17.i, %innercheck.i.i ]
  %42 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %41, 2, !dbg !5267
  %43 = insertvalue { i32, %INT } { i32 0, %INT undef }, %INT %42, 1, !dbg !5267
  br label %tcl.div.exit, !dbg !5267

error.i:                                          ; preds = %ints
  %interp.i = load %Interp*, %Interp** @tclInterp, align 8, !dbg !5268, !invariant.load !3, !noalias !5269, !nonnull !3, !dereferenceable !1051
  %exception.message.i = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.2, align 8, !dbg !5268, !invariant.load !3, !noalias !5269, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i2.i = getelementptr %Tcl_Obj, %Tcl_Obj* %exception.message.i, i64 0, i32 0, !dbg !5272
  %refCount.i3.i = load i32, i32* %refCountPtr.i2.i, align 4, !dbg !5272, !noalias !5269
  %44 = icmp sgt i32 %refCount.i3.i, 1, !dbg !5268
  tail call void @llvm.assume(i1 %44) #5, !dbg !5268, !noalias !5269
  %exception.code.i = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.3, align 8, !dbg !5268, !invariant.load !3, !noalias !5269, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %exception.code.i, i64 0, i32 0, !dbg !5274
  %refCount.i.i = load i32, i32* %refCountPtr.i.i, align 4, !dbg !5274, !noalias !5269
  %45 = icmp sgt i32 %refCount.i.i, 1, !dbg !5268
  tail call void @llvm.assume(i1 %45) #5, !dbg !5268, !noalias !5269
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp.i, %Tcl_Obj* noalias nonnull %exception.message.i) #5, !dbg !5268, !noalias !5269
  tail call void @Tcl_SetObjErrorCode(%Interp* noalias nocapture nonnull %interp.i, %Tcl_Obj* noalias nonnull %exception.code.i) #5, !dbg !5268, !noalias !5269
  store i32 1, i32* %ecvar, align 4, !dbg !5268, !alias.scope !5269
  br label %tcl.div.exit, !dbg !5276

tcl.div.exit:                                     ; preds = %error.i, %tcl.div.64.exit.i, %tcl.div.32.exit.i
  %46 = phi { i32, %INT } [ %25, %tcl.div.32.exit.i ], [ %43, %tcl.div.64.exit.i ], [ { i32 1, %INT undef }, %error.i ]
  %47 = extractvalue { i32, %INT } %46, 0, !dbg !5277
  %48 = icmp eq i32 %47, 0, !dbg !5277
  %49 = extractvalue { i32, %INT } %46, 1, !dbg !5277
  %50 = insertvalue %NUMERIC { i1 false, %INT undef, double undef }, %INT %49, 1, !dbg !5277
  %51 = insertvalue { i32, %NUMERIC } { i32 0, %NUMERIC undef }, %NUMERIC %50, 1, !dbg !5277
  %52 = select i1 %48, { i32, %NUMERIC } %51, { i32, %NUMERIC } { i32 1, %NUMERIC undef }, !dbg !5277
  ret { i32, %NUMERIC } %52, !dbg !5277

doubles:                                          ; preds = %enter
  %53 = extractvalue %INT %2, 0, !dbg !5278
  %54 = extractvalue %INT %2, 1, !dbg !5278
  %55 = sext i32 %54 to i64, !dbg !5278
  %56 = extractvalue %INT %2, 2, !dbg !5278
  %57 = select i1 %53, i64 %56, i64 %55, !dbg !5278
  %58 = sitofp i64 %57 to double, !dbg !5280
  %59 = extractvalue %NUMERIC %left, 2, !dbg !5280
  %left1 = select i1 %0, double %59, double %58, !dbg !5280
  %60 = extractvalue %NUMERIC %right, 1, !dbg !5281
  %61 = extractvalue %INT %60, 0, !dbg !5282
  %62 = extractvalue %INT %60, 1, !dbg !5282
  %63 = sext i32 %62 to i64, !dbg !5282
  %64 = extractvalue %INT %60, 2, !dbg !5282
  %65 = select i1 %61, i64 %64, i64 %63, !dbg !5282
  %66 = sitofp i64 %65 to double, !dbg !5281
  %67 = extractvalue %NUMERIC %right, 2, !dbg !5281
  %right2 = select i1 %1, double %67, double %66, !dbg !5281
  %68 = fcmp oeq double %left1, 0.000000e+00, !dbg !5284
  %69 = fcmp oeq double %right2, 0.000000e+00, !dbg !5284
  %70 = and i1 %68, %69, !dbg !5284
  br i1 %70, label %error.i13, label %normal.i, !dbg !5284

normal.i:                                         ; preds = %doubles
  %71 = fdiv double %left1, %right2, !dbg !5286
  %72 = insertvalue { i32, double } { i32 0, double undef }, double %71, 1, !dbg !5286
  br label %tcl.div.double.exit, !dbg !5286

error.i13:                                        ; preds = %doubles
  %interp.i6 = load %Interp*, %Interp** @tclInterp, align 8, !dbg !5287, !invariant.load !3, !noalias !5288, !nonnull !3, !dereferenceable !1051
  %exception.message.i7 = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.4, align 8, !dbg !5287, !invariant.load !3, !noalias !5288, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i.i8 = getelementptr %Tcl_Obj, %Tcl_Obj* %exception.message.i7, i64 0, i32 0, !dbg !5291
  %refCount.i.i9 = load i32, i32* %refCountPtr.i.i8, align 4, !dbg !5291, !noalias !5288
  %73 = icmp sgt i32 %refCount.i.i9, 1, !dbg !5287
  tail call void @llvm.assume(i1 %73) #5, !dbg !5287, !noalias !5288
  %exception.code.i10 = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.5, align 8, !dbg !5287, !invariant.load !3, !noalias !5288, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i2.i11 = getelementptr %Tcl_Obj, %Tcl_Obj* %exception.code.i10, i64 0, i32 0, !dbg !5293
  %refCount.i3.i12 = load i32, i32* %refCountPtr.i2.i11, align 4, !dbg !5293, !noalias !5288
  %74 = icmp sgt i32 %refCount.i3.i12, 1, !dbg !5287
  tail call void @llvm.assume(i1 %74) #5, !dbg !5287, !noalias !5288
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp.i6, %Tcl_Obj* noalias nonnull %exception.message.i7) #5, !dbg !5287, !noalias !5288
  tail call void @Tcl_SetObjErrorCode(%Interp* noalias nocapture nonnull %interp.i6, %Tcl_Obj* noalias nonnull %exception.code.i10) #5, !dbg !5287, !noalias !5288
  store i32 1, i32* %ecvar, align 4, !dbg !5287, !alias.scope !5288
  br label %tcl.div.double.exit, !dbg !5295

tcl.div.double.exit:                              ; preds = %error.i13, %normal.i
  %75 = phi { i32, double } [ %72, %normal.i ], [ { i32 1, double undef }, %error.i13 ]
  %76 = extractvalue { i32, double } %75, 0, !dbg !5296
  %77 = icmp eq i32 %76, 0, !dbg !5296
  %78 = extractvalue { i32, double } %75, 1, !dbg !5296
  %79 = insertvalue %NUMERIC { i1 true, %INT undef, double undef }, double %78, 2, !dbg !5296
  %80 = insertvalue { i32, %NUMERIC } { i32 0, %NUMERIC undef }, %NUMERIC %79, 1, !dbg !5296
  %81 = select i1 %77, { i32, %NUMERIC } %80, { i32, %NUMERIC } { i32 1, %NUMERIC undef }, !dbg !5296
  ret { i32, %NUMERIC } %81, !dbg !5296
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.powi.f64(double, i32) #2

; Function Attrs: nounwind readnone speculatable
declare double @llvm.pow.f64(double, double) #2

; Function Attrs: alwaysinline nounwind
define hidden { i32, double } @tcl.fpow(double %x, double %y, i32* noalias nocapture %ecvar) local_unnamed_addr #6 !dbg !5297 {
enter:
  %0 = fcmp olt double %x, 0.000000e+00, !dbg !5302
  br i1 %0, label %check.remainder, label %check.zeroToNegative, !dbg !5302

check.remainder:                                  ; preds = %enter
  %fraction = frem double %y, 1.000000e+00, !dbg !5303
  %1 = fcmp oeq double %fraction, 0.000000e+00, !dbg !5304
  br i1 %1, label %ordinary, label %fail.negativeToFraction, !dbg !5304

check.zeroToNegative:                             ; preds = %enter
  %2 = fcmp oeq double %x, 0.000000e+00, !dbg !5305
  %3 = fcmp olt double %y, 0.000000e+00, !dbg !5305
  %4 = and i1 %2, %3, !dbg !5305
  br i1 %4, label %fail.zeroToNegative, label %ordinary, !dbg !5305

ordinary:                                         ; preds = %check.zeroToNegative, %check.remainder
  %5 = tail call double @llvm.pow.f64(double %x, double %y), !dbg !5306
  %6 = insertvalue { i32, double } { i32 0, double undef }, double %5, 1, !dbg !5306
  ret { i32, double } %6, !dbg !5306

fail.negativeToFraction:                          ; preds = %check.remainder
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !5307, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %exception.message = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.4, align 8, !dbg !5307, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i14 = getelementptr %Tcl_Obj, %Tcl_Obj* %exception.message, i64 0, i32 0, !dbg !5308
  %refCount.i15 = load i32, i32* %refCountPtr.i14, align 4, !dbg !5308
  %7 = icmp sgt i32 %refCount.i15, 1, !dbg !5307
  tail call void @llvm.assume(i1 %7), !dbg !5307
  %exception.code = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.5, align 8, !dbg !5307, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i12 = getelementptr %Tcl_Obj, %Tcl_Obj* %exception.code, i64 0, i32 0, !dbg !5310
  %refCount.i13 = load i32, i32* %refCountPtr.i12, align 4, !dbg !5310
  %8 = icmp sgt i32 %refCount.i13, 1, !dbg !5307
  tail call void @llvm.assume(i1 %8), !dbg !5307
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %exception.message), !dbg !5307
  tail call void @Tcl_SetObjErrorCode(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %exception.code), !dbg !5307
  store i32 1, i32* %ecvar, align 4, !dbg !5307
  ret { i32, double } { i32 1, double undef }, !dbg !5312

fail.zeroToNegative:                              ; preds = %check.zeroToNegative
  %interp5 = load %Interp*, %Interp** @tclInterp, align 8, !dbg !5313, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %exception.message7 = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.6, align 8, !dbg !5313, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i10 = getelementptr %Tcl_Obj, %Tcl_Obj* %exception.message7, i64 0, i32 0, !dbg !5314
  %refCount.i11 = load i32, i32* %refCountPtr.i10, align 4, !dbg !5314
  %9 = icmp sgt i32 %refCount.i11, 1, !dbg !5313
  tail call void @llvm.assume(i1 %9), !dbg !5313
  %exception.code9 = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.7, align 8, !dbg !5313, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %exception.code9, i64 0, i32 0, !dbg !5316
  %refCount.i = load i32, i32* %refCountPtr.i, align 4, !dbg !5316
  %10 = icmp sgt i32 %refCount.i, 1, !dbg !5313
  tail call void @llvm.assume(i1 %10), !dbg !5313
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp5, %Tcl_Obj* noalias nonnull %exception.message7), !dbg !5313
  tail call void @Tcl_SetObjErrorCode(%Interp* noalias nocapture nonnull %interp5, %Tcl_Obj* noalias nonnull %exception.code9), !dbg !5313
  store i32 1, i32* %ecvar, align 4, !dbg !5313
  ret { i32, double } { i32 1, double undef }, !dbg !5318
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, double } @tcl.powi(double %x, %INT %y, i32* noalias nocapture %ecvar) local_unnamed_addr #6 !dbg !5319 {
enter:
  %0 = fcmp oeq double %x, 0.000000e+00, !dbg !5326
  %1 = extractvalue %INT %y, 0, !dbg !5327
  %2 = extractvalue %INT %y, 1, !dbg !5327
  %3 = sext i32 %2 to i64, !dbg !5327
  %4 = extractvalue %INT %y, 2, !dbg !5327
  %x.64210.i = select i1 %1, i64 %4, i64 %3, !dbg !5327
  %z.bit1.i = icmp slt i64 %x.64210.i, 0, !dbg !5329
  %5 = and i1 %0, %z.bit1.i, !dbg !5326
  br i1 %5, label %fail.zeroToNegative, label %check.powSize, !dbg !5326

check.powSize:                                    ; preds = %enter
  br i1 %1, label %checkfalse32, label %apply.powi, !dbg !5330

checkfalse32:                                     ; preds = %check.powSize
  %.off = add i64 %4, 2147483648, !dbg !5331
  %6 = icmp ult i64 %.off, 4294967296, !dbg !5331
  %7 = tail call i1 @llvm.expect.i1(i1 %6, i1 true), !dbg !5331
  br i1 %7, label %false32, label %out.of.range, !dbg !5331

false32:                                          ; preds = %checkfalse32
  %8 = trunc i64 %4 to i32, !dbg !5332
  br label %apply.powi, !dbg !5333

out.of.range:                                     ; preds = %checkfalse32
  %9 = sitofp i64 %4 to double, !dbg !5334
  %10 = tail call double @llvm.pow.f64(double %x, double %9), !dbg !5334
  %11 = insertvalue { i32, double } { i32 0, double undef }, double %10, 1, !dbg !5334
  ret { i32, double } %11, !dbg !5334

apply.powi:                                       ; preds = %check.powSize, %false32
  %12 = phi i32 [ %8, %false32 ], [ %2, %check.powSize ]
  %13 = tail call double @llvm.powi.f64(double %x, i32 %12), !dbg !5335
  %14 = insertvalue { i32, double } { i32 0, double undef }, double %13, 1, !dbg !5335
  ret { i32, double } %14, !dbg !5335

fail.zeroToNegative:                              ; preds = %enter
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !5336, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %exception.message = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.6, align 8, !dbg !5336, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i2 = getelementptr %Tcl_Obj, %Tcl_Obj* %exception.message, i64 0, i32 0, !dbg !5337
  %refCount.i3 = load i32, i32* %refCountPtr.i2, align 4, !dbg !5337
  %15 = icmp sgt i32 %refCount.i3, 1, !dbg !5336
  tail call void @llvm.assume(i1 %15), !dbg !5336
  %exception.code = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.7, align 8, !dbg !5336, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %exception.code, i64 0, i32 0, !dbg !5339
  %refCount.i = load i32, i32* %refCountPtr.i, align 4, !dbg !5339
  %16 = icmp sgt i32 %refCount.i, 1, !dbg !5336
  tail call void @llvm.assume(i1 %16), !dbg !5336
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %exception.message), !dbg !5336
  tail call void @Tcl_SetObjErrorCode(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %exception.code), !dbg !5336
  store i32 1, i32* %ecvar, align 4, !dbg !5336
  ret { i32, double } { i32 1, double undef }, !dbg !5341
}

; Function Attrs: alwaysinline nounwind readnone
define hidden %INT @tcl.ipow.bypow2(%INT %x, %INT %y) local_unnamed_addr #1 !dbg !5342 {
enter:
  %0 = extractvalue %INT %y, 0, !dbg !5346
  %1 = extractvalue %INT %y, 1, !dbg !5346
  %2 = sext i32 %1 to i64, !dbg !5346
  %3 = extractvalue %INT %y, 2, !dbg !5346
  %n.enter2 = select i1 %0, i64 %3, i64 %2, !dbg !5346
  %4 = icmp eq i64 %n.enter2, 0, !dbg !5348
  br i1 %4, label %result, label %loop.bit0, !dbg !5348

result:                                           ; preds = %tcl.mul.exit, %enter
  %result.test.lcssa = phi %INT [ { i1 true, i32 undef, i64 1 }, %enter ], [ %result.double31, %tcl.mul.exit ]
  ret %INT %result.test.lcssa, !dbg !5349

loop.bit0:                                        ; preds = %enter, %tcl.mul.exit
  %result.test27 = phi %INT [ %result.double31, %tcl.mul.exit ], [ { i1 true, i32 undef, i64 1 }, %enter ]
  %x.test22 = phi %INT [ %x.double3, %tcl.mul.exit ], [ %x, %enter ]
  %n.test21 = phi i64 [ %n.double1, %tcl.mul.exit ], [ %n.enter2, %enter ]
  %5 = and i64 %n.test21, 1, !dbg !5350
  %6 = icmp eq i64 %5, 0, !dbg !5350
  %.pre = extractvalue %INT %x.test22, 0, !dbg !5351
  br i1 %6, label %loop.bit0.loop.double_crit_edge, label %loop.mult, !dbg !5350

loop.bit0.loop.double_crit_edge:                  ; preds = %loop.bit0
  br i1 %.pre, label %29, label %op.32bit.i, !dbg !5352

loop.mult:                                        ; preds = %loop.bit0
  br i1 %.pre, label %tcl.int.64.exit.i15, label %check2.i4, !dbg !5354

check2.i4:                                        ; preds = %loop.mult
  %7 = extractvalue %INT %result.test27, 0, !dbg !5356
  %8 = extractvalue %INT %x.test22, 1, !dbg !5357
  br i1 %7, label %loop.double, label %op.32bit.i6, !dbg !5356

op.32bit.i6:                                      ; preds = %check2.i4
  %y.32.i5 = extractvalue %INT %result.test27, 1, !dbg !5358
  %9 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %8, i32 %y.32.i5) #5, !dbg !5359
  %10 = extractvalue { i32, i1 } %9, 1, !dbg !5360
  %11 = tail call i1 @llvm.expect.i1(i1 %10, i1 false) #5, !dbg !5360
  br i1 %11, label %overflow.32bit.i10, label %return.32bit.i12, !dbg !5360

overflow.32bit.i10:                               ; preds = %op.32bit.i6
  %x.64.i7 = sext i32 %8 to i64, !dbg !5361
  %x.641.i8 = sext i32 %y.32.i5 to i64, !dbg !5362
  %z.64.i9 = mul nsw i64 %x.641.i8, %x.64.i7, !dbg !5363
  %12 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i9, 2, !dbg !5363
  br label %loop.double.thread, !dbg !5363

return.32bit.i12:                                 ; preds = %op.32bit.i6
  %z.32.i11 = extractvalue { i32, i1 } %9, 0, !dbg !5364
  %13 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i11, 1, !dbg !5364
  br label %loop.double.thread, !dbg !5364

tcl.int.64.exit.i15:                              ; preds = %loop.mult
  %14 = extractvalue %INT %x.test22, 2, !dbg !5365
  %.pre.i14 = extractvalue %INT %result.test27, 0, !dbg !5367
  br i1 %.pre.i14, label %loop.double.thread40, label %loop.double.thread36, !dbg !5367

loop.double.thread40:                             ; preds = %tcl.int.64.exit.i15
  %15 = extractvalue %INT %result.test27, 2, !dbg !5367
  %z.643.i1842 = mul i64 %15, %14, !dbg !5369
  %16 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i1842, 2, !dbg !5369
  %n.mult43 = add i64 %n.test21, -1, !dbg !5370
  br label %29, !dbg !5352

loop.double.thread36:                             ; preds = %tcl.int.64.exit.i15
  %17 = extractvalue %INT %result.test27, 1, !dbg !5367
  %18 = sext i32 %17 to i64, !dbg !5367
  %z.643.i1838 = mul i64 %14, %18, !dbg !5369
  %19 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i1838, 2, !dbg !5369
  %n.mult39 = add i64 %n.test21, -1, !dbg !5370
  br label %29, !dbg !5352

loop.double.thread:                               ; preds = %overflow.32bit.i10, %return.32bit.i12
  %result.mult20.ph = phi %INT [ %13, %return.32bit.i12 ], [ %12, %overflow.32bit.i10 ]
  %n.mult35 = add i64 %n.test21, -1, !dbg !5370
  br label %op.32bit.i, !dbg !5352

loop.double:                                      ; preds = %check2.i4
  %20 = sext i32 %8 to i64, !dbg !5371
  %21 = extractvalue %INT %result.test27, 2, !dbg !5367
  %z.643.i18 = mul i64 %21, %20, !dbg !5369
  %22 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i18, 2, !dbg !5369
  %n.mult = add i64 %n.test21, -1, !dbg !5370
  br label %op.32bit.i

op.32bit.i:                                       ; preds = %loop.double, %loop.double.thread, %loop.bit0.loop.double_crit_edge
  %result.double32 = phi %INT [ %result.test27, %loop.bit0.loop.double_crit_edge ], [ %22, %loop.double ], [ %result.mult20.ph, %loop.double.thread ]
  %n.double29 = phi i64 [ %n.test21, %loop.bit0.loop.double_crit_edge ], [ %n.mult, %loop.double ], [ %n.mult35, %loop.double.thread ]
  %23 = extractvalue %INT %x.test22, 1, !dbg !5372
  %24 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %23, i32 %23) #5, !dbg !5373
  %25 = extractvalue { i32, i1 } %24, 1, !dbg !5374
  %26 = tail call i1 @llvm.expect.i1(i1 %25, i1 false) #5, !dbg !5374
  br i1 %26, label %overflow.32bit.i, label %return.32bit.i, !dbg !5374

overflow.32bit.i:                                 ; preds = %op.32bit.i
  %x.64.i = sext i32 %23 to i64, !dbg !5375
  %z.64.i = mul nsw i64 %x.64.i, %x.64.i, !dbg !5376
  %27 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i, 2, !dbg !5376
  br label %tcl.mul.exit, !dbg !5376

return.32bit.i:                                   ; preds = %op.32bit.i
  %z.32.i = extractvalue { i32, i1 } %24, 0, !dbg !5377
  %28 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i, 1, !dbg !5377
  br label %tcl.mul.exit, !dbg !5377

29:                                               ; preds = %loop.double.thread40, %loop.double.thread36, %loop.bit0.loop.double_crit_edge
  %result.double33 = phi %INT [ %result.test27, %loop.bit0.loop.double_crit_edge ], [ %19, %loop.double.thread36 ], [ %16, %loop.double.thread40 ]
  %n.double30 = phi i64 [ %n.test21, %loop.bit0.loop.double_crit_edge ], [ %n.mult39, %loop.double.thread36 ], [ %n.mult43, %loop.double.thread40 ]
  %30 = extractvalue %INT %x.test22, 2, !dbg !5378
  %z.643.i = mul i64 %30, %30, !dbg !5380
  %31 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i, 2, !dbg !5380
  br label %tcl.mul.exit, !dbg !5380

tcl.mul.exit:                                     ; preds = %29, %return.32bit.i, %overflow.32bit.i
  %result.double31 = phi %INT [ %result.double32, %overflow.32bit.i ], [ %result.double32, %return.32bit.i ], [ %result.double33, %29 ]
  %n.double28 = phi i64 [ %n.double29, %overflow.32bit.i ], [ %n.double29, %return.32bit.i ], [ %n.double30, %29 ]
  %x.double3 = phi %INT [ %27, %overflow.32bit.i ], [ %28, %return.32bit.i ], [ %31, %29 ]
  %n.double1 = ashr i64 %n.double28, 1, !dbg !5381
  %32 = icmp eq i64 %n.double1, 0, !dbg !5348
  br i1 %32, label %result, label %loop.bit0, !dbg !5348
}

; Function Attrs: alwaysinline nounwind readnone
define hidden %INT @tcl.ipow32(%INT %x, %INT %y) local_unnamed_addr #1 !dbg !5382 {
enter:
  %0 = extractvalue %INT %y, 0, !dbg !5386
  %1 = extractvalue %INT %y, 1, !dbg !5386
  %2 = sext i32 %1 to i64, !dbg !5386
  %3 = extractvalue %INT %y, 2, !dbg !5386
  %4 = select i1 %0, i64 %3, i64 %2, !dbg !5386
  switch i64 %4, label %loop.bit0.i [
    i64 2, label %pow2
    i64 3, label %pow3
    i64 4, label %pow4
    i64 5, label %pow5
    i64 6, label %pow6
    i64 7, label %pow7
    i64 8, label %pow8
    i64 0, label %tcl.mul.exit273
  ], !dbg !5388

pow2:                                             ; preds = %enter
  %5 = extractvalue %INT %x, 0, !dbg !5389
  br i1 %5, label %12, label %op.32bit.i260, !dbg !5389

op.32bit.i260:                                    ; preds = %pow2
  %6 = extractvalue %INT %x, 1, !dbg !5391
  %7 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %6, i32 %6) #5, !dbg !5392
  %8 = extractvalue { i32, i1 } %7, 1, !dbg !5393
  %9 = tail call i1 @llvm.expect.i1(i1 %8, i1 false) #5, !dbg !5393
  br i1 %9, label %overflow.32bit.i264, label %return.32bit.i266, !dbg !5393

overflow.32bit.i264:                              ; preds = %op.32bit.i260
  %x.64.i261 = sext i32 %6 to i64, !dbg !5394
  %z.64.i263 = mul nsw i64 %x.64.i261, %x.64.i261, !dbg !5395
  %10 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i263, 2, !dbg !5395
  br label %tcl.mul.exit273, !dbg !5395

return.32bit.i266:                                ; preds = %op.32bit.i260
  %z.32.i265 = extractvalue { i32, i1 } %7, 0, !dbg !5396
  %11 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i265, 1, !dbg !5396
  br label %tcl.mul.exit273, !dbg !5396

12:                                               ; preds = %pow2
  %13 = extractvalue %INT %x, 2, !dbg !5397
  %z.643.i272 = mul i64 %13, %13, !dbg !5399
  %14 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i272, 2, !dbg !5399
  br label %tcl.mul.exit273, !dbg !5399

tcl.mul.exit273:                                  ; preds = %tcl.mul.exit.i, %enter, %overflow.32bit.i, %return.32bit.i, %234, %overflow.32bit.i40, %return.32bit.i42, %202, %overflow.32bit.i104, %return.32bit.i106, %143, %overflow.32bit.i152, %return.32bit.i154, %103, %overflow.32bit.i200, %return.32bit.i202, %63, %overflow.32bit.i232, %return.32bit.i234, %42, %12, %return.32bit.i266, %overflow.32bit.i264
  %15 = phi %INT [ %10, %overflow.32bit.i264 ], [ %11, %return.32bit.i266 ], [ %14, %12 ], [ %32, %overflow.32bit.i232 ], [ %33, %return.32bit.i234 ], [ %44, %42 ], [ %61, %overflow.32bit.i200 ], [ %62, %return.32bit.i202 ], [ %65, %63 ], [ %93, %overflow.32bit.i152 ], [ %94, %return.32bit.i154 ], [ %105, %103 ], [ %141, %overflow.32bit.i104 ], [ %142, %return.32bit.i106 ], [ %145, %143 ], [ %192, %overflow.32bit.i40 ], [ %193, %return.32bit.i42 ], [ %204, %202 ], [ %232, %overflow.32bit.i ], [ %233, %return.32bit.i ], [ %236, %234 ], [ { i1 true, i32 undef, i64 1 }, %enter ], [ %result.double31.i, %tcl.mul.exit.i ]
  ret %INT %15, !dbg !5400

pow3:                                             ; preds = %enter
  %16 = extractvalue %INT %x, 0, !dbg !5401
  br i1 %16, label %23, label %op.32bit.i244, !dbg !5401

op.32bit.i244:                                    ; preds = %pow3
  %17 = extractvalue %INT %x, 1, !dbg !5403
  %18 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %17, i32 %17) #5, !dbg !5404
  %19 = extractvalue { i32, i1 } %18, 1, !dbg !5405
  %20 = tail call i1 @llvm.expect.i1(i1 %19, i1 false) #5, !dbg !5405
  br i1 %20, label %overflow.32bit.i248, label %return.32bit.i250, !dbg !5405

overflow.32bit.i248:                              ; preds = %op.32bit.i244
  %x.64.i245 = sext i32 %17 to i64, !dbg !5406
  %z.64.i247 = mul nsw i64 %x.64.i245, %x.64.i245, !dbg !5407
  %21 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i247, 2, !dbg !5407
  br label %tcl.mul.exit257, !dbg !5407

return.32bit.i250:                                ; preds = %op.32bit.i244
  %z.32.i249 = extractvalue { i32, i1 } %18, 0, !dbg !5408
  %22 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i249, 1, !dbg !5408
  br label %tcl.mul.exit257, !dbg !5408

23:                                               ; preds = %pow3
  %24 = extractvalue %INT %x, 2, !dbg !5409
  %z.643.i256 = mul i64 %24, %24, !dbg !5411
  %25 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i256, 2, !dbg !5411
  br label %tcl.mul.exit257, !dbg !5411

tcl.mul.exit257:                                  ; preds = %23, %return.32bit.i250, %overflow.32bit.i248
  %26 = phi %INT [ %21, %overflow.32bit.i248 ], [ %22, %return.32bit.i250 ], [ %25, %23 ]
  %27 = extractvalue %INT %26, 0, !dbg !5412
  br i1 %27, label %tcl.int.64.exit.i237, label %check2.i226, !dbg !5412

check2.i226:                                      ; preds = %tcl.mul.exit257
  %28 = extractvalue %INT %26, 1, !dbg !5414
  br i1 %16, label %tcl.int.64.exit.thread.i235, label %op.32bit.i228, !dbg !5415

op.32bit.i228:                                    ; preds = %check2.i226
  %y.32.i227 = extractvalue %INT %x, 1, !dbg !5416
  %29 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %28, i32 %y.32.i227) #5, !dbg !5417
  %30 = extractvalue { i32, i1 } %29, 1, !dbg !5418
  %31 = tail call i1 @llvm.expect.i1(i1 %30, i1 false) #5, !dbg !5418
  br i1 %31, label %overflow.32bit.i232, label %return.32bit.i234, !dbg !5418

overflow.32bit.i232:                              ; preds = %op.32bit.i228
  %x.64.i229 = sext i32 %28 to i64, !dbg !5419
  %x.641.i230 = sext i32 %y.32.i227 to i64, !dbg !5420
  %z.64.i231 = mul nsw i64 %x.64.i229, %x.641.i230, !dbg !5421
  %32 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i231, 2, !dbg !5421
  br label %tcl.mul.exit273, !dbg !5421

return.32bit.i234:                                ; preds = %op.32bit.i228
  %z.32.i233 = extractvalue { i32, i1 } %29, 0, !dbg !5422
  %33 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i233, 1, !dbg !5422
  br label %tcl.mul.exit273, !dbg !5422

tcl.int.64.exit.thread.i235:                      ; preds = %check2.i226
  %34 = sext i32 %28 to i64, !dbg !5423
  %35 = extractvalue %INT %x, 2, !dbg !5425
  br label %40, !dbg !5425

tcl.int.64.exit.i237:                             ; preds = %tcl.mul.exit257
  %36 = extractvalue %INT %26, 2, !dbg !5427
  %37 = extractvalue %INT %x, 1, !dbg !5425
  %38 = sext i32 %37 to i64, !dbg !5425
  %39 = extractvalue %INT %x, 2, !dbg !5425
  br i1 %16, label %40, label %42, !dbg !5425

40:                                               ; preds = %tcl.int.64.exit.i237, %tcl.int.64.exit.thread.i235
  %41 = phi i64 [ %35, %tcl.int.64.exit.thread.i235 ], [ %39, %tcl.int.64.exit.i237 ]
  %x.642412.i238 = phi i64 [ %34, %tcl.int.64.exit.thread.i235 ], [ %36, %tcl.int.64.exit.i237 ]
  br label %42, !dbg !5425

42:                                               ; preds = %40, %tcl.int.64.exit.i237
  %x.642411.i239 = phi i64 [ %x.642412.i238, %40 ], [ %36, %tcl.int.64.exit.i237 ]
  %43 = phi i64 [ %41, %40 ], [ %38, %tcl.int.64.exit.i237 ]
  %z.643.i240 = mul i64 %43, %x.642411.i239, !dbg !5428
  %44 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i240, 2, !dbg !5428
  br label %tcl.mul.exit273, !dbg !5428

pow4:                                             ; preds = %enter
  %45 = extractvalue %INT %x, 0, !dbg !5429
  br i1 %45, label %52, label %op.32bit.i212, !dbg !5429

op.32bit.i212:                                    ; preds = %pow4
  %46 = extractvalue %INT %x, 1, !dbg !5431
  %47 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %46, i32 %46) #5, !dbg !5432
  %48 = extractvalue { i32, i1 } %47, 1, !dbg !5433
  %49 = tail call i1 @llvm.expect.i1(i1 %48, i1 false) #5, !dbg !5433
  br i1 %49, label %overflow.32bit.i216, label %return.32bit.i218, !dbg !5433

overflow.32bit.i216:                              ; preds = %op.32bit.i212
  %x.64.i213 = sext i32 %46 to i64, !dbg !5434
  %z.64.i215 = mul nsw i64 %x.64.i213, %x.64.i213, !dbg !5435
  %50 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i215, 2, !dbg !5435
  br label %tcl.mul.exit225, !dbg !5435

return.32bit.i218:                                ; preds = %op.32bit.i212
  %z.32.i217 = extractvalue { i32, i1 } %47, 0, !dbg !5436
  %51 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i217, 1, !dbg !5436
  br label %tcl.mul.exit225, !dbg !5436

52:                                               ; preds = %pow4
  %53 = extractvalue %INT %x, 2, !dbg !5437
  %z.643.i224 = mul i64 %53, %53, !dbg !5439
  %54 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i224, 2, !dbg !5439
  br label %tcl.mul.exit225, !dbg !5439

tcl.mul.exit225:                                  ; preds = %52, %return.32bit.i218, %overflow.32bit.i216
  %55 = phi %INT [ %50, %overflow.32bit.i216 ], [ %51, %return.32bit.i218 ], [ %54, %52 ]
  %56 = extractvalue %INT %55, 0, !dbg !5440
  br i1 %56, label %63, label %op.32bit.i196, !dbg !5440

op.32bit.i196:                                    ; preds = %tcl.mul.exit225
  %57 = extractvalue %INT %55, 1, !dbg !5442
  %58 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %57, i32 %57) #5, !dbg !5443
  %59 = extractvalue { i32, i1 } %58, 1, !dbg !5444
  %60 = tail call i1 @llvm.expect.i1(i1 %59, i1 false) #5, !dbg !5444
  br i1 %60, label %overflow.32bit.i200, label %return.32bit.i202, !dbg !5444

overflow.32bit.i200:                              ; preds = %op.32bit.i196
  %x.64.i197 = sext i32 %57 to i64, !dbg !5445
  %z.64.i199 = mul nsw i64 %x.64.i197, %x.64.i197, !dbg !5446
  %61 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i199, 2, !dbg !5446
  br label %tcl.mul.exit273, !dbg !5446

return.32bit.i202:                                ; preds = %op.32bit.i196
  %z.32.i201 = extractvalue { i32, i1 } %58, 0, !dbg !5447
  %62 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i201, 1, !dbg !5447
  br label %tcl.mul.exit273, !dbg !5447

63:                                               ; preds = %tcl.mul.exit225
  %64 = extractvalue %INT %55, 2, !dbg !5448
  %z.643.i208 = mul i64 %64, %64, !dbg !5450
  %65 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i208, 2, !dbg !5450
  br label %tcl.mul.exit273, !dbg !5450

pow5:                                             ; preds = %enter
  %66 = extractvalue %INT %x, 0, !dbg !5451
  br i1 %66, label %73, label %op.32bit.i180, !dbg !5451

op.32bit.i180:                                    ; preds = %pow5
  %67 = extractvalue %INT %x, 1, !dbg !5453
  %68 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %67, i32 %67) #5, !dbg !5454
  %69 = extractvalue { i32, i1 } %68, 1, !dbg !5455
  %70 = tail call i1 @llvm.expect.i1(i1 %69, i1 false) #5, !dbg !5455
  br i1 %70, label %overflow.32bit.i184, label %return.32bit.i186, !dbg !5455

overflow.32bit.i184:                              ; preds = %op.32bit.i180
  %x.64.i181 = sext i32 %67 to i64, !dbg !5456
  %z.64.i183 = mul nsw i64 %x.64.i181, %x.64.i181, !dbg !5457
  %71 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i183, 2, !dbg !5457
  br label %tcl.mul.exit193, !dbg !5457

return.32bit.i186:                                ; preds = %op.32bit.i180
  %z.32.i185 = extractvalue { i32, i1 } %68, 0, !dbg !5458
  %72 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i185, 1, !dbg !5458
  br label %tcl.mul.exit193, !dbg !5458

73:                                               ; preds = %pow5
  %74 = extractvalue %INT %x, 2, !dbg !5459
  %z.643.i192 = mul i64 %74, %74, !dbg !5461
  %75 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i192, 2, !dbg !5461
  br label %tcl.mul.exit193, !dbg !5461

tcl.mul.exit193:                                  ; preds = %73, %return.32bit.i186, %overflow.32bit.i184
  %76 = phi %INT [ %71, %overflow.32bit.i184 ], [ %72, %return.32bit.i186 ], [ %75, %73 ]
  %77 = extractvalue %INT %76, 0, !dbg !5462
  br i1 %77, label %84, label %op.32bit.i164, !dbg !5462

op.32bit.i164:                                    ; preds = %tcl.mul.exit193
  %78 = extractvalue %INT %76, 1, !dbg !5464
  %79 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %78, i32 %78) #5, !dbg !5465
  %80 = extractvalue { i32, i1 } %79, 1, !dbg !5466
  %81 = tail call i1 @llvm.expect.i1(i1 %80, i1 false) #5, !dbg !5466
  br i1 %81, label %overflow.32bit.i168, label %return.32bit.i170, !dbg !5466

overflow.32bit.i168:                              ; preds = %op.32bit.i164
  %x.64.i165 = sext i32 %78 to i64, !dbg !5467
  %z.64.i167 = mul nsw i64 %x.64.i165, %x.64.i165, !dbg !5468
  %82 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i167, 2, !dbg !5468
  br label %tcl.mul.exit177, !dbg !5468

return.32bit.i170:                                ; preds = %op.32bit.i164
  %z.32.i169 = extractvalue { i32, i1 } %79, 0, !dbg !5469
  %83 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i169, 1, !dbg !5469
  br label %tcl.mul.exit177, !dbg !5469

84:                                               ; preds = %tcl.mul.exit193
  %85 = extractvalue %INT %76, 2, !dbg !5470
  %z.643.i176 = mul i64 %85, %85, !dbg !5472
  %86 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i176, 2, !dbg !5472
  br label %tcl.mul.exit177, !dbg !5472

tcl.mul.exit177:                                  ; preds = %84, %return.32bit.i170, %overflow.32bit.i168
  %87 = phi %INT [ %82, %overflow.32bit.i168 ], [ %83, %return.32bit.i170 ], [ %86, %84 ]
  %88 = extractvalue %INT %87, 0, !dbg !5473
  br i1 %88, label %tcl.int.64.exit.i157, label %check2.i146, !dbg !5473

check2.i146:                                      ; preds = %tcl.mul.exit177
  %89 = extractvalue %INT %87, 1, !dbg !5475
  br i1 %66, label %tcl.int.64.exit.thread.i155, label %op.32bit.i148, !dbg !5476

op.32bit.i148:                                    ; preds = %check2.i146
  %y.32.i147 = extractvalue %INT %x, 1, !dbg !5477
  %90 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %89, i32 %y.32.i147) #5, !dbg !5478
  %91 = extractvalue { i32, i1 } %90, 1, !dbg !5479
  %92 = tail call i1 @llvm.expect.i1(i1 %91, i1 false) #5, !dbg !5479
  br i1 %92, label %overflow.32bit.i152, label %return.32bit.i154, !dbg !5479

overflow.32bit.i152:                              ; preds = %op.32bit.i148
  %x.64.i149 = sext i32 %89 to i64, !dbg !5480
  %x.641.i150 = sext i32 %y.32.i147 to i64, !dbg !5481
  %z.64.i151 = mul nsw i64 %x.64.i149, %x.641.i150, !dbg !5482
  %93 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i151, 2, !dbg !5482
  br label %tcl.mul.exit273, !dbg !5482

return.32bit.i154:                                ; preds = %op.32bit.i148
  %z.32.i153 = extractvalue { i32, i1 } %90, 0, !dbg !5483
  %94 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i153, 1, !dbg !5483
  br label %tcl.mul.exit273, !dbg !5483

tcl.int.64.exit.thread.i155:                      ; preds = %check2.i146
  %95 = sext i32 %89 to i64, !dbg !5484
  %96 = extractvalue %INT %x, 2, !dbg !5486
  br label %101, !dbg !5486

tcl.int.64.exit.i157:                             ; preds = %tcl.mul.exit177
  %97 = extractvalue %INT %87, 2, !dbg !5488
  %98 = extractvalue %INT %x, 1, !dbg !5486
  %99 = sext i32 %98 to i64, !dbg !5486
  %100 = extractvalue %INT %x, 2, !dbg !5486
  br i1 %66, label %101, label %103, !dbg !5486

101:                                              ; preds = %tcl.int.64.exit.i157, %tcl.int.64.exit.thread.i155
  %102 = phi i64 [ %96, %tcl.int.64.exit.thread.i155 ], [ %100, %tcl.int.64.exit.i157 ]
  %x.642412.i158 = phi i64 [ %95, %tcl.int.64.exit.thread.i155 ], [ %97, %tcl.int.64.exit.i157 ]
  br label %103, !dbg !5486

103:                                              ; preds = %101, %tcl.int.64.exit.i157
  %x.642411.i159 = phi i64 [ %x.642412.i158, %101 ], [ %97, %tcl.int.64.exit.i157 ]
  %104 = phi i64 [ %102, %101 ], [ %99, %tcl.int.64.exit.i157 ]
  %z.643.i160 = mul i64 %104, %x.642411.i159, !dbg !5489
  %105 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i160, 2, !dbg !5489
  br label %tcl.mul.exit273, !dbg !5489

pow6:                                             ; preds = %enter
  %106 = extractvalue %INT %x, 0, !dbg !5490
  br i1 %106, label %113, label %op.32bit.i132, !dbg !5490

op.32bit.i132:                                    ; preds = %pow6
  %107 = extractvalue %INT %x, 1, !dbg !5492
  %108 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %107, i32 %107) #5, !dbg !5493
  %109 = extractvalue { i32, i1 } %108, 1, !dbg !5494
  %110 = tail call i1 @llvm.expect.i1(i1 %109, i1 false) #5, !dbg !5494
  br i1 %110, label %overflow.32bit.i136, label %return.32bit.i138, !dbg !5494

overflow.32bit.i136:                              ; preds = %op.32bit.i132
  %x.64.i133 = sext i32 %107 to i64, !dbg !5495
  %z.64.i135 = mul nsw i64 %x.64.i133, %x.64.i133, !dbg !5496
  %111 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i135, 2, !dbg !5496
  br label %tcl.mul.exit145, !dbg !5496

return.32bit.i138:                                ; preds = %op.32bit.i132
  %z.32.i137 = extractvalue { i32, i1 } %108, 0, !dbg !5497
  %112 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i137, 1, !dbg !5497
  br label %tcl.mul.exit145, !dbg !5497

113:                                              ; preds = %pow6
  %114 = extractvalue %INT %x, 2, !dbg !5498
  %z.643.i144 = mul i64 %114, %114, !dbg !5500
  %115 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i144, 2, !dbg !5500
  br label %tcl.mul.exit145, !dbg !5500

tcl.mul.exit145:                                  ; preds = %113, %return.32bit.i138, %overflow.32bit.i136
  %116 = phi %INT [ %111, %overflow.32bit.i136 ], [ %112, %return.32bit.i138 ], [ %115, %113 ]
  %117 = extractvalue %INT %116, 0, !dbg !5501
  br i1 %117, label %tcl.int.64.exit.i125, label %check2.i114, !dbg !5501

check2.i114:                                      ; preds = %tcl.mul.exit145
  %118 = extractvalue %INT %116, 1, !dbg !5503
  br i1 %106, label %tcl.int.64.exit.thread.i123, label %op.32bit.i116, !dbg !5504

op.32bit.i116:                                    ; preds = %check2.i114
  %y.32.i115 = extractvalue %INT %x, 1, !dbg !5505
  %119 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %118, i32 %y.32.i115) #5, !dbg !5506
  %120 = extractvalue { i32, i1 } %119, 1, !dbg !5507
  %121 = tail call i1 @llvm.expect.i1(i1 %120, i1 false) #5, !dbg !5507
  br i1 %121, label %overflow.32bit.i120, label %return.32bit.i122, !dbg !5507

overflow.32bit.i120:                              ; preds = %op.32bit.i116
  %x.64.i117 = sext i32 %118 to i64, !dbg !5508
  %x.641.i118 = sext i32 %y.32.i115 to i64, !dbg !5509
  %z.64.i119 = mul nsw i64 %x.64.i117, %x.641.i118, !dbg !5510
  %122 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i119, 2, !dbg !5510
  br label %tcl.mul.exit129, !dbg !5510

return.32bit.i122:                                ; preds = %op.32bit.i116
  %z.32.i121 = extractvalue { i32, i1 } %119, 0, !dbg !5511
  %123 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i121, 1, !dbg !5511
  br label %tcl.mul.exit129, !dbg !5511

tcl.int.64.exit.thread.i123:                      ; preds = %check2.i114
  %124 = sext i32 %118 to i64, !dbg !5512
  %125 = extractvalue %INT %x, 2, !dbg !5514
  br label %130, !dbg !5514

tcl.int.64.exit.i125:                             ; preds = %tcl.mul.exit145
  %126 = extractvalue %INT %116, 2, !dbg !5516
  %127 = extractvalue %INT %x, 1, !dbg !5514
  %128 = sext i32 %127 to i64, !dbg !5514
  %129 = extractvalue %INT %x, 2, !dbg !5514
  br i1 %106, label %130, label %132, !dbg !5514

130:                                              ; preds = %tcl.int.64.exit.i125, %tcl.int.64.exit.thread.i123
  %131 = phi i64 [ %125, %tcl.int.64.exit.thread.i123 ], [ %129, %tcl.int.64.exit.i125 ]
  %x.642412.i126 = phi i64 [ %124, %tcl.int.64.exit.thread.i123 ], [ %126, %tcl.int.64.exit.i125 ]
  br label %132, !dbg !5514

132:                                              ; preds = %130, %tcl.int.64.exit.i125
  %x.642411.i127 = phi i64 [ %x.642412.i126, %130 ], [ %126, %tcl.int.64.exit.i125 ]
  %133 = phi i64 [ %131, %130 ], [ %128, %tcl.int.64.exit.i125 ]
  %z.643.i128 = mul i64 %133, %x.642411.i127, !dbg !5517
  %134 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i128, 2, !dbg !5517
  br label %tcl.mul.exit129, !dbg !5517

tcl.mul.exit129:                                  ; preds = %132, %return.32bit.i122, %overflow.32bit.i120
  %135 = phi %INT [ %122, %overflow.32bit.i120 ], [ %123, %return.32bit.i122 ], [ %134, %132 ]
  %136 = extractvalue %INT %135, 0, !dbg !5518
  br i1 %136, label %143, label %op.32bit.i100, !dbg !5518

op.32bit.i100:                                    ; preds = %tcl.mul.exit129
  %137 = extractvalue %INT %135, 1, !dbg !5520
  %138 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %137, i32 %137) #5, !dbg !5521
  %139 = extractvalue { i32, i1 } %138, 1, !dbg !5522
  %140 = tail call i1 @llvm.expect.i1(i1 %139, i1 false) #5, !dbg !5522
  br i1 %140, label %overflow.32bit.i104, label %return.32bit.i106, !dbg !5522

overflow.32bit.i104:                              ; preds = %op.32bit.i100
  %x.64.i101 = sext i32 %137 to i64, !dbg !5523
  %z.64.i103 = mul nsw i64 %x.64.i101, %x.64.i101, !dbg !5524
  %141 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i103, 2, !dbg !5524
  br label %tcl.mul.exit273, !dbg !5524

return.32bit.i106:                                ; preds = %op.32bit.i100
  %z.32.i105 = extractvalue { i32, i1 } %138, 0, !dbg !5525
  %142 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i105, 1, !dbg !5525
  br label %tcl.mul.exit273, !dbg !5525

143:                                              ; preds = %tcl.mul.exit129
  %144 = extractvalue %INT %135, 2, !dbg !5526
  %z.643.i112 = mul i64 %144, %144, !dbg !5528
  %145 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i112, 2, !dbg !5528
  br label %tcl.mul.exit273, !dbg !5528

pow7:                                             ; preds = %enter
  %146 = extractvalue %INT %x, 0, !dbg !5529
  br i1 %146, label %153, label %op.32bit.i84, !dbg !5529

op.32bit.i84:                                     ; preds = %pow7
  %147 = extractvalue %INT %x, 1, !dbg !5531
  %148 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %147, i32 %147) #5, !dbg !5532
  %149 = extractvalue { i32, i1 } %148, 1, !dbg !5533
  %150 = tail call i1 @llvm.expect.i1(i1 %149, i1 false) #5, !dbg !5533
  br i1 %150, label %overflow.32bit.i88, label %return.32bit.i90, !dbg !5533

overflow.32bit.i88:                               ; preds = %op.32bit.i84
  %x.64.i85 = sext i32 %147 to i64, !dbg !5534
  %z.64.i87 = mul nsw i64 %x.64.i85, %x.64.i85, !dbg !5535
  %151 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i87, 2, !dbg !5535
  br label %tcl.mul.exit97, !dbg !5535

return.32bit.i90:                                 ; preds = %op.32bit.i84
  %z.32.i89 = extractvalue { i32, i1 } %148, 0, !dbg !5536
  %152 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i89, 1, !dbg !5536
  br label %tcl.mul.exit97, !dbg !5536

153:                                              ; preds = %pow7
  %154 = extractvalue %INT %x, 2, !dbg !5537
  %z.643.i96 = mul i64 %154, %154, !dbg !5539
  %155 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i96, 2, !dbg !5539
  br label %tcl.mul.exit97, !dbg !5539

tcl.mul.exit97:                                   ; preds = %153, %return.32bit.i90, %overflow.32bit.i88
  %156 = phi %INT [ %151, %overflow.32bit.i88 ], [ %152, %return.32bit.i90 ], [ %155, %153 ]
  %157 = extractvalue %INT %156, 0, !dbg !5540
  br i1 %157, label %tcl.int.64.exit.i77, label %check2.i66, !dbg !5540

check2.i66:                                       ; preds = %tcl.mul.exit97
  %158 = extractvalue %INT %156, 1, !dbg !5542
  br i1 %146, label %tcl.int.64.exit.thread.i75, label %op.32bit.i68, !dbg !5543

op.32bit.i68:                                     ; preds = %check2.i66
  %y.32.i67 = extractvalue %INT %x, 1, !dbg !5544
  %159 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %158, i32 %y.32.i67) #5, !dbg !5545
  %160 = extractvalue { i32, i1 } %159, 1, !dbg !5546
  %161 = tail call i1 @llvm.expect.i1(i1 %160, i1 false) #5, !dbg !5546
  br i1 %161, label %overflow.32bit.i72, label %return.32bit.i74, !dbg !5546

overflow.32bit.i72:                               ; preds = %op.32bit.i68
  %x.64.i69 = sext i32 %158 to i64, !dbg !5547
  %x.641.i70 = sext i32 %y.32.i67 to i64, !dbg !5548
  %z.64.i71 = mul nsw i64 %x.64.i69, %x.641.i70, !dbg !5549
  %162 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i71, 2, !dbg !5549
  br label %tcl.mul.exit81, !dbg !5549

return.32bit.i74:                                 ; preds = %op.32bit.i68
  %z.32.i73 = extractvalue { i32, i1 } %159, 0, !dbg !5550
  %163 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i73, 1, !dbg !5550
  br label %tcl.mul.exit81, !dbg !5550

tcl.int.64.exit.thread.i75:                       ; preds = %check2.i66
  %164 = sext i32 %158 to i64, !dbg !5551
  %165 = extractvalue %INT %x, 2, !dbg !5553
  br label %170, !dbg !5553

tcl.int.64.exit.i77:                              ; preds = %tcl.mul.exit97
  %166 = extractvalue %INT %156, 2, !dbg !5555
  %167 = extractvalue %INT %x, 1, !dbg !5553
  %168 = sext i32 %167 to i64, !dbg !5553
  %169 = extractvalue %INT %x, 2, !dbg !5553
  br i1 %146, label %170, label %172, !dbg !5553

170:                                              ; preds = %tcl.int.64.exit.i77, %tcl.int.64.exit.thread.i75
  %171 = phi i64 [ %165, %tcl.int.64.exit.thread.i75 ], [ %169, %tcl.int.64.exit.i77 ]
  %x.642412.i78 = phi i64 [ %164, %tcl.int.64.exit.thread.i75 ], [ %166, %tcl.int.64.exit.i77 ]
  br label %172, !dbg !5553

172:                                              ; preds = %170, %tcl.int.64.exit.i77
  %x.642411.i79 = phi i64 [ %x.642412.i78, %170 ], [ %166, %tcl.int.64.exit.i77 ]
  %173 = phi i64 [ %171, %170 ], [ %168, %tcl.int.64.exit.i77 ]
  %z.643.i80 = mul i64 %173, %x.642411.i79, !dbg !5556
  %174 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i80, 2, !dbg !5556
  br label %tcl.mul.exit81, !dbg !5556

tcl.mul.exit81:                                   ; preds = %172, %return.32bit.i74, %overflow.32bit.i72
  %175 = phi %INT [ %162, %overflow.32bit.i72 ], [ %163, %return.32bit.i74 ], [ %174, %172 ]
  %176 = extractvalue %INT %175, 0, !dbg !5557
  br i1 %176, label %183, label %op.32bit.i52, !dbg !5557

op.32bit.i52:                                     ; preds = %tcl.mul.exit81
  %177 = extractvalue %INT %175, 1, !dbg !5559
  %178 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %177, i32 %177) #5, !dbg !5560
  %179 = extractvalue { i32, i1 } %178, 1, !dbg !5561
  %180 = tail call i1 @llvm.expect.i1(i1 %179, i1 false) #5, !dbg !5561
  br i1 %180, label %overflow.32bit.i56, label %return.32bit.i58, !dbg !5561

overflow.32bit.i56:                               ; preds = %op.32bit.i52
  %x.64.i53 = sext i32 %177 to i64, !dbg !5562
  %z.64.i55 = mul nsw i64 %x.64.i53, %x.64.i53, !dbg !5563
  %181 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i55, 2, !dbg !5563
  br label %tcl.mul.exit65, !dbg !5563

return.32bit.i58:                                 ; preds = %op.32bit.i52
  %z.32.i57 = extractvalue { i32, i1 } %178, 0, !dbg !5564
  %182 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i57, 1, !dbg !5564
  br label %tcl.mul.exit65, !dbg !5564

183:                                              ; preds = %tcl.mul.exit81
  %184 = extractvalue %INT %175, 2, !dbg !5565
  %z.643.i64 = mul i64 %184, %184, !dbg !5567
  %185 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i64, 2, !dbg !5567
  br label %tcl.mul.exit65, !dbg !5567

tcl.mul.exit65:                                   ; preds = %183, %return.32bit.i58, %overflow.32bit.i56
  %186 = phi %INT [ %181, %overflow.32bit.i56 ], [ %182, %return.32bit.i58 ], [ %185, %183 ]
  %187 = extractvalue %INT %186, 0, !dbg !5568
  br i1 %187, label %tcl.int.64.exit.i45, label %check2.i34, !dbg !5568

check2.i34:                                       ; preds = %tcl.mul.exit65
  %188 = extractvalue %INT %186, 1, !dbg !5570
  br i1 %146, label %tcl.int.64.exit.thread.i43, label %op.32bit.i36, !dbg !5571

op.32bit.i36:                                     ; preds = %check2.i34
  %y.32.i35 = extractvalue %INT %x, 1, !dbg !5572
  %189 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %188, i32 %y.32.i35) #5, !dbg !5573
  %190 = extractvalue { i32, i1 } %189, 1, !dbg !5574
  %191 = tail call i1 @llvm.expect.i1(i1 %190, i1 false) #5, !dbg !5574
  br i1 %191, label %overflow.32bit.i40, label %return.32bit.i42, !dbg !5574

overflow.32bit.i40:                               ; preds = %op.32bit.i36
  %x.64.i37 = sext i32 %188 to i64, !dbg !5575
  %x.641.i38 = sext i32 %y.32.i35 to i64, !dbg !5576
  %z.64.i39 = mul nsw i64 %x.64.i37, %x.641.i38, !dbg !5577
  %192 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i39, 2, !dbg !5577
  br label %tcl.mul.exit273, !dbg !5577

return.32bit.i42:                                 ; preds = %op.32bit.i36
  %z.32.i41 = extractvalue { i32, i1 } %189, 0, !dbg !5578
  %193 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i41, 1, !dbg !5578
  br label %tcl.mul.exit273, !dbg !5578

tcl.int.64.exit.thread.i43:                       ; preds = %check2.i34
  %194 = sext i32 %188 to i64, !dbg !5579
  %195 = extractvalue %INT %x, 2, !dbg !5581
  br label %200, !dbg !5581

tcl.int.64.exit.i45:                              ; preds = %tcl.mul.exit65
  %196 = extractvalue %INT %186, 2, !dbg !5583
  %197 = extractvalue %INT %x, 1, !dbg !5581
  %198 = sext i32 %197 to i64, !dbg !5581
  %199 = extractvalue %INT %x, 2, !dbg !5581
  br i1 %146, label %200, label %202, !dbg !5581

200:                                              ; preds = %tcl.int.64.exit.i45, %tcl.int.64.exit.thread.i43
  %201 = phi i64 [ %195, %tcl.int.64.exit.thread.i43 ], [ %199, %tcl.int.64.exit.i45 ]
  %x.642412.i46 = phi i64 [ %194, %tcl.int.64.exit.thread.i43 ], [ %196, %tcl.int.64.exit.i45 ]
  br label %202, !dbg !5581

202:                                              ; preds = %200, %tcl.int.64.exit.i45
  %x.642411.i47 = phi i64 [ %x.642412.i46, %200 ], [ %196, %tcl.int.64.exit.i45 ]
  %203 = phi i64 [ %201, %200 ], [ %198, %tcl.int.64.exit.i45 ]
  %z.643.i48 = mul i64 %203, %x.642411.i47, !dbg !5584
  %204 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i48, 2, !dbg !5584
  br label %tcl.mul.exit273, !dbg !5584

pow8:                                             ; preds = %enter
  %205 = extractvalue %INT %x, 0, !dbg !5585
  br i1 %205, label %212, label %op.32bit.i20, !dbg !5585

op.32bit.i20:                                     ; preds = %pow8
  %206 = extractvalue %INT %x, 1, !dbg !5587
  %207 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %206, i32 %206) #5, !dbg !5588
  %208 = extractvalue { i32, i1 } %207, 1, !dbg !5589
  %209 = tail call i1 @llvm.expect.i1(i1 %208, i1 false) #5, !dbg !5589
  br i1 %209, label %overflow.32bit.i24, label %return.32bit.i26, !dbg !5589

overflow.32bit.i24:                               ; preds = %op.32bit.i20
  %x.64.i21 = sext i32 %206 to i64, !dbg !5590
  %z.64.i23 = mul nsw i64 %x.64.i21, %x.64.i21, !dbg !5591
  %210 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i23, 2, !dbg !5591
  br label %tcl.mul.exit33, !dbg !5591

return.32bit.i26:                                 ; preds = %op.32bit.i20
  %z.32.i25 = extractvalue { i32, i1 } %207, 0, !dbg !5592
  %211 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i25, 1, !dbg !5592
  br label %tcl.mul.exit33, !dbg !5592

212:                                              ; preds = %pow8
  %213 = extractvalue %INT %x, 2, !dbg !5593
  %z.643.i32 = mul i64 %213, %213, !dbg !5595
  %214 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i32, 2, !dbg !5595
  br label %tcl.mul.exit33, !dbg !5595

tcl.mul.exit33:                                   ; preds = %212, %return.32bit.i26, %overflow.32bit.i24
  %215 = phi %INT [ %210, %overflow.32bit.i24 ], [ %211, %return.32bit.i26 ], [ %214, %212 ]
  %216 = extractvalue %INT %215, 0, !dbg !5596
  br i1 %216, label %223, label %op.32bit.i4, !dbg !5596

op.32bit.i4:                                      ; preds = %tcl.mul.exit33
  %217 = extractvalue %INT %215, 1, !dbg !5598
  %218 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %217, i32 %217) #5, !dbg !5599
  %219 = extractvalue { i32, i1 } %218, 1, !dbg !5600
  %220 = tail call i1 @llvm.expect.i1(i1 %219, i1 false) #5, !dbg !5600
  br i1 %220, label %overflow.32bit.i8, label %return.32bit.i10, !dbg !5600

overflow.32bit.i8:                                ; preds = %op.32bit.i4
  %x.64.i5 = sext i32 %217 to i64, !dbg !5601
  %z.64.i7 = mul nsw i64 %x.64.i5, %x.64.i5, !dbg !5602
  %221 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i7, 2, !dbg !5602
  br label %tcl.mul.exit17, !dbg !5602

return.32bit.i10:                                 ; preds = %op.32bit.i4
  %z.32.i9 = extractvalue { i32, i1 } %218, 0, !dbg !5603
  %222 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i9, 1, !dbg !5603
  br label %tcl.mul.exit17, !dbg !5603

223:                                              ; preds = %tcl.mul.exit33
  %224 = extractvalue %INT %215, 2, !dbg !5604
  %z.643.i16 = mul i64 %224, %224, !dbg !5606
  %225 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i16, 2, !dbg !5606
  br label %tcl.mul.exit17, !dbg !5606

tcl.mul.exit17:                                   ; preds = %223, %return.32bit.i10, %overflow.32bit.i8
  %226 = phi %INT [ %221, %overflow.32bit.i8 ], [ %222, %return.32bit.i10 ], [ %225, %223 ]
  %227 = extractvalue %INT %226, 0, !dbg !5607
  br i1 %227, label %234, label %op.32bit.i, !dbg !5607

op.32bit.i:                                       ; preds = %tcl.mul.exit17
  %228 = extractvalue %INT %226, 1, !dbg !5609
  %229 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %228, i32 %228) #5, !dbg !5610
  %230 = extractvalue { i32, i1 } %229, 1, !dbg !5611
  %231 = tail call i1 @llvm.expect.i1(i1 %230, i1 false) #5, !dbg !5611
  br i1 %231, label %overflow.32bit.i, label %return.32bit.i, !dbg !5611

overflow.32bit.i:                                 ; preds = %op.32bit.i
  %x.64.i = sext i32 %228 to i64, !dbg !5612
  %z.64.i = mul nsw i64 %x.64.i, %x.64.i, !dbg !5613
  %232 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i, 2, !dbg !5613
  br label %tcl.mul.exit273, !dbg !5613

return.32bit.i:                                   ; preds = %op.32bit.i
  %z.32.i = extractvalue { i32, i1 } %229, 0, !dbg !5614
  %233 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i, 1, !dbg !5614
  br label %tcl.mul.exit273, !dbg !5614

234:                                              ; preds = %tcl.mul.exit17
  %235 = extractvalue %INT %226, 2, !dbg !5615
  %z.643.i = mul i64 %235, %235, !dbg !5617
  %236 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i, 2, !dbg !5617
  br label %tcl.mul.exit273, !dbg !5617

loop.bit0.i:                                      ; preds = %enter, %tcl.mul.exit.i
  %result.test27.i = phi %INT [ %result.double31.i, %tcl.mul.exit.i ], [ { i1 true, i32 undef, i64 1 }, %enter ]
  %x.test22.i = phi %INT [ %x.double3.i, %tcl.mul.exit.i ], [ %x, %enter ]
  %n.test21.i = phi i64 [ %n.double1.i, %tcl.mul.exit.i ], [ %4, %enter ]
  %237 = and i64 %n.test21.i, 1, !dbg !5618
  %238 = icmp eq i64 %237, 0, !dbg !5618
  %.pre.i = extractvalue %INT %x.test22.i, 0, !dbg !5620
  br i1 %238, label %loop.bit0.loop.double_crit_edge.i, label %loop.mult.i, !dbg !5618

loop.bit0.loop.double_crit_edge.i:                ; preds = %loop.bit0.i
  br i1 %.pre.i, label %loop.bit0.loop.double_crit_edge.i._crit_edge, label %loop.bit0.loop.double_crit_edge.i.op.32bit.i.i_crit_edge, !dbg !5621

loop.bit0.loop.double_crit_edge.i._crit_edge:     ; preds = %loop.bit0.loop.double_crit_edge.i
  %.pre = extractvalue %INT %x.test22.i, 2, !dbg !5623
  br label %260, !dbg !5621

loop.bit0.loop.double_crit_edge.i.op.32bit.i.i_crit_edge: ; preds = %loop.bit0.loop.double_crit_edge.i
  %.pre274 = extractvalue %INT %x.test22.i, 1, !dbg !5625
  br label %op.32bit.i.i, !dbg !5621

loop.mult.i:                                      ; preds = %loop.bit0.i
  br i1 %.pre.i, label %tcl.int.64.exit.i15.i, label %check2.i4.i, !dbg !5626

check2.i4.i:                                      ; preds = %loop.mult.i
  %239 = extractvalue %INT %result.test27.i, 0, !dbg !5628
  %240 = extractvalue %INT %x.test22.i, 1, !dbg !5629
  br i1 %239, label %loop.double.i, label %op.32bit.i6.i, !dbg !5628

op.32bit.i6.i:                                    ; preds = %check2.i4.i
  %y.32.i5.i = extractvalue %INT %result.test27.i, 1, !dbg !5630
  %241 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %240, i32 %y.32.i5.i) #5, !dbg !5631
  %242 = extractvalue { i32, i1 } %241, 1, !dbg !5632
  %243 = tail call i1 @llvm.expect.i1(i1 %242, i1 false) #5, !dbg !5632
  br i1 %243, label %overflow.32bit.i10.i, label %return.32bit.i12.i, !dbg !5632

overflow.32bit.i10.i:                             ; preds = %op.32bit.i6.i
  %x.64.i7.i = sext i32 %240 to i64, !dbg !5633
  %x.641.i8.i = sext i32 %y.32.i5.i to i64, !dbg !5634
  %z.64.i9.i = mul nsw i64 %x.64.i7.i, %x.641.i8.i, !dbg !5635
  %244 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i9.i, 2, !dbg !5635
  br label %loop.double.thread.i, !dbg !5635

return.32bit.i12.i:                               ; preds = %op.32bit.i6.i
  %z.32.i11.i = extractvalue { i32, i1 } %241, 0, !dbg !5636
  %245 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i11.i, 1, !dbg !5636
  br label %loop.double.thread.i, !dbg !5636

tcl.int.64.exit.i15.i:                            ; preds = %loop.mult.i
  %246 = extractvalue %INT %x.test22.i, 2, !dbg !5637
  %.pre.i14.i = extractvalue %INT %result.test27.i, 0, !dbg !5639
  br i1 %.pre.i14.i, label %loop.double.thread40.i, label %loop.double.thread36.i, !dbg !5639

loop.double.thread40.i:                           ; preds = %tcl.int.64.exit.i15.i
  %247 = extractvalue %INT %result.test27.i, 2, !dbg !5639
  %z.643.i1842.i = mul i64 %246, %247, !dbg !5641
  %248 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i1842.i, 2, !dbg !5641
  %n.mult43.i = add i64 %n.test21.i, -1, !dbg !5642
  br label %260, !dbg !5621

loop.double.thread36.i:                           ; preds = %tcl.int.64.exit.i15.i
  %249 = extractvalue %INT %result.test27.i, 1, !dbg !5639
  %250 = sext i32 %249 to i64, !dbg !5639
  %z.643.i1838.i = mul i64 %246, %250, !dbg !5641
  %251 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i1838.i, 2, !dbg !5641
  %n.mult39.i = add i64 %n.test21.i, -1, !dbg !5642
  br label %260, !dbg !5621

loop.double.thread.i:                             ; preds = %return.32bit.i12.i, %overflow.32bit.i10.i
  %result.mult20.ph.i = phi %INT [ %245, %return.32bit.i12.i ], [ %244, %overflow.32bit.i10.i ]
  %n.mult35.i = add i64 %n.test21.i, -1, !dbg !5642
  br label %op.32bit.i.i, !dbg !5621

loop.double.i:                                    ; preds = %check2.i4.i
  %252 = sext i32 %240 to i64, !dbg !5643
  %253 = extractvalue %INT %result.test27.i, 2, !dbg !5639
  %z.643.i18.i = mul i64 %253, %252, !dbg !5641
  %254 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i18.i, 2, !dbg !5641
  %n.mult.i = add i64 %n.test21.i, -1, !dbg !5642
  br label %op.32bit.i.i

op.32bit.i.i:                                     ; preds = %loop.bit0.loop.double_crit_edge.i.op.32bit.i.i_crit_edge, %loop.double.i, %loop.double.thread.i
  %.pre-phi275 = phi i32 [ %.pre274, %loop.bit0.loop.double_crit_edge.i.op.32bit.i.i_crit_edge ], [ %240, %loop.double.i ], [ %240, %loop.double.thread.i ], !dbg !5625
  %result.double32.i = phi %INT [ %result.test27.i, %loop.bit0.loop.double_crit_edge.i.op.32bit.i.i_crit_edge ], [ %254, %loop.double.i ], [ %result.mult20.ph.i, %loop.double.thread.i ]
  %n.double29.i = phi i64 [ %n.test21.i, %loop.bit0.loop.double_crit_edge.i.op.32bit.i.i_crit_edge ], [ %n.mult.i, %loop.double.i ], [ %n.mult35.i, %loop.double.thread.i ]
  %255 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %.pre-phi275, i32 %.pre-phi275) #5, !dbg !5644
  %256 = extractvalue { i32, i1 } %255, 1, !dbg !5645
  %257 = tail call i1 @llvm.expect.i1(i1 %256, i1 false) #5, !dbg !5645
  br i1 %257, label %overflow.32bit.i.i, label %return.32bit.i.i, !dbg !5645

overflow.32bit.i.i:                               ; preds = %op.32bit.i.i
  %x.64.i.i = sext i32 %.pre-phi275 to i64, !dbg !5646
  %z.64.i.i = mul nsw i64 %x.64.i.i, %x.64.i.i, !dbg !5647
  %258 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i.i, 2, !dbg !5647
  br label %tcl.mul.exit.i, !dbg !5647

return.32bit.i.i:                                 ; preds = %op.32bit.i.i
  %z.32.i.i = extractvalue { i32, i1 } %255, 0, !dbg !5648
  %259 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i.i, 1, !dbg !5648
  br label %tcl.mul.exit.i, !dbg !5648

260:                                              ; preds = %loop.bit0.loop.double_crit_edge.i._crit_edge, %loop.double.thread36.i, %loop.double.thread40.i
  %.pre-phi = phi i64 [ %.pre, %loop.bit0.loop.double_crit_edge.i._crit_edge ], [ %246, %loop.double.thread36.i ], [ %246, %loop.double.thread40.i ], !dbg !5623
  %result.double33.i = phi %INT [ %result.test27.i, %loop.bit0.loop.double_crit_edge.i._crit_edge ], [ %251, %loop.double.thread36.i ], [ %248, %loop.double.thread40.i ]
  %n.double30.i = phi i64 [ %n.test21.i, %loop.bit0.loop.double_crit_edge.i._crit_edge ], [ %n.mult39.i, %loop.double.thread36.i ], [ %n.mult43.i, %loop.double.thread40.i ]
  %z.643.i.i = mul i64 %.pre-phi, %.pre-phi, !dbg !5649
  %261 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i.i, 2, !dbg !5649
  br label %tcl.mul.exit.i, !dbg !5649

tcl.mul.exit.i:                                   ; preds = %260, %return.32bit.i.i, %overflow.32bit.i.i
  %result.double31.i = phi %INT [ %result.double32.i, %overflow.32bit.i.i ], [ %result.double32.i, %return.32bit.i.i ], [ %result.double33.i, %260 ]
  %n.double28.i = phi i64 [ %n.double29.i, %overflow.32bit.i.i ], [ %n.double29.i, %return.32bit.i.i ], [ %n.double30.i, %260 ]
  %x.double3.i = phi %INT [ %258, %overflow.32bit.i.i ], [ %259, %return.32bit.i.i ], [ %261, %260 ]
  %n.double1.i = ashr i64 %n.double28.i, 1, !dbg !5650
  %262 = icmp eq i64 %n.double1.i, 0, !dbg !5651
  br i1 %262, label %tcl.mul.exit273, label %loop.bit0.i, !dbg !5651
}

; Function Attrs: alwaysinline nounwind readnone
define hidden %INT @tcl.ipow64(%INT %x, %INT %y) local_unnamed_addr #1 !dbg !5652 {
enter:
  %0 = extractvalue %INT %y, 0, !dbg !5656
  %1 = extractvalue %INT %y, 1, !dbg !5656
  %2 = sext i32 %1 to i64, !dbg !5656
  %3 = extractvalue %INT %y, 2, !dbg !5656
  %4 = select i1 %0, i64 %3, i64 %2, !dbg !5656
  switch i64 %4, label %loop.bit0.i [
    i64 2, label %pow2
    i64 3, label %pow3
    i64 4, label %pow4
    i64 5, label %pow5
    i64 6, label %pow6
    i64 7, label %pow7
    i64 8, label %pow8
    i64 9, label %pow9
    i64 10, label %pow10
    i64 11, label %pow11
    i64 12, label %pow12
    i64 13, label %pow13
    i64 14, label %pow14
    i64 15, label %pow15
    i64 16, label %pow16
    i64 0, label %tcl.mul.exit865
  ], !dbg !5658

pow2:                                             ; preds = %enter
  %5 = extractvalue %INT %x, 0, !dbg !5659
  br i1 %5, label %12, label %op.32bit.i852, !dbg !5659

op.32bit.i852:                                    ; preds = %pow2
  %6 = extractvalue %INT %x, 1, !dbg !5661
  %7 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %6, i32 %6) #5, !dbg !5662
  %8 = extractvalue { i32, i1 } %7, 1, !dbg !5663
  %9 = tail call i1 @llvm.expect.i1(i1 %8, i1 false) #5, !dbg !5663
  br i1 %9, label %overflow.32bit.i856, label %return.32bit.i858, !dbg !5663

overflow.32bit.i856:                              ; preds = %op.32bit.i852
  %x.64.i853 = sext i32 %6 to i64, !dbg !5664
  %z.64.i855 = mul nsw i64 %x.64.i853, %x.64.i853, !dbg !5665
  %10 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i855, 2, !dbg !5665
  br label %tcl.mul.exit865, !dbg !5665

return.32bit.i858:                                ; preds = %op.32bit.i852
  %z.32.i857 = extractvalue { i32, i1 } %7, 0, !dbg !5666
  %11 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i857, 1, !dbg !5666
  br label %tcl.mul.exit865, !dbg !5666

12:                                               ; preds = %pow2
  %13 = extractvalue %INT %x, 2, !dbg !5667
  %z.643.i864 = mul i64 %13, %13, !dbg !5669
  %14 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i864, 2, !dbg !5669
  br label %tcl.mul.exit865, !dbg !5669

tcl.mul.exit865:                                  ; preds = %tcl.mul.exit.i, %enter, %overflow.32bit.i, %return.32bit.i, %729, %overflow.32bit.i56, %return.32bit.i58, %686, %overflow.32bit.i152, %return.32bit.i154, %597, %overflow.32bit.i232, %return.32bit.i234, %527, %overflow.32bit.i312, %return.32bit.i314, %457, %overflow.32bit.i376, %return.32bit.i378, %406, %overflow.32bit.i456, %return.32bit.i458, %336, %overflow.32bit.i520, %return.32bit.i522, %285, %overflow.32bit.i584, %return.32bit.i586, %234, %overflow.32bit.i632, %return.32bit.i634, %202, %overflow.32bit.i696, %return.32bit.i698, %143, %overflow.32bit.i744, %return.32bit.i746, %103, %overflow.32bit.i792, %return.32bit.i794, %63, %overflow.32bit.i824, %return.32bit.i826, %42, %12, %return.32bit.i858, %overflow.32bit.i856
  %15 = phi %INT [ %10, %overflow.32bit.i856 ], [ %11, %return.32bit.i858 ], [ %14, %12 ], [ %32, %overflow.32bit.i824 ], [ %33, %return.32bit.i826 ], [ %44, %42 ], [ %61, %overflow.32bit.i792 ], [ %62, %return.32bit.i794 ], [ %65, %63 ], [ %93, %overflow.32bit.i744 ], [ %94, %return.32bit.i746 ], [ %105, %103 ], [ %141, %overflow.32bit.i696 ], [ %142, %return.32bit.i698 ], [ %145, %143 ], [ %192, %overflow.32bit.i632 ], [ %193, %return.32bit.i634 ], [ %204, %202 ], [ %232, %overflow.32bit.i584 ], [ %233, %return.32bit.i586 ], [ %236, %234 ], [ %275, %overflow.32bit.i520 ], [ %276, %return.32bit.i522 ], [ %287, %285 ], [ %334, %overflow.32bit.i456 ], [ %335, %return.32bit.i458 ], [ %338, %336 ], [ %396, %overflow.32bit.i376 ], [ %397, %return.32bit.i378 ], [ %408, %406 ], [ %455, %overflow.32bit.i312 ], [ %456, %return.32bit.i314 ], [ %459, %457 ], [ %517, %overflow.32bit.i232 ], [ %518, %return.32bit.i234 ], [ %529, %527 ], [ %595, %overflow.32bit.i152 ], [ %596, %return.32bit.i154 ], [ %599, %597 ], [ %676, %overflow.32bit.i56 ], [ %677, %return.32bit.i58 ], [ %688, %686 ], [ %727, %overflow.32bit.i ], [ %728, %return.32bit.i ], [ %731, %729 ], [ { i1 true, i32 undef, i64 1 }, %enter ], [ %result.double31.i, %tcl.mul.exit.i ]
  ret %INT %15, !dbg !5670

pow3:                                             ; preds = %enter
  %16 = extractvalue %INT %x, 0, !dbg !5671
  br i1 %16, label %23, label %op.32bit.i836, !dbg !5671

op.32bit.i836:                                    ; preds = %pow3
  %17 = extractvalue %INT %x, 1, !dbg !5673
  %18 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %17, i32 %17) #5, !dbg !5674
  %19 = extractvalue { i32, i1 } %18, 1, !dbg !5675
  %20 = tail call i1 @llvm.expect.i1(i1 %19, i1 false) #5, !dbg !5675
  br i1 %20, label %overflow.32bit.i840, label %return.32bit.i842, !dbg !5675

overflow.32bit.i840:                              ; preds = %op.32bit.i836
  %x.64.i837 = sext i32 %17 to i64, !dbg !5676
  %z.64.i839 = mul nsw i64 %x.64.i837, %x.64.i837, !dbg !5677
  %21 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i839, 2, !dbg !5677
  br label %tcl.mul.exit849, !dbg !5677

return.32bit.i842:                                ; preds = %op.32bit.i836
  %z.32.i841 = extractvalue { i32, i1 } %18, 0, !dbg !5678
  %22 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i841, 1, !dbg !5678
  br label %tcl.mul.exit849, !dbg !5678

23:                                               ; preds = %pow3
  %24 = extractvalue %INT %x, 2, !dbg !5679
  %z.643.i848 = mul i64 %24, %24, !dbg !5681
  %25 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i848, 2, !dbg !5681
  br label %tcl.mul.exit849, !dbg !5681

tcl.mul.exit849:                                  ; preds = %23, %return.32bit.i842, %overflow.32bit.i840
  %26 = phi %INT [ %21, %overflow.32bit.i840 ], [ %22, %return.32bit.i842 ], [ %25, %23 ]
  %27 = extractvalue %INT %26, 0, !dbg !5682
  br i1 %27, label %tcl.int.64.exit.i829, label %check2.i818, !dbg !5682

check2.i818:                                      ; preds = %tcl.mul.exit849
  %28 = extractvalue %INT %26, 1, !dbg !5684
  br i1 %16, label %tcl.int.64.exit.thread.i827, label %op.32bit.i820, !dbg !5685

op.32bit.i820:                                    ; preds = %check2.i818
  %y.32.i819 = extractvalue %INT %x, 1, !dbg !5686
  %29 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %28, i32 %y.32.i819) #5, !dbg !5687
  %30 = extractvalue { i32, i1 } %29, 1, !dbg !5688
  %31 = tail call i1 @llvm.expect.i1(i1 %30, i1 false) #5, !dbg !5688
  br i1 %31, label %overflow.32bit.i824, label %return.32bit.i826, !dbg !5688

overflow.32bit.i824:                              ; preds = %op.32bit.i820
  %x.64.i821 = sext i32 %28 to i64, !dbg !5689
  %x.641.i822 = sext i32 %y.32.i819 to i64, !dbg !5690
  %z.64.i823 = mul nsw i64 %x.64.i821, %x.641.i822, !dbg !5691
  %32 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i823, 2, !dbg !5691
  br label %tcl.mul.exit865, !dbg !5691

return.32bit.i826:                                ; preds = %op.32bit.i820
  %z.32.i825 = extractvalue { i32, i1 } %29, 0, !dbg !5692
  %33 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i825, 1, !dbg !5692
  br label %tcl.mul.exit865, !dbg !5692

tcl.int.64.exit.thread.i827:                      ; preds = %check2.i818
  %34 = sext i32 %28 to i64, !dbg !5693
  %35 = extractvalue %INT %x, 2, !dbg !5695
  br label %40, !dbg !5695

tcl.int.64.exit.i829:                             ; preds = %tcl.mul.exit849
  %36 = extractvalue %INT %26, 2, !dbg !5697
  %37 = extractvalue %INT %x, 1, !dbg !5695
  %38 = sext i32 %37 to i64, !dbg !5695
  %39 = extractvalue %INT %x, 2, !dbg !5695
  br i1 %16, label %40, label %42, !dbg !5695

40:                                               ; preds = %tcl.int.64.exit.i829, %tcl.int.64.exit.thread.i827
  %41 = phi i64 [ %35, %tcl.int.64.exit.thread.i827 ], [ %39, %tcl.int.64.exit.i829 ]
  %x.642412.i830 = phi i64 [ %34, %tcl.int.64.exit.thread.i827 ], [ %36, %tcl.int.64.exit.i829 ]
  br label %42, !dbg !5695

42:                                               ; preds = %40, %tcl.int.64.exit.i829
  %x.642411.i831 = phi i64 [ %x.642412.i830, %40 ], [ %36, %tcl.int.64.exit.i829 ]
  %43 = phi i64 [ %41, %40 ], [ %38, %tcl.int.64.exit.i829 ]
  %z.643.i832 = mul i64 %43, %x.642411.i831, !dbg !5698
  %44 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i832, 2, !dbg !5698
  br label %tcl.mul.exit865, !dbg !5698

pow4:                                             ; preds = %enter
  %45 = extractvalue %INT %x, 0, !dbg !5699
  br i1 %45, label %52, label %op.32bit.i804, !dbg !5699

op.32bit.i804:                                    ; preds = %pow4
  %46 = extractvalue %INT %x, 1, !dbg !5701
  %47 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %46, i32 %46) #5, !dbg !5702
  %48 = extractvalue { i32, i1 } %47, 1, !dbg !5703
  %49 = tail call i1 @llvm.expect.i1(i1 %48, i1 false) #5, !dbg !5703
  br i1 %49, label %overflow.32bit.i808, label %return.32bit.i810, !dbg !5703

overflow.32bit.i808:                              ; preds = %op.32bit.i804
  %x.64.i805 = sext i32 %46 to i64, !dbg !5704
  %z.64.i807 = mul nsw i64 %x.64.i805, %x.64.i805, !dbg !5705
  %50 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i807, 2, !dbg !5705
  br label %tcl.mul.exit817, !dbg !5705

return.32bit.i810:                                ; preds = %op.32bit.i804
  %z.32.i809 = extractvalue { i32, i1 } %47, 0, !dbg !5706
  %51 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i809, 1, !dbg !5706
  br label %tcl.mul.exit817, !dbg !5706

52:                                               ; preds = %pow4
  %53 = extractvalue %INT %x, 2, !dbg !5707
  %z.643.i816 = mul i64 %53, %53, !dbg !5709
  %54 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i816, 2, !dbg !5709
  br label %tcl.mul.exit817, !dbg !5709

tcl.mul.exit817:                                  ; preds = %52, %return.32bit.i810, %overflow.32bit.i808
  %55 = phi %INT [ %50, %overflow.32bit.i808 ], [ %51, %return.32bit.i810 ], [ %54, %52 ]
  %56 = extractvalue %INT %55, 0, !dbg !5710
  br i1 %56, label %63, label %op.32bit.i788, !dbg !5710

op.32bit.i788:                                    ; preds = %tcl.mul.exit817
  %57 = extractvalue %INT %55, 1, !dbg !5712
  %58 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %57, i32 %57) #5, !dbg !5713
  %59 = extractvalue { i32, i1 } %58, 1, !dbg !5714
  %60 = tail call i1 @llvm.expect.i1(i1 %59, i1 false) #5, !dbg !5714
  br i1 %60, label %overflow.32bit.i792, label %return.32bit.i794, !dbg !5714

overflow.32bit.i792:                              ; preds = %op.32bit.i788
  %x.64.i789 = sext i32 %57 to i64, !dbg !5715
  %z.64.i791 = mul nsw i64 %x.64.i789, %x.64.i789, !dbg !5716
  %61 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i791, 2, !dbg !5716
  br label %tcl.mul.exit865, !dbg !5716

return.32bit.i794:                                ; preds = %op.32bit.i788
  %z.32.i793 = extractvalue { i32, i1 } %58, 0, !dbg !5717
  %62 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i793, 1, !dbg !5717
  br label %tcl.mul.exit865, !dbg !5717

63:                                               ; preds = %tcl.mul.exit817
  %64 = extractvalue %INT %55, 2, !dbg !5718
  %z.643.i800 = mul i64 %64, %64, !dbg !5720
  %65 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i800, 2, !dbg !5720
  br label %tcl.mul.exit865, !dbg !5720

pow5:                                             ; preds = %enter
  %66 = extractvalue %INT %x, 0, !dbg !5721
  br i1 %66, label %73, label %op.32bit.i772, !dbg !5721

op.32bit.i772:                                    ; preds = %pow5
  %67 = extractvalue %INT %x, 1, !dbg !5723
  %68 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %67, i32 %67) #5, !dbg !5724
  %69 = extractvalue { i32, i1 } %68, 1, !dbg !5725
  %70 = tail call i1 @llvm.expect.i1(i1 %69, i1 false) #5, !dbg !5725
  br i1 %70, label %overflow.32bit.i776, label %return.32bit.i778, !dbg !5725

overflow.32bit.i776:                              ; preds = %op.32bit.i772
  %x.64.i773 = sext i32 %67 to i64, !dbg !5726
  %z.64.i775 = mul nsw i64 %x.64.i773, %x.64.i773, !dbg !5727
  %71 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i775, 2, !dbg !5727
  br label %tcl.mul.exit785, !dbg !5727

return.32bit.i778:                                ; preds = %op.32bit.i772
  %z.32.i777 = extractvalue { i32, i1 } %68, 0, !dbg !5728
  %72 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i777, 1, !dbg !5728
  br label %tcl.mul.exit785, !dbg !5728

73:                                               ; preds = %pow5
  %74 = extractvalue %INT %x, 2, !dbg !5729
  %z.643.i784 = mul i64 %74, %74, !dbg !5731
  %75 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i784, 2, !dbg !5731
  br label %tcl.mul.exit785, !dbg !5731

tcl.mul.exit785:                                  ; preds = %73, %return.32bit.i778, %overflow.32bit.i776
  %76 = phi %INT [ %71, %overflow.32bit.i776 ], [ %72, %return.32bit.i778 ], [ %75, %73 ]
  %77 = extractvalue %INT %76, 0, !dbg !5732
  br i1 %77, label %84, label %op.32bit.i756, !dbg !5732

op.32bit.i756:                                    ; preds = %tcl.mul.exit785
  %78 = extractvalue %INT %76, 1, !dbg !5734
  %79 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %78, i32 %78) #5, !dbg !5735
  %80 = extractvalue { i32, i1 } %79, 1, !dbg !5736
  %81 = tail call i1 @llvm.expect.i1(i1 %80, i1 false) #5, !dbg !5736
  br i1 %81, label %overflow.32bit.i760, label %return.32bit.i762, !dbg !5736

overflow.32bit.i760:                              ; preds = %op.32bit.i756
  %x.64.i757 = sext i32 %78 to i64, !dbg !5737
  %z.64.i759 = mul nsw i64 %x.64.i757, %x.64.i757, !dbg !5738
  %82 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i759, 2, !dbg !5738
  br label %tcl.mul.exit769, !dbg !5738

return.32bit.i762:                                ; preds = %op.32bit.i756
  %z.32.i761 = extractvalue { i32, i1 } %79, 0, !dbg !5739
  %83 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i761, 1, !dbg !5739
  br label %tcl.mul.exit769, !dbg !5739

84:                                               ; preds = %tcl.mul.exit785
  %85 = extractvalue %INT %76, 2, !dbg !5740
  %z.643.i768 = mul i64 %85, %85, !dbg !5742
  %86 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i768, 2, !dbg !5742
  br label %tcl.mul.exit769, !dbg !5742

tcl.mul.exit769:                                  ; preds = %84, %return.32bit.i762, %overflow.32bit.i760
  %87 = phi %INT [ %82, %overflow.32bit.i760 ], [ %83, %return.32bit.i762 ], [ %86, %84 ]
  %88 = extractvalue %INT %87, 0, !dbg !5743
  br i1 %88, label %tcl.int.64.exit.i749, label %check2.i738, !dbg !5743

check2.i738:                                      ; preds = %tcl.mul.exit769
  %89 = extractvalue %INT %87, 1, !dbg !5745
  br i1 %66, label %tcl.int.64.exit.thread.i747, label %op.32bit.i740, !dbg !5746

op.32bit.i740:                                    ; preds = %check2.i738
  %y.32.i739 = extractvalue %INT %x, 1, !dbg !5747
  %90 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %89, i32 %y.32.i739) #5, !dbg !5748
  %91 = extractvalue { i32, i1 } %90, 1, !dbg !5749
  %92 = tail call i1 @llvm.expect.i1(i1 %91, i1 false) #5, !dbg !5749
  br i1 %92, label %overflow.32bit.i744, label %return.32bit.i746, !dbg !5749

overflow.32bit.i744:                              ; preds = %op.32bit.i740
  %x.64.i741 = sext i32 %89 to i64, !dbg !5750
  %x.641.i742 = sext i32 %y.32.i739 to i64, !dbg !5751
  %z.64.i743 = mul nsw i64 %x.64.i741, %x.641.i742, !dbg !5752
  %93 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i743, 2, !dbg !5752
  br label %tcl.mul.exit865, !dbg !5752

return.32bit.i746:                                ; preds = %op.32bit.i740
  %z.32.i745 = extractvalue { i32, i1 } %90, 0, !dbg !5753
  %94 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i745, 1, !dbg !5753
  br label %tcl.mul.exit865, !dbg !5753

tcl.int.64.exit.thread.i747:                      ; preds = %check2.i738
  %95 = sext i32 %89 to i64, !dbg !5754
  %96 = extractvalue %INT %x, 2, !dbg !5756
  br label %101, !dbg !5756

tcl.int.64.exit.i749:                             ; preds = %tcl.mul.exit769
  %97 = extractvalue %INT %87, 2, !dbg !5758
  %98 = extractvalue %INT %x, 1, !dbg !5756
  %99 = sext i32 %98 to i64, !dbg !5756
  %100 = extractvalue %INT %x, 2, !dbg !5756
  br i1 %66, label %101, label %103, !dbg !5756

101:                                              ; preds = %tcl.int.64.exit.i749, %tcl.int.64.exit.thread.i747
  %102 = phi i64 [ %96, %tcl.int.64.exit.thread.i747 ], [ %100, %tcl.int.64.exit.i749 ]
  %x.642412.i750 = phi i64 [ %95, %tcl.int.64.exit.thread.i747 ], [ %97, %tcl.int.64.exit.i749 ]
  br label %103, !dbg !5756

103:                                              ; preds = %101, %tcl.int.64.exit.i749
  %x.642411.i751 = phi i64 [ %x.642412.i750, %101 ], [ %97, %tcl.int.64.exit.i749 ]
  %104 = phi i64 [ %102, %101 ], [ %99, %tcl.int.64.exit.i749 ]
  %z.643.i752 = mul i64 %104, %x.642411.i751, !dbg !5759
  %105 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i752, 2, !dbg !5759
  br label %tcl.mul.exit865, !dbg !5759

pow6:                                             ; preds = %enter
  %106 = extractvalue %INT %x, 0, !dbg !5760
  br i1 %106, label %113, label %op.32bit.i724, !dbg !5760

op.32bit.i724:                                    ; preds = %pow6
  %107 = extractvalue %INT %x, 1, !dbg !5762
  %108 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %107, i32 %107) #5, !dbg !5763
  %109 = extractvalue { i32, i1 } %108, 1, !dbg !5764
  %110 = tail call i1 @llvm.expect.i1(i1 %109, i1 false) #5, !dbg !5764
  br i1 %110, label %overflow.32bit.i728, label %return.32bit.i730, !dbg !5764

overflow.32bit.i728:                              ; preds = %op.32bit.i724
  %x.64.i725 = sext i32 %107 to i64, !dbg !5765
  %z.64.i727 = mul nsw i64 %x.64.i725, %x.64.i725, !dbg !5766
  %111 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i727, 2, !dbg !5766
  br label %tcl.mul.exit737, !dbg !5766

return.32bit.i730:                                ; preds = %op.32bit.i724
  %z.32.i729 = extractvalue { i32, i1 } %108, 0, !dbg !5767
  %112 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i729, 1, !dbg !5767
  br label %tcl.mul.exit737, !dbg !5767

113:                                              ; preds = %pow6
  %114 = extractvalue %INT %x, 2, !dbg !5768
  %z.643.i736 = mul i64 %114, %114, !dbg !5770
  %115 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i736, 2, !dbg !5770
  br label %tcl.mul.exit737, !dbg !5770

tcl.mul.exit737:                                  ; preds = %113, %return.32bit.i730, %overflow.32bit.i728
  %116 = phi %INT [ %111, %overflow.32bit.i728 ], [ %112, %return.32bit.i730 ], [ %115, %113 ]
  %117 = extractvalue %INT %116, 0, !dbg !5771
  br i1 %117, label %tcl.int.64.exit.i717, label %check2.i706, !dbg !5771

check2.i706:                                      ; preds = %tcl.mul.exit737
  %118 = extractvalue %INT %116, 1, !dbg !5773
  br i1 %106, label %tcl.int.64.exit.thread.i715, label %op.32bit.i708, !dbg !5774

op.32bit.i708:                                    ; preds = %check2.i706
  %y.32.i707 = extractvalue %INT %x, 1, !dbg !5775
  %119 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %118, i32 %y.32.i707) #5, !dbg !5776
  %120 = extractvalue { i32, i1 } %119, 1, !dbg !5777
  %121 = tail call i1 @llvm.expect.i1(i1 %120, i1 false) #5, !dbg !5777
  br i1 %121, label %overflow.32bit.i712, label %return.32bit.i714, !dbg !5777

overflow.32bit.i712:                              ; preds = %op.32bit.i708
  %x.64.i709 = sext i32 %118 to i64, !dbg !5778
  %x.641.i710 = sext i32 %y.32.i707 to i64, !dbg !5779
  %z.64.i711 = mul nsw i64 %x.64.i709, %x.641.i710, !dbg !5780
  %122 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i711, 2, !dbg !5780
  br label %tcl.mul.exit721, !dbg !5780

return.32bit.i714:                                ; preds = %op.32bit.i708
  %z.32.i713 = extractvalue { i32, i1 } %119, 0, !dbg !5781
  %123 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i713, 1, !dbg !5781
  br label %tcl.mul.exit721, !dbg !5781

tcl.int.64.exit.thread.i715:                      ; preds = %check2.i706
  %124 = sext i32 %118 to i64, !dbg !5782
  %125 = extractvalue %INT %x, 2, !dbg !5784
  br label %130, !dbg !5784

tcl.int.64.exit.i717:                             ; preds = %tcl.mul.exit737
  %126 = extractvalue %INT %116, 2, !dbg !5786
  %127 = extractvalue %INT %x, 1, !dbg !5784
  %128 = sext i32 %127 to i64, !dbg !5784
  %129 = extractvalue %INT %x, 2, !dbg !5784
  br i1 %106, label %130, label %132, !dbg !5784

130:                                              ; preds = %tcl.int.64.exit.i717, %tcl.int.64.exit.thread.i715
  %131 = phi i64 [ %125, %tcl.int.64.exit.thread.i715 ], [ %129, %tcl.int.64.exit.i717 ]
  %x.642412.i718 = phi i64 [ %124, %tcl.int.64.exit.thread.i715 ], [ %126, %tcl.int.64.exit.i717 ]
  br label %132, !dbg !5784

132:                                              ; preds = %130, %tcl.int.64.exit.i717
  %x.642411.i719 = phi i64 [ %x.642412.i718, %130 ], [ %126, %tcl.int.64.exit.i717 ]
  %133 = phi i64 [ %131, %130 ], [ %128, %tcl.int.64.exit.i717 ]
  %z.643.i720 = mul i64 %133, %x.642411.i719, !dbg !5787
  %134 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i720, 2, !dbg !5787
  br label %tcl.mul.exit721, !dbg !5787

tcl.mul.exit721:                                  ; preds = %132, %return.32bit.i714, %overflow.32bit.i712
  %135 = phi %INT [ %122, %overflow.32bit.i712 ], [ %123, %return.32bit.i714 ], [ %134, %132 ]
  %136 = extractvalue %INT %135, 0, !dbg !5788
  br i1 %136, label %143, label %op.32bit.i692, !dbg !5788

op.32bit.i692:                                    ; preds = %tcl.mul.exit721
  %137 = extractvalue %INT %135, 1, !dbg !5790
  %138 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %137, i32 %137) #5, !dbg !5791
  %139 = extractvalue { i32, i1 } %138, 1, !dbg !5792
  %140 = tail call i1 @llvm.expect.i1(i1 %139, i1 false) #5, !dbg !5792
  br i1 %140, label %overflow.32bit.i696, label %return.32bit.i698, !dbg !5792

overflow.32bit.i696:                              ; preds = %op.32bit.i692
  %x.64.i693 = sext i32 %137 to i64, !dbg !5793
  %z.64.i695 = mul nsw i64 %x.64.i693, %x.64.i693, !dbg !5794
  %141 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i695, 2, !dbg !5794
  br label %tcl.mul.exit865, !dbg !5794

return.32bit.i698:                                ; preds = %op.32bit.i692
  %z.32.i697 = extractvalue { i32, i1 } %138, 0, !dbg !5795
  %142 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i697, 1, !dbg !5795
  br label %tcl.mul.exit865, !dbg !5795

143:                                              ; preds = %tcl.mul.exit721
  %144 = extractvalue %INT %135, 2, !dbg !5796
  %z.643.i704 = mul i64 %144, %144, !dbg !5798
  %145 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i704, 2, !dbg !5798
  br label %tcl.mul.exit865, !dbg !5798

pow7:                                             ; preds = %enter
  %146 = extractvalue %INT %x, 0, !dbg !5799
  br i1 %146, label %153, label %op.32bit.i676, !dbg !5799

op.32bit.i676:                                    ; preds = %pow7
  %147 = extractvalue %INT %x, 1, !dbg !5801
  %148 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %147, i32 %147) #5, !dbg !5802
  %149 = extractvalue { i32, i1 } %148, 1, !dbg !5803
  %150 = tail call i1 @llvm.expect.i1(i1 %149, i1 false) #5, !dbg !5803
  br i1 %150, label %overflow.32bit.i680, label %return.32bit.i682, !dbg !5803

overflow.32bit.i680:                              ; preds = %op.32bit.i676
  %x.64.i677 = sext i32 %147 to i64, !dbg !5804
  %z.64.i679 = mul nsw i64 %x.64.i677, %x.64.i677, !dbg !5805
  %151 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i679, 2, !dbg !5805
  br label %tcl.mul.exit689, !dbg !5805

return.32bit.i682:                                ; preds = %op.32bit.i676
  %z.32.i681 = extractvalue { i32, i1 } %148, 0, !dbg !5806
  %152 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i681, 1, !dbg !5806
  br label %tcl.mul.exit689, !dbg !5806

153:                                              ; preds = %pow7
  %154 = extractvalue %INT %x, 2, !dbg !5807
  %z.643.i688 = mul i64 %154, %154, !dbg !5809
  %155 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i688, 2, !dbg !5809
  br label %tcl.mul.exit689, !dbg !5809

tcl.mul.exit689:                                  ; preds = %153, %return.32bit.i682, %overflow.32bit.i680
  %156 = phi %INT [ %151, %overflow.32bit.i680 ], [ %152, %return.32bit.i682 ], [ %155, %153 ]
  %157 = extractvalue %INT %156, 0, !dbg !5810
  br i1 %157, label %tcl.int.64.exit.i669, label %check2.i658, !dbg !5810

check2.i658:                                      ; preds = %tcl.mul.exit689
  %158 = extractvalue %INT %156, 1, !dbg !5812
  br i1 %146, label %tcl.int.64.exit.thread.i667, label %op.32bit.i660, !dbg !5813

op.32bit.i660:                                    ; preds = %check2.i658
  %y.32.i659 = extractvalue %INT %x, 1, !dbg !5814
  %159 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %158, i32 %y.32.i659) #5, !dbg !5815
  %160 = extractvalue { i32, i1 } %159, 1, !dbg !5816
  %161 = tail call i1 @llvm.expect.i1(i1 %160, i1 false) #5, !dbg !5816
  br i1 %161, label %overflow.32bit.i664, label %return.32bit.i666, !dbg !5816

overflow.32bit.i664:                              ; preds = %op.32bit.i660
  %x.64.i661 = sext i32 %158 to i64, !dbg !5817
  %x.641.i662 = sext i32 %y.32.i659 to i64, !dbg !5818
  %z.64.i663 = mul nsw i64 %x.64.i661, %x.641.i662, !dbg !5819
  %162 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i663, 2, !dbg !5819
  br label %tcl.mul.exit673, !dbg !5819

return.32bit.i666:                                ; preds = %op.32bit.i660
  %z.32.i665 = extractvalue { i32, i1 } %159, 0, !dbg !5820
  %163 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i665, 1, !dbg !5820
  br label %tcl.mul.exit673, !dbg !5820

tcl.int.64.exit.thread.i667:                      ; preds = %check2.i658
  %164 = sext i32 %158 to i64, !dbg !5821
  %165 = extractvalue %INT %x, 2, !dbg !5823
  br label %170, !dbg !5823

tcl.int.64.exit.i669:                             ; preds = %tcl.mul.exit689
  %166 = extractvalue %INT %156, 2, !dbg !5825
  %167 = extractvalue %INT %x, 1, !dbg !5823
  %168 = sext i32 %167 to i64, !dbg !5823
  %169 = extractvalue %INT %x, 2, !dbg !5823
  br i1 %146, label %170, label %172, !dbg !5823

170:                                              ; preds = %tcl.int.64.exit.i669, %tcl.int.64.exit.thread.i667
  %171 = phi i64 [ %165, %tcl.int.64.exit.thread.i667 ], [ %169, %tcl.int.64.exit.i669 ]
  %x.642412.i670 = phi i64 [ %164, %tcl.int.64.exit.thread.i667 ], [ %166, %tcl.int.64.exit.i669 ]
  br label %172, !dbg !5823

172:                                              ; preds = %170, %tcl.int.64.exit.i669
  %x.642411.i671 = phi i64 [ %x.642412.i670, %170 ], [ %166, %tcl.int.64.exit.i669 ]
  %173 = phi i64 [ %171, %170 ], [ %168, %tcl.int.64.exit.i669 ]
  %z.643.i672 = mul i64 %173, %x.642411.i671, !dbg !5826
  %174 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i672, 2, !dbg !5826
  br label %tcl.mul.exit673, !dbg !5826

tcl.mul.exit673:                                  ; preds = %172, %return.32bit.i666, %overflow.32bit.i664
  %175 = phi %INT [ %162, %overflow.32bit.i664 ], [ %163, %return.32bit.i666 ], [ %174, %172 ]
  %176 = extractvalue %INT %175, 0, !dbg !5827
  br i1 %176, label %183, label %op.32bit.i644, !dbg !5827

op.32bit.i644:                                    ; preds = %tcl.mul.exit673
  %177 = extractvalue %INT %175, 1, !dbg !5829
  %178 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %177, i32 %177) #5, !dbg !5830
  %179 = extractvalue { i32, i1 } %178, 1, !dbg !5831
  %180 = tail call i1 @llvm.expect.i1(i1 %179, i1 false) #5, !dbg !5831
  br i1 %180, label %overflow.32bit.i648, label %return.32bit.i650, !dbg !5831

overflow.32bit.i648:                              ; preds = %op.32bit.i644
  %x.64.i645 = sext i32 %177 to i64, !dbg !5832
  %z.64.i647 = mul nsw i64 %x.64.i645, %x.64.i645, !dbg !5833
  %181 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i647, 2, !dbg !5833
  br label %tcl.mul.exit657, !dbg !5833

return.32bit.i650:                                ; preds = %op.32bit.i644
  %z.32.i649 = extractvalue { i32, i1 } %178, 0, !dbg !5834
  %182 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i649, 1, !dbg !5834
  br label %tcl.mul.exit657, !dbg !5834

183:                                              ; preds = %tcl.mul.exit673
  %184 = extractvalue %INT %175, 2, !dbg !5835
  %z.643.i656 = mul i64 %184, %184, !dbg !5837
  %185 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i656, 2, !dbg !5837
  br label %tcl.mul.exit657, !dbg !5837

tcl.mul.exit657:                                  ; preds = %183, %return.32bit.i650, %overflow.32bit.i648
  %186 = phi %INT [ %181, %overflow.32bit.i648 ], [ %182, %return.32bit.i650 ], [ %185, %183 ]
  %187 = extractvalue %INT %186, 0, !dbg !5838
  br i1 %187, label %tcl.int.64.exit.i637, label %check2.i626, !dbg !5838

check2.i626:                                      ; preds = %tcl.mul.exit657
  %188 = extractvalue %INT %186, 1, !dbg !5840
  br i1 %146, label %tcl.int.64.exit.thread.i635, label %op.32bit.i628, !dbg !5841

op.32bit.i628:                                    ; preds = %check2.i626
  %y.32.i627 = extractvalue %INT %x, 1, !dbg !5842
  %189 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %188, i32 %y.32.i627) #5, !dbg !5843
  %190 = extractvalue { i32, i1 } %189, 1, !dbg !5844
  %191 = tail call i1 @llvm.expect.i1(i1 %190, i1 false) #5, !dbg !5844
  br i1 %191, label %overflow.32bit.i632, label %return.32bit.i634, !dbg !5844

overflow.32bit.i632:                              ; preds = %op.32bit.i628
  %x.64.i629 = sext i32 %188 to i64, !dbg !5845
  %x.641.i630 = sext i32 %y.32.i627 to i64, !dbg !5846
  %z.64.i631 = mul nsw i64 %x.64.i629, %x.641.i630, !dbg !5847
  %192 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i631, 2, !dbg !5847
  br label %tcl.mul.exit865, !dbg !5847

return.32bit.i634:                                ; preds = %op.32bit.i628
  %z.32.i633 = extractvalue { i32, i1 } %189, 0, !dbg !5848
  %193 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i633, 1, !dbg !5848
  br label %tcl.mul.exit865, !dbg !5848

tcl.int.64.exit.thread.i635:                      ; preds = %check2.i626
  %194 = sext i32 %188 to i64, !dbg !5849
  %195 = extractvalue %INT %x, 2, !dbg !5851
  br label %200, !dbg !5851

tcl.int.64.exit.i637:                             ; preds = %tcl.mul.exit657
  %196 = extractvalue %INT %186, 2, !dbg !5853
  %197 = extractvalue %INT %x, 1, !dbg !5851
  %198 = sext i32 %197 to i64, !dbg !5851
  %199 = extractvalue %INT %x, 2, !dbg !5851
  br i1 %146, label %200, label %202, !dbg !5851

200:                                              ; preds = %tcl.int.64.exit.i637, %tcl.int.64.exit.thread.i635
  %201 = phi i64 [ %195, %tcl.int.64.exit.thread.i635 ], [ %199, %tcl.int.64.exit.i637 ]
  %x.642412.i638 = phi i64 [ %194, %tcl.int.64.exit.thread.i635 ], [ %196, %tcl.int.64.exit.i637 ]
  br label %202, !dbg !5851

202:                                              ; preds = %200, %tcl.int.64.exit.i637
  %x.642411.i639 = phi i64 [ %x.642412.i638, %200 ], [ %196, %tcl.int.64.exit.i637 ]
  %203 = phi i64 [ %201, %200 ], [ %198, %tcl.int.64.exit.i637 ]
  %z.643.i640 = mul i64 %203, %x.642411.i639, !dbg !5854
  %204 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i640, 2, !dbg !5854
  br label %tcl.mul.exit865, !dbg !5854

pow8:                                             ; preds = %enter
  %205 = extractvalue %INT %x, 0, !dbg !5855
  br i1 %205, label %212, label %op.32bit.i612, !dbg !5855

op.32bit.i612:                                    ; preds = %pow8
  %206 = extractvalue %INT %x, 1, !dbg !5857
  %207 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %206, i32 %206) #5, !dbg !5858
  %208 = extractvalue { i32, i1 } %207, 1, !dbg !5859
  %209 = tail call i1 @llvm.expect.i1(i1 %208, i1 false) #5, !dbg !5859
  br i1 %209, label %overflow.32bit.i616, label %return.32bit.i618, !dbg !5859

overflow.32bit.i616:                              ; preds = %op.32bit.i612
  %x.64.i613 = sext i32 %206 to i64, !dbg !5860
  %z.64.i615 = mul nsw i64 %x.64.i613, %x.64.i613, !dbg !5861
  %210 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i615, 2, !dbg !5861
  br label %tcl.mul.exit625, !dbg !5861

return.32bit.i618:                                ; preds = %op.32bit.i612
  %z.32.i617 = extractvalue { i32, i1 } %207, 0, !dbg !5862
  %211 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i617, 1, !dbg !5862
  br label %tcl.mul.exit625, !dbg !5862

212:                                              ; preds = %pow8
  %213 = extractvalue %INT %x, 2, !dbg !5863
  %z.643.i624 = mul i64 %213, %213, !dbg !5865
  %214 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i624, 2, !dbg !5865
  br label %tcl.mul.exit625, !dbg !5865

tcl.mul.exit625:                                  ; preds = %212, %return.32bit.i618, %overflow.32bit.i616
  %215 = phi %INT [ %210, %overflow.32bit.i616 ], [ %211, %return.32bit.i618 ], [ %214, %212 ]
  %216 = extractvalue %INT %215, 0, !dbg !5866
  br i1 %216, label %223, label %op.32bit.i596, !dbg !5866

op.32bit.i596:                                    ; preds = %tcl.mul.exit625
  %217 = extractvalue %INT %215, 1, !dbg !5868
  %218 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %217, i32 %217) #5, !dbg !5869
  %219 = extractvalue { i32, i1 } %218, 1, !dbg !5870
  %220 = tail call i1 @llvm.expect.i1(i1 %219, i1 false) #5, !dbg !5870
  br i1 %220, label %overflow.32bit.i600, label %return.32bit.i602, !dbg !5870

overflow.32bit.i600:                              ; preds = %op.32bit.i596
  %x.64.i597 = sext i32 %217 to i64, !dbg !5871
  %z.64.i599 = mul nsw i64 %x.64.i597, %x.64.i597, !dbg !5872
  %221 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i599, 2, !dbg !5872
  br label %tcl.mul.exit609, !dbg !5872

return.32bit.i602:                                ; preds = %op.32bit.i596
  %z.32.i601 = extractvalue { i32, i1 } %218, 0, !dbg !5873
  %222 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i601, 1, !dbg !5873
  br label %tcl.mul.exit609, !dbg !5873

223:                                              ; preds = %tcl.mul.exit625
  %224 = extractvalue %INT %215, 2, !dbg !5874
  %z.643.i608 = mul i64 %224, %224, !dbg !5876
  %225 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i608, 2, !dbg !5876
  br label %tcl.mul.exit609, !dbg !5876

tcl.mul.exit609:                                  ; preds = %223, %return.32bit.i602, %overflow.32bit.i600
  %226 = phi %INT [ %221, %overflow.32bit.i600 ], [ %222, %return.32bit.i602 ], [ %225, %223 ]
  %227 = extractvalue %INT %226, 0, !dbg !5877
  br i1 %227, label %234, label %op.32bit.i580, !dbg !5877

op.32bit.i580:                                    ; preds = %tcl.mul.exit609
  %228 = extractvalue %INT %226, 1, !dbg !5879
  %229 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %228, i32 %228) #5, !dbg !5880
  %230 = extractvalue { i32, i1 } %229, 1, !dbg !5881
  %231 = tail call i1 @llvm.expect.i1(i1 %230, i1 false) #5, !dbg !5881
  br i1 %231, label %overflow.32bit.i584, label %return.32bit.i586, !dbg !5881

overflow.32bit.i584:                              ; preds = %op.32bit.i580
  %x.64.i581 = sext i32 %228 to i64, !dbg !5882
  %z.64.i583 = mul nsw i64 %x.64.i581, %x.64.i581, !dbg !5883
  %232 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i583, 2, !dbg !5883
  br label %tcl.mul.exit865, !dbg !5883

return.32bit.i586:                                ; preds = %op.32bit.i580
  %z.32.i585 = extractvalue { i32, i1 } %229, 0, !dbg !5884
  %233 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i585, 1, !dbg !5884
  br label %tcl.mul.exit865, !dbg !5884

234:                                              ; preds = %tcl.mul.exit609
  %235 = extractvalue %INT %226, 2, !dbg !5885
  %z.643.i592 = mul i64 %235, %235, !dbg !5887
  %236 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i592, 2, !dbg !5887
  br label %tcl.mul.exit865, !dbg !5887

pow9:                                             ; preds = %enter
  %237 = extractvalue %INT %x, 0, !dbg !5888
  br i1 %237, label %244, label %op.32bit.i564, !dbg !5888

op.32bit.i564:                                    ; preds = %pow9
  %238 = extractvalue %INT %x, 1, !dbg !5890
  %239 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %238, i32 %238) #5, !dbg !5891
  %240 = extractvalue { i32, i1 } %239, 1, !dbg !5892
  %241 = tail call i1 @llvm.expect.i1(i1 %240, i1 false) #5, !dbg !5892
  br i1 %241, label %overflow.32bit.i568, label %return.32bit.i570, !dbg !5892

overflow.32bit.i568:                              ; preds = %op.32bit.i564
  %x.64.i565 = sext i32 %238 to i64, !dbg !5893
  %z.64.i567 = mul nsw i64 %x.64.i565, %x.64.i565, !dbg !5894
  %242 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i567, 2, !dbg !5894
  br label %tcl.mul.exit577, !dbg !5894

return.32bit.i570:                                ; preds = %op.32bit.i564
  %z.32.i569 = extractvalue { i32, i1 } %239, 0, !dbg !5895
  %243 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i569, 1, !dbg !5895
  br label %tcl.mul.exit577, !dbg !5895

244:                                              ; preds = %pow9
  %245 = extractvalue %INT %x, 2, !dbg !5896
  %z.643.i576 = mul i64 %245, %245, !dbg !5898
  %246 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i576, 2, !dbg !5898
  br label %tcl.mul.exit577, !dbg !5898

tcl.mul.exit577:                                  ; preds = %244, %return.32bit.i570, %overflow.32bit.i568
  %247 = phi %INT [ %242, %overflow.32bit.i568 ], [ %243, %return.32bit.i570 ], [ %246, %244 ]
  %248 = extractvalue %INT %247, 0, !dbg !5899
  br i1 %248, label %255, label %op.32bit.i548, !dbg !5899

op.32bit.i548:                                    ; preds = %tcl.mul.exit577
  %249 = extractvalue %INT %247, 1, !dbg !5901
  %250 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %249, i32 %249) #5, !dbg !5902
  %251 = extractvalue { i32, i1 } %250, 1, !dbg !5903
  %252 = tail call i1 @llvm.expect.i1(i1 %251, i1 false) #5, !dbg !5903
  br i1 %252, label %overflow.32bit.i552, label %return.32bit.i554, !dbg !5903

overflow.32bit.i552:                              ; preds = %op.32bit.i548
  %x.64.i549 = sext i32 %249 to i64, !dbg !5904
  %z.64.i551 = mul nsw i64 %x.64.i549, %x.64.i549, !dbg !5905
  %253 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i551, 2, !dbg !5905
  br label %tcl.mul.exit561, !dbg !5905

return.32bit.i554:                                ; preds = %op.32bit.i548
  %z.32.i553 = extractvalue { i32, i1 } %250, 0, !dbg !5906
  %254 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i553, 1, !dbg !5906
  br label %tcl.mul.exit561, !dbg !5906

255:                                              ; preds = %tcl.mul.exit577
  %256 = extractvalue %INT %247, 2, !dbg !5907
  %z.643.i560 = mul i64 %256, %256, !dbg !5909
  %257 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i560, 2, !dbg !5909
  br label %tcl.mul.exit561, !dbg !5909

tcl.mul.exit561:                                  ; preds = %255, %return.32bit.i554, %overflow.32bit.i552
  %258 = phi %INT [ %253, %overflow.32bit.i552 ], [ %254, %return.32bit.i554 ], [ %257, %255 ]
  %259 = extractvalue %INT %258, 0, !dbg !5910
  br i1 %259, label %266, label %op.32bit.i532, !dbg !5910

op.32bit.i532:                                    ; preds = %tcl.mul.exit561
  %260 = extractvalue %INT %258, 1, !dbg !5912
  %261 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %260, i32 %260) #5, !dbg !5913
  %262 = extractvalue { i32, i1 } %261, 1, !dbg !5914
  %263 = tail call i1 @llvm.expect.i1(i1 %262, i1 false) #5, !dbg !5914
  br i1 %263, label %overflow.32bit.i536, label %return.32bit.i538, !dbg !5914

overflow.32bit.i536:                              ; preds = %op.32bit.i532
  %x.64.i533 = sext i32 %260 to i64, !dbg !5915
  %z.64.i535 = mul nsw i64 %x.64.i533, %x.64.i533, !dbg !5916
  %264 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i535, 2, !dbg !5916
  br label %tcl.mul.exit545, !dbg !5916

return.32bit.i538:                                ; preds = %op.32bit.i532
  %z.32.i537 = extractvalue { i32, i1 } %261, 0, !dbg !5917
  %265 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i537, 1, !dbg !5917
  br label %tcl.mul.exit545, !dbg !5917

266:                                              ; preds = %tcl.mul.exit561
  %267 = extractvalue %INT %258, 2, !dbg !5918
  %z.643.i544 = mul i64 %267, %267, !dbg !5920
  %268 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i544, 2, !dbg !5920
  br label %tcl.mul.exit545, !dbg !5920

tcl.mul.exit545:                                  ; preds = %266, %return.32bit.i538, %overflow.32bit.i536
  %269 = phi %INT [ %264, %overflow.32bit.i536 ], [ %265, %return.32bit.i538 ], [ %268, %266 ]
  %270 = extractvalue %INT %269, 0, !dbg !5921
  br i1 %270, label %tcl.int.64.exit.i525, label %check2.i514, !dbg !5921

check2.i514:                                      ; preds = %tcl.mul.exit545
  %271 = extractvalue %INT %269, 1, !dbg !5923
  br i1 %237, label %tcl.int.64.exit.thread.i523, label %op.32bit.i516, !dbg !5924

op.32bit.i516:                                    ; preds = %check2.i514
  %y.32.i515 = extractvalue %INT %x, 1, !dbg !5925
  %272 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %271, i32 %y.32.i515) #5, !dbg !5926
  %273 = extractvalue { i32, i1 } %272, 1, !dbg !5927
  %274 = tail call i1 @llvm.expect.i1(i1 %273, i1 false) #5, !dbg !5927
  br i1 %274, label %overflow.32bit.i520, label %return.32bit.i522, !dbg !5927

overflow.32bit.i520:                              ; preds = %op.32bit.i516
  %x.64.i517 = sext i32 %271 to i64, !dbg !5928
  %x.641.i518 = sext i32 %y.32.i515 to i64, !dbg !5929
  %z.64.i519 = mul nsw i64 %x.64.i517, %x.641.i518, !dbg !5930
  %275 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i519, 2, !dbg !5930
  br label %tcl.mul.exit865, !dbg !5930

return.32bit.i522:                                ; preds = %op.32bit.i516
  %z.32.i521 = extractvalue { i32, i1 } %272, 0, !dbg !5931
  %276 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i521, 1, !dbg !5931
  br label %tcl.mul.exit865, !dbg !5931

tcl.int.64.exit.thread.i523:                      ; preds = %check2.i514
  %277 = sext i32 %271 to i64, !dbg !5932
  %278 = extractvalue %INT %x, 2, !dbg !5934
  br label %283, !dbg !5934

tcl.int.64.exit.i525:                             ; preds = %tcl.mul.exit545
  %279 = extractvalue %INT %269, 2, !dbg !5936
  %280 = extractvalue %INT %x, 1, !dbg !5934
  %281 = sext i32 %280 to i64, !dbg !5934
  %282 = extractvalue %INT %x, 2, !dbg !5934
  br i1 %237, label %283, label %285, !dbg !5934

283:                                              ; preds = %tcl.int.64.exit.i525, %tcl.int.64.exit.thread.i523
  %284 = phi i64 [ %278, %tcl.int.64.exit.thread.i523 ], [ %282, %tcl.int.64.exit.i525 ]
  %x.642412.i526 = phi i64 [ %277, %tcl.int.64.exit.thread.i523 ], [ %279, %tcl.int.64.exit.i525 ]
  br label %285, !dbg !5934

285:                                              ; preds = %283, %tcl.int.64.exit.i525
  %x.642411.i527 = phi i64 [ %x.642412.i526, %283 ], [ %279, %tcl.int.64.exit.i525 ]
  %286 = phi i64 [ %284, %283 ], [ %281, %tcl.int.64.exit.i525 ]
  %z.643.i528 = mul i64 %286, %x.642411.i527, !dbg !5937
  %287 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i528, 2, !dbg !5937
  br label %tcl.mul.exit865, !dbg !5937

pow10:                                            ; preds = %enter
  %288 = extractvalue %INT %x, 0, !dbg !5938
  br i1 %288, label %295, label %op.32bit.i500, !dbg !5938

op.32bit.i500:                                    ; preds = %pow10
  %289 = extractvalue %INT %x, 1, !dbg !5940
  %290 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %289, i32 %289) #5, !dbg !5941
  %291 = extractvalue { i32, i1 } %290, 1, !dbg !5942
  %292 = tail call i1 @llvm.expect.i1(i1 %291, i1 false) #5, !dbg !5942
  br i1 %292, label %overflow.32bit.i504, label %return.32bit.i506, !dbg !5942

overflow.32bit.i504:                              ; preds = %op.32bit.i500
  %x.64.i501 = sext i32 %289 to i64, !dbg !5943
  %z.64.i503 = mul nsw i64 %x.64.i501, %x.64.i501, !dbg !5944
  %293 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i503, 2, !dbg !5944
  br label %tcl.mul.exit513, !dbg !5944

return.32bit.i506:                                ; preds = %op.32bit.i500
  %z.32.i505 = extractvalue { i32, i1 } %290, 0, !dbg !5945
  %294 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i505, 1, !dbg !5945
  br label %tcl.mul.exit513, !dbg !5945

295:                                              ; preds = %pow10
  %296 = extractvalue %INT %x, 2, !dbg !5946
  %z.643.i512 = mul i64 %296, %296, !dbg !5948
  %297 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i512, 2, !dbg !5948
  br label %tcl.mul.exit513, !dbg !5948

tcl.mul.exit513:                                  ; preds = %295, %return.32bit.i506, %overflow.32bit.i504
  %298 = phi %INT [ %293, %overflow.32bit.i504 ], [ %294, %return.32bit.i506 ], [ %297, %295 ]
  %299 = extractvalue %INT %298, 0, !dbg !5949
  br i1 %299, label %306, label %op.32bit.i484, !dbg !5949

op.32bit.i484:                                    ; preds = %tcl.mul.exit513
  %300 = extractvalue %INT %298, 1, !dbg !5951
  %301 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %300, i32 %300) #5, !dbg !5952
  %302 = extractvalue { i32, i1 } %301, 1, !dbg !5953
  %303 = tail call i1 @llvm.expect.i1(i1 %302, i1 false) #5, !dbg !5953
  br i1 %303, label %overflow.32bit.i488, label %return.32bit.i490, !dbg !5953

overflow.32bit.i488:                              ; preds = %op.32bit.i484
  %x.64.i485 = sext i32 %300 to i64, !dbg !5954
  %z.64.i487 = mul nsw i64 %x.64.i485, %x.64.i485, !dbg !5955
  %304 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i487, 2, !dbg !5955
  br label %tcl.mul.exit497, !dbg !5955

return.32bit.i490:                                ; preds = %op.32bit.i484
  %z.32.i489 = extractvalue { i32, i1 } %301, 0, !dbg !5956
  %305 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i489, 1, !dbg !5956
  br label %tcl.mul.exit497, !dbg !5956

306:                                              ; preds = %tcl.mul.exit513
  %307 = extractvalue %INT %298, 2, !dbg !5957
  %z.643.i496 = mul i64 %307, %307, !dbg !5959
  %308 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i496, 2, !dbg !5959
  br label %tcl.mul.exit497, !dbg !5959

tcl.mul.exit497:                                  ; preds = %306, %return.32bit.i490, %overflow.32bit.i488
  %309 = phi %INT [ %304, %overflow.32bit.i488 ], [ %305, %return.32bit.i490 ], [ %308, %306 ]
  %310 = extractvalue %INT %309, 0, !dbg !5960
  br i1 %310, label %tcl.int.64.exit.i477, label %check2.i466, !dbg !5960

check2.i466:                                      ; preds = %tcl.mul.exit497
  %311 = extractvalue %INT %309, 1, !dbg !5962
  br i1 %288, label %tcl.int.64.exit.thread.i475, label %op.32bit.i468, !dbg !5963

op.32bit.i468:                                    ; preds = %check2.i466
  %y.32.i467 = extractvalue %INT %x, 1, !dbg !5964
  %312 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %311, i32 %y.32.i467) #5, !dbg !5965
  %313 = extractvalue { i32, i1 } %312, 1, !dbg !5966
  %314 = tail call i1 @llvm.expect.i1(i1 %313, i1 false) #5, !dbg !5966
  br i1 %314, label %overflow.32bit.i472, label %return.32bit.i474, !dbg !5966

overflow.32bit.i472:                              ; preds = %op.32bit.i468
  %x.64.i469 = sext i32 %311 to i64, !dbg !5967
  %x.641.i470 = sext i32 %y.32.i467 to i64, !dbg !5968
  %z.64.i471 = mul nsw i64 %x.64.i469, %x.641.i470, !dbg !5969
  %315 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i471, 2, !dbg !5969
  br label %tcl.mul.exit481, !dbg !5969

return.32bit.i474:                                ; preds = %op.32bit.i468
  %z.32.i473 = extractvalue { i32, i1 } %312, 0, !dbg !5970
  %316 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i473, 1, !dbg !5970
  br label %tcl.mul.exit481, !dbg !5970

tcl.int.64.exit.thread.i475:                      ; preds = %check2.i466
  %317 = sext i32 %311 to i64, !dbg !5971
  %318 = extractvalue %INT %x, 2, !dbg !5973
  br label %323, !dbg !5973

tcl.int.64.exit.i477:                             ; preds = %tcl.mul.exit497
  %319 = extractvalue %INT %309, 2, !dbg !5975
  %320 = extractvalue %INT %x, 1, !dbg !5973
  %321 = sext i32 %320 to i64, !dbg !5973
  %322 = extractvalue %INT %x, 2, !dbg !5973
  br i1 %288, label %323, label %325, !dbg !5973

323:                                              ; preds = %tcl.int.64.exit.i477, %tcl.int.64.exit.thread.i475
  %324 = phi i64 [ %318, %tcl.int.64.exit.thread.i475 ], [ %322, %tcl.int.64.exit.i477 ]
  %x.642412.i478 = phi i64 [ %317, %tcl.int.64.exit.thread.i475 ], [ %319, %tcl.int.64.exit.i477 ]
  br label %325, !dbg !5973

325:                                              ; preds = %323, %tcl.int.64.exit.i477
  %x.642411.i479 = phi i64 [ %x.642412.i478, %323 ], [ %319, %tcl.int.64.exit.i477 ]
  %326 = phi i64 [ %324, %323 ], [ %321, %tcl.int.64.exit.i477 ]
  %z.643.i480 = mul i64 %326, %x.642411.i479, !dbg !5976
  %327 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i480, 2, !dbg !5976
  br label %tcl.mul.exit481, !dbg !5976

tcl.mul.exit481:                                  ; preds = %325, %return.32bit.i474, %overflow.32bit.i472
  %328 = phi %INT [ %315, %overflow.32bit.i472 ], [ %316, %return.32bit.i474 ], [ %327, %325 ]
  %329 = extractvalue %INT %328, 0, !dbg !5977
  br i1 %329, label %336, label %op.32bit.i452, !dbg !5977

op.32bit.i452:                                    ; preds = %tcl.mul.exit481
  %330 = extractvalue %INT %328, 1, !dbg !5979
  %331 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %330, i32 %330) #5, !dbg !5980
  %332 = extractvalue { i32, i1 } %331, 1, !dbg !5981
  %333 = tail call i1 @llvm.expect.i1(i1 %332, i1 false) #5, !dbg !5981
  br i1 %333, label %overflow.32bit.i456, label %return.32bit.i458, !dbg !5981

overflow.32bit.i456:                              ; preds = %op.32bit.i452
  %x.64.i453 = sext i32 %330 to i64, !dbg !5982
  %z.64.i455 = mul nsw i64 %x.64.i453, %x.64.i453, !dbg !5983
  %334 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i455, 2, !dbg !5983
  br label %tcl.mul.exit865, !dbg !5983

return.32bit.i458:                                ; preds = %op.32bit.i452
  %z.32.i457 = extractvalue { i32, i1 } %331, 0, !dbg !5984
  %335 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i457, 1, !dbg !5984
  br label %tcl.mul.exit865, !dbg !5984

336:                                              ; preds = %tcl.mul.exit481
  %337 = extractvalue %INT %328, 2, !dbg !5985
  %z.643.i464 = mul i64 %337, %337, !dbg !5987
  %338 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i464, 2, !dbg !5987
  br label %tcl.mul.exit865, !dbg !5987

pow11:                                            ; preds = %enter
  %339 = extractvalue %INT %x, 0, !dbg !5988
  br i1 %339, label %346, label %op.32bit.i436, !dbg !5988

op.32bit.i436:                                    ; preds = %pow11
  %340 = extractvalue %INT %x, 1, !dbg !5990
  %341 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %340, i32 %340) #5, !dbg !5991
  %342 = extractvalue { i32, i1 } %341, 1, !dbg !5992
  %343 = tail call i1 @llvm.expect.i1(i1 %342, i1 false) #5, !dbg !5992
  br i1 %343, label %overflow.32bit.i440, label %return.32bit.i442, !dbg !5992

overflow.32bit.i440:                              ; preds = %op.32bit.i436
  %x.64.i437 = sext i32 %340 to i64, !dbg !5993
  %z.64.i439 = mul nsw i64 %x.64.i437, %x.64.i437, !dbg !5994
  %344 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i439, 2, !dbg !5994
  br label %tcl.mul.exit449, !dbg !5994

return.32bit.i442:                                ; preds = %op.32bit.i436
  %z.32.i441 = extractvalue { i32, i1 } %341, 0, !dbg !5995
  %345 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i441, 1, !dbg !5995
  br label %tcl.mul.exit449, !dbg !5995

346:                                              ; preds = %pow11
  %347 = extractvalue %INT %x, 2, !dbg !5996
  %z.643.i448 = mul i64 %347, %347, !dbg !5998
  %348 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i448, 2, !dbg !5998
  br label %tcl.mul.exit449, !dbg !5998

tcl.mul.exit449:                                  ; preds = %346, %return.32bit.i442, %overflow.32bit.i440
  %349 = phi %INT [ %344, %overflow.32bit.i440 ], [ %345, %return.32bit.i442 ], [ %348, %346 ]
  %350 = extractvalue %INT %349, 0, !dbg !5999
  br i1 %350, label %357, label %op.32bit.i420, !dbg !5999

op.32bit.i420:                                    ; preds = %tcl.mul.exit449
  %351 = extractvalue %INT %349, 1, !dbg !6001
  %352 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %351, i32 %351) #5, !dbg !6002
  %353 = extractvalue { i32, i1 } %352, 1, !dbg !6003
  %354 = tail call i1 @llvm.expect.i1(i1 %353, i1 false) #5, !dbg !6003
  br i1 %354, label %overflow.32bit.i424, label %return.32bit.i426, !dbg !6003

overflow.32bit.i424:                              ; preds = %op.32bit.i420
  %x.64.i421 = sext i32 %351 to i64, !dbg !6004
  %z.64.i423 = mul nsw i64 %x.64.i421, %x.64.i421, !dbg !6005
  %355 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i423, 2, !dbg !6005
  br label %tcl.mul.exit433, !dbg !6005

return.32bit.i426:                                ; preds = %op.32bit.i420
  %z.32.i425 = extractvalue { i32, i1 } %352, 0, !dbg !6006
  %356 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i425, 1, !dbg !6006
  br label %tcl.mul.exit433, !dbg !6006

357:                                              ; preds = %tcl.mul.exit449
  %358 = extractvalue %INT %349, 2, !dbg !6007
  %z.643.i432 = mul i64 %358, %358, !dbg !6009
  %359 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i432, 2, !dbg !6009
  br label %tcl.mul.exit433, !dbg !6009

tcl.mul.exit433:                                  ; preds = %357, %return.32bit.i426, %overflow.32bit.i424
  %360 = phi %INT [ %355, %overflow.32bit.i424 ], [ %356, %return.32bit.i426 ], [ %359, %357 ]
  %361 = extractvalue %INT %360, 0, !dbg !6010
  br i1 %361, label %tcl.int.64.exit.i413, label %check2.i402, !dbg !6010

check2.i402:                                      ; preds = %tcl.mul.exit433
  %362 = extractvalue %INT %360, 1, !dbg !6012
  br i1 %339, label %tcl.int.64.exit.thread.i411, label %op.32bit.i404, !dbg !6013

op.32bit.i404:                                    ; preds = %check2.i402
  %y.32.i403 = extractvalue %INT %x, 1, !dbg !6014
  %363 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %362, i32 %y.32.i403) #5, !dbg !6015
  %364 = extractvalue { i32, i1 } %363, 1, !dbg !6016
  %365 = tail call i1 @llvm.expect.i1(i1 %364, i1 false) #5, !dbg !6016
  br i1 %365, label %overflow.32bit.i408, label %return.32bit.i410, !dbg !6016

overflow.32bit.i408:                              ; preds = %op.32bit.i404
  %x.64.i405 = sext i32 %362 to i64, !dbg !6017
  %x.641.i406 = sext i32 %y.32.i403 to i64, !dbg !6018
  %z.64.i407 = mul nsw i64 %x.64.i405, %x.641.i406, !dbg !6019
  %366 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i407, 2, !dbg !6019
  br label %tcl.mul.exit417, !dbg !6019

return.32bit.i410:                                ; preds = %op.32bit.i404
  %z.32.i409 = extractvalue { i32, i1 } %363, 0, !dbg !6020
  %367 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i409, 1, !dbg !6020
  br label %tcl.mul.exit417, !dbg !6020

tcl.int.64.exit.thread.i411:                      ; preds = %check2.i402
  %368 = sext i32 %362 to i64, !dbg !6021
  %369 = extractvalue %INT %x, 2, !dbg !6023
  br label %374, !dbg !6023

tcl.int.64.exit.i413:                             ; preds = %tcl.mul.exit433
  %370 = extractvalue %INT %360, 2, !dbg !6025
  %371 = extractvalue %INT %x, 1, !dbg !6023
  %372 = sext i32 %371 to i64, !dbg !6023
  %373 = extractvalue %INT %x, 2, !dbg !6023
  br i1 %339, label %374, label %376, !dbg !6023

374:                                              ; preds = %tcl.int.64.exit.i413, %tcl.int.64.exit.thread.i411
  %375 = phi i64 [ %369, %tcl.int.64.exit.thread.i411 ], [ %373, %tcl.int.64.exit.i413 ]
  %x.642412.i414 = phi i64 [ %368, %tcl.int.64.exit.thread.i411 ], [ %370, %tcl.int.64.exit.i413 ]
  br label %376, !dbg !6023

376:                                              ; preds = %374, %tcl.int.64.exit.i413
  %x.642411.i415 = phi i64 [ %x.642412.i414, %374 ], [ %370, %tcl.int.64.exit.i413 ]
  %377 = phi i64 [ %375, %374 ], [ %372, %tcl.int.64.exit.i413 ]
  %z.643.i416 = mul i64 %377, %x.642411.i415, !dbg !6026
  %378 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i416, 2, !dbg !6026
  br label %tcl.mul.exit417, !dbg !6026

tcl.mul.exit417:                                  ; preds = %376, %return.32bit.i410, %overflow.32bit.i408
  %379 = phi %INT [ %366, %overflow.32bit.i408 ], [ %367, %return.32bit.i410 ], [ %378, %376 ]
  %380 = extractvalue %INT %379, 0, !dbg !6027
  br i1 %380, label %387, label %op.32bit.i388, !dbg !6027

op.32bit.i388:                                    ; preds = %tcl.mul.exit417
  %381 = extractvalue %INT %379, 1, !dbg !6029
  %382 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %381, i32 %381) #5, !dbg !6030
  %383 = extractvalue { i32, i1 } %382, 1, !dbg !6031
  %384 = tail call i1 @llvm.expect.i1(i1 %383, i1 false) #5, !dbg !6031
  br i1 %384, label %overflow.32bit.i392, label %return.32bit.i394, !dbg !6031

overflow.32bit.i392:                              ; preds = %op.32bit.i388
  %x.64.i389 = sext i32 %381 to i64, !dbg !6032
  %z.64.i391 = mul nsw i64 %x.64.i389, %x.64.i389, !dbg !6033
  %385 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i391, 2, !dbg !6033
  br label %tcl.mul.exit401, !dbg !6033

return.32bit.i394:                                ; preds = %op.32bit.i388
  %z.32.i393 = extractvalue { i32, i1 } %382, 0, !dbg !6034
  %386 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i393, 1, !dbg !6034
  br label %tcl.mul.exit401, !dbg !6034

387:                                              ; preds = %tcl.mul.exit417
  %388 = extractvalue %INT %379, 2, !dbg !6035
  %z.643.i400 = mul i64 %388, %388, !dbg !6037
  %389 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i400, 2, !dbg !6037
  br label %tcl.mul.exit401, !dbg !6037

tcl.mul.exit401:                                  ; preds = %387, %return.32bit.i394, %overflow.32bit.i392
  %390 = phi %INT [ %385, %overflow.32bit.i392 ], [ %386, %return.32bit.i394 ], [ %389, %387 ]
  %391 = extractvalue %INT %390, 0, !dbg !6038
  br i1 %391, label %tcl.int.64.exit.i381, label %check2.i370, !dbg !6038

check2.i370:                                      ; preds = %tcl.mul.exit401
  %392 = extractvalue %INT %390, 1, !dbg !6040
  br i1 %339, label %tcl.int.64.exit.thread.i379, label %op.32bit.i372, !dbg !6041

op.32bit.i372:                                    ; preds = %check2.i370
  %y.32.i371 = extractvalue %INT %x, 1, !dbg !6042
  %393 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %392, i32 %y.32.i371) #5, !dbg !6043
  %394 = extractvalue { i32, i1 } %393, 1, !dbg !6044
  %395 = tail call i1 @llvm.expect.i1(i1 %394, i1 false) #5, !dbg !6044
  br i1 %395, label %overflow.32bit.i376, label %return.32bit.i378, !dbg !6044

overflow.32bit.i376:                              ; preds = %op.32bit.i372
  %x.64.i373 = sext i32 %392 to i64, !dbg !6045
  %x.641.i374 = sext i32 %y.32.i371 to i64, !dbg !6046
  %z.64.i375 = mul nsw i64 %x.64.i373, %x.641.i374, !dbg !6047
  %396 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i375, 2, !dbg !6047
  br label %tcl.mul.exit865, !dbg !6047

return.32bit.i378:                                ; preds = %op.32bit.i372
  %z.32.i377 = extractvalue { i32, i1 } %393, 0, !dbg !6048
  %397 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i377, 1, !dbg !6048
  br label %tcl.mul.exit865, !dbg !6048

tcl.int.64.exit.thread.i379:                      ; preds = %check2.i370
  %398 = sext i32 %392 to i64, !dbg !6049
  %399 = extractvalue %INT %x, 2, !dbg !6051
  br label %404, !dbg !6051

tcl.int.64.exit.i381:                             ; preds = %tcl.mul.exit401
  %400 = extractvalue %INT %390, 2, !dbg !6053
  %401 = extractvalue %INT %x, 1, !dbg !6051
  %402 = sext i32 %401 to i64, !dbg !6051
  %403 = extractvalue %INT %x, 2, !dbg !6051
  br i1 %339, label %404, label %406, !dbg !6051

404:                                              ; preds = %tcl.int.64.exit.i381, %tcl.int.64.exit.thread.i379
  %405 = phi i64 [ %399, %tcl.int.64.exit.thread.i379 ], [ %403, %tcl.int.64.exit.i381 ]
  %x.642412.i382 = phi i64 [ %398, %tcl.int.64.exit.thread.i379 ], [ %400, %tcl.int.64.exit.i381 ]
  br label %406, !dbg !6051

406:                                              ; preds = %404, %tcl.int.64.exit.i381
  %x.642411.i383 = phi i64 [ %x.642412.i382, %404 ], [ %400, %tcl.int.64.exit.i381 ]
  %407 = phi i64 [ %405, %404 ], [ %402, %tcl.int.64.exit.i381 ]
  %z.643.i384 = mul i64 %407, %x.642411.i383, !dbg !6054
  %408 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i384, 2, !dbg !6054
  br label %tcl.mul.exit865, !dbg !6054

pow12:                                            ; preds = %enter
  %409 = extractvalue %INT %x, 0, !dbg !6055
  br i1 %409, label %416, label %op.32bit.i356, !dbg !6055

op.32bit.i356:                                    ; preds = %pow12
  %410 = extractvalue %INT %x, 1, !dbg !6057
  %411 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %410, i32 %410) #5, !dbg !6058
  %412 = extractvalue { i32, i1 } %411, 1, !dbg !6059
  %413 = tail call i1 @llvm.expect.i1(i1 %412, i1 false) #5, !dbg !6059
  br i1 %413, label %overflow.32bit.i360, label %return.32bit.i362, !dbg !6059

overflow.32bit.i360:                              ; preds = %op.32bit.i356
  %x.64.i357 = sext i32 %410 to i64, !dbg !6060
  %z.64.i359 = mul nsw i64 %x.64.i357, %x.64.i357, !dbg !6061
  %414 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i359, 2, !dbg !6061
  br label %tcl.mul.exit369, !dbg !6061

return.32bit.i362:                                ; preds = %op.32bit.i356
  %z.32.i361 = extractvalue { i32, i1 } %411, 0, !dbg !6062
  %415 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i361, 1, !dbg !6062
  br label %tcl.mul.exit369, !dbg !6062

416:                                              ; preds = %pow12
  %417 = extractvalue %INT %x, 2, !dbg !6063
  %z.643.i368 = mul i64 %417, %417, !dbg !6065
  %418 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i368, 2, !dbg !6065
  br label %tcl.mul.exit369, !dbg !6065

tcl.mul.exit369:                                  ; preds = %416, %return.32bit.i362, %overflow.32bit.i360
  %419 = phi %INT [ %414, %overflow.32bit.i360 ], [ %415, %return.32bit.i362 ], [ %418, %416 ]
  %420 = extractvalue %INT %419, 0, !dbg !6066
  br i1 %420, label %tcl.int.64.exit.i349, label %check2.i338, !dbg !6066

check2.i338:                                      ; preds = %tcl.mul.exit369
  %421 = extractvalue %INT %419, 1, !dbg !6068
  br i1 %409, label %tcl.int.64.exit.thread.i347, label %op.32bit.i340, !dbg !6069

op.32bit.i340:                                    ; preds = %check2.i338
  %y.32.i339 = extractvalue %INT %x, 1, !dbg !6070
  %422 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %421, i32 %y.32.i339) #5, !dbg !6071
  %423 = extractvalue { i32, i1 } %422, 1, !dbg !6072
  %424 = tail call i1 @llvm.expect.i1(i1 %423, i1 false) #5, !dbg !6072
  br i1 %424, label %overflow.32bit.i344, label %return.32bit.i346, !dbg !6072

overflow.32bit.i344:                              ; preds = %op.32bit.i340
  %x.64.i341 = sext i32 %421 to i64, !dbg !6073
  %x.641.i342 = sext i32 %y.32.i339 to i64, !dbg !6074
  %z.64.i343 = mul nsw i64 %x.64.i341, %x.641.i342, !dbg !6075
  %425 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i343, 2, !dbg !6075
  br label %tcl.mul.exit353, !dbg !6075

return.32bit.i346:                                ; preds = %op.32bit.i340
  %z.32.i345 = extractvalue { i32, i1 } %422, 0, !dbg !6076
  %426 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i345, 1, !dbg !6076
  br label %tcl.mul.exit353, !dbg !6076

tcl.int.64.exit.thread.i347:                      ; preds = %check2.i338
  %427 = sext i32 %421 to i64, !dbg !6077
  %428 = extractvalue %INT %x, 2, !dbg !6079
  br label %433, !dbg !6079

tcl.int.64.exit.i349:                             ; preds = %tcl.mul.exit369
  %429 = extractvalue %INT %419, 2, !dbg !6081
  %430 = extractvalue %INT %x, 1, !dbg !6079
  %431 = sext i32 %430 to i64, !dbg !6079
  %432 = extractvalue %INT %x, 2, !dbg !6079
  br i1 %409, label %433, label %435, !dbg !6079

433:                                              ; preds = %tcl.int.64.exit.i349, %tcl.int.64.exit.thread.i347
  %434 = phi i64 [ %428, %tcl.int.64.exit.thread.i347 ], [ %432, %tcl.int.64.exit.i349 ]
  %x.642412.i350 = phi i64 [ %427, %tcl.int.64.exit.thread.i347 ], [ %429, %tcl.int.64.exit.i349 ]
  br label %435, !dbg !6079

435:                                              ; preds = %433, %tcl.int.64.exit.i349
  %x.642411.i351 = phi i64 [ %x.642412.i350, %433 ], [ %429, %tcl.int.64.exit.i349 ]
  %436 = phi i64 [ %434, %433 ], [ %431, %tcl.int.64.exit.i349 ]
  %z.643.i352 = mul i64 %436, %x.642411.i351, !dbg !6082
  %437 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i352, 2, !dbg !6082
  br label %tcl.mul.exit353, !dbg !6082

tcl.mul.exit353:                                  ; preds = %435, %return.32bit.i346, %overflow.32bit.i344
  %438 = phi %INT [ %425, %overflow.32bit.i344 ], [ %426, %return.32bit.i346 ], [ %437, %435 ]
  %439 = extractvalue %INT %438, 0, !dbg !6083
  br i1 %439, label %446, label %op.32bit.i324, !dbg !6083

op.32bit.i324:                                    ; preds = %tcl.mul.exit353
  %440 = extractvalue %INT %438, 1, !dbg !6085
  %441 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %440, i32 %440) #5, !dbg !6086
  %442 = extractvalue { i32, i1 } %441, 1, !dbg !6087
  %443 = tail call i1 @llvm.expect.i1(i1 %442, i1 false) #5, !dbg !6087
  br i1 %443, label %overflow.32bit.i328, label %return.32bit.i330, !dbg !6087

overflow.32bit.i328:                              ; preds = %op.32bit.i324
  %x.64.i325 = sext i32 %440 to i64, !dbg !6088
  %z.64.i327 = mul nsw i64 %x.64.i325, %x.64.i325, !dbg !6089
  %444 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i327, 2, !dbg !6089
  br label %tcl.mul.exit337, !dbg !6089

return.32bit.i330:                                ; preds = %op.32bit.i324
  %z.32.i329 = extractvalue { i32, i1 } %441, 0, !dbg !6090
  %445 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i329, 1, !dbg !6090
  br label %tcl.mul.exit337, !dbg !6090

446:                                              ; preds = %tcl.mul.exit353
  %447 = extractvalue %INT %438, 2, !dbg !6091
  %z.643.i336 = mul i64 %447, %447, !dbg !6093
  %448 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i336, 2, !dbg !6093
  br label %tcl.mul.exit337, !dbg !6093

tcl.mul.exit337:                                  ; preds = %446, %return.32bit.i330, %overflow.32bit.i328
  %449 = phi %INT [ %444, %overflow.32bit.i328 ], [ %445, %return.32bit.i330 ], [ %448, %446 ]
  %450 = extractvalue %INT %449, 0, !dbg !6094
  br i1 %450, label %457, label %op.32bit.i308, !dbg !6094

op.32bit.i308:                                    ; preds = %tcl.mul.exit337
  %451 = extractvalue %INT %449, 1, !dbg !6096
  %452 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %451, i32 %451) #5, !dbg !6097
  %453 = extractvalue { i32, i1 } %452, 1, !dbg !6098
  %454 = tail call i1 @llvm.expect.i1(i1 %453, i1 false) #5, !dbg !6098
  br i1 %454, label %overflow.32bit.i312, label %return.32bit.i314, !dbg !6098

overflow.32bit.i312:                              ; preds = %op.32bit.i308
  %x.64.i309 = sext i32 %451 to i64, !dbg !6099
  %z.64.i311 = mul nsw i64 %x.64.i309, %x.64.i309, !dbg !6100
  %455 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i311, 2, !dbg !6100
  br label %tcl.mul.exit865, !dbg !6100

return.32bit.i314:                                ; preds = %op.32bit.i308
  %z.32.i313 = extractvalue { i32, i1 } %452, 0, !dbg !6101
  %456 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i313, 1, !dbg !6101
  br label %tcl.mul.exit865, !dbg !6101

457:                                              ; preds = %tcl.mul.exit337
  %458 = extractvalue %INT %449, 2, !dbg !6102
  %z.643.i320 = mul i64 %458, %458, !dbg !6104
  %459 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i320, 2, !dbg !6104
  br label %tcl.mul.exit865, !dbg !6104

pow13:                                            ; preds = %enter
  %460 = extractvalue %INT %x, 0, !dbg !6105
  br i1 %460, label %467, label %op.32bit.i292, !dbg !6105

op.32bit.i292:                                    ; preds = %pow13
  %461 = extractvalue %INT %x, 1, !dbg !6107
  %462 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %461, i32 %461) #5, !dbg !6108
  %463 = extractvalue { i32, i1 } %462, 1, !dbg !6109
  %464 = tail call i1 @llvm.expect.i1(i1 %463, i1 false) #5, !dbg !6109
  br i1 %464, label %overflow.32bit.i296, label %return.32bit.i298, !dbg !6109

overflow.32bit.i296:                              ; preds = %op.32bit.i292
  %x.64.i293 = sext i32 %461 to i64, !dbg !6110
  %z.64.i295 = mul nsw i64 %x.64.i293, %x.64.i293, !dbg !6111
  %465 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i295, 2, !dbg !6111
  br label %tcl.mul.exit305, !dbg !6111

return.32bit.i298:                                ; preds = %op.32bit.i292
  %z.32.i297 = extractvalue { i32, i1 } %462, 0, !dbg !6112
  %466 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i297, 1, !dbg !6112
  br label %tcl.mul.exit305, !dbg !6112

467:                                              ; preds = %pow13
  %468 = extractvalue %INT %x, 2, !dbg !6113
  %z.643.i304 = mul i64 %468, %468, !dbg !6115
  %469 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i304, 2, !dbg !6115
  br label %tcl.mul.exit305, !dbg !6115

tcl.mul.exit305:                                  ; preds = %467, %return.32bit.i298, %overflow.32bit.i296
  %470 = phi %INT [ %465, %overflow.32bit.i296 ], [ %466, %return.32bit.i298 ], [ %469, %467 ]
  %471 = extractvalue %INT %470, 0, !dbg !6116
  br i1 %471, label %tcl.int.64.exit.i285, label %check2.i274, !dbg !6116

check2.i274:                                      ; preds = %tcl.mul.exit305
  %472 = extractvalue %INT %470, 1, !dbg !6118
  br i1 %460, label %tcl.int.64.exit.thread.i283, label %op.32bit.i276, !dbg !6119

op.32bit.i276:                                    ; preds = %check2.i274
  %y.32.i275 = extractvalue %INT %x, 1, !dbg !6120
  %473 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %472, i32 %y.32.i275) #5, !dbg !6121
  %474 = extractvalue { i32, i1 } %473, 1, !dbg !6122
  %475 = tail call i1 @llvm.expect.i1(i1 %474, i1 false) #5, !dbg !6122
  br i1 %475, label %overflow.32bit.i280, label %return.32bit.i282, !dbg !6122

overflow.32bit.i280:                              ; preds = %op.32bit.i276
  %x.64.i277 = sext i32 %472 to i64, !dbg !6123
  %x.641.i278 = sext i32 %y.32.i275 to i64, !dbg !6124
  %z.64.i279 = mul nsw i64 %x.64.i277, %x.641.i278, !dbg !6125
  %476 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i279, 2, !dbg !6125
  br label %tcl.mul.exit289, !dbg !6125

return.32bit.i282:                                ; preds = %op.32bit.i276
  %z.32.i281 = extractvalue { i32, i1 } %473, 0, !dbg !6126
  %477 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i281, 1, !dbg !6126
  br label %tcl.mul.exit289, !dbg !6126

tcl.int.64.exit.thread.i283:                      ; preds = %check2.i274
  %478 = sext i32 %472 to i64, !dbg !6127
  %479 = extractvalue %INT %x, 2, !dbg !6129
  br label %484, !dbg !6129

tcl.int.64.exit.i285:                             ; preds = %tcl.mul.exit305
  %480 = extractvalue %INT %470, 2, !dbg !6131
  %481 = extractvalue %INT %x, 1, !dbg !6129
  %482 = sext i32 %481 to i64, !dbg !6129
  %483 = extractvalue %INT %x, 2, !dbg !6129
  br i1 %460, label %484, label %486, !dbg !6129

484:                                              ; preds = %tcl.int.64.exit.i285, %tcl.int.64.exit.thread.i283
  %485 = phi i64 [ %479, %tcl.int.64.exit.thread.i283 ], [ %483, %tcl.int.64.exit.i285 ]
  %x.642412.i286 = phi i64 [ %478, %tcl.int.64.exit.thread.i283 ], [ %480, %tcl.int.64.exit.i285 ]
  br label %486, !dbg !6129

486:                                              ; preds = %484, %tcl.int.64.exit.i285
  %x.642411.i287 = phi i64 [ %x.642412.i286, %484 ], [ %480, %tcl.int.64.exit.i285 ]
  %487 = phi i64 [ %485, %484 ], [ %482, %tcl.int.64.exit.i285 ]
  %z.643.i288 = mul i64 %487, %x.642411.i287, !dbg !6132
  %488 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i288, 2, !dbg !6132
  br label %tcl.mul.exit289, !dbg !6132

tcl.mul.exit289:                                  ; preds = %486, %return.32bit.i282, %overflow.32bit.i280
  %489 = phi %INT [ %476, %overflow.32bit.i280 ], [ %477, %return.32bit.i282 ], [ %488, %486 ]
  %490 = extractvalue %INT %489, 0, !dbg !6133
  br i1 %490, label %497, label %op.32bit.i260, !dbg !6133

op.32bit.i260:                                    ; preds = %tcl.mul.exit289
  %491 = extractvalue %INT %489, 1, !dbg !6135
  %492 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %491, i32 %491) #5, !dbg !6136
  %493 = extractvalue { i32, i1 } %492, 1, !dbg !6137
  %494 = tail call i1 @llvm.expect.i1(i1 %493, i1 false) #5, !dbg !6137
  br i1 %494, label %overflow.32bit.i264, label %return.32bit.i266, !dbg !6137

overflow.32bit.i264:                              ; preds = %op.32bit.i260
  %x.64.i261 = sext i32 %491 to i64, !dbg !6138
  %z.64.i263 = mul nsw i64 %x.64.i261, %x.64.i261, !dbg !6139
  %495 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i263, 2, !dbg !6139
  br label %tcl.mul.exit273, !dbg !6139

return.32bit.i266:                                ; preds = %op.32bit.i260
  %z.32.i265 = extractvalue { i32, i1 } %492, 0, !dbg !6140
  %496 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i265, 1, !dbg !6140
  br label %tcl.mul.exit273, !dbg !6140

497:                                              ; preds = %tcl.mul.exit289
  %498 = extractvalue %INT %489, 2, !dbg !6141
  %z.643.i272 = mul i64 %498, %498, !dbg !6143
  %499 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i272, 2, !dbg !6143
  br label %tcl.mul.exit273, !dbg !6143

tcl.mul.exit273:                                  ; preds = %497, %return.32bit.i266, %overflow.32bit.i264
  %500 = phi %INT [ %495, %overflow.32bit.i264 ], [ %496, %return.32bit.i266 ], [ %499, %497 ]
  %501 = extractvalue %INT %500, 0, !dbg !6144
  br i1 %501, label %508, label %op.32bit.i244, !dbg !6144

op.32bit.i244:                                    ; preds = %tcl.mul.exit273
  %502 = extractvalue %INT %500, 1, !dbg !6146
  %503 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %502, i32 %502) #5, !dbg !6147
  %504 = extractvalue { i32, i1 } %503, 1, !dbg !6148
  %505 = tail call i1 @llvm.expect.i1(i1 %504, i1 false) #5, !dbg !6148
  br i1 %505, label %overflow.32bit.i248, label %return.32bit.i250, !dbg !6148

overflow.32bit.i248:                              ; preds = %op.32bit.i244
  %x.64.i245 = sext i32 %502 to i64, !dbg !6149
  %z.64.i247 = mul nsw i64 %x.64.i245, %x.64.i245, !dbg !6150
  %506 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i247, 2, !dbg !6150
  br label %tcl.mul.exit257, !dbg !6150

return.32bit.i250:                                ; preds = %op.32bit.i244
  %z.32.i249 = extractvalue { i32, i1 } %503, 0, !dbg !6151
  %507 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i249, 1, !dbg !6151
  br label %tcl.mul.exit257, !dbg !6151

508:                                              ; preds = %tcl.mul.exit273
  %509 = extractvalue %INT %500, 2, !dbg !6152
  %z.643.i256 = mul i64 %509, %509, !dbg !6154
  %510 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i256, 2, !dbg !6154
  br label %tcl.mul.exit257, !dbg !6154

tcl.mul.exit257:                                  ; preds = %508, %return.32bit.i250, %overflow.32bit.i248
  %511 = phi %INT [ %506, %overflow.32bit.i248 ], [ %507, %return.32bit.i250 ], [ %510, %508 ]
  %512 = extractvalue %INT %511, 0, !dbg !6155
  br i1 %512, label %tcl.int.64.exit.i237, label %check2.i226, !dbg !6155

check2.i226:                                      ; preds = %tcl.mul.exit257
  %513 = extractvalue %INT %511, 1, !dbg !6157
  br i1 %460, label %tcl.int.64.exit.thread.i235, label %op.32bit.i228, !dbg !6158

op.32bit.i228:                                    ; preds = %check2.i226
  %y.32.i227 = extractvalue %INT %x, 1, !dbg !6159
  %514 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %513, i32 %y.32.i227) #5, !dbg !6160
  %515 = extractvalue { i32, i1 } %514, 1, !dbg !6161
  %516 = tail call i1 @llvm.expect.i1(i1 %515, i1 false) #5, !dbg !6161
  br i1 %516, label %overflow.32bit.i232, label %return.32bit.i234, !dbg !6161

overflow.32bit.i232:                              ; preds = %op.32bit.i228
  %x.64.i229 = sext i32 %513 to i64, !dbg !6162
  %x.641.i230 = sext i32 %y.32.i227 to i64, !dbg !6163
  %z.64.i231 = mul nsw i64 %x.64.i229, %x.641.i230, !dbg !6164
  %517 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i231, 2, !dbg !6164
  br label %tcl.mul.exit865, !dbg !6164

return.32bit.i234:                                ; preds = %op.32bit.i228
  %z.32.i233 = extractvalue { i32, i1 } %514, 0, !dbg !6165
  %518 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i233, 1, !dbg !6165
  br label %tcl.mul.exit865, !dbg !6165

tcl.int.64.exit.thread.i235:                      ; preds = %check2.i226
  %519 = sext i32 %513 to i64, !dbg !6166
  %520 = extractvalue %INT %x, 2, !dbg !6168
  br label %525, !dbg !6168

tcl.int.64.exit.i237:                             ; preds = %tcl.mul.exit257
  %521 = extractvalue %INT %511, 2, !dbg !6170
  %522 = extractvalue %INT %x, 1, !dbg !6168
  %523 = sext i32 %522 to i64, !dbg !6168
  %524 = extractvalue %INT %x, 2, !dbg !6168
  br i1 %460, label %525, label %527, !dbg !6168

525:                                              ; preds = %tcl.int.64.exit.i237, %tcl.int.64.exit.thread.i235
  %526 = phi i64 [ %520, %tcl.int.64.exit.thread.i235 ], [ %524, %tcl.int.64.exit.i237 ]
  %x.642412.i238 = phi i64 [ %519, %tcl.int.64.exit.thread.i235 ], [ %521, %tcl.int.64.exit.i237 ]
  br label %527, !dbg !6168

527:                                              ; preds = %525, %tcl.int.64.exit.i237
  %x.642411.i239 = phi i64 [ %x.642412.i238, %525 ], [ %521, %tcl.int.64.exit.i237 ]
  %528 = phi i64 [ %526, %525 ], [ %523, %tcl.int.64.exit.i237 ]
  %z.643.i240 = mul i64 %528, %x.642411.i239, !dbg !6171
  %529 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i240, 2, !dbg !6171
  br label %tcl.mul.exit865, !dbg !6171

pow14:                                            ; preds = %enter
  %530 = extractvalue %INT %x, 0, !dbg !6172
  br i1 %530, label %537, label %op.32bit.i212, !dbg !6172

op.32bit.i212:                                    ; preds = %pow14
  %531 = extractvalue %INT %x, 1, !dbg !6174
  %532 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %531, i32 %531) #5, !dbg !6175
  %533 = extractvalue { i32, i1 } %532, 1, !dbg !6176
  %534 = tail call i1 @llvm.expect.i1(i1 %533, i1 false) #5, !dbg !6176
  br i1 %534, label %overflow.32bit.i216, label %return.32bit.i218, !dbg !6176

overflow.32bit.i216:                              ; preds = %op.32bit.i212
  %x.64.i213 = sext i32 %531 to i64, !dbg !6177
  %z.64.i215 = mul nsw i64 %x.64.i213, %x.64.i213, !dbg !6178
  %535 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i215, 2, !dbg !6178
  br label %tcl.mul.exit225, !dbg !6178

return.32bit.i218:                                ; preds = %op.32bit.i212
  %z.32.i217 = extractvalue { i32, i1 } %532, 0, !dbg !6179
  %536 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i217, 1, !dbg !6179
  br label %tcl.mul.exit225, !dbg !6179

537:                                              ; preds = %pow14
  %538 = extractvalue %INT %x, 2, !dbg !6180
  %z.643.i224 = mul i64 %538, %538, !dbg !6182
  %539 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i224, 2, !dbg !6182
  br label %tcl.mul.exit225, !dbg !6182

tcl.mul.exit225:                                  ; preds = %537, %return.32bit.i218, %overflow.32bit.i216
  %540 = phi %INT [ %535, %overflow.32bit.i216 ], [ %536, %return.32bit.i218 ], [ %539, %537 ]
  %541 = extractvalue %INT %540, 0, !dbg !6183
  br i1 %541, label %tcl.int.64.exit.i205, label %check2.i194, !dbg !6183

check2.i194:                                      ; preds = %tcl.mul.exit225
  %542 = extractvalue %INT %540, 1, !dbg !6185
  br i1 %530, label %tcl.int.64.exit.thread.i203, label %op.32bit.i196, !dbg !6186

op.32bit.i196:                                    ; preds = %check2.i194
  %y.32.i195 = extractvalue %INT %x, 1, !dbg !6187
  %543 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %542, i32 %y.32.i195) #5, !dbg !6188
  %544 = extractvalue { i32, i1 } %543, 1, !dbg !6189
  %545 = tail call i1 @llvm.expect.i1(i1 %544, i1 false) #5, !dbg !6189
  br i1 %545, label %overflow.32bit.i200, label %return.32bit.i202, !dbg !6189

overflow.32bit.i200:                              ; preds = %op.32bit.i196
  %x.64.i197 = sext i32 %542 to i64, !dbg !6190
  %x.641.i198 = sext i32 %y.32.i195 to i64, !dbg !6191
  %z.64.i199 = mul nsw i64 %x.64.i197, %x.641.i198, !dbg !6192
  %546 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i199, 2, !dbg !6192
  br label %tcl.mul.exit209, !dbg !6192

return.32bit.i202:                                ; preds = %op.32bit.i196
  %z.32.i201 = extractvalue { i32, i1 } %543, 0, !dbg !6193
  %547 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i201, 1, !dbg !6193
  br label %tcl.mul.exit209, !dbg !6193

tcl.int.64.exit.thread.i203:                      ; preds = %check2.i194
  %548 = sext i32 %542 to i64, !dbg !6194
  %549 = extractvalue %INT %x, 2, !dbg !6196
  br label %554, !dbg !6196

tcl.int.64.exit.i205:                             ; preds = %tcl.mul.exit225
  %550 = extractvalue %INT %540, 2, !dbg !6198
  %551 = extractvalue %INT %x, 1, !dbg !6196
  %552 = sext i32 %551 to i64, !dbg !6196
  %553 = extractvalue %INT %x, 2, !dbg !6196
  br i1 %530, label %554, label %556, !dbg !6196

554:                                              ; preds = %tcl.int.64.exit.i205, %tcl.int.64.exit.thread.i203
  %555 = phi i64 [ %549, %tcl.int.64.exit.thread.i203 ], [ %553, %tcl.int.64.exit.i205 ]
  %x.642412.i206 = phi i64 [ %548, %tcl.int.64.exit.thread.i203 ], [ %550, %tcl.int.64.exit.i205 ]
  br label %556, !dbg !6196

556:                                              ; preds = %554, %tcl.int.64.exit.i205
  %x.642411.i207 = phi i64 [ %x.642412.i206, %554 ], [ %550, %tcl.int.64.exit.i205 ]
  %557 = phi i64 [ %555, %554 ], [ %552, %tcl.int.64.exit.i205 ]
  %z.643.i208 = mul i64 %557, %x.642411.i207, !dbg !6199
  %558 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i208, 2, !dbg !6199
  br label %tcl.mul.exit209, !dbg !6199

tcl.mul.exit209:                                  ; preds = %556, %return.32bit.i202, %overflow.32bit.i200
  %559 = phi %INT [ %546, %overflow.32bit.i200 ], [ %547, %return.32bit.i202 ], [ %558, %556 ]
  %560 = extractvalue %INT %559, 0, !dbg !6200
  br i1 %560, label %567, label %op.32bit.i180, !dbg !6200

op.32bit.i180:                                    ; preds = %tcl.mul.exit209
  %561 = extractvalue %INT %559, 1, !dbg !6202
  %562 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %561, i32 %561) #5, !dbg !6203
  %563 = extractvalue { i32, i1 } %562, 1, !dbg !6204
  %564 = tail call i1 @llvm.expect.i1(i1 %563, i1 false) #5, !dbg !6204
  br i1 %564, label %overflow.32bit.i184, label %return.32bit.i186, !dbg !6204

overflow.32bit.i184:                              ; preds = %op.32bit.i180
  %x.64.i181 = sext i32 %561 to i64, !dbg !6205
  %z.64.i183 = mul nsw i64 %x.64.i181, %x.64.i181, !dbg !6206
  %565 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i183, 2, !dbg !6206
  br label %tcl.mul.exit193, !dbg !6206

return.32bit.i186:                                ; preds = %op.32bit.i180
  %z.32.i185 = extractvalue { i32, i1 } %562, 0, !dbg !6207
  %566 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i185, 1, !dbg !6207
  br label %tcl.mul.exit193, !dbg !6207

567:                                              ; preds = %tcl.mul.exit209
  %568 = extractvalue %INT %559, 2, !dbg !6208
  %z.643.i192 = mul i64 %568, %568, !dbg !6210
  %569 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i192, 2, !dbg !6210
  br label %tcl.mul.exit193, !dbg !6210

tcl.mul.exit193:                                  ; preds = %567, %return.32bit.i186, %overflow.32bit.i184
  %570 = phi %INT [ %565, %overflow.32bit.i184 ], [ %566, %return.32bit.i186 ], [ %569, %567 ]
  %571 = extractvalue %INT %570, 0, !dbg !6211
  br i1 %571, label %tcl.int.64.exit.i173, label %check2.i162, !dbg !6211

check2.i162:                                      ; preds = %tcl.mul.exit193
  %572 = extractvalue %INT %570, 1, !dbg !6213
  br i1 %530, label %tcl.int.64.exit.thread.i171, label %op.32bit.i164, !dbg !6214

op.32bit.i164:                                    ; preds = %check2.i162
  %y.32.i163 = extractvalue %INT %x, 1, !dbg !6215
  %573 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %572, i32 %y.32.i163) #5, !dbg !6216
  %574 = extractvalue { i32, i1 } %573, 1, !dbg !6217
  %575 = tail call i1 @llvm.expect.i1(i1 %574, i1 false) #5, !dbg !6217
  br i1 %575, label %overflow.32bit.i168, label %return.32bit.i170, !dbg !6217

overflow.32bit.i168:                              ; preds = %op.32bit.i164
  %x.64.i165 = sext i32 %572 to i64, !dbg !6218
  %x.641.i166 = sext i32 %y.32.i163 to i64, !dbg !6219
  %z.64.i167 = mul nsw i64 %x.64.i165, %x.641.i166, !dbg !6220
  %576 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i167, 2, !dbg !6220
  br label %tcl.mul.exit177, !dbg !6220

return.32bit.i170:                                ; preds = %op.32bit.i164
  %z.32.i169 = extractvalue { i32, i1 } %573, 0, !dbg !6221
  %577 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i169, 1, !dbg !6221
  br label %tcl.mul.exit177, !dbg !6221

tcl.int.64.exit.thread.i171:                      ; preds = %check2.i162
  %578 = sext i32 %572 to i64, !dbg !6222
  %579 = extractvalue %INT %x, 2, !dbg !6224
  br label %584, !dbg !6224

tcl.int.64.exit.i173:                             ; preds = %tcl.mul.exit193
  %580 = extractvalue %INT %570, 2, !dbg !6226
  %581 = extractvalue %INT %x, 1, !dbg !6224
  %582 = sext i32 %581 to i64, !dbg !6224
  %583 = extractvalue %INT %x, 2, !dbg !6224
  br i1 %530, label %584, label %586, !dbg !6224

584:                                              ; preds = %tcl.int.64.exit.i173, %tcl.int.64.exit.thread.i171
  %585 = phi i64 [ %579, %tcl.int.64.exit.thread.i171 ], [ %583, %tcl.int.64.exit.i173 ]
  %x.642412.i174 = phi i64 [ %578, %tcl.int.64.exit.thread.i171 ], [ %580, %tcl.int.64.exit.i173 ]
  br label %586, !dbg !6224

586:                                              ; preds = %584, %tcl.int.64.exit.i173
  %x.642411.i175 = phi i64 [ %x.642412.i174, %584 ], [ %580, %tcl.int.64.exit.i173 ]
  %587 = phi i64 [ %585, %584 ], [ %582, %tcl.int.64.exit.i173 ]
  %z.643.i176 = mul i64 %587, %x.642411.i175, !dbg !6227
  %588 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i176, 2, !dbg !6227
  br label %tcl.mul.exit177, !dbg !6227

tcl.mul.exit177:                                  ; preds = %586, %return.32bit.i170, %overflow.32bit.i168
  %589 = phi %INT [ %576, %overflow.32bit.i168 ], [ %577, %return.32bit.i170 ], [ %588, %586 ]
  %590 = extractvalue %INT %589, 0, !dbg !6228
  br i1 %590, label %597, label %op.32bit.i148, !dbg !6228

op.32bit.i148:                                    ; preds = %tcl.mul.exit177
  %591 = extractvalue %INT %589, 1, !dbg !6230
  %592 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %591, i32 %591) #5, !dbg !6231
  %593 = extractvalue { i32, i1 } %592, 1, !dbg !6232
  %594 = tail call i1 @llvm.expect.i1(i1 %593, i1 false) #5, !dbg !6232
  br i1 %594, label %overflow.32bit.i152, label %return.32bit.i154, !dbg !6232

overflow.32bit.i152:                              ; preds = %op.32bit.i148
  %x.64.i149 = sext i32 %591 to i64, !dbg !6233
  %z.64.i151 = mul nsw i64 %x.64.i149, %x.64.i149, !dbg !6234
  %595 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i151, 2, !dbg !6234
  br label %tcl.mul.exit865, !dbg !6234

return.32bit.i154:                                ; preds = %op.32bit.i148
  %z.32.i153 = extractvalue { i32, i1 } %592, 0, !dbg !6235
  %596 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i153, 1, !dbg !6235
  br label %tcl.mul.exit865, !dbg !6235

597:                                              ; preds = %tcl.mul.exit177
  %598 = extractvalue %INT %589, 2, !dbg !6236
  %z.643.i160 = mul i64 %598, %598, !dbg !6238
  %599 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i160, 2, !dbg !6238
  br label %tcl.mul.exit865, !dbg !6238

pow15:                                            ; preds = %enter
  %600 = extractvalue %INT %x, 0, !dbg !6239
  br i1 %600, label %607, label %op.32bit.i132, !dbg !6239

op.32bit.i132:                                    ; preds = %pow15
  %601 = extractvalue %INT %x, 1, !dbg !6241
  %602 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %601, i32 %601) #5, !dbg !6242
  %603 = extractvalue { i32, i1 } %602, 1, !dbg !6243
  %604 = tail call i1 @llvm.expect.i1(i1 %603, i1 false) #5, !dbg !6243
  br i1 %604, label %overflow.32bit.i136, label %return.32bit.i138, !dbg !6243

overflow.32bit.i136:                              ; preds = %op.32bit.i132
  %x.64.i133 = sext i32 %601 to i64, !dbg !6244
  %z.64.i135 = mul nsw i64 %x.64.i133, %x.64.i133, !dbg !6245
  %605 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i135, 2, !dbg !6245
  br label %tcl.mul.exit145, !dbg !6245

return.32bit.i138:                                ; preds = %op.32bit.i132
  %z.32.i137 = extractvalue { i32, i1 } %602, 0, !dbg !6246
  %606 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i137, 1, !dbg !6246
  br label %tcl.mul.exit145, !dbg !6246

607:                                              ; preds = %pow15
  %608 = extractvalue %INT %x, 2, !dbg !6247
  %z.643.i144 = mul i64 %608, %608, !dbg !6249
  %609 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i144, 2, !dbg !6249
  br label %tcl.mul.exit145, !dbg !6249

tcl.mul.exit145:                                  ; preds = %607, %return.32bit.i138, %overflow.32bit.i136
  %610 = phi %INT [ %605, %overflow.32bit.i136 ], [ %606, %return.32bit.i138 ], [ %609, %607 ]
  %611 = extractvalue %INT %610, 0, !dbg !6250
  br i1 %611, label %tcl.int.64.exit.i125, label %check2.i114, !dbg !6250

check2.i114:                                      ; preds = %tcl.mul.exit145
  %612 = extractvalue %INT %610, 1, !dbg !6252
  br i1 %600, label %tcl.int.64.exit.thread.i123, label %op.32bit.i116, !dbg !6253

op.32bit.i116:                                    ; preds = %check2.i114
  %y.32.i115 = extractvalue %INT %x, 1, !dbg !6254
  %613 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %612, i32 %y.32.i115) #5, !dbg !6255
  %614 = extractvalue { i32, i1 } %613, 1, !dbg !6256
  %615 = tail call i1 @llvm.expect.i1(i1 %614, i1 false) #5, !dbg !6256
  br i1 %615, label %overflow.32bit.i120, label %return.32bit.i122, !dbg !6256

overflow.32bit.i120:                              ; preds = %op.32bit.i116
  %x.64.i117 = sext i32 %612 to i64, !dbg !6257
  %x.641.i118 = sext i32 %y.32.i115 to i64, !dbg !6258
  %z.64.i119 = mul nsw i64 %x.64.i117, %x.641.i118, !dbg !6259
  %616 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i119, 2, !dbg !6259
  br label %tcl.mul.exit129, !dbg !6259

return.32bit.i122:                                ; preds = %op.32bit.i116
  %z.32.i121 = extractvalue { i32, i1 } %613, 0, !dbg !6260
  %617 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i121, 1, !dbg !6260
  br label %tcl.mul.exit129, !dbg !6260

tcl.int.64.exit.thread.i123:                      ; preds = %check2.i114
  %618 = sext i32 %612 to i64, !dbg !6261
  %619 = extractvalue %INT %x, 2, !dbg !6263
  br label %624, !dbg !6263

tcl.int.64.exit.i125:                             ; preds = %tcl.mul.exit145
  %620 = extractvalue %INT %610, 2, !dbg !6265
  %621 = extractvalue %INT %x, 1, !dbg !6263
  %622 = sext i32 %621 to i64, !dbg !6263
  %623 = extractvalue %INT %x, 2, !dbg !6263
  br i1 %600, label %624, label %626, !dbg !6263

624:                                              ; preds = %tcl.int.64.exit.i125, %tcl.int.64.exit.thread.i123
  %625 = phi i64 [ %619, %tcl.int.64.exit.thread.i123 ], [ %623, %tcl.int.64.exit.i125 ]
  %x.642412.i126 = phi i64 [ %618, %tcl.int.64.exit.thread.i123 ], [ %620, %tcl.int.64.exit.i125 ]
  br label %626, !dbg !6263

626:                                              ; preds = %624, %tcl.int.64.exit.i125
  %x.642411.i127 = phi i64 [ %x.642412.i126, %624 ], [ %620, %tcl.int.64.exit.i125 ]
  %627 = phi i64 [ %625, %624 ], [ %622, %tcl.int.64.exit.i125 ]
  %z.643.i128 = mul i64 %627, %x.642411.i127, !dbg !6266
  %628 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i128, 2, !dbg !6266
  br label %tcl.mul.exit129, !dbg !6266

tcl.mul.exit129:                                  ; preds = %626, %return.32bit.i122, %overflow.32bit.i120
  %629 = phi %INT [ %616, %overflow.32bit.i120 ], [ %617, %return.32bit.i122 ], [ %628, %626 ]
  %630 = extractvalue %INT %629, 0, !dbg !6267
  br i1 %630, label %637, label %op.32bit.i100, !dbg !6267

op.32bit.i100:                                    ; preds = %tcl.mul.exit129
  %631 = extractvalue %INT %629, 1, !dbg !6269
  %632 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %631, i32 %631) #5, !dbg !6270
  %633 = extractvalue { i32, i1 } %632, 1, !dbg !6271
  %634 = tail call i1 @llvm.expect.i1(i1 %633, i1 false) #5, !dbg !6271
  br i1 %634, label %overflow.32bit.i104, label %return.32bit.i106, !dbg !6271

overflow.32bit.i104:                              ; preds = %op.32bit.i100
  %x.64.i101 = sext i32 %631 to i64, !dbg !6272
  %z.64.i103 = mul nsw i64 %x.64.i101, %x.64.i101, !dbg !6273
  %635 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i103, 2, !dbg !6273
  br label %tcl.mul.exit113, !dbg !6273

return.32bit.i106:                                ; preds = %op.32bit.i100
  %z.32.i105 = extractvalue { i32, i1 } %632, 0, !dbg !6274
  %636 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i105, 1, !dbg !6274
  br label %tcl.mul.exit113, !dbg !6274

637:                                              ; preds = %tcl.mul.exit129
  %638 = extractvalue %INT %629, 2, !dbg !6275
  %z.643.i112 = mul i64 %638, %638, !dbg !6277
  %639 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i112, 2, !dbg !6277
  br label %tcl.mul.exit113, !dbg !6277

tcl.mul.exit113:                                  ; preds = %637, %return.32bit.i106, %overflow.32bit.i104
  %640 = phi %INT [ %635, %overflow.32bit.i104 ], [ %636, %return.32bit.i106 ], [ %639, %637 ]
  %641 = extractvalue %INT %640, 0, !dbg !6278
  br i1 %641, label %tcl.int.64.exit.i93, label %check2.i82, !dbg !6278

check2.i82:                                       ; preds = %tcl.mul.exit113
  %642 = extractvalue %INT %640, 1, !dbg !6280
  br i1 %600, label %tcl.int.64.exit.thread.i91, label %op.32bit.i84, !dbg !6281

op.32bit.i84:                                     ; preds = %check2.i82
  %y.32.i83 = extractvalue %INT %x, 1, !dbg !6282
  %643 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %642, i32 %y.32.i83) #5, !dbg !6283
  %644 = extractvalue { i32, i1 } %643, 1, !dbg !6284
  %645 = tail call i1 @llvm.expect.i1(i1 %644, i1 false) #5, !dbg !6284
  br i1 %645, label %overflow.32bit.i88, label %return.32bit.i90, !dbg !6284

overflow.32bit.i88:                               ; preds = %op.32bit.i84
  %x.64.i85 = sext i32 %642 to i64, !dbg !6285
  %x.641.i86 = sext i32 %y.32.i83 to i64, !dbg !6286
  %z.64.i87 = mul nsw i64 %x.64.i85, %x.641.i86, !dbg !6287
  %646 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i87, 2, !dbg !6287
  br label %tcl.mul.exit97, !dbg !6287

return.32bit.i90:                                 ; preds = %op.32bit.i84
  %z.32.i89 = extractvalue { i32, i1 } %643, 0, !dbg !6288
  %647 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i89, 1, !dbg !6288
  br label %tcl.mul.exit97, !dbg !6288

tcl.int.64.exit.thread.i91:                       ; preds = %check2.i82
  %648 = sext i32 %642 to i64, !dbg !6289
  %649 = extractvalue %INT %x, 2, !dbg !6291
  br label %654, !dbg !6291

tcl.int.64.exit.i93:                              ; preds = %tcl.mul.exit113
  %650 = extractvalue %INT %640, 2, !dbg !6293
  %651 = extractvalue %INT %x, 1, !dbg !6291
  %652 = sext i32 %651 to i64, !dbg !6291
  %653 = extractvalue %INT %x, 2, !dbg !6291
  br i1 %600, label %654, label %656, !dbg !6291

654:                                              ; preds = %tcl.int.64.exit.i93, %tcl.int.64.exit.thread.i91
  %655 = phi i64 [ %649, %tcl.int.64.exit.thread.i91 ], [ %653, %tcl.int.64.exit.i93 ]
  %x.642412.i94 = phi i64 [ %648, %tcl.int.64.exit.thread.i91 ], [ %650, %tcl.int.64.exit.i93 ]
  br label %656, !dbg !6291

656:                                              ; preds = %654, %tcl.int.64.exit.i93
  %x.642411.i95 = phi i64 [ %x.642412.i94, %654 ], [ %650, %tcl.int.64.exit.i93 ]
  %657 = phi i64 [ %655, %654 ], [ %652, %tcl.int.64.exit.i93 ]
  %z.643.i96 = mul i64 %657, %x.642411.i95, !dbg !6294
  %658 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i96, 2, !dbg !6294
  br label %tcl.mul.exit97, !dbg !6294

tcl.mul.exit97:                                   ; preds = %656, %return.32bit.i90, %overflow.32bit.i88
  %659 = phi %INT [ %646, %overflow.32bit.i88 ], [ %647, %return.32bit.i90 ], [ %658, %656 ]
  %660 = extractvalue %INT %659, 0, !dbg !6295
  br i1 %660, label %667, label %op.32bit.i68, !dbg !6295

op.32bit.i68:                                     ; preds = %tcl.mul.exit97
  %661 = extractvalue %INT %659, 1, !dbg !6297
  %662 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %661, i32 %661) #5, !dbg !6298
  %663 = extractvalue { i32, i1 } %662, 1, !dbg !6299
  %664 = tail call i1 @llvm.expect.i1(i1 %663, i1 false) #5, !dbg !6299
  br i1 %664, label %overflow.32bit.i72, label %return.32bit.i74, !dbg !6299

overflow.32bit.i72:                               ; preds = %op.32bit.i68
  %x.64.i69 = sext i32 %661 to i64, !dbg !6300
  %z.64.i71 = mul nsw i64 %x.64.i69, %x.64.i69, !dbg !6301
  %665 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i71, 2, !dbg !6301
  br label %tcl.mul.exit81, !dbg !6301

return.32bit.i74:                                 ; preds = %op.32bit.i68
  %z.32.i73 = extractvalue { i32, i1 } %662, 0, !dbg !6302
  %666 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i73, 1, !dbg !6302
  br label %tcl.mul.exit81, !dbg !6302

667:                                              ; preds = %tcl.mul.exit97
  %668 = extractvalue %INT %659, 2, !dbg !6303
  %z.643.i80 = mul i64 %668, %668, !dbg !6305
  %669 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i80, 2, !dbg !6305
  br label %tcl.mul.exit81, !dbg !6305

tcl.mul.exit81:                                   ; preds = %667, %return.32bit.i74, %overflow.32bit.i72
  %670 = phi %INT [ %665, %overflow.32bit.i72 ], [ %666, %return.32bit.i74 ], [ %669, %667 ]
  %671 = extractvalue %INT %670, 0, !dbg !6306
  br i1 %671, label %tcl.int.64.exit.i61, label %check2.i50, !dbg !6306

check2.i50:                                       ; preds = %tcl.mul.exit81
  %672 = extractvalue %INT %670, 1, !dbg !6308
  br i1 %600, label %tcl.int.64.exit.thread.i59, label %op.32bit.i52, !dbg !6309

op.32bit.i52:                                     ; preds = %check2.i50
  %y.32.i51 = extractvalue %INT %x, 1, !dbg !6310
  %673 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %672, i32 %y.32.i51) #5, !dbg !6311
  %674 = extractvalue { i32, i1 } %673, 1, !dbg !6312
  %675 = tail call i1 @llvm.expect.i1(i1 %674, i1 false) #5, !dbg !6312
  br i1 %675, label %overflow.32bit.i56, label %return.32bit.i58, !dbg !6312

overflow.32bit.i56:                               ; preds = %op.32bit.i52
  %x.64.i53 = sext i32 %672 to i64, !dbg !6313
  %x.641.i54 = sext i32 %y.32.i51 to i64, !dbg !6314
  %z.64.i55 = mul nsw i64 %x.64.i53, %x.641.i54, !dbg !6315
  %676 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i55, 2, !dbg !6315
  br label %tcl.mul.exit865, !dbg !6315

return.32bit.i58:                                 ; preds = %op.32bit.i52
  %z.32.i57 = extractvalue { i32, i1 } %673, 0, !dbg !6316
  %677 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i57, 1, !dbg !6316
  br label %tcl.mul.exit865, !dbg !6316

tcl.int.64.exit.thread.i59:                       ; preds = %check2.i50
  %678 = sext i32 %672 to i64, !dbg !6317
  %679 = extractvalue %INT %x, 2, !dbg !6319
  br label %684, !dbg !6319

tcl.int.64.exit.i61:                              ; preds = %tcl.mul.exit81
  %680 = extractvalue %INT %670, 2, !dbg !6321
  %681 = extractvalue %INT %x, 1, !dbg !6319
  %682 = sext i32 %681 to i64, !dbg !6319
  %683 = extractvalue %INT %x, 2, !dbg !6319
  br i1 %600, label %684, label %686, !dbg !6319

684:                                              ; preds = %tcl.int.64.exit.i61, %tcl.int.64.exit.thread.i59
  %685 = phi i64 [ %679, %tcl.int.64.exit.thread.i59 ], [ %683, %tcl.int.64.exit.i61 ]
  %x.642412.i62 = phi i64 [ %678, %tcl.int.64.exit.thread.i59 ], [ %680, %tcl.int.64.exit.i61 ]
  br label %686, !dbg !6319

686:                                              ; preds = %684, %tcl.int.64.exit.i61
  %x.642411.i63 = phi i64 [ %x.642412.i62, %684 ], [ %680, %tcl.int.64.exit.i61 ]
  %687 = phi i64 [ %685, %684 ], [ %682, %tcl.int.64.exit.i61 ]
  %z.643.i64 = mul i64 %687, %x.642411.i63, !dbg !6322
  %688 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i64, 2, !dbg !6322
  br label %tcl.mul.exit865, !dbg !6322

pow16:                                            ; preds = %enter
  %689 = extractvalue %INT %x, 0, !dbg !6323
  br i1 %689, label %696, label %op.32bit.i36, !dbg !6323

op.32bit.i36:                                     ; preds = %pow16
  %690 = extractvalue %INT %x, 1, !dbg !6325
  %691 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %690, i32 %690) #5, !dbg !6326
  %692 = extractvalue { i32, i1 } %691, 1, !dbg !6327
  %693 = tail call i1 @llvm.expect.i1(i1 %692, i1 false) #5, !dbg !6327
  br i1 %693, label %overflow.32bit.i40, label %return.32bit.i42, !dbg !6327

overflow.32bit.i40:                               ; preds = %op.32bit.i36
  %x.64.i37 = sext i32 %690 to i64, !dbg !6328
  %z.64.i39 = mul nsw i64 %x.64.i37, %x.64.i37, !dbg !6329
  %694 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i39, 2, !dbg !6329
  br label %tcl.mul.exit49, !dbg !6329

return.32bit.i42:                                 ; preds = %op.32bit.i36
  %z.32.i41 = extractvalue { i32, i1 } %691, 0, !dbg !6330
  %695 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i41, 1, !dbg !6330
  br label %tcl.mul.exit49, !dbg !6330

696:                                              ; preds = %pow16
  %697 = extractvalue %INT %x, 2, !dbg !6331
  %z.643.i48 = mul i64 %697, %697, !dbg !6333
  %698 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i48, 2, !dbg !6333
  br label %tcl.mul.exit49, !dbg !6333

tcl.mul.exit49:                                   ; preds = %696, %return.32bit.i42, %overflow.32bit.i40
  %699 = phi %INT [ %694, %overflow.32bit.i40 ], [ %695, %return.32bit.i42 ], [ %698, %696 ]
  %700 = extractvalue %INT %699, 0, !dbg !6334
  br i1 %700, label %707, label %op.32bit.i20, !dbg !6334

op.32bit.i20:                                     ; preds = %tcl.mul.exit49
  %701 = extractvalue %INT %699, 1, !dbg !6336
  %702 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %701, i32 %701) #5, !dbg !6337
  %703 = extractvalue { i32, i1 } %702, 1, !dbg !6338
  %704 = tail call i1 @llvm.expect.i1(i1 %703, i1 false) #5, !dbg !6338
  br i1 %704, label %overflow.32bit.i24, label %return.32bit.i26, !dbg !6338

overflow.32bit.i24:                               ; preds = %op.32bit.i20
  %x.64.i21 = sext i32 %701 to i64, !dbg !6339
  %z.64.i23 = mul nsw i64 %x.64.i21, %x.64.i21, !dbg !6340
  %705 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i23, 2, !dbg !6340
  br label %tcl.mul.exit33, !dbg !6340

return.32bit.i26:                                 ; preds = %op.32bit.i20
  %z.32.i25 = extractvalue { i32, i1 } %702, 0, !dbg !6341
  %706 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i25, 1, !dbg !6341
  br label %tcl.mul.exit33, !dbg !6341

707:                                              ; preds = %tcl.mul.exit49
  %708 = extractvalue %INT %699, 2, !dbg !6342
  %z.643.i32 = mul i64 %708, %708, !dbg !6344
  %709 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i32, 2, !dbg !6344
  br label %tcl.mul.exit33, !dbg !6344

tcl.mul.exit33:                                   ; preds = %707, %return.32bit.i26, %overflow.32bit.i24
  %710 = phi %INT [ %705, %overflow.32bit.i24 ], [ %706, %return.32bit.i26 ], [ %709, %707 ]
  %711 = extractvalue %INT %710, 0, !dbg !6345
  br i1 %711, label %718, label %op.32bit.i4, !dbg !6345

op.32bit.i4:                                      ; preds = %tcl.mul.exit33
  %712 = extractvalue %INT %710, 1, !dbg !6347
  %713 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %712, i32 %712) #5, !dbg !6348
  %714 = extractvalue { i32, i1 } %713, 1, !dbg !6349
  %715 = tail call i1 @llvm.expect.i1(i1 %714, i1 false) #5, !dbg !6349
  br i1 %715, label %overflow.32bit.i8, label %return.32bit.i10, !dbg !6349

overflow.32bit.i8:                                ; preds = %op.32bit.i4
  %x.64.i5 = sext i32 %712 to i64, !dbg !6350
  %z.64.i7 = mul nsw i64 %x.64.i5, %x.64.i5, !dbg !6351
  %716 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i7, 2, !dbg !6351
  br label %tcl.mul.exit17, !dbg !6351

return.32bit.i10:                                 ; preds = %op.32bit.i4
  %z.32.i9 = extractvalue { i32, i1 } %713, 0, !dbg !6352
  %717 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i9, 1, !dbg !6352
  br label %tcl.mul.exit17, !dbg !6352

718:                                              ; preds = %tcl.mul.exit33
  %719 = extractvalue %INT %710, 2, !dbg !6353
  %z.643.i16 = mul i64 %719, %719, !dbg !6355
  %720 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i16, 2, !dbg !6355
  br label %tcl.mul.exit17, !dbg !6355

tcl.mul.exit17:                                   ; preds = %718, %return.32bit.i10, %overflow.32bit.i8
  %721 = phi %INT [ %716, %overflow.32bit.i8 ], [ %717, %return.32bit.i10 ], [ %720, %718 ]
  %722 = extractvalue %INT %721, 0, !dbg !6356
  br i1 %722, label %729, label %op.32bit.i, !dbg !6356

op.32bit.i:                                       ; preds = %tcl.mul.exit17
  %723 = extractvalue %INT %721, 1, !dbg !6358
  %724 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %723, i32 %723) #5, !dbg !6359
  %725 = extractvalue { i32, i1 } %724, 1, !dbg !6360
  %726 = tail call i1 @llvm.expect.i1(i1 %725, i1 false) #5, !dbg !6360
  br i1 %726, label %overflow.32bit.i, label %return.32bit.i, !dbg !6360

overflow.32bit.i:                                 ; preds = %op.32bit.i
  %x.64.i = sext i32 %723 to i64, !dbg !6361
  %z.64.i = mul nsw i64 %x.64.i, %x.64.i, !dbg !6362
  %727 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i, 2, !dbg !6362
  br label %tcl.mul.exit865, !dbg !6362

return.32bit.i:                                   ; preds = %op.32bit.i
  %z.32.i = extractvalue { i32, i1 } %724, 0, !dbg !6363
  %728 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i, 1, !dbg !6363
  br label %tcl.mul.exit865, !dbg !6363

729:                                              ; preds = %tcl.mul.exit17
  %730 = extractvalue %INT %721, 2, !dbg !6364
  %z.643.i = mul i64 %730, %730, !dbg !6366
  %731 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i, 2, !dbg !6366
  br label %tcl.mul.exit865, !dbg !6366

loop.bit0.i:                                      ; preds = %enter, %tcl.mul.exit.i
  %result.test27.i = phi %INT [ %result.double31.i, %tcl.mul.exit.i ], [ { i1 true, i32 undef, i64 1 }, %enter ]
  %x.test22.i = phi %INT [ %x.double3.i, %tcl.mul.exit.i ], [ %x, %enter ]
  %n.test21.i = phi i64 [ %n.double1.i, %tcl.mul.exit.i ], [ %4, %enter ]
  %732 = and i64 %n.test21.i, 1, !dbg !6367
  %733 = icmp eq i64 %732, 0, !dbg !6367
  %.pre.i = extractvalue %INT %x.test22.i, 0, !dbg !6369
  br i1 %733, label %loop.bit0.loop.double_crit_edge.i, label %loop.mult.i, !dbg !6367

loop.bit0.loop.double_crit_edge.i:                ; preds = %loop.bit0.i
  br i1 %.pre.i, label %loop.bit0.loop.double_crit_edge.i._crit_edge, label %loop.bit0.loop.double_crit_edge.i.op.32bit.i.i_crit_edge, !dbg !6370

loop.bit0.loop.double_crit_edge.i._crit_edge:     ; preds = %loop.bit0.loop.double_crit_edge.i
  %.pre = extractvalue %INT %x.test22.i, 2, !dbg !6372
  br label %755, !dbg !6370

loop.bit0.loop.double_crit_edge.i.op.32bit.i.i_crit_edge: ; preds = %loop.bit0.loop.double_crit_edge.i
  %.pre866 = extractvalue %INT %x.test22.i, 1, !dbg !6374
  br label %op.32bit.i.i, !dbg !6370

loop.mult.i:                                      ; preds = %loop.bit0.i
  br i1 %.pre.i, label %tcl.int.64.exit.i15.i, label %check2.i4.i, !dbg !6375

check2.i4.i:                                      ; preds = %loop.mult.i
  %734 = extractvalue %INT %result.test27.i, 0, !dbg !6377
  %735 = extractvalue %INT %x.test22.i, 1, !dbg !6378
  br i1 %734, label %loop.double.i, label %op.32bit.i6.i, !dbg !6377

op.32bit.i6.i:                                    ; preds = %check2.i4.i
  %y.32.i5.i = extractvalue %INT %result.test27.i, 1, !dbg !6379
  %736 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %735, i32 %y.32.i5.i) #5, !dbg !6380
  %737 = extractvalue { i32, i1 } %736, 1, !dbg !6381
  %738 = tail call i1 @llvm.expect.i1(i1 %737, i1 false) #5, !dbg !6381
  br i1 %738, label %overflow.32bit.i10.i, label %return.32bit.i12.i, !dbg !6381

overflow.32bit.i10.i:                             ; preds = %op.32bit.i6.i
  %x.64.i7.i = sext i32 %735 to i64, !dbg !6382
  %x.641.i8.i = sext i32 %y.32.i5.i to i64, !dbg !6383
  %z.64.i9.i = mul nsw i64 %x.64.i7.i, %x.641.i8.i, !dbg !6384
  %739 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i9.i, 2, !dbg !6384
  br label %loop.double.thread.i, !dbg !6384

return.32bit.i12.i:                               ; preds = %op.32bit.i6.i
  %z.32.i11.i = extractvalue { i32, i1 } %736, 0, !dbg !6385
  %740 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i11.i, 1, !dbg !6385
  br label %loop.double.thread.i, !dbg !6385

tcl.int.64.exit.i15.i:                            ; preds = %loop.mult.i
  %741 = extractvalue %INT %x.test22.i, 2, !dbg !6386
  %.pre.i14.i = extractvalue %INT %result.test27.i, 0, !dbg !6388
  br i1 %.pre.i14.i, label %loop.double.thread40.i, label %loop.double.thread36.i, !dbg !6388

loop.double.thread40.i:                           ; preds = %tcl.int.64.exit.i15.i
  %742 = extractvalue %INT %result.test27.i, 2, !dbg !6388
  %z.643.i1842.i = mul i64 %741, %742, !dbg !6390
  %743 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i1842.i, 2, !dbg !6390
  %n.mult43.i = add i64 %n.test21.i, -1, !dbg !6391
  br label %755, !dbg !6370

loop.double.thread36.i:                           ; preds = %tcl.int.64.exit.i15.i
  %744 = extractvalue %INT %result.test27.i, 1, !dbg !6388
  %745 = sext i32 %744 to i64, !dbg !6388
  %z.643.i1838.i = mul i64 %741, %745, !dbg !6390
  %746 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i1838.i, 2, !dbg !6390
  %n.mult39.i = add i64 %n.test21.i, -1, !dbg !6391
  br label %755, !dbg !6370

loop.double.thread.i:                             ; preds = %return.32bit.i12.i, %overflow.32bit.i10.i
  %result.mult20.ph.i = phi %INT [ %740, %return.32bit.i12.i ], [ %739, %overflow.32bit.i10.i ]
  %n.mult35.i = add i64 %n.test21.i, -1, !dbg !6391
  br label %op.32bit.i.i, !dbg !6370

loop.double.i:                                    ; preds = %check2.i4.i
  %747 = sext i32 %735 to i64, !dbg !6392
  %748 = extractvalue %INT %result.test27.i, 2, !dbg !6388
  %z.643.i18.i = mul i64 %748, %747, !dbg !6390
  %749 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i18.i, 2, !dbg !6390
  %n.mult.i = add i64 %n.test21.i, -1, !dbg !6391
  br label %op.32bit.i.i

op.32bit.i.i:                                     ; preds = %loop.bit0.loop.double_crit_edge.i.op.32bit.i.i_crit_edge, %loop.double.i, %loop.double.thread.i
  %.pre-phi867 = phi i32 [ %.pre866, %loop.bit0.loop.double_crit_edge.i.op.32bit.i.i_crit_edge ], [ %735, %loop.double.i ], [ %735, %loop.double.thread.i ], !dbg !6374
  %result.double32.i = phi %INT [ %result.test27.i, %loop.bit0.loop.double_crit_edge.i.op.32bit.i.i_crit_edge ], [ %749, %loop.double.i ], [ %result.mult20.ph.i, %loop.double.thread.i ]
  %n.double29.i = phi i64 [ %n.test21.i, %loop.bit0.loop.double_crit_edge.i.op.32bit.i.i_crit_edge ], [ %n.mult.i, %loop.double.i ], [ %n.mult35.i, %loop.double.thread.i ]
  %750 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %.pre-phi867, i32 %.pre-phi867) #5, !dbg !6393
  %751 = extractvalue { i32, i1 } %750, 1, !dbg !6394
  %752 = tail call i1 @llvm.expect.i1(i1 %751, i1 false) #5, !dbg !6394
  br i1 %752, label %overflow.32bit.i.i, label %return.32bit.i.i, !dbg !6394

overflow.32bit.i.i:                               ; preds = %op.32bit.i.i
  %x.64.i.i = sext i32 %.pre-phi867 to i64, !dbg !6395
  %z.64.i.i = mul nsw i64 %x.64.i.i, %x.64.i.i, !dbg !6396
  %753 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i.i, 2, !dbg !6396
  br label %tcl.mul.exit.i, !dbg !6396

return.32bit.i.i:                                 ; preds = %op.32bit.i.i
  %z.32.i.i = extractvalue { i32, i1 } %750, 0, !dbg !6397
  %754 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i.i, 1, !dbg !6397
  br label %tcl.mul.exit.i, !dbg !6397

755:                                              ; preds = %loop.bit0.loop.double_crit_edge.i._crit_edge, %loop.double.thread36.i, %loop.double.thread40.i
  %.pre-phi = phi i64 [ %.pre, %loop.bit0.loop.double_crit_edge.i._crit_edge ], [ %741, %loop.double.thread36.i ], [ %741, %loop.double.thread40.i ], !dbg !6372
  %result.double33.i = phi %INT [ %result.test27.i, %loop.bit0.loop.double_crit_edge.i._crit_edge ], [ %746, %loop.double.thread36.i ], [ %743, %loop.double.thread40.i ]
  %n.double30.i = phi i64 [ %n.test21.i, %loop.bit0.loop.double_crit_edge.i._crit_edge ], [ %n.mult39.i, %loop.double.thread36.i ], [ %n.mult43.i, %loop.double.thread40.i ]
  %z.643.i.i = mul i64 %.pre-phi, %.pre-phi, !dbg !6398
  %756 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i.i, 2, !dbg !6398
  br label %tcl.mul.exit.i, !dbg !6398

tcl.mul.exit.i:                                   ; preds = %755, %return.32bit.i.i, %overflow.32bit.i.i
  %result.double31.i = phi %INT [ %result.double32.i, %overflow.32bit.i.i ], [ %result.double32.i, %return.32bit.i.i ], [ %result.double33.i, %755 ]
  %n.double28.i = phi i64 [ %n.double29.i, %overflow.32bit.i.i ], [ %n.double29.i, %return.32bit.i.i ], [ %n.double30.i, %755 ]
  %x.double3.i = phi %INT [ %753, %overflow.32bit.i.i ], [ %754, %return.32bit.i.i ], [ %756, %755 ]
  %n.double1.i = ashr i64 %n.double28.i, 1, !dbg !6399
  %757 = icmp eq i64 %n.double1.i, 0, !dbg !6400
  br i1 %757, label %tcl.mul.exit865, label %loop.bit0.i, !dbg !6400
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, %INT } @tcl.ipow(%INT %x, %INT %y, i32* noalias nocapture %ecvar) local_unnamed_addr #6 !dbg !6401 {
enter:
  %0 = extractvalue %INT %x, 0, !dbg !6406
  %1 = extractvalue %INT %x, 1, !dbg !6406
  %2 = sext i32 %1 to i64, !dbg !6406
  %3 = extractvalue %INT %x, 2, !dbg !6406
  %x.64210.i = select i1 %0, i64 %3, i64 %2, !dbg !6406
  %z.bit1.i = icmp eq i64 %x.64210.i, 0, !dbg !6408
  %4 = extractvalue %INT %y, 0, !dbg !6409
  %5 = extractvalue %INT %y, 1, !dbg !6409
  %6 = sext i32 %5 to i64, !dbg !6409
  %7 = extractvalue %INT %y, 2, !dbg !6409
  %x.64210.i214 = select i1 %4, i64 %7, i64 %6, !dbg !6409
  %z.bit1.i215 = icmp slt i64 %x.64210.i214, 0, !dbg !6411
  %8 = and i1 %z.bit1.i, %z.bit1.i215, !dbg !6412
  br i1 %8, label %fail.zeroToNegative, label %check.powSize, !dbg !6412

check.powSize:                                    ; preds = %enter
  switch i64 %x.64210.i214, label %else [
    i64 0, label %ok
    i64 1, label %pow1
  ], !dbg !6413

pow1:                                             ; preds = %check.powSize
  br label %ok, !dbg !6414

else:                                             ; preds = %check.powSize
  br i1 %0, label %ipow.64, label %ipow.32, !dbg !6415

ipow.32:                                          ; preds = %else
  switch i64 %x.64210.i214, label %loop.bit0.i.i166 [
    i64 2, label %op.32bit.i260.i5
    i64 3, label %op.32bit.i244.i14
    i64 4, label %op.32bit.i212.i37
    i64 5, label %op.32bit.i180.i53
    i64 6, label %op.32bit.i132.i77
    i64 7, label %op.32bit.i84.i108
    i64 8, label %op.32bit.i20.i139
  ], !dbg !6416

op.32bit.i260.i5:                                 ; preds = %ipow.32
  %9 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %1, i32 %1) #5, !dbg !6418
  %10 = extractvalue { i32, i1 } %9, 1, !dbg !6420
  %11 = tail call i1 @llvm.expect.i1(i1 %10, i1 false) #5, !dbg !6420
  br i1 %11, label %overflow.32bit.i264.i8, label %return.32bit.i266.i10, !dbg !6420

overflow.32bit.i264.i8:                           ; preds = %op.32bit.i260.i5
  %z.64.i263.i7 = mul nsw i64 %2, %2, !dbg !6421
  %12 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i263.i7, 2, !dbg !6421
  br label %ok, !dbg !6421

return.32bit.i266.i10:                            ; preds = %op.32bit.i260.i5
  %z.32.i265.i9 = extractvalue { i32, i1 } %9, 0, !dbg !6422
  %13 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i265.i9, 1, !dbg !6422
  br label %ok, !dbg !6422

op.32bit.i244.i14:                                ; preds = %ipow.32
  %14 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %1, i32 %1) #5, !dbg !6423
  %15 = extractvalue { i32, i1 } %14, 1, !dbg !6425
  %16 = tail call i1 @llvm.expect.i1(i1 %15, i1 false) #5, !dbg !6425
  %z.64.i247.i16 = mul nsw i64 %2, %2, !dbg !6425
  %17 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i247.i16, 2, !dbg !6425
  %z.32.i249.i18 = extractvalue { i32, i1 } %14, 0, !dbg !6425
  %18 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i249.i18, 1, !dbg !6425
  %19 = select i1 %16, %INT %17, %INT %18, !dbg !6425
  %20 = extractvalue %INT %19, 0, !dbg !6426
  br i1 %20, label %27, label %op.32bit.i228.i24, !dbg !6426

op.32bit.i228.i24:                                ; preds = %op.32bit.i244.i14
  %21 = extractvalue %INT %19, 1, !dbg !6428
  %22 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %21, i32 %1) #5, !dbg !6429
  %23 = extractvalue { i32, i1 } %22, 1, !dbg !6430
  %24 = tail call i1 @llvm.expect.i1(i1 %23, i1 false) #5, !dbg !6430
  br i1 %24, label %overflow.32bit.i232.i28, label %return.32bit.i234.i30, !dbg !6430

overflow.32bit.i232.i28:                          ; preds = %op.32bit.i228.i24
  %x.64.i229.i25 = sext i32 %21 to i64, !dbg !6431
  %z.64.i231.i27 = mul nsw i64 %x.64.i229.i25, %2, !dbg !6432
  %25 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i231.i27, 2, !dbg !6432
  br label %ok, !dbg !6432

return.32bit.i234.i30:                            ; preds = %op.32bit.i228.i24
  %z.32.i233.i29 = extractvalue { i32, i1 } %22, 0, !dbg !6433
  %26 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i233.i29, 1, !dbg !6433
  br label %ok, !dbg !6433

27:                                               ; preds = %op.32bit.i244.i14
  %28 = extractvalue %INT %19, 2, !dbg !6434
  %z.643.i240.i35 = mul i64 %28, %2, !dbg !6436
  %29 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i240.i35, 2, !dbg !6436
  br label %ok, !dbg !6436

op.32bit.i212.i37:                                ; preds = %ipow.32
  %30 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %1, i32 %1) #5, !dbg !6437
  %31 = extractvalue { i32, i1 } %30, 1, !dbg !6439
  %32 = tail call i1 @llvm.expect.i1(i1 %31, i1 false) #5, !dbg !6439
  %z.64.i215.i39 = mul nsw i64 %2, %2, !dbg !6439
  %33 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i215.i39, 2, !dbg !6439
  %z.32.i217.i41 = extractvalue { i32, i1 } %30, 0, !dbg !6439
  %34 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i217.i41, 1, !dbg !6439
  %35 = select i1 %32, %INT %33, %INT %34, !dbg !6439
  %36 = extractvalue %INT %35, 0, !dbg !6440
  br i1 %36, label %43, label %op.32bit.i196.i45, !dbg !6440

op.32bit.i196.i45:                                ; preds = %op.32bit.i212.i37
  %37 = extractvalue %INT %35, 1, !dbg !6442
  %38 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %37, i32 %37) #5, !dbg !6443
  %39 = extractvalue { i32, i1 } %38, 1, !dbg !6444
  %40 = tail call i1 @llvm.expect.i1(i1 %39, i1 false) #5, !dbg !6444
  br i1 %40, label %overflow.32bit.i200.i48, label %return.32bit.i202.i50, !dbg !6444

overflow.32bit.i200.i48:                          ; preds = %op.32bit.i196.i45
  %x.64.i197.i46 = sext i32 %37 to i64, !dbg !6445
  %z.64.i199.i47 = mul nsw i64 %x.64.i197.i46, %x.64.i197.i46, !dbg !6446
  %41 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i199.i47, 2, !dbg !6446
  br label %ok, !dbg !6446

return.32bit.i202.i50:                            ; preds = %op.32bit.i196.i45
  %z.32.i201.i49 = extractvalue { i32, i1 } %38, 0, !dbg !6447
  %42 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i201.i49, 1, !dbg !6447
  br label %ok, !dbg !6447

43:                                               ; preds = %op.32bit.i212.i37
  %44 = extractvalue %INT %35, 2, !dbg !6448
  %z.643.i208.i51 = mul i64 %44, %44, !dbg !6450
  %45 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i208.i51, 2, !dbg !6450
  br label %ok, !dbg !6450

op.32bit.i180.i53:                                ; preds = %ipow.32
  %46 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %1, i32 %1) #5, !dbg !6451
  %47 = extractvalue { i32, i1 } %46, 1, !dbg !6453
  %48 = tail call i1 @llvm.expect.i1(i1 %47, i1 false) #5, !dbg !6453
  %z.64.i183.i55 = mul nsw i64 %2, %2, !dbg !6453
  %49 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i183.i55, 2, !dbg !6453
  %z.32.i185.i57 = extractvalue { i32, i1 } %46, 0, !dbg !6453
  %50 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i185.i57, 1, !dbg !6453
  %51 = select i1 %48, %INT %49, %INT %50, !dbg !6453
  %52 = extractvalue %INT %51, 0, !dbg !6454
  br i1 %52, label %59, label %op.32bit.i164.i61, !dbg !6454

op.32bit.i164.i61:                                ; preds = %op.32bit.i180.i53
  %53 = extractvalue %INT %51, 1, !dbg !6456
  %54 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %53, i32 %53) #5, !dbg !6457
  %55 = extractvalue { i32, i1 } %54, 1, !dbg !6458
  %56 = tail call i1 @llvm.expect.i1(i1 %55, i1 false) #5, !dbg !6458
  br i1 %56, label %overflow.32bit.i168.i64, label %return.32bit.i170.i66, !dbg !6458

overflow.32bit.i168.i64:                          ; preds = %op.32bit.i164.i61
  %x.64.i165.i62 = sext i32 %53 to i64, !dbg !6459
  %z.64.i167.i63 = mul nsw i64 %x.64.i165.i62, %x.64.i165.i62, !dbg !6460
  %57 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i167.i63, 2, !dbg !6460
  br label %tcl.mul.exit177.i68, !dbg !6460

return.32bit.i170.i66:                            ; preds = %op.32bit.i164.i61
  %z.32.i169.i65 = extractvalue { i32, i1 } %54, 0, !dbg !6461
  %58 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i169.i65, 1, !dbg !6461
  br label %tcl.mul.exit177.i68, !dbg !6461

59:                                               ; preds = %op.32bit.i180.i53
  %60 = extractvalue %INT %51, 2, !dbg !6462
  %z.643.i176.i67 = mul i64 %60, %60, !dbg !6464
  %61 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i176.i67, 2, !dbg !6464
  br label %tcl.mul.exit177.i68, !dbg !6464

tcl.mul.exit177.i68:                              ; preds = %59, %return.32bit.i170.i66, %overflow.32bit.i168.i64
  %62 = phi %INT [ %57, %overflow.32bit.i168.i64 ], [ %58, %return.32bit.i170.i66 ], [ %61, %59 ]
  %63 = extractvalue %INT %62, 0, !dbg !6465
  br i1 %63, label %70, label %op.32bit.i148.i69, !dbg !6465

op.32bit.i148.i69:                                ; preds = %tcl.mul.exit177.i68
  %64 = extractvalue %INT %62, 1, !dbg !6467
  %65 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %64, i32 %1) #5, !dbg !6468
  %66 = extractvalue { i32, i1 } %65, 1, !dbg !6469
  %67 = tail call i1 @llvm.expect.i1(i1 %66, i1 false) #5, !dbg !6469
  br i1 %67, label %overflow.32bit.i152.i72, label %return.32bit.i154.i74, !dbg !6469

overflow.32bit.i152.i72:                          ; preds = %op.32bit.i148.i69
  %x.64.i149.i70 = sext i32 %64 to i64, !dbg !6470
  %z.64.i151.i71 = mul nsw i64 %x.64.i149.i70, %2, !dbg !6471
  %68 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i151.i71, 2, !dbg !6471
  br label %ok, !dbg !6471

return.32bit.i154.i74:                            ; preds = %op.32bit.i148.i69
  %z.32.i153.i73 = extractvalue { i32, i1 } %65, 0, !dbg !6472
  %69 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i153.i73, 1, !dbg !6472
  br label %ok, !dbg !6472

70:                                               ; preds = %tcl.mul.exit177.i68
  %71 = extractvalue %INT %62, 2, !dbg !6473
  %z.643.i160.i75 = mul i64 %71, %2, !dbg !6475
  %72 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i160.i75, 2, !dbg !6475
  br label %ok, !dbg !6475

op.32bit.i132.i77:                                ; preds = %ipow.32
  %73 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %1, i32 %1) #5, !dbg !6476
  %74 = extractvalue { i32, i1 } %73, 1, !dbg !6478
  %75 = tail call i1 @llvm.expect.i1(i1 %74, i1 false) #5, !dbg !6478
  %z.64.i135.i79 = mul nsw i64 %2, %2, !dbg !6478
  %76 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i135.i79, 2, !dbg !6478
  %z.32.i137.i81 = extractvalue { i32, i1 } %73, 0, !dbg !6478
  %77 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i137.i81, 1, !dbg !6478
  %78 = select i1 %75, %INT %76, %INT %77, !dbg !6478
  %79 = extractvalue %INT %78, 0, !dbg !6479
  br i1 %79, label %86, label %op.32bit.i116.i87, !dbg !6479

op.32bit.i116.i87:                                ; preds = %op.32bit.i132.i77
  %80 = extractvalue %INT %78, 1, !dbg !6481
  %81 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %80, i32 %1) #5, !dbg !6482
  %82 = extractvalue { i32, i1 } %81, 1, !dbg !6483
  %83 = tail call i1 @llvm.expect.i1(i1 %82, i1 false) #5, !dbg !6483
  br i1 %83, label %overflow.32bit.i120.i91, label %return.32bit.i122.i93, !dbg !6483

overflow.32bit.i120.i91:                          ; preds = %op.32bit.i116.i87
  %x.64.i117.i88 = sext i32 %80 to i64, !dbg !6484
  %z.64.i119.i90 = mul nsw i64 %x.64.i117.i88, %2, !dbg !6485
  %84 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i119.i90, 2, !dbg !6485
  br label %tcl.mul.exit129.i99, !dbg !6485

return.32bit.i122.i93:                            ; preds = %op.32bit.i116.i87
  %z.32.i121.i92 = extractvalue { i32, i1 } %81, 0, !dbg !6486
  %85 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i121.i92, 1, !dbg !6486
  br label %tcl.mul.exit129.i99, !dbg !6486

86:                                               ; preds = %op.32bit.i132.i77
  %87 = extractvalue %INT %78, 2, !dbg !6487
  %z.643.i128.i98 = mul i64 %87, %2, !dbg !6489
  %88 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i128.i98, 2, !dbg !6489
  br label %tcl.mul.exit129.i99, !dbg !6489

tcl.mul.exit129.i99:                              ; preds = %86, %return.32bit.i122.i93, %overflow.32bit.i120.i91
  %89 = phi %INT [ %84, %overflow.32bit.i120.i91 ], [ %85, %return.32bit.i122.i93 ], [ %88, %86 ]
  %90 = extractvalue %INT %89, 0, !dbg !6490
  br i1 %90, label %97, label %op.32bit.i100.i100, !dbg !6490

op.32bit.i100.i100:                               ; preds = %tcl.mul.exit129.i99
  %91 = extractvalue %INT %89, 1, !dbg !6492
  %92 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %91, i32 %91) #5, !dbg !6493
  %93 = extractvalue { i32, i1 } %92, 1, !dbg !6494
  %94 = tail call i1 @llvm.expect.i1(i1 %93, i1 false) #5, !dbg !6494
  br i1 %94, label %overflow.32bit.i104.i103, label %return.32bit.i106.i105, !dbg !6494

overflow.32bit.i104.i103:                         ; preds = %op.32bit.i100.i100
  %x.64.i101.i101 = sext i32 %91 to i64, !dbg !6495
  %z.64.i103.i102 = mul nsw i64 %x.64.i101.i101, %x.64.i101.i101, !dbg !6496
  %95 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i103.i102, 2, !dbg !6496
  br label %ok, !dbg !6496

return.32bit.i106.i105:                           ; preds = %op.32bit.i100.i100
  %z.32.i105.i104 = extractvalue { i32, i1 } %92, 0, !dbg !6497
  %96 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i105.i104, 1, !dbg !6497
  br label %ok, !dbg !6497

97:                                               ; preds = %tcl.mul.exit129.i99
  %98 = extractvalue %INT %89, 2, !dbg !6498
  %z.643.i112.i106 = mul i64 %98, %98, !dbg !6500
  %99 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i112.i106, 2, !dbg !6500
  br label %ok, !dbg !6500

op.32bit.i84.i108:                                ; preds = %ipow.32
  %100 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %1, i32 %1) #5, !dbg !6501
  %101 = extractvalue { i32, i1 } %100, 1, !dbg !6503
  %102 = tail call i1 @llvm.expect.i1(i1 %101, i1 false) #5, !dbg !6503
  %z.64.i87.i110 = mul nsw i64 %2, %2, !dbg !6503
  %103 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i87.i110, 2, !dbg !6503
  %z.32.i89.i112 = extractvalue { i32, i1 } %100, 0, !dbg !6503
  %104 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i89.i112, 1, !dbg !6503
  %105 = select i1 %102, %INT %103, %INT %104, !dbg !6503
  %106 = extractvalue %INT %105, 0, !dbg !6504
  br i1 %106, label %113, label %op.32bit.i68.i116, !dbg !6504

op.32bit.i68.i116:                                ; preds = %op.32bit.i84.i108
  %107 = extractvalue %INT %105, 1, !dbg !6506
  %108 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %107, i32 %1) #5, !dbg !6507
  %109 = extractvalue { i32, i1 } %108, 1, !dbg !6508
  %110 = tail call i1 @llvm.expect.i1(i1 %109, i1 false) #5, !dbg !6508
  br i1 %110, label %overflow.32bit.i72.i119, label %return.32bit.i74.i121, !dbg !6508

overflow.32bit.i72.i119:                          ; preds = %op.32bit.i68.i116
  %x.64.i69.i117 = sext i32 %107 to i64, !dbg !6509
  %z.64.i71.i118 = mul nsw i64 %x.64.i69.i117, %2, !dbg !6510
  %111 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i71.i118, 2, !dbg !6510
  br label %tcl.mul.exit81.i123, !dbg !6510

return.32bit.i74.i121:                            ; preds = %op.32bit.i68.i116
  %z.32.i73.i120 = extractvalue { i32, i1 } %108, 0, !dbg !6511
  %112 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i73.i120, 1, !dbg !6511
  br label %tcl.mul.exit81.i123, !dbg !6511

113:                                              ; preds = %op.32bit.i84.i108
  %114 = extractvalue %INT %105, 2, !dbg !6512
  %z.643.i80.i122 = mul i64 %114, %2, !dbg !6514
  %115 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i80.i122, 2, !dbg !6514
  br label %tcl.mul.exit81.i123, !dbg !6514

tcl.mul.exit81.i123:                              ; preds = %113, %return.32bit.i74.i121, %overflow.32bit.i72.i119
  %116 = phi %INT [ %111, %overflow.32bit.i72.i119 ], [ %112, %return.32bit.i74.i121 ], [ %115, %113 ]
  %117 = extractvalue %INT %116, 0, !dbg !6515
  br i1 %117, label %124, label %op.32bit.i52.i124, !dbg !6515

op.32bit.i52.i124:                                ; preds = %tcl.mul.exit81.i123
  %118 = extractvalue %INT %116, 1, !dbg !6517
  %119 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %118, i32 %118) #5, !dbg !6518
  %120 = extractvalue { i32, i1 } %119, 1, !dbg !6519
  %121 = tail call i1 @llvm.expect.i1(i1 %120, i1 false) #5, !dbg !6519
  br i1 %121, label %overflow.32bit.i56.i127, label %return.32bit.i58.i129, !dbg !6519

overflow.32bit.i56.i127:                          ; preds = %op.32bit.i52.i124
  %x.64.i53.i125 = sext i32 %118 to i64, !dbg !6520
  %z.64.i55.i126 = mul nsw i64 %x.64.i53.i125, %x.64.i53.i125, !dbg !6521
  %122 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i55.i126, 2, !dbg !6521
  br label %tcl.mul.exit65.i, !dbg !6521

return.32bit.i58.i129:                            ; preds = %op.32bit.i52.i124
  %z.32.i57.i128 = extractvalue { i32, i1 } %119, 0, !dbg !6522
  %123 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i57.i128, 1, !dbg !6522
  br label %tcl.mul.exit65.i, !dbg !6522

124:                                              ; preds = %tcl.mul.exit81.i123
  %125 = extractvalue %INT %116, 2, !dbg !6523
  %z.643.i64.i130 = mul i64 %125, %125, !dbg !6525
  %126 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i64.i130, 2, !dbg !6525
  br label %tcl.mul.exit65.i, !dbg !6525

tcl.mul.exit65.i:                                 ; preds = %124, %return.32bit.i58.i129, %overflow.32bit.i56.i127
  %127 = phi %INT [ %122, %overflow.32bit.i56.i127 ], [ %123, %return.32bit.i58.i129 ], [ %126, %124 ]
  %128 = extractvalue %INT %127, 0, !dbg !6526
  br i1 %128, label %135, label %op.32bit.i36.i131, !dbg !6526

op.32bit.i36.i131:                                ; preds = %tcl.mul.exit65.i
  %129 = extractvalue %INT %127, 1, !dbg !6528
  %130 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %129, i32 %1) #5, !dbg !6529
  %131 = extractvalue { i32, i1 } %130, 1, !dbg !6530
  %132 = tail call i1 @llvm.expect.i1(i1 %131, i1 false) #5, !dbg !6530
  br i1 %132, label %overflow.32bit.i40.i134, label %return.32bit.i42.i136, !dbg !6530

overflow.32bit.i40.i134:                          ; preds = %op.32bit.i36.i131
  %x.64.i37.i132 = sext i32 %129 to i64, !dbg !6531
  %z.64.i39.i133 = mul nsw i64 %x.64.i37.i132, %2, !dbg !6532
  %133 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i39.i133, 2, !dbg !6532
  br label %ok, !dbg !6532

return.32bit.i42.i136:                            ; preds = %op.32bit.i36.i131
  %z.32.i41.i135 = extractvalue { i32, i1 } %130, 0, !dbg !6533
  %134 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i41.i135, 1, !dbg !6533
  br label %ok, !dbg !6533

135:                                              ; preds = %tcl.mul.exit65.i
  %136 = extractvalue %INT %127, 2, !dbg !6534
  %z.643.i48.i137 = mul i64 %136, %2, !dbg !6536
  %137 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i48.i137, 2, !dbg !6536
  br label %ok, !dbg !6536

op.32bit.i20.i139:                                ; preds = %ipow.32
  %138 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %1, i32 %1) #5, !dbg !6537
  %139 = extractvalue { i32, i1 } %138, 1, !dbg !6539
  %140 = tail call i1 @llvm.expect.i1(i1 %139, i1 false) #5, !dbg !6539
  %z.64.i23.i141 = mul nsw i64 %2, %2, !dbg !6539
  %141 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i23.i141, 2, !dbg !6539
  %z.32.i25.i143 = extractvalue { i32, i1 } %138, 0, !dbg !6539
  %142 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i25.i143, 1, !dbg !6539
  %143 = select i1 %140, %INT %141, %INT %142, !dbg !6539
  %144 = extractvalue %INT %143, 0, !dbg !6540
  br i1 %144, label %151, label %op.32bit.i4.i147, !dbg !6540

op.32bit.i4.i147:                                 ; preds = %op.32bit.i20.i139
  %145 = extractvalue %INT %143, 1, !dbg !6542
  %146 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %145, i32 %145) #5, !dbg !6543
  %147 = extractvalue { i32, i1 } %146, 1, !dbg !6544
  %148 = tail call i1 @llvm.expect.i1(i1 %147, i1 false) #5, !dbg !6544
  br i1 %148, label %overflow.32bit.i8.i150, label %return.32bit.i10.i152, !dbg !6544

overflow.32bit.i8.i150:                           ; preds = %op.32bit.i4.i147
  %x.64.i5.i148 = sext i32 %145 to i64, !dbg !6545
  %z.64.i7.i149 = mul nsw i64 %x.64.i5.i148, %x.64.i5.i148, !dbg !6546
  %149 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i7.i149, 2, !dbg !6546
  br label %tcl.mul.exit17.i154, !dbg !6546

return.32bit.i10.i152:                            ; preds = %op.32bit.i4.i147
  %z.32.i9.i151 = extractvalue { i32, i1 } %146, 0, !dbg !6547
  %150 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i9.i151, 1, !dbg !6547
  br label %tcl.mul.exit17.i154, !dbg !6547

151:                                              ; preds = %op.32bit.i20.i139
  %152 = extractvalue %INT %143, 2, !dbg !6548
  %z.643.i16.i153 = mul i64 %152, %152, !dbg !6550
  %153 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i16.i153, 2, !dbg !6550
  br label %tcl.mul.exit17.i154, !dbg !6550

tcl.mul.exit17.i154:                              ; preds = %151, %return.32bit.i10.i152, %overflow.32bit.i8.i150
  %154 = phi %INT [ %149, %overflow.32bit.i8.i150 ], [ %150, %return.32bit.i10.i152 ], [ %153, %151 ]
  %155 = extractvalue %INT %154, 0, !dbg !6551
  br i1 %155, label %162, label %op.32bit.i.i155, !dbg !6551

op.32bit.i.i155:                                  ; preds = %tcl.mul.exit17.i154
  %156 = extractvalue %INT %154, 1, !dbg !6553
  %157 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %156, i32 %156) #5, !dbg !6554
  %158 = extractvalue { i32, i1 } %157, 1, !dbg !6555
  %159 = tail call i1 @llvm.expect.i1(i1 %158, i1 false) #5, !dbg !6555
  br i1 %159, label %overflow.32bit.i.i158, label %return.32bit.i.i160, !dbg !6555

overflow.32bit.i.i158:                            ; preds = %op.32bit.i.i155
  %x.64.i.i156 = sext i32 %156 to i64, !dbg !6556
  %z.64.i.i157 = mul nsw i64 %x.64.i.i156, %x.64.i.i156, !dbg !6557
  %160 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i.i157, 2, !dbg !6557
  br label %ok, !dbg !6557

return.32bit.i.i160:                              ; preds = %op.32bit.i.i155
  %z.32.i.i159 = extractvalue { i32, i1 } %157, 0, !dbg !6558
  %161 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i.i159, 1, !dbg !6558
  br label %ok, !dbg !6558

162:                                              ; preds = %tcl.mul.exit17.i154
  %163 = extractvalue %INT %154, 2, !dbg !6559
  %z.643.i.i161 = mul i64 %163, %163, !dbg !6561
  %164 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i.i161, 2, !dbg !6561
  br label %ok, !dbg !6561

loop.bit0.i.i166:                                 ; preds = %ipow.32, %tcl.mul.exit.i.i211
  %result.test27.i.i162 = phi %INT [ %result.double31.i.i207, %tcl.mul.exit.i.i211 ], [ { i1 true, i32 undef, i64 1 }, %ipow.32 ]
  %x.test22.i.i163 = phi %INT [ %x.double3.i.i209, %tcl.mul.exit.i.i211 ], [ %x, %ipow.32 ]
  %n.test21.i.i164 = phi i64 [ %n.double1.i.i210, %tcl.mul.exit.i.i211 ], [ %x.64210.i214, %ipow.32 ]
  %165 = and i64 %n.test21.i.i164, 1, !dbg !6562
  %166 = icmp eq i64 %165, 0, !dbg !6562
  %.pre.i.i165 = extractvalue %INT %x.test22.i.i163, 0, !dbg !6564
  br i1 %166, label %loop.bit0.loop.double_crit_edge.i.i167, label %loop.mult.i.i171, !dbg !6562

loop.bit0.loop.double_crit_edge.i.i167:           ; preds = %loop.bit0.i.i166
  br i1 %.pre.i.i165, label %loop.bit0.loop.double_crit_edge.i._crit_edge.i169, label %loop.bit0.loop.double_crit_edge.i.op.32bit.i.i_crit_edge.i170, !dbg !6565

loop.bit0.loop.double_crit_edge.i._crit_edge.i169: ; preds = %loop.bit0.loop.double_crit_edge.i.i167
  %.pre.i168 = extractvalue %INT %x.test22.i.i163, 2, !dbg !6567
  br label %188, !dbg !6565

loop.bit0.loop.double_crit_edge.i.op.32bit.i.i_crit_edge.i170: ; preds = %loop.bit0.loop.double_crit_edge.i.i167
  %.pre274.i = extractvalue %INT %x.test22.i.i163, 1, !dbg !6569
  br label %op.32bit.i.i.i197, !dbg !6565

loop.mult.i.i171:                                 ; preds = %loop.bit0.i.i166
  br i1 %.pre.i.i165, label %tcl.int.64.exit.i15.i.i182, label %check2.i4.i.i172, !dbg !6570

check2.i4.i.i172:                                 ; preds = %loop.mult.i.i171
  %167 = extractvalue %INT %result.test27.i.i162, 0, !dbg !6572
  %168 = extractvalue %INT %x.test22.i.i163, 1, !dbg !6573
  br i1 %167, label %loop.double.i.i194, label %op.32bit.i6.i.i174, !dbg !6572

op.32bit.i6.i.i174:                               ; preds = %check2.i4.i.i172
  %y.32.i5.i.i173 = extractvalue %INT %result.test27.i.i162, 1, !dbg !6574
  %169 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %168, i32 %y.32.i5.i.i173) #5, !dbg !6575
  %170 = extractvalue { i32, i1 } %169, 1, !dbg !6576
  %171 = tail call i1 @llvm.expect.i1(i1 %170, i1 false) #5, !dbg !6576
  br i1 %171, label %overflow.32bit.i10.i.i178, label %return.32bit.i12.i.i180, !dbg !6576

overflow.32bit.i10.i.i178:                        ; preds = %op.32bit.i6.i.i174
  %x.64.i7.i.i175 = sext i32 %168 to i64, !dbg !6577
  %x.641.i8.i.i176 = sext i32 %y.32.i5.i.i173 to i64, !dbg !6578
  %z.64.i9.i.i177 = mul nsw i64 %x.64.i7.i.i175, %x.641.i8.i.i176, !dbg !6579
  %172 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i9.i.i177, 2, !dbg !6579
  br label %loop.double.thread.i.i191, !dbg !6579

return.32bit.i12.i.i180:                          ; preds = %op.32bit.i6.i.i174
  %z.32.i11.i.i179 = extractvalue { i32, i1 } %169, 0, !dbg !6580
  %173 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i11.i.i179, 1, !dbg !6580
  br label %loop.double.thread.i.i191, !dbg !6580

tcl.int.64.exit.i15.i.i182:                       ; preds = %loop.mult.i.i171
  %174 = extractvalue %INT %x.test22.i.i163, 2, !dbg !6581
  %.pre.i14.i.i181 = extractvalue %INT %result.test27.i.i162, 0, !dbg !6583
  br i1 %.pre.i14.i.i181, label %loop.double.thread40.i.i185, label %loop.double.thread36.i.i188, !dbg !6583

loop.double.thread40.i.i185:                      ; preds = %tcl.int.64.exit.i15.i.i182
  %175 = extractvalue %INT %result.test27.i.i162, 2, !dbg !6583
  %z.643.i1842.i.i183 = mul i64 %174, %175, !dbg !6585
  %176 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i1842.i.i183, 2, !dbg !6585
  %n.mult43.i.i184 = add i64 %n.test21.i.i164, -1, !dbg !6586
  br label %188, !dbg !6565

loop.double.thread36.i.i188:                      ; preds = %tcl.int.64.exit.i15.i.i182
  %177 = extractvalue %INT %result.test27.i.i162, 1, !dbg !6583
  %178 = sext i32 %177 to i64, !dbg !6583
  %z.643.i1838.i.i186 = mul i64 %174, %178, !dbg !6585
  %179 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i1838.i.i186, 2, !dbg !6585
  %n.mult39.i.i187 = add i64 %n.test21.i.i164, -1, !dbg !6586
  br label %188, !dbg !6565

loop.double.thread.i.i191:                        ; preds = %return.32bit.i12.i.i180, %overflow.32bit.i10.i.i178
  %result.mult20.ph.i.i189 = phi %INT [ %173, %return.32bit.i12.i.i180 ], [ %172, %overflow.32bit.i10.i.i178 ]
  %n.mult35.i.i190 = add i64 %n.test21.i.i164, -1, !dbg !6586
  br label %op.32bit.i.i.i197, !dbg !6565

loop.double.i.i194:                               ; preds = %check2.i4.i.i172
  %180 = sext i32 %168 to i64, !dbg !6587
  %181 = extractvalue %INT %result.test27.i.i162, 2, !dbg !6583
  %z.643.i18.i.i192 = mul i64 %181, %180, !dbg !6585
  %182 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i18.i.i192, 2, !dbg !6585
  %n.mult.i.i193 = add i64 %n.test21.i.i164, -1, !dbg !6586
  br label %op.32bit.i.i.i197

op.32bit.i.i.i197:                                ; preds = %loop.double.i.i194, %loop.double.thread.i.i191, %loop.bit0.loop.double_crit_edge.i.op.32bit.i.i_crit_edge.i170
  %.pre-phi275.i = phi i32 [ %.pre274.i, %loop.bit0.loop.double_crit_edge.i.op.32bit.i.i_crit_edge.i170 ], [ %168, %loop.double.i.i194 ], [ %168, %loop.double.thread.i.i191 ], !dbg !6569
  %result.double32.i.i195 = phi %INT [ %result.test27.i.i162, %loop.bit0.loop.double_crit_edge.i.op.32bit.i.i_crit_edge.i170 ], [ %182, %loop.double.i.i194 ], [ %result.mult20.ph.i.i189, %loop.double.thread.i.i191 ]
  %n.double29.i.i196 = phi i64 [ %n.test21.i.i164, %loop.bit0.loop.double_crit_edge.i.op.32bit.i.i_crit_edge.i170 ], [ %n.mult.i.i193, %loop.double.i.i194 ], [ %n.mult35.i.i190, %loop.double.thread.i.i191 ]
  %183 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %.pre-phi275.i, i32 %.pre-phi275.i) #5, !dbg !6588
  %184 = extractvalue { i32, i1 } %183, 1, !dbg !6589
  %185 = tail call i1 @llvm.expect.i1(i1 %184, i1 false) #5, !dbg !6589
  br i1 %185, label %overflow.32bit.i.i.i200, label %return.32bit.i.i.i202, !dbg !6589

overflow.32bit.i.i.i200:                          ; preds = %op.32bit.i.i.i197
  %x.64.i.i.i198 = sext i32 %.pre-phi275.i to i64, !dbg !6590
  %z.64.i.i.i199 = mul nsw i64 %x.64.i.i.i198, %x.64.i.i.i198, !dbg !6591
  %186 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i.i.i199, 2, !dbg !6591
  br label %tcl.mul.exit.i.i211, !dbg !6591

return.32bit.i.i.i202:                            ; preds = %op.32bit.i.i.i197
  %z.32.i.i.i201 = extractvalue { i32, i1 } %183, 0, !dbg !6592
  %187 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i.i.i201, 1, !dbg !6592
  br label %tcl.mul.exit.i.i211, !dbg !6592

188:                                              ; preds = %loop.double.thread36.i.i188, %loop.double.thread40.i.i185, %loop.bit0.loop.double_crit_edge.i._crit_edge.i169
  %.pre-phi.i203 = phi i64 [ %.pre.i168, %loop.bit0.loop.double_crit_edge.i._crit_edge.i169 ], [ %174, %loop.double.thread36.i.i188 ], [ %174, %loop.double.thread40.i.i185 ], !dbg !6567
  %result.double33.i.i204 = phi %INT [ %result.test27.i.i162, %loop.bit0.loop.double_crit_edge.i._crit_edge.i169 ], [ %179, %loop.double.thread36.i.i188 ], [ %176, %loop.double.thread40.i.i185 ]
  %n.double30.i.i205 = phi i64 [ %n.test21.i.i164, %loop.bit0.loop.double_crit_edge.i._crit_edge.i169 ], [ %n.mult39.i.i187, %loop.double.thread36.i.i188 ], [ %n.mult43.i.i184, %loop.double.thread40.i.i185 ]
  %z.643.i.i.i206 = mul i64 %.pre-phi.i203, %.pre-phi.i203, !dbg !6593
  %189 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i.i.i206, 2, !dbg !6593
  br label %tcl.mul.exit.i.i211, !dbg !6593

tcl.mul.exit.i.i211:                              ; preds = %188, %return.32bit.i.i.i202, %overflow.32bit.i.i.i200
  %result.double31.i.i207 = phi %INT [ %result.double32.i.i195, %overflow.32bit.i.i.i200 ], [ %result.double32.i.i195, %return.32bit.i.i.i202 ], [ %result.double33.i.i204, %188 ]
  %n.double28.i.i208 = phi i64 [ %n.double29.i.i196, %overflow.32bit.i.i.i200 ], [ %n.double29.i.i196, %return.32bit.i.i.i202 ], [ %n.double30.i.i205, %188 ]
  %x.double3.i.i209 = phi %INT [ %186, %overflow.32bit.i.i.i200 ], [ %187, %return.32bit.i.i.i202 ], [ %189, %188 ]
  %n.double1.i.i210 = ashr i64 %n.double28.i.i208, 1, !dbg !6594
  %190 = icmp eq i64 %n.double1.i.i210, 0, !dbg !6595
  br i1 %190, label %ok, label %loop.bit0.i.i166, !dbg !6595

ipow.64:                                          ; preds = %else
  switch i64 %x.64210.i214, label %loop.bit0.i.i [
    i64 2, label %pow2.i
    i64 3, label %tcl.mul.exit849.i
    i64 4, label %tcl.mul.exit817.i
    i64 5, label %194
    i64 6, label %tcl.mul.exit737.i
    i64 7, label %197
    i64 8, label %199
    i64 9, label %tcl.mul.exit545.i
    i64 10, label %tcl.mul.exit481.i
    i64 11, label %203
    i64 12, label %205
    i64 13, label %tcl.mul.exit257.i
    i64 14, label %tcl.mul.exit177.i
    i64 15, label %209
    i64 16, label %tcl.mul.exit17.i
  ], !dbg !6596

pow2.i:                                           ; preds = %ipow.64
  %z.643.i864.i = mul i64 %3, %3, !dbg !6598
  %191 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i864.i, 2, !dbg !6598
  br label %ok, !dbg !6598

tcl.mul.exit849.i:                                ; preds = %ipow.64
  %z.643.i848.i = mul i64 %3, %3, !dbg !6600
  %z.643.i832.i = mul i64 %z.643.i848.i, %3, !dbg !6602
  %192 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i832.i, 2, !dbg !6602
  br label %ok, !dbg !6602

tcl.mul.exit817.i:                                ; preds = %ipow.64
  %z.643.i816.i = mul i64 %3, %3, !dbg !6604
  %z.643.i800.i = mul i64 %z.643.i816.i, %z.643.i816.i, !dbg !6606
  %193 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i800.i, 2, !dbg !6606
  br label %ok, !dbg !6606

194:                                              ; preds = %ipow.64
  %z.643.i784.i = mul i64 %3, %3, !dbg !6608
  %z.643.i768.i = mul i64 %z.643.i784.i, %z.643.i784.i, !dbg !6610
  %z.643.i752.i = mul i64 %z.643.i768.i, %3, !dbg !6612
  %195 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i752.i, 2, !dbg !6612
  br label %ok, !dbg !6612

tcl.mul.exit737.i:                                ; preds = %ipow.64
  %z.643.i736.i = mul i64 %3, %3, !dbg !6614
  %z.643.i720.i = mul i64 %z.643.i736.i, %3, !dbg !6616
  %z.643.i704.i = mul i64 %z.643.i720.i, %z.643.i720.i, !dbg !6618
  %196 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i704.i, 2, !dbg !6618
  br label %ok, !dbg !6618

197:                                              ; preds = %ipow.64
  %z.643.i688.i = mul i64 %3, %3, !dbg !6620
  %z.643.i672.i = mul i64 %z.643.i688.i, %3, !dbg !6622
  %z.643.i656.i = mul i64 %z.643.i672.i, %z.643.i672.i, !dbg !6624
  %z.643.i640.i = mul i64 %z.643.i656.i, %3, !dbg !6626
  %198 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i640.i, 2, !dbg !6626
  br label %ok, !dbg !6626

199:                                              ; preds = %ipow.64
  %z.643.i624.i = mul i64 %3, %3, !dbg !6628
  %z.643.i608.i = mul i64 %z.643.i624.i, %z.643.i624.i, !dbg !6630
  %z.643.i592.i = mul i64 %z.643.i608.i, %z.643.i608.i, !dbg !6632
  %200 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i592.i, 2, !dbg !6632
  br label %ok, !dbg !6632

tcl.mul.exit545.i:                                ; preds = %ipow.64
  %z.643.i576.i = mul i64 %3, %3, !dbg !6634
  %z.643.i560.i = mul i64 %z.643.i576.i, %z.643.i576.i, !dbg !6636
  %z.643.i544.i = mul i64 %z.643.i560.i, %z.643.i560.i, !dbg !6638
  %z.643.i528.i = mul i64 %z.643.i544.i, %3, !dbg !6640
  %201 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i528.i, 2, !dbg !6640
  br label %ok, !dbg !6640

tcl.mul.exit481.i:                                ; preds = %ipow.64
  %z.643.i512.i = mul i64 %3, %3, !dbg !6642
  %z.643.i496.i = mul i64 %z.643.i512.i, %z.643.i512.i, !dbg !6644
  %z.643.i480.i = mul i64 %z.643.i496.i, %3, !dbg !6646
  %z.643.i464.i = mul i64 %z.643.i480.i, %z.643.i480.i, !dbg !6648
  %202 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i464.i, 2, !dbg !6648
  br label %ok, !dbg !6648

203:                                              ; preds = %ipow.64
  %z.643.i448.i = mul i64 %3, %3, !dbg !6650
  %z.643.i432.i = mul i64 %z.643.i448.i, %z.643.i448.i, !dbg !6652
  %z.643.i416.i = mul i64 %z.643.i432.i, %3, !dbg !6654
  %z.643.i400.i = mul i64 %z.643.i416.i, %z.643.i416.i, !dbg !6656
  %z.643.i384.i = mul i64 %z.643.i400.i, %3, !dbg !6658
  %204 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i384.i, 2, !dbg !6658
  br label %ok, !dbg !6658

205:                                              ; preds = %ipow.64
  %z.643.i368.i = mul i64 %3, %3, !dbg !6660
  %z.643.i352.i = mul i64 %z.643.i368.i, %3, !dbg !6662
  %z.643.i336.i = mul i64 %z.643.i352.i, %z.643.i352.i, !dbg !6664
  %z.643.i320.i = mul i64 %z.643.i336.i, %z.643.i336.i, !dbg !6666
  %206 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i320.i, 2, !dbg !6666
  br label %ok, !dbg !6666

tcl.mul.exit257.i:                                ; preds = %ipow.64
  %z.643.i304.i = mul i64 %3, %3, !dbg !6668
  %z.643.i288.i = mul i64 %z.643.i304.i, %3, !dbg !6670
  %z.643.i272.i = mul i64 %z.643.i288.i, %z.643.i288.i, !dbg !6672
  %z.643.i256.i = mul i64 %z.643.i272.i, %z.643.i272.i, !dbg !6674
  %z.643.i240.i = mul i64 %z.643.i256.i, %3, !dbg !6676
  %207 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i240.i, 2, !dbg !6676
  br label %ok, !dbg !6676

tcl.mul.exit177.i:                                ; preds = %ipow.64
  %z.643.i224.i = mul i64 %3, %3, !dbg !6678
  %z.643.i208.i = mul i64 %z.643.i224.i, %3, !dbg !6680
  %z.643.i192.i = mul i64 %z.643.i208.i, %z.643.i208.i, !dbg !6682
  %z.643.i176.i = mul i64 %z.643.i192.i, %3, !dbg !6684
  %z.643.i160.i = mul i64 %z.643.i176.i, %z.643.i176.i, !dbg !6686
  %208 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i160.i, 2, !dbg !6686
  br label %ok, !dbg !6686

209:                                              ; preds = %ipow.64
  %z.643.i144.i = mul i64 %3, %3, !dbg !6688
  %z.643.i128.i = mul i64 %z.643.i144.i, %3, !dbg !6690
  %z.643.i112.i = mul i64 %z.643.i128.i, %z.643.i128.i, !dbg !6692
  %z.643.i96.i = mul i64 %z.643.i112.i, %3, !dbg !6694
  %z.643.i80.i = mul i64 %z.643.i96.i, %z.643.i96.i, !dbg !6696
  %z.643.i64.i = mul i64 %z.643.i80.i, %3, !dbg !6698
  %210 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i64.i, 2, !dbg !6698
  br label %ok, !dbg !6698

tcl.mul.exit17.i:                                 ; preds = %ipow.64
  %z.643.i48.i = mul i64 %3, %3, !dbg !6700
  %z.643.i32.i = mul i64 %z.643.i48.i, %z.643.i48.i, !dbg !6702
  %z.643.i16.i = mul i64 %z.643.i32.i, %z.643.i32.i, !dbg !6704
  %z.643.i.i = mul i64 %z.643.i16.i, %z.643.i16.i, !dbg !6706
  %211 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i.i, 2, !dbg !6706
  br label %ok, !dbg !6706

loop.bit0.i.i:                                    ; preds = %ipow.64, %tcl.mul.exit.i.i
  %result.test27.i.i = phi %INT [ %result.double31.i.i, %tcl.mul.exit.i.i ], [ { i1 true, i32 undef, i64 1 }, %ipow.64 ]
  %x.test22.i.i = phi %INT [ %x.double3.i.i, %tcl.mul.exit.i.i ], [ %x, %ipow.64 ]
  %n.test21.i.i = phi i64 [ %n.double1.i.i, %tcl.mul.exit.i.i ], [ %x.64210.i214, %ipow.64 ]
  %212 = and i64 %n.test21.i.i, 1, !dbg !6708
  %213 = icmp eq i64 %212, 0, !dbg !6708
  %.pre.i.i = extractvalue %INT %x.test22.i.i, 0, !dbg !6710
  br i1 %213, label %loop.bit0.loop.double_crit_edge.i.i, label %loop.mult.i.i, !dbg !6708

loop.bit0.loop.double_crit_edge.i.i:              ; preds = %loop.bit0.i.i
  br i1 %.pre.i.i, label %loop.bit0.loop.double_crit_edge.i._crit_edge.i, label %loop.bit0.loop.double_crit_edge.i.op.32bit.i.i_crit_edge.i, !dbg !6711

loop.bit0.loop.double_crit_edge.i._crit_edge.i:   ; preds = %loop.bit0.loop.double_crit_edge.i.i
  %.pre.i = extractvalue %INT %x.test22.i.i, 2, !dbg !6713
  br label %235, !dbg !6711

loop.bit0.loop.double_crit_edge.i.op.32bit.i.i_crit_edge.i: ; preds = %loop.bit0.loop.double_crit_edge.i.i
  %.pre866.i = extractvalue %INT %x.test22.i.i, 1, !dbg !6715
  br label %op.32bit.i.i.i, !dbg !6711

loop.mult.i.i:                                    ; preds = %loop.bit0.i.i
  br i1 %.pre.i.i, label %tcl.int.64.exit.i15.i.i, label %check2.i4.i.i, !dbg !6716

check2.i4.i.i:                                    ; preds = %loop.mult.i.i
  %214 = extractvalue %INT %result.test27.i.i, 0, !dbg !6718
  %215 = extractvalue %INT %x.test22.i.i, 1, !dbg !6719
  br i1 %214, label %loop.double.i.i, label %op.32bit.i6.i.i, !dbg !6718

op.32bit.i6.i.i:                                  ; preds = %check2.i4.i.i
  %y.32.i5.i.i = extractvalue %INT %result.test27.i.i, 1, !dbg !6720
  %216 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %215, i32 %y.32.i5.i.i) #5, !dbg !6721
  %217 = extractvalue { i32, i1 } %216, 1, !dbg !6722
  %218 = tail call i1 @llvm.expect.i1(i1 %217, i1 false) #5, !dbg !6722
  br i1 %218, label %overflow.32bit.i10.i.i, label %return.32bit.i12.i.i, !dbg !6722

overflow.32bit.i10.i.i:                           ; preds = %op.32bit.i6.i.i
  %x.64.i7.i.i = sext i32 %215 to i64, !dbg !6723
  %x.641.i8.i.i = sext i32 %y.32.i5.i.i to i64, !dbg !6724
  %z.64.i9.i.i = mul nsw i64 %x.64.i7.i.i, %x.641.i8.i.i, !dbg !6725
  %219 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i9.i.i, 2, !dbg !6725
  br label %loop.double.thread.i.i, !dbg !6725

return.32bit.i12.i.i:                             ; preds = %op.32bit.i6.i.i
  %z.32.i11.i.i = extractvalue { i32, i1 } %216, 0, !dbg !6726
  %220 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i11.i.i, 1, !dbg !6726
  br label %loop.double.thread.i.i, !dbg !6726

tcl.int.64.exit.i15.i.i:                          ; preds = %loop.mult.i.i
  %221 = extractvalue %INT %x.test22.i.i, 2, !dbg !6727
  %.pre.i14.i.i = extractvalue %INT %result.test27.i.i, 0, !dbg !6729
  br i1 %.pre.i14.i.i, label %loop.double.thread40.i.i, label %loop.double.thread36.i.i, !dbg !6729

loop.double.thread40.i.i:                         ; preds = %tcl.int.64.exit.i15.i.i
  %222 = extractvalue %INT %result.test27.i.i, 2, !dbg !6729
  %z.643.i1842.i.i = mul i64 %221, %222, !dbg !6731
  %223 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i1842.i.i, 2, !dbg !6731
  %n.mult43.i.i = add i64 %n.test21.i.i, -1, !dbg !6732
  br label %235, !dbg !6711

loop.double.thread36.i.i:                         ; preds = %tcl.int.64.exit.i15.i.i
  %224 = extractvalue %INT %result.test27.i.i, 1, !dbg !6729
  %225 = sext i32 %224 to i64, !dbg !6729
  %z.643.i1838.i.i = mul i64 %221, %225, !dbg !6731
  %226 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i1838.i.i, 2, !dbg !6731
  %n.mult39.i.i = add i64 %n.test21.i.i, -1, !dbg !6732
  br label %235, !dbg !6711

loop.double.thread.i.i:                           ; preds = %return.32bit.i12.i.i, %overflow.32bit.i10.i.i
  %result.mult20.ph.i.i = phi %INT [ %220, %return.32bit.i12.i.i ], [ %219, %overflow.32bit.i10.i.i ]
  %n.mult35.i.i = add i64 %n.test21.i.i, -1, !dbg !6732
  br label %op.32bit.i.i.i, !dbg !6711

loop.double.i.i:                                  ; preds = %check2.i4.i.i
  %227 = sext i32 %215 to i64, !dbg !6733
  %228 = extractvalue %INT %result.test27.i.i, 2, !dbg !6729
  %z.643.i18.i.i = mul i64 %228, %227, !dbg !6731
  %229 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i18.i.i, 2, !dbg !6731
  %n.mult.i.i = add i64 %n.test21.i.i, -1, !dbg !6732
  br label %op.32bit.i.i.i

op.32bit.i.i.i:                                   ; preds = %loop.double.i.i, %loop.double.thread.i.i, %loop.bit0.loop.double_crit_edge.i.op.32bit.i.i_crit_edge.i
  %.pre-phi867.i = phi i32 [ %.pre866.i, %loop.bit0.loop.double_crit_edge.i.op.32bit.i.i_crit_edge.i ], [ %215, %loop.double.i.i ], [ %215, %loop.double.thread.i.i ], !dbg !6715
  %result.double32.i.i = phi %INT [ %result.test27.i.i, %loop.bit0.loop.double_crit_edge.i.op.32bit.i.i_crit_edge.i ], [ %229, %loop.double.i.i ], [ %result.mult20.ph.i.i, %loop.double.thread.i.i ]
  %n.double29.i.i = phi i64 [ %n.test21.i.i, %loop.bit0.loop.double_crit_edge.i.op.32bit.i.i_crit_edge.i ], [ %n.mult.i.i, %loop.double.i.i ], [ %n.mult35.i.i, %loop.double.thread.i.i ]
  %230 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %.pre-phi867.i, i32 %.pre-phi867.i) #5, !dbg !6734
  %231 = extractvalue { i32, i1 } %230, 1, !dbg !6735
  %232 = tail call i1 @llvm.expect.i1(i1 %231, i1 false) #5, !dbg !6735
  br i1 %232, label %overflow.32bit.i.i.i, label %return.32bit.i.i.i, !dbg !6735

overflow.32bit.i.i.i:                             ; preds = %op.32bit.i.i.i
  %x.64.i.i.i = sext i32 %.pre-phi867.i to i64, !dbg !6736
  %z.64.i.i.i = mul nsw i64 %x.64.i.i.i, %x.64.i.i.i, !dbg !6737
  %233 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i.i.i, 2, !dbg !6737
  br label %tcl.mul.exit.i.i, !dbg !6737

return.32bit.i.i.i:                               ; preds = %op.32bit.i.i.i
  %z.32.i.i.i = extractvalue { i32, i1 } %230, 0, !dbg !6738
  %234 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i.i.i, 1, !dbg !6738
  br label %tcl.mul.exit.i.i, !dbg !6738

235:                                              ; preds = %loop.double.thread36.i.i, %loop.double.thread40.i.i, %loop.bit0.loop.double_crit_edge.i._crit_edge.i
  %.pre-phi.i = phi i64 [ %.pre.i, %loop.bit0.loop.double_crit_edge.i._crit_edge.i ], [ %221, %loop.double.thread36.i.i ], [ %221, %loop.double.thread40.i.i ], !dbg !6713
  %result.double33.i.i = phi %INT [ %result.test27.i.i, %loop.bit0.loop.double_crit_edge.i._crit_edge.i ], [ %226, %loop.double.thread36.i.i ], [ %223, %loop.double.thread40.i.i ]
  %n.double30.i.i = phi i64 [ %n.test21.i.i, %loop.bit0.loop.double_crit_edge.i._crit_edge.i ], [ %n.mult39.i.i, %loop.double.thread36.i.i ], [ %n.mult43.i.i, %loop.double.thread40.i.i ]
  %z.643.i.i.i = mul i64 %.pre-phi.i, %.pre-phi.i, !dbg !6739
  %236 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i.i.i, 2, !dbg !6739
  br label %tcl.mul.exit.i.i, !dbg !6739

tcl.mul.exit.i.i:                                 ; preds = %235, %return.32bit.i.i.i, %overflow.32bit.i.i.i
  %result.double31.i.i = phi %INT [ %result.double32.i.i, %overflow.32bit.i.i.i ], [ %result.double32.i.i, %return.32bit.i.i.i ], [ %result.double33.i.i, %235 ]
  %n.double28.i.i = phi i64 [ %n.double29.i.i, %overflow.32bit.i.i.i ], [ %n.double29.i.i, %return.32bit.i.i.i ], [ %n.double30.i.i, %235 ]
  %x.double3.i.i = phi %INT [ %233, %overflow.32bit.i.i.i ], [ %234, %return.32bit.i.i.i ], [ %236, %235 ]
  %n.double1.i.i = ashr i64 %n.double28.i.i, 1, !dbg !6740
  %237 = icmp eq i64 %n.double1.i.i, 0, !dbg !6741
  br i1 %237, label %ok, label %loop.bit0.i.i, !dbg !6741

ok:                                               ; preds = %tcl.mul.exit.i.i211, %tcl.mul.exit.i.i, %tcl.mul.exit17.i, %209, %tcl.mul.exit177.i, %tcl.mul.exit257.i, %205, %203, %tcl.mul.exit481.i, %tcl.mul.exit545.i, %199, %197, %tcl.mul.exit737.i, %194, %tcl.mul.exit817.i, %tcl.mul.exit849.i, %pow2.i, %162, %return.32bit.i.i160, %overflow.32bit.i.i158, %135, %return.32bit.i42.i136, %overflow.32bit.i40.i134, %97, %return.32bit.i106.i105, %overflow.32bit.i104.i103, %70, %return.32bit.i154.i74, %overflow.32bit.i152.i72, %43, %return.32bit.i202.i50, %overflow.32bit.i200.i48, %27, %return.32bit.i234.i30, %overflow.32bit.i232.i28, %return.32bit.i266.i10, %overflow.32bit.i264.i8, %check.powSize, %pow1
  %result = phi %INT [ %x, %pow1 ], [ { i1 true, i32 undef, i64 1 }, %check.powSize ], [ %12, %overflow.32bit.i264.i8 ], [ %13, %return.32bit.i266.i10 ], [ %25, %overflow.32bit.i232.i28 ], [ %26, %return.32bit.i234.i30 ], [ %29, %27 ], [ %41, %overflow.32bit.i200.i48 ], [ %42, %return.32bit.i202.i50 ], [ %45, %43 ], [ %68, %overflow.32bit.i152.i72 ], [ %69, %return.32bit.i154.i74 ], [ %72, %70 ], [ %95, %overflow.32bit.i104.i103 ], [ %96, %return.32bit.i106.i105 ], [ %99, %97 ], [ %133, %overflow.32bit.i40.i134 ], [ %134, %return.32bit.i42.i136 ], [ %137, %135 ], [ %160, %overflow.32bit.i.i158 ], [ %161, %return.32bit.i.i160 ], [ %164, %162 ], [ %191, %pow2.i ], [ %192, %tcl.mul.exit849.i ], [ %193, %tcl.mul.exit817.i ], [ %195, %194 ], [ %196, %tcl.mul.exit737.i ], [ %198, %197 ], [ %200, %199 ], [ %201, %tcl.mul.exit545.i ], [ %202, %tcl.mul.exit481.i ], [ %204, %203 ], [ %206, %205 ], [ %207, %tcl.mul.exit257.i ], [ %208, %tcl.mul.exit177.i ], [ %210, %209 ], [ %211, %tcl.mul.exit17.i ], [ %result.double31.i.i, %tcl.mul.exit.i.i ], [ %result.double31.i.i207, %tcl.mul.exit.i.i211 ]
  %238 = insertvalue { i32, %INT } { i32 0, %INT undef }, %INT %result, 1, !dbg !6742
  ret { i32, %INT } %238, !dbg !6742

fail.zeroToNegative:                              ; preds = %enter
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !6743, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %exception.message = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.6, align 8, !dbg !6743, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i2 = getelementptr %Tcl_Obj, %Tcl_Obj* %exception.message, i64 0, i32 0, !dbg !6744
  %refCount.i3 = load i32, i32* %refCountPtr.i2, align 4, !dbg !6744
  %239 = icmp sgt i32 %refCount.i3, 1, !dbg !6743
  tail call void @llvm.assume(i1 %239), !dbg !6743
  %exception.code = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.7, align 8, !dbg !6743, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %exception.code, i64 0, i32 0, !dbg !6746
  %refCount.i = load i32, i32* %refCountPtr.i, align 4, !dbg !6746
  %240 = icmp sgt i32 %refCount.i, 1, !dbg !6743
  tail call void @llvm.assume(i1 %240), !dbg !6743
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %exception.message), !dbg !6743
  tail call void @Tcl_SetObjErrorCode(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %exception.code), !dbg !6743
  store i32 1, i32* %ecvar, align 4, !dbg !6743
  ret { i32, %INT } { i32 1, %INT undef }, !dbg !6748
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, %NUMERIC } @tcl.pow.numeric(%NUMERIC %x, %NUMERIC %y, i32* noalias nocapture %ecvar) local_unnamed_addr #6 !dbg !6749 {
enter:
  %0 = extractvalue %NUMERIC %y, 0, !dbg !6754
  br i1 %0, label %dblPow, label %intPow, !dbg !6754

intPow:                                           ; preds = %enter
  %1 = extractvalue %NUMERIC %x, 0, !dbg !6755
  %y4 = extractvalue %NUMERIC %y, 1, !dbg !6756
  br i1 %1, label %dblToInt, label %intToInt, !dbg !6755

dblPow:                                           ; preds = %enter
  %y1 = extractvalue %NUMERIC %y, 2, !dbg !6757
  %2 = extractvalue %NUMERIC %x, 0, !dbg !6758
  %3 = extractvalue %NUMERIC %x, 1, !dbg !6758
  %4 = extractvalue %INT %3, 0, !dbg !6759
  %5 = extractvalue %INT %3, 1, !dbg !6759
  %6 = sext i32 %5 to i64, !dbg !6759
  %7 = extractvalue %INT %3, 2, !dbg !6759
  %8 = select i1 %4, i64 %7, i64 %6, !dbg !6759
  %9 = sitofp i64 %8 to double, !dbg !6758
  %10 = extractvalue %NUMERIC %x, 2, !dbg !6758
  %11 = select i1 %2, double %10, double %9, !dbg !6758
  %12 = fcmp olt double %11, 0.000000e+00, !dbg !6761
  br i1 %12, label %check.remainder.i, label %check.zeroToNegative.i, !dbg !6761

check.remainder.i:                                ; preds = %dblPow
  %fraction.i = frem double %y1, 1.000000e+00, !dbg !6763
  %13 = fcmp oeq double %fraction.i, 0.000000e+00, !dbg !6764
  br i1 %13, label %ordinary.i, label %fail.negativeToFraction.i, !dbg !6764

check.zeroToNegative.i:                           ; preds = %dblPow
  %14 = fcmp oeq double %11, 0.000000e+00, !dbg !6765
  %15 = fcmp olt double %y1, 0.000000e+00, !dbg !6765
  %16 = and i1 %15, %14, !dbg !6765
  br i1 %16, label %fail.zeroToNegative.i11, label %ordinary.i, !dbg !6765

ordinary.i:                                       ; preds = %check.zeroToNegative.i, %check.remainder.i
  %17 = tail call double @llvm.pow.f64(double %11, double %y1) #5, !dbg !6766
  %18 = insertvalue { i32, double } { i32 0, double undef }, double %17, 1, !dbg !6766
  br label %tcl.fpow.exit, !dbg !6766

fail.negativeToFraction.i:                        ; preds = %check.remainder.i
  %interp.i6 = load %Interp*, %Interp** @tclInterp, align 8, !dbg !6767, !invariant.load !3, !noalias !6768, !nonnull !3, !dereferenceable !1051
  %exception.message.i7 = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.4, align 8, !dbg !6767, !invariant.load !3, !noalias !6768, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i14.i = getelementptr %Tcl_Obj, %Tcl_Obj* %exception.message.i7, i64 0, i32 0, !dbg !6771
  %refCount.i15.i = load i32, i32* %refCountPtr.i14.i, align 4, !dbg !6771, !noalias !6768
  %19 = icmp sgt i32 %refCount.i15.i, 1, !dbg !6767
  tail call void @llvm.assume(i1 %19) #5, !dbg !6767, !noalias !6768
  %exception.code.i8 = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.5, align 8, !dbg !6767, !invariant.load !3, !noalias !6768, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i12.i = getelementptr %Tcl_Obj, %Tcl_Obj* %exception.code.i8, i64 0, i32 0, !dbg !6773
  %refCount.i13.i = load i32, i32* %refCountPtr.i12.i, align 4, !dbg !6773, !noalias !6768
  %20 = icmp sgt i32 %refCount.i13.i, 1, !dbg !6767
  tail call void @llvm.assume(i1 %20) #5, !dbg !6767, !noalias !6768
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp.i6, %Tcl_Obj* noalias nonnull %exception.message.i7) #5, !dbg !6767, !noalias !6768
  tail call void @Tcl_SetObjErrorCode(%Interp* noalias nocapture nonnull %interp.i6, %Tcl_Obj* noalias nonnull %exception.code.i8) #5, !dbg !6767, !noalias !6768
  store i32 1, i32* %ecvar, align 4, !dbg !6767, !alias.scope !6768
  br label %tcl.fpow.exit, !dbg !6775

fail.zeroToNegative.i11:                          ; preds = %check.zeroToNegative.i
  %interp5.i = load %Interp*, %Interp** @tclInterp, align 8, !dbg !6776, !invariant.load !3, !noalias !6768, !nonnull !3, !dereferenceable !1051
  %exception.message7.i = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.6, align 8, !dbg !6776, !invariant.load !3, !noalias !6768, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i10.i = getelementptr %Tcl_Obj, %Tcl_Obj* %exception.message7.i, i64 0, i32 0, !dbg !6777
  %refCount.i11.i = load i32, i32* %refCountPtr.i10.i, align 4, !dbg !6777, !noalias !6768
  %21 = icmp sgt i32 %refCount.i11.i, 1, !dbg !6776
  tail call void @llvm.assume(i1 %21) #5, !dbg !6776, !noalias !6768
  %exception.code9.i = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.7, align 8, !dbg !6776, !invariant.load !3, !noalias !6768, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i.i9 = getelementptr %Tcl_Obj, %Tcl_Obj* %exception.code9.i, i64 0, i32 0, !dbg !6779
  %refCount.i.i10 = load i32, i32* %refCountPtr.i.i9, align 4, !dbg !6779, !noalias !6768
  %22 = icmp sgt i32 %refCount.i.i10, 1, !dbg !6776
  tail call void @llvm.assume(i1 %22) #5, !dbg !6776, !noalias !6768
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp5.i, %Tcl_Obj* noalias nonnull %exception.message7.i) #5, !dbg !6776, !noalias !6768
  tail call void @Tcl_SetObjErrorCode(%Interp* noalias nocapture nonnull %interp5.i, %Tcl_Obj* noalias nonnull %exception.code9.i) #5, !dbg !6776, !noalias !6768
  store i32 1, i32* %ecvar, align 4, !dbg !6776, !alias.scope !6768
  br label %tcl.fpow.exit, !dbg !6781

tcl.fpow.exit:                                    ; preds = %fail.zeroToNegative.i11, %fail.negativeToFraction.i, %ordinary.i
  %23 = phi { i32, double } [ %18, %ordinary.i ], [ { i32 1, double undef }, %fail.negativeToFraction.i ], [ { i32 1, double undef }, %fail.zeroToNegative.i11 ]
  %24 = extractvalue { i32, double } %23, 0, !dbg !6782
  %25 = icmp eq i32 %24, 0, !dbg !6782
  %26 = extractvalue { i32, double } %23, 1, !dbg !6782
  %27 = insertvalue %NUMERIC { i1 true, %INT undef, double undef }, double %26, 2, !dbg !6782
  %28 = insertvalue { i32, %NUMERIC } { i32 0, %NUMERIC undef }, %NUMERIC %27, 1, !dbg !6782
  %29 = select i1 %25, { i32, %NUMERIC } %28, { i32, %NUMERIC } { i32 1, %NUMERIC undef }, !dbg !6782
  ret { i32, %NUMERIC } %29, !dbg !6782

intToInt:                                         ; preds = %intPow
  %x3 = extractvalue %NUMERIC %x, 1, !dbg !6783
  %30 = extractvalue %INT %x3, 0, !dbg !6784
  %31 = extractvalue %INT %x3, 1, !dbg !6784
  %32 = sext i32 %31 to i64, !dbg !6784
  %33 = extractvalue %INT %x3, 2, !dbg !6784
  %x.64210.i.i12 = select i1 %30, i64 %33, i64 %32, !dbg !6784
  %z.bit1.i.i13 = icmp eq i64 %x.64210.i.i12, 0, !dbg !6787
  %34 = extractvalue %INT %y4, 0, !dbg !6788
  %35 = extractvalue %INT %y4, 1, !dbg !6788
  %36 = sext i32 %35 to i64, !dbg !6788
  %37 = extractvalue %INT %y4, 2, !dbg !6788
  %x.64210.i214.i = select i1 %34, i64 %37, i64 %36, !dbg !6788
  %z.bit1.i215.i = icmp slt i64 %x.64210.i214.i, 0, !dbg !6790
  %38 = and i1 %z.bit1.i.i13, %z.bit1.i215.i, !dbg !6791
  br i1 %38, label %fail.zeroToNegative.i22, label %check.powSize.i14, !dbg !6791

check.powSize.i14:                                ; preds = %intToInt
  switch i64 %x.64210.i214.i, label %else.i [
    i64 0, label %ok.i
    i64 1, label %pow1.i
  ], !dbg !6792

pow1.i:                                           ; preds = %check.powSize.i14
  br label %ok.i, !dbg !6793

else.i:                                           ; preds = %check.powSize.i14
  br i1 %30, label %ipow.64.i, label %ipow.32.i, !dbg !6794

ipow.32.i:                                        ; preds = %else.i
  switch i64 %x.64210.i214.i, label %loop.bit0.i.i166.i [
    i64 2, label %op.32bit.i260.i5.i
    i64 3, label %op.32bit.i244.i14.i
    i64 4, label %op.32bit.i212.i37.i
    i64 5, label %op.32bit.i180.i53.i
    i64 6, label %op.32bit.i132.i77.i
    i64 7, label %op.32bit.i84.i108.i
    i64 8, label %op.32bit.i20.i139.i
  ], !dbg !6795

op.32bit.i260.i5.i:                               ; preds = %ipow.32.i
  %39 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %31, i32 %31) #5, !dbg !6797
  %40 = extractvalue { i32, i1 } %39, 1, !dbg !6799
  %41 = tail call i1 @llvm.expect.i1(i1 %40, i1 false) #5, !dbg !6799
  br i1 %41, label %overflow.32bit.i264.i8.i, label %return.32bit.i266.i10.i, !dbg !6799

overflow.32bit.i264.i8.i:                         ; preds = %op.32bit.i260.i5.i
  %z.64.i263.i7.i = mul nsw i64 %32, %32, !dbg !6800
  %42 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i263.i7.i, 2, !dbg !6800
  br label %ok.i, !dbg !6800

return.32bit.i266.i10.i:                          ; preds = %op.32bit.i260.i5.i
  %z.32.i265.i9.i = extractvalue { i32, i1 } %39, 0, !dbg !6801
  %43 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i265.i9.i, 1, !dbg !6801
  br label %ok.i, !dbg !6801

op.32bit.i244.i14.i:                              ; preds = %ipow.32.i
  %44 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %31, i32 %31) #5, !dbg !6802
  %45 = extractvalue { i32, i1 } %44, 1, !dbg !6804
  %46 = tail call i1 @llvm.expect.i1(i1 %45, i1 false) #5, !dbg !6804
  %z.64.i247.i16.i = mul nsw i64 %32, %32, !dbg !6804
  %47 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i247.i16.i, 2, !dbg !6804
  %z.32.i249.i18.i = extractvalue { i32, i1 } %44, 0, !dbg !6804
  %48 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i249.i18.i, 1, !dbg !6804
  %49 = select i1 %46, %INT %47, %INT %48, !dbg !6804
  %50 = extractvalue %INT %49, 0, !dbg !6805
  br i1 %50, label %57, label %op.32bit.i228.i24.i, !dbg !6805

op.32bit.i228.i24.i:                              ; preds = %op.32bit.i244.i14.i
  %51 = extractvalue %INT %49, 1, !dbg !6807
  %52 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %51, i32 %31) #5, !dbg !6808
  %53 = extractvalue { i32, i1 } %52, 1, !dbg !6809
  %54 = tail call i1 @llvm.expect.i1(i1 %53, i1 false) #5, !dbg !6809
  br i1 %54, label %overflow.32bit.i232.i28.i, label %return.32bit.i234.i30.i, !dbg !6809

overflow.32bit.i232.i28.i:                        ; preds = %op.32bit.i228.i24.i
  %x.64.i229.i25.i = sext i32 %51 to i64, !dbg !6810
  %z.64.i231.i27.i = mul nsw i64 %x.64.i229.i25.i, %32, !dbg !6811
  %55 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i231.i27.i, 2, !dbg !6811
  br label %ok.i, !dbg !6811

return.32bit.i234.i30.i:                          ; preds = %op.32bit.i228.i24.i
  %z.32.i233.i29.i = extractvalue { i32, i1 } %52, 0, !dbg !6812
  %56 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i233.i29.i, 1, !dbg !6812
  br label %ok.i, !dbg !6812

57:                                               ; preds = %op.32bit.i244.i14.i
  %58 = extractvalue %INT %49, 2, !dbg !6813
  %z.643.i240.i35.i = mul i64 %58, %32, !dbg !6815
  %59 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i240.i35.i, 2, !dbg !6815
  br label %ok.i, !dbg !6815

op.32bit.i212.i37.i:                              ; preds = %ipow.32.i
  %60 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %31, i32 %31) #5, !dbg !6816
  %61 = extractvalue { i32, i1 } %60, 1, !dbg !6818
  %62 = tail call i1 @llvm.expect.i1(i1 %61, i1 false) #5, !dbg !6818
  %z.64.i215.i39.i = mul nsw i64 %32, %32, !dbg !6818
  %63 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i215.i39.i, 2, !dbg !6818
  %z.32.i217.i41.i = extractvalue { i32, i1 } %60, 0, !dbg !6818
  %64 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i217.i41.i, 1, !dbg !6818
  %65 = select i1 %62, %INT %63, %INT %64, !dbg !6818
  %66 = extractvalue %INT %65, 0, !dbg !6819
  br i1 %66, label %73, label %op.32bit.i196.i45.i, !dbg !6819

op.32bit.i196.i45.i:                              ; preds = %op.32bit.i212.i37.i
  %67 = extractvalue %INT %65, 1, !dbg !6821
  %68 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %67, i32 %67) #5, !dbg !6822
  %69 = extractvalue { i32, i1 } %68, 1, !dbg !6823
  %70 = tail call i1 @llvm.expect.i1(i1 %69, i1 false) #5, !dbg !6823
  br i1 %70, label %overflow.32bit.i200.i48.i, label %return.32bit.i202.i50.i, !dbg !6823

overflow.32bit.i200.i48.i:                        ; preds = %op.32bit.i196.i45.i
  %x.64.i197.i46.i = sext i32 %67 to i64, !dbg !6824
  %z.64.i199.i47.i = mul nsw i64 %x.64.i197.i46.i, %x.64.i197.i46.i, !dbg !6825
  %71 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i199.i47.i, 2, !dbg !6825
  br label %ok.i, !dbg !6825

return.32bit.i202.i50.i:                          ; preds = %op.32bit.i196.i45.i
  %z.32.i201.i49.i = extractvalue { i32, i1 } %68, 0, !dbg !6826
  %72 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i201.i49.i, 1, !dbg !6826
  br label %ok.i, !dbg !6826

73:                                               ; preds = %op.32bit.i212.i37.i
  %74 = extractvalue %INT %65, 2, !dbg !6827
  %z.643.i208.i51.i = mul i64 %74, %74, !dbg !6829
  %75 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i208.i51.i, 2, !dbg !6829
  br label %ok.i, !dbg !6829

op.32bit.i180.i53.i:                              ; preds = %ipow.32.i
  %76 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %31, i32 %31) #5, !dbg !6830
  %77 = extractvalue { i32, i1 } %76, 1, !dbg !6832
  %78 = tail call i1 @llvm.expect.i1(i1 %77, i1 false) #5, !dbg !6832
  %z.64.i183.i55.i = mul nsw i64 %32, %32, !dbg !6832
  %79 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i183.i55.i, 2, !dbg !6832
  %z.32.i185.i57.i = extractvalue { i32, i1 } %76, 0, !dbg !6832
  %80 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i185.i57.i, 1, !dbg !6832
  %81 = select i1 %78, %INT %79, %INT %80, !dbg !6832
  %82 = extractvalue %INT %81, 0, !dbg !6833
  br i1 %82, label %89, label %op.32bit.i164.i61.i, !dbg !6833

op.32bit.i164.i61.i:                              ; preds = %op.32bit.i180.i53.i
  %83 = extractvalue %INT %81, 1, !dbg !6835
  %84 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %83, i32 %83) #5, !dbg !6836
  %85 = extractvalue { i32, i1 } %84, 1, !dbg !6837
  %86 = tail call i1 @llvm.expect.i1(i1 %85, i1 false) #5, !dbg !6837
  br i1 %86, label %overflow.32bit.i168.i64.i, label %return.32bit.i170.i66.i, !dbg !6837

overflow.32bit.i168.i64.i:                        ; preds = %op.32bit.i164.i61.i
  %x.64.i165.i62.i = sext i32 %83 to i64, !dbg !6838
  %z.64.i167.i63.i = mul nsw i64 %x.64.i165.i62.i, %x.64.i165.i62.i, !dbg !6839
  %87 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i167.i63.i, 2, !dbg !6839
  br label %tcl.mul.exit177.i68.i, !dbg !6839

return.32bit.i170.i66.i:                          ; preds = %op.32bit.i164.i61.i
  %z.32.i169.i65.i = extractvalue { i32, i1 } %84, 0, !dbg !6840
  %88 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i169.i65.i, 1, !dbg !6840
  br label %tcl.mul.exit177.i68.i, !dbg !6840

89:                                               ; preds = %op.32bit.i180.i53.i
  %90 = extractvalue %INT %81, 2, !dbg !6841
  %z.643.i176.i67.i = mul i64 %90, %90, !dbg !6843
  %91 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i176.i67.i, 2, !dbg !6843
  br label %tcl.mul.exit177.i68.i, !dbg !6843

tcl.mul.exit177.i68.i:                            ; preds = %89, %return.32bit.i170.i66.i, %overflow.32bit.i168.i64.i
  %92 = phi %INT [ %87, %overflow.32bit.i168.i64.i ], [ %88, %return.32bit.i170.i66.i ], [ %91, %89 ]
  %93 = extractvalue %INT %92, 0, !dbg !6844
  br i1 %93, label %100, label %op.32bit.i148.i69.i, !dbg !6844

op.32bit.i148.i69.i:                              ; preds = %tcl.mul.exit177.i68.i
  %94 = extractvalue %INT %92, 1, !dbg !6846
  %95 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %94, i32 %31) #5, !dbg !6847
  %96 = extractvalue { i32, i1 } %95, 1, !dbg !6848
  %97 = tail call i1 @llvm.expect.i1(i1 %96, i1 false) #5, !dbg !6848
  br i1 %97, label %overflow.32bit.i152.i72.i, label %return.32bit.i154.i74.i, !dbg !6848

overflow.32bit.i152.i72.i:                        ; preds = %op.32bit.i148.i69.i
  %x.64.i149.i70.i = sext i32 %94 to i64, !dbg !6849
  %z.64.i151.i71.i = mul nsw i64 %x.64.i149.i70.i, %32, !dbg !6850
  %98 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i151.i71.i, 2, !dbg !6850
  br label %ok.i, !dbg !6850

return.32bit.i154.i74.i:                          ; preds = %op.32bit.i148.i69.i
  %z.32.i153.i73.i = extractvalue { i32, i1 } %95, 0, !dbg !6851
  %99 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i153.i73.i, 1, !dbg !6851
  br label %ok.i, !dbg !6851

100:                                              ; preds = %tcl.mul.exit177.i68.i
  %101 = extractvalue %INT %92, 2, !dbg !6852
  %z.643.i160.i75.i = mul i64 %101, %32, !dbg !6854
  %102 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i160.i75.i, 2, !dbg !6854
  br label %ok.i, !dbg !6854

op.32bit.i132.i77.i:                              ; preds = %ipow.32.i
  %103 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %31, i32 %31) #5, !dbg !6855
  %104 = extractvalue { i32, i1 } %103, 1, !dbg !6857
  %105 = tail call i1 @llvm.expect.i1(i1 %104, i1 false) #5, !dbg !6857
  %z.64.i135.i79.i = mul nsw i64 %32, %32, !dbg !6857
  %106 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i135.i79.i, 2, !dbg !6857
  %z.32.i137.i81.i = extractvalue { i32, i1 } %103, 0, !dbg !6857
  %107 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i137.i81.i, 1, !dbg !6857
  %108 = select i1 %105, %INT %106, %INT %107, !dbg !6857
  %109 = extractvalue %INT %108, 0, !dbg !6858
  br i1 %109, label %116, label %op.32bit.i116.i87.i, !dbg !6858

op.32bit.i116.i87.i:                              ; preds = %op.32bit.i132.i77.i
  %110 = extractvalue %INT %108, 1, !dbg !6860
  %111 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %110, i32 %31) #5, !dbg !6861
  %112 = extractvalue { i32, i1 } %111, 1, !dbg !6862
  %113 = tail call i1 @llvm.expect.i1(i1 %112, i1 false) #5, !dbg !6862
  br i1 %113, label %overflow.32bit.i120.i91.i, label %return.32bit.i122.i93.i, !dbg !6862

overflow.32bit.i120.i91.i:                        ; preds = %op.32bit.i116.i87.i
  %x.64.i117.i88.i = sext i32 %110 to i64, !dbg !6863
  %z.64.i119.i90.i = mul nsw i64 %x.64.i117.i88.i, %32, !dbg !6864
  %114 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i119.i90.i, 2, !dbg !6864
  br label %tcl.mul.exit129.i99.i, !dbg !6864

return.32bit.i122.i93.i:                          ; preds = %op.32bit.i116.i87.i
  %z.32.i121.i92.i = extractvalue { i32, i1 } %111, 0, !dbg !6865
  %115 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i121.i92.i, 1, !dbg !6865
  br label %tcl.mul.exit129.i99.i, !dbg !6865

116:                                              ; preds = %op.32bit.i132.i77.i
  %117 = extractvalue %INT %108, 2, !dbg !6866
  %z.643.i128.i98.i = mul i64 %117, %32, !dbg !6868
  %118 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i128.i98.i, 2, !dbg !6868
  br label %tcl.mul.exit129.i99.i, !dbg !6868

tcl.mul.exit129.i99.i:                            ; preds = %116, %return.32bit.i122.i93.i, %overflow.32bit.i120.i91.i
  %119 = phi %INT [ %114, %overflow.32bit.i120.i91.i ], [ %115, %return.32bit.i122.i93.i ], [ %118, %116 ]
  %120 = extractvalue %INT %119, 0, !dbg !6869
  br i1 %120, label %127, label %op.32bit.i100.i100.i, !dbg !6869

op.32bit.i100.i100.i:                             ; preds = %tcl.mul.exit129.i99.i
  %121 = extractvalue %INT %119, 1, !dbg !6871
  %122 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %121, i32 %121) #5, !dbg !6872
  %123 = extractvalue { i32, i1 } %122, 1, !dbg !6873
  %124 = tail call i1 @llvm.expect.i1(i1 %123, i1 false) #5, !dbg !6873
  br i1 %124, label %overflow.32bit.i104.i103.i, label %return.32bit.i106.i105.i, !dbg !6873

overflow.32bit.i104.i103.i:                       ; preds = %op.32bit.i100.i100.i
  %x.64.i101.i101.i = sext i32 %121 to i64, !dbg !6874
  %z.64.i103.i102.i = mul nsw i64 %x.64.i101.i101.i, %x.64.i101.i101.i, !dbg !6875
  %125 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i103.i102.i, 2, !dbg !6875
  br label %ok.i, !dbg !6875

return.32bit.i106.i105.i:                         ; preds = %op.32bit.i100.i100.i
  %z.32.i105.i104.i = extractvalue { i32, i1 } %122, 0, !dbg !6876
  %126 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i105.i104.i, 1, !dbg !6876
  br label %ok.i, !dbg !6876

127:                                              ; preds = %tcl.mul.exit129.i99.i
  %128 = extractvalue %INT %119, 2, !dbg !6877
  %z.643.i112.i106.i = mul i64 %128, %128, !dbg !6879
  %129 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i112.i106.i, 2, !dbg !6879
  br label %ok.i, !dbg !6879

op.32bit.i84.i108.i:                              ; preds = %ipow.32.i
  %130 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %31, i32 %31) #5, !dbg !6880
  %131 = extractvalue { i32, i1 } %130, 1, !dbg !6882
  %132 = tail call i1 @llvm.expect.i1(i1 %131, i1 false) #5, !dbg !6882
  %z.64.i87.i110.i = mul nsw i64 %32, %32, !dbg !6882
  %133 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i87.i110.i, 2, !dbg !6882
  %z.32.i89.i112.i = extractvalue { i32, i1 } %130, 0, !dbg !6882
  %134 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i89.i112.i, 1, !dbg !6882
  %135 = select i1 %132, %INT %133, %INT %134, !dbg !6882
  %136 = extractvalue %INT %135, 0, !dbg !6883
  br i1 %136, label %143, label %op.32bit.i68.i116.i, !dbg !6883

op.32bit.i68.i116.i:                              ; preds = %op.32bit.i84.i108.i
  %137 = extractvalue %INT %135, 1, !dbg !6885
  %138 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %137, i32 %31) #5, !dbg !6886
  %139 = extractvalue { i32, i1 } %138, 1, !dbg !6887
  %140 = tail call i1 @llvm.expect.i1(i1 %139, i1 false) #5, !dbg !6887
  br i1 %140, label %overflow.32bit.i72.i119.i, label %return.32bit.i74.i121.i, !dbg !6887

overflow.32bit.i72.i119.i:                        ; preds = %op.32bit.i68.i116.i
  %x.64.i69.i117.i = sext i32 %137 to i64, !dbg !6888
  %z.64.i71.i118.i = mul nsw i64 %x.64.i69.i117.i, %32, !dbg !6889
  %141 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i71.i118.i, 2, !dbg !6889
  br label %tcl.mul.exit81.i123.i, !dbg !6889

return.32bit.i74.i121.i:                          ; preds = %op.32bit.i68.i116.i
  %z.32.i73.i120.i = extractvalue { i32, i1 } %138, 0, !dbg !6890
  %142 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i73.i120.i, 1, !dbg !6890
  br label %tcl.mul.exit81.i123.i, !dbg !6890

143:                                              ; preds = %op.32bit.i84.i108.i
  %144 = extractvalue %INT %135, 2, !dbg !6891
  %z.643.i80.i122.i = mul i64 %144, %32, !dbg !6893
  %145 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i80.i122.i, 2, !dbg !6893
  br label %tcl.mul.exit81.i123.i, !dbg !6893

tcl.mul.exit81.i123.i:                            ; preds = %143, %return.32bit.i74.i121.i, %overflow.32bit.i72.i119.i
  %146 = phi %INT [ %141, %overflow.32bit.i72.i119.i ], [ %142, %return.32bit.i74.i121.i ], [ %145, %143 ]
  %147 = extractvalue %INT %146, 0, !dbg !6894
  br i1 %147, label %154, label %op.32bit.i52.i124.i, !dbg !6894

op.32bit.i52.i124.i:                              ; preds = %tcl.mul.exit81.i123.i
  %148 = extractvalue %INT %146, 1, !dbg !6896
  %149 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %148, i32 %148) #5, !dbg !6897
  %150 = extractvalue { i32, i1 } %149, 1, !dbg !6898
  %151 = tail call i1 @llvm.expect.i1(i1 %150, i1 false) #5, !dbg !6898
  br i1 %151, label %overflow.32bit.i56.i127.i, label %return.32bit.i58.i129.i, !dbg !6898

overflow.32bit.i56.i127.i:                        ; preds = %op.32bit.i52.i124.i
  %x.64.i53.i125.i = sext i32 %148 to i64, !dbg !6899
  %z.64.i55.i126.i = mul nsw i64 %x.64.i53.i125.i, %x.64.i53.i125.i, !dbg !6900
  %152 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i55.i126.i, 2, !dbg !6900
  br label %tcl.mul.exit65.i.i, !dbg !6900

return.32bit.i58.i129.i:                          ; preds = %op.32bit.i52.i124.i
  %z.32.i57.i128.i = extractvalue { i32, i1 } %149, 0, !dbg !6901
  %153 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i57.i128.i, 1, !dbg !6901
  br label %tcl.mul.exit65.i.i, !dbg !6901

154:                                              ; preds = %tcl.mul.exit81.i123.i
  %155 = extractvalue %INT %146, 2, !dbg !6902
  %z.643.i64.i130.i = mul i64 %155, %155, !dbg !6904
  %156 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i64.i130.i, 2, !dbg !6904
  br label %tcl.mul.exit65.i.i, !dbg !6904

tcl.mul.exit65.i.i:                               ; preds = %154, %return.32bit.i58.i129.i, %overflow.32bit.i56.i127.i
  %157 = phi %INT [ %152, %overflow.32bit.i56.i127.i ], [ %153, %return.32bit.i58.i129.i ], [ %156, %154 ]
  %158 = extractvalue %INT %157, 0, !dbg !6905
  br i1 %158, label %165, label %op.32bit.i36.i131.i, !dbg !6905

op.32bit.i36.i131.i:                              ; preds = %tcl.mul.exit65.i.i
  %159 = extractvalue %INT %157, 1, !dbg !6907
  %160 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %159, i32 %31) #5, !dbg !6908
  %161 = extractvalue { i32, i1 } %160, 1, !dbg !6909
  %162 = tail call i1 @llvm.expect.i1(i1 %161, i1 false) #5, !dbg !6909
  br i1 %162, label %overflow.32bit.i40.i134.i, label %return.32bit.i42.i136.i, !dbg !6909

overflow.32bit.i40.i134.i:                        ; preds = %op.32bit.i36.i131.i
  %x.64.i37.i132.i = sext i32 %159 to i64, !dbg !6910
  %z.64.i39.i133.i = mul nsw i64 %x.64.i37.i132.i, %32, !dbg !6911
  %163 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i39.i133.i, 2, !dbg !6911
  br label %ok.i, !dbg !6911

return.32bit.i42.i136.i:                          ; preds = %op.32bit.i36.i131.i
  %z.32.i41.i135.i = extractvalue { i32, i1 } %160, 0, !dbg !6912
  %164 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i41.i135.i, 1, !dbg !6912
  br label %ok.i, !dbg !6912

165:                                              ; preds = %tcl.mul.exit65.i.i
  %166 = extractvalue %INT %157, 2, !dbg !6913
  %z.643.i48.i137.i = mul i64 %166, %32, !dbg !6915
  %167 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i48.i137.i, 2, !dbg !6915
  br label %ok.i, !dbg !6915

op.32bit.i20.i139.i:                              ; preds = %ipow.32.i
  %168 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %31, i32 %31) #5, !dbg !6916
  %169 = extractvalue { i32, i1 } %168, 1, !dbg !6918
  %170 = tail call i1 @llvm.expect.i1(i1 %169, i1 false) #5, !dbg !6918
  %z.64.i23.i141.i = mul nsw i64 %32, %32, !dbg !6918
  %171 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i23.i141.i, 2, !dbg !6918
  %z.32.i25.i143.i = extractvalue { i32, i1 } %168, 0, !dbg !6918
  %172 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i25.i143.i, 1, !dbg !6918
  %173 = select i1 %170, %INT %171, %INT %172, !dbg !6918
  %174 = extractvalue %INT %173, 0, !dbg !6919
  br i1 %174, label %181, label %op.32bit.i4.i147.i, !dbg !6919

op.32bit.i4.i147.i:                               ; preds = %op.32bit.i20.i139.i
  %175 = extractvalue %INT %173, 1, !dbg !6921
  %176 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %175, i32 %175) #5, !dbg !6922
  %177 = extractvalue { i32, i1 } %176, 1, !dbg !6923
  %178 = tail call i1 @llvm.expect.i1(i1 %177, i1 false) #5, !dbg !6923
  br i1 %178, label %overflow.32bit.i8.i150.i, label %return.32bit.i10.i152.i, !dbg !6923

overflow.32bit.i8.i150.i:                         ; preds = %op.32bit.i4.i147.i
  %x.64.i5.i148.i = sext i32 %175 to i64, !dbg !6924
  %z.64.i7.i149.i = mul nsw i64 %x.64.i5.i148.i, %x.64.i5.i148.i, !dbg !6925
  %179 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i7.i149.i, 2, !dbg !6925
  br label %tcl.mul.exit17.i154.i, !dbg !6925

return.32bit.i10.i152.i:                          ; preds = %op.32bit.i4.i147.i
  %z.32.i9.i151.i = extractvalue { i32, i1 } %176, 0, !dbg !6926
  %180 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i9.i151.i, 1, !dbg !6926
  br label %tcl.mul.exit17.i154.i, !dbg !6926

181:                                              ; preds = %op.32bit.i20.i139.i
  %182 = extractvalue %INT %173, 2, !dbg !6927
  %z.643.i16.i153.i = mul i64 %182, %182, !dbg !6929
  %183 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i16.i153.i, 2, !dbg !6929
  br label %tcl.mul.exit17.i154.i, !dbg !6929

tcl.mul.exit17.i154.i:                            ; preds = %181, %return.32bit.i10.i152.i, %overflow.32bit.i8.i150.i
  %184 = phi %INT [ %179, %overflow.32bit.i8.i150.i ], [ %180, %return.32bit.i10.i152.i ], [ %183, %181 ]
  %185 = extractvalue %INT %184, 0, !dbg !6930
  br i1 %185, label %192, label %op.32bit.i.i155.i, !dbg !6930

op.32bit.i.i155.i:                                ; preds = %tcl.mul.exit17.i154.i
  %186 = extractvalue %INT %184, 1, !dbg !6932
  %187 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %186, i32 %186) #5, !dbg !6933
  %188 = extractvalue { i32, i1 } %187, 1, !dbg !6934
  %189 = tail call i1 @llvm.expect.i1(i1 %188, i1 false) #5, !dbg !6934
  br i1 %189, label %overflow.32bit.i.i158.i, label %return.32bit.i.i160.i, !dbg !6934

overflow.32bit.i.i158.i:                          ; preds = %op.32bit.i.i155.i
  %x.64.i.i156.i = sext i32 %186 to i64, !dbg !6935
  %z.64.i.i157.i = mul nsw i64 %x.64.i.i156.i, %x.64.i.i156.i, !dbg !6936
  %190 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i.i157.i, 2, !dbg !6936
  br label %ok.i, !dbg !6936

return.32bit.i.i160.i:                            ; preds = %op.32bit.i.i155.i
  %z.32.i.i159.i = extractvalue { i32, i1 } %187, 0, !dbg !6937
  %191 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i.i159.i, 1, !dbg !6937
  br label %ok.i, !dbg !6937

192:                                              ; preds = %tcl.mul.exit17.i154.i
  %193 = extractvalue %INT %184, 2, !dbg !6938
  %z.643.i.i161.i = mul i64 %193, %193, !dbg !6940
  %194 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i.i161.i, 2, !dbg !6940
  br label %ok.i, !dbg !6940

loop.bit0.i.i166.i:                               ; preds = %ipow.32.i, %tcl.mul.exit.i.i211.i
  %result.test27.i.i162.i = phi %INT [ %result.double31.i.i207.i, %tcl.mul.exit.i.i211.i ], [ { i1 true, i32 undef, i64 1 }, %ipow.32.i ]
  %x.test22.i.i163.i = phi %INT [ %x.double3.i.i209.i, %tcl.mul.exit.i.i211.i ], [ %x3, %ipow.32.i ]
  %n.test21.i.i164.i = phi i64 [ %n.double1.i.i210.i, %tcl.mul.exit.i.i211.i ], [ %x.64210.i214.i, %ipow.32.i ]
  %195 = and i64 %n.test21.i.i164.i, 1, !dbg !6941
  %196 = icmp eq i64 %195, 0, !dbg !6941
  %.pre.i.i165.i = extractvalue %INT %x.test22.i.i163.i, 0, !dbg !6943
  br i1 %196, label %loop.bit0.loop.double_crit_edge.i.i167.i, label %loop.mult.i.i171.i, !dbg !6941

loop.bit0.loop.double_crit_edge.i.i167.i:         ; preds = %loop.bit0.i.i166.i
  br i1 %.pre.i.i165.i, label %loop.bit0.loop.double_crit_edge.i._crit_edge.i169.i, label %loop.bit0.loop.double_crit_edge.i.op.32bit.i.i_crit_edge.i170.i, !dbg !6944

loop.bit0.loop.double_crit_edge.i._crit_edge.i169.i: ; preds = %loop.bit0.loop.double_crit_edge.i.i167.i
  %.pre.i168.i = extractvalue %INT %x.test22.i.i163.i, 2, !dbg !6946
  br label %218, !dbg !6944

loop.bit0.loop.double_crit_edge.i.op.32bit.i.i_crit_edge.i170.i: ; preds = %loop.bit0.loop.double_crit_edge.i.i167.i
  %.pre274.i.i = extractvalue %INT %x.test22.i.i163.i, 1, !dbg !6948
  br label %op.32bit.i.i.i197.i, !dbg !6944

loop.mult.i.i171.i:                               ; preds = %loop.bit0.i.i166.i
  br i1 %.pre.i.i165.i, label %tcl.int.64.exit.i15.i.i182.i, label %check2.i4.i.i172.i, !dbg !6949

check2.i4.i.i172.i:                               ; preds = %loop.mult.i.i171.i
  %197 = extractvalue %INT %result.test27.i.i162.i, 0, !dbg !6951
  %198 = extractvalue %INT %x.test22.i.i163.i, 1, !dbg !6952
  br i1 %197, label %loop.double.i.i194.i, label %op.32bit.i6.i.i174.i, !dbg !6951

op.32bit.i6.i.i174.i:                             ; preds = %check2.i4.i.i172.i
  %y.32.i5.i.i173.i = extractvalue %INT %result.test27.i.i162.i, 1, !dbg !6953
  %199 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %198, i32 %y.32.i5.i.i173.i) #5, !dbg !6954
  %200 = extractvalue { i32, i1 } %199, 1, !dbg !6955
  %201 = tail call i1 @llvm.expect.i1(i1 %200, i1 false) #5, !dbg !6955
  br i1 %201, label %overflow.32bit.i10.i.i178.i, label %return.32bit.i12.i.i180.i, !dbg !6955

overflow.32bit.i10.i.i178.i:                      ; preds = %op.32bit.i6.i.i174.i
  %x.64.i7.i.i175.i = sext i32 %198 to i64, !dbg !6956
  %x.641.i8.i.i176.i = sext i32 %y.32.i5.i.i173.i to i64, !dbg !6957
  %z.64.i9.i.i177.i = mul nsw i64 %x.64.i7.i.i175.i, %x.641.i8.i.i176.i, !dbg !6958
  %202 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i9.i.i177.i, 2, !dbg !6958
  br label %loop.double.thread.i.i191.i, !dbg !6958

return.32bit.i12.i.i180.i:                        ; preds = %op.32bit.i6.i.i174.i
  %z.32.i11.i.i179.i = extractvalue { i32, i1 } %199, 0, !dbg !6959
  %203 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i11.i.i179.i, 1, !dbg !6959
  br label %loop.double.thread.i.i191.i, !dbg !6959

tcl.int.64.exit.i15.i.i182.i:                     ; preds = %loop.mult.i.i171.i
  %204 = extractvalue %INT %x.test22.i.i163.i, 2, !dbg !6960
  %.pre.i14.i.i181.i = extractvalue %INT %result.test27.i.i162.i, 0, !dbg !6962
  br i1 %.pre.i14.i.i181.i, label %loop.double.thread40.i.i185.i, label %loop.double.thread36.i.i188.i, !dbg !6962

loop.double.thread40.i.i185.i:                    ; preds = %tcl.int.64.exit.i15.i.i182.i
  %205 = extractvalue %INT %result.test27.i.i162.i, 2, !dbg !6962
  %z.643.i1842.i.i183.i = mul i64 %204, %205, !dbg !6964
  %206 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i1842.i.i183.i, 2, !dbg !6964
  %n.mult43.i.i184.i = add i64 %n.test21.i.i164.i, -1, !dbg !6965
  br label %218, !dbg !6944

loop.double.thread36.i.i188.i:                    ; preds = %tcl.int.64.exit.i15.i.i182.i
  %207 = extractvalue %INT %result.test27.i.i162.i, 1, !dbg !6962
  %208 = sext i32 %207 to i64, !dbg !6962
  %z.643.i1838.i.i186.i = mul i64 %204, %208, !dbg !6964
  %209 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i1838.i.i186.i, 2, !dbg !6964
  %n.mult39.i.i187.i = add i64 %n.test21.i.i164.i, -1, !dbg !6965
  br label %218, !dbg !6944

loop.double.thread.i.i191.i:                      ; preds = %return.32bit.i12.i.i180.i, %overflow.32bit.i10.i.i178.i
  %result.mult20.ph.i.i189.i = phi %INT [ %203, %return.32bit.i12.i.i180.i ], [ %202, %overflow.32bit.i10.i.i178.i ]
  %n.mult35.i.i190.i = add i64 %n.test21.i.i164.i, -1, !dbg !6965
  br label %op.32bit.i.i.i197.i, !dbg !6944

loop.double.i.i194.i:                             ; preds = %check2.i4.i.i172.i
  %210 = sext i32 %198 to i64, !dbg !6966
  %211 = extractvalue %INT %result.test27.i.i162.i, 2, !dbg !6962
  %z.643.i18.i.i192.i = mul i64 %211, %210, !dbg !6964
  %212 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i18.i.i192.i, 2, !dbg !6964
  %n.mult.i.i193.i = add i64 %n.test21.i.i164.i, -1, !dbg !6965
  br label %op.32bit.i.i.i197.i

op.32bit.i.i.i197.i:                              ; preds = %loop.double.i.i194.i, %loop.double.thread.i.i191.i, %loop.bit0.loop.double_crit_edge.i.op.32bit.i.i_crit_edge.i170.i
  %.pre-phi275.i.i = phi i32 [ %.pre274.i.i, %loop.bit0.loop.double_crit_edge.i.op.32bit.i.i_crit_edge.i170.i ], [ %198, %loop.double.i.i194.i ], [ %198, %loop.double.thread.i.i191.i ], !dbg !6948
  %result.double32.i.i195.i = phi %INT [ %result.test27.i.i162.i, %loop.bit0.loop.double_crit_edge.i.op.32bit.i.i_crit_edge.i170.i ], [ %212, %loop.double.i.i194.i ], [ %result.mult20.ph.i.i189.i, %loop.double.thread.i.i191.i ]
  %n.double29.i.i196.i = phi i64 [ %n.test21.i.i164.i, %loop.bit0.loop.double_crit_edge.i.op.32bit.i.i_crit_edge.i170.i ], [ %n.mult.i.i193.i, %loop.double.i.i194.i ], [ %n.mult35.i.i190.i, %loop.double.thread.i.i191.i ]
  %213 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %.pre-phi275.i.i, i32 %.pre-phi275.i.i) #5, !dbg !6967
  %214 = extractvalue { i32, i1 } %213, 1, !dbg !6968
  %215 = tail call i1 @llvm.expect.i1(i1 %214, i1 false) #5, !dbg !6968
  br i1 %215, label %overflow.32bit.i.i.i200.i, label %return.32bit.i.i.i202.i, !dbg !6968

overflow.32bit.i.i.i200.i:                        ; preds = %op.32bit.i.i.i197.i
  %x.64.i.i.i198.i = sext i32 %.pre-phi275.i.i to i64, !dbg !6969
  %z.64.i.i.i199.i = mul nsw i64 %x.64.i.i.i198.i, %x.64.i.i.i198.i, !dbg !6970
  %216 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i.i.i199.i, 2, !dbg !6970
  br label %tcl.mul.exit.i.i211.i, !dbg !6970

return.32bit.i.i.i202.i:                          ; preds = %op.32bit.i.i.i197.i
  %z.32.i.i.i201.i = extractvalue { i32, i1 } %213, 0, !dbg !6971
  %217 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i.i.i201.i, 1, !dbg !6971
  br label %tcl.mul.exit.i.i211.i, !dbg !6971

218:                                              ; preds = %loop.double.thread36.i.i188.i, %loop.double.thread40.i.i185.i, %loop.bit0.loop.double_crit_edge.i._crit_edge.i169.i
  %.pre-phi.i203.i = phi i64 [ %.pre.i168.i, %loop.bit0.loop.double_crit_edge.i._crit_edge.i169.i ], [ %204, %loop.double.thread36.i.i188.i ], [ %204, %loop.double.thread40.i.i185.i ], !dbg !6946
  %result.double33.i.i204.i = phi %INT [ %result.test27.i.i162.i, %loop.bit0.loop.double_crit_edge.i._crit_edge.i169.i ], [ %209, %loop.double.thread36.i.i188.i ], [ %206, %loop.double.thread40.i.i185.i ]
  %n.double30.i.i205.i = phi i64 [ %n.test21.i.i164.i, %loop.bit0.loop.double_crit_edge.i._crit_edge.i169.i ], [ %n.mult39.i.i187.i, %loop.double.thread36.i.i188.i ], [ %n.mult43.i.i184.i, %loop.double.thread40.i.i185.i ]
  %z.643.i.i.i206.i = mul i64 %.pre-phi.i203.i, %.pre-phi.i203.i, !dbg !6972
  %219 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i.i.i206.i, 2, !dbg !6972
  br label %tcl.mul.exit.i.i211.i, !dbg !6972

tcl.mul.exit.i.i211.i:                            ; preds = %218, %return.32bit.i.i.i202.i, %overflow.32bit.i.i.i200.i
  %result.double31.i.i207.i = phi %INT [ %result.double32.i.i195.i, %overflow.32bit.i.i.i200.i ], [ %result.double32.i.i195.i, %return.32bit.i.i.i202.i ], [ %result.double33.i.i204.i, %218 ]
  %n.double28.i.i208.i = phi i64 [ %n.double29.i.i196.i, %overflow.32bit.i.i.i200.i ], [ %n.double29.i.i196.i, %return.32bit.i.i.i202.i ], [ %n.double30.i.i205.i, %218 ]
  %x.double3.i.i209.i = phi %INT [ %216, %overflow.32bit.i.i.i200.i ], [ %217, %return.32bit.i.i.i202.i ], [ %219, %218 ]
  %n.double1.i.i210.i = ashr i64 %n.double28.i.i208.i, 1, !dbg !6973
  %220 = icmp eq i64 %n.double1.i.i210.i, 0, !dbg !6974
  br i1 %220, label %ok.i, label %loop.bit0.i.i166.i, !dbg !6974

ipow.64.i:                                        ; preds = %else.i
  switch i64 %x.64210.i214.i, label %loop.bit0.i.i.i [
    i64 2, label %pow2.i.i
    i64 3, label %tcl.mul.exit849.i.i
    i64 4, label %tcl.mul.exit817.i.i
    i64 5, label %224
    i64 6, label %tcl.mul.exit737.i.i
    i64 7, label %227
    i64 8, label %229
    i64 9, label %tcl.mul.exit545.i.i
    i64 10, label %tcl.mul.exit481.i.i
    i64 11, label %233
    i64 12, label %235
    i64 13, label %tcl.mul.exit257.i.i
    i64 14, label %tcl.mul.exit177.i.i
    i64 15, label %239
    i64 16, label %tcl.mul.exit17.i.i
  ], !dbg !6975

pow2.i.i:                                         ; preds = %ipow.64.i
  %z.643.i864.i.i = mul i64 %33, %33, !dbg !6977
  %221 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i864.i.i, 2, !dbg !6977
  br label %ok.i, !dbg !6977

tcl.mul.exit849.i.i:                              ; preds = %ipow.64.i
  %z.643.i848.i.i = mul i64 %33, %33, !dbg !6979
  %z.643.i832.i.i = mul i64 %z.643.i848.i.i, %33, !dbg !6981
  %222 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i832.i.i, 2, !dbg !6981
  br label %ok.i, !dbg !6981

tcl.mul.exit817.i.i:                              ; preds = %ipow.64.i
  %z.643.i816.i.i = mul i64 %33, %33, !dbg !6983
  %z.643.i800.i.i = mul i64 %z.643.i816.i.i, %z.643.i816.i.i, !dbg !6985
  %223 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i800.i.i, 2, !dbg !6985
  br label %ok.i, !dbg !6985

224:                                              ; preds = %ipow.64.i
  %z.643.i784.i.i = mul i64 %33, %33, !dbg !6987
  %z.643.i768.i.i = mul i64 %z.643.i784.i.i, %33, !dbg !6989
  %z.643.i752.i.i = mul i64 %z.643.i768.i.i, %z.643.i784.i.i, !dbg !6991
  %225 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i752.i.i, 2, !dbg !6991
  br label %ok.i, !dbg !6991

tcl.mul.exit737.i.i:                              ; preds = %ipow.64.i
  %z.643.i736.i.i = mul i64 %33, %33, !dbg !6993
  %z.643.i720.i.i = mul i64 %z.643.i736.i.i, %33, !dbg !6995
  %z.643.i704.i.i = mul i64 %z.643.i720.i.i, %z.643.i720.i.i, !dbg !6997
  %226 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i704.i.i, 2, !dbg !6997
  br label %ok.i, !dbg !6997

227:                                              ; preds = %ipow.64.i
  %z.643.i688.i.i = mul i64 %33, %33, !dbg !6999
  %z.643.i672.i.i = mul i64 %z.643.i688.i.i, %33, !dbg !7001
  %z.643.i656.i.i = mul i64 %z.643.i672.i.i, %33, !dbg !7003
  %z.643.i640.i.i = mul i64 %z.643.i656.i.i, %z.643.i672.i.i, !dbg !7005
  %228 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i640.i.i, 2, !dbg !7005
  br label %ok.i, !dbg !7005

229:                                              ; preds = %ipow.64.i
  %z.643.i624.i.i = mul i64 %33, %33, !dbg !7007
  %z.643.i608.i.i = mul i64 %z.643.i624.i.i, %z.643.i624.i.i, !dbg !7009
  %z.643.i592.i.i = mul i64 %z.643.i608.i.i, %z.643.i608.i.i, !dbg !7011
  %230 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i592.i.i, 2, !dbg !7011
  br label %ok.i, !dbg !7011

tcl.mul.exit545.i.i:                              ; preds = %ipow.64.i
  %z.643.i576.i.i = mul i64 %33, %33, !dbg !7013
  %z.643.i560.i.i = mul i64 %z.643.i576.i.i, %z.643.i576.i.i, !dbg !7015
  %z.643.i544.i.i = mul i64 %z.643.i560.i.i, %33, !dbg !7017
  %z.643.i528.i.i = mul i64 %z.643.i544.i.i, %z.643.i560.i.i, !dbg !7019
  %231 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i528.i.i, 2, !dbg !7019
  br label %ok.i, !dbg !7019

tcl.mul.exit481.i.i:                              ; preds = %ipow.64.i
  %z.643.i512.i.i = mul i64 %33, %33, !dbg !7021
  %z.643.i496.i.i = mul i64 %z.643.i512.i.i, %33, !dbg !7023
  %z.643.i480.i.i = mul i64 %z.643.i496.i.i, %z.643.i512.i.i, !dbg !7025
  %z.643.i464.i.i = mul i64 %z.643.i480.i.i, %z.643.i480.i.i, !dbg !7027
  %232 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i464.i.i, 2, !dbg !7027
  br label %ok.i, !dbg !7027

233:                                              ; preds = %ipow.64.i
  %z.643.i448.i.i = mul i64 %33, %33, !dbg !7029
  %z.643.i432.i.i = mul i64 %z.643.i448.i.i, %33, !dbg !7031
  %z.643.i416.i.i = mul i64 %z.643.i432.i.i, %z.643.i448.i.i, !dbg !7033
  %z.643.i400.i.i = mul i64 %z.643.i416.i.i, %33, !dbg !7035
  %z.643.i384.i.i = mul i64 %z.643.i400.i.i, %z.643.i416.i.i, !dbg !7037
  %234 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i384.i.i, 2, !dbg !7037
  br label %ok.i, !dbg !7037

235:                                              ; preds = %ipow.64.i
  %z.643.i368.i.i = mul i64 %33, %33, !dbg !7039
  %z.643.i352.i.i = mul i64 %z.643.i368.i.i, %33, !dbg !7041
  %z.643.i336.i.i = mul i64 %z.643.i352.i.i, %z.643.i352.i.i, !dbg !7043
  %z.643.i320.i.i = mul i64 %z.643.i336.i.i, %z.643.i336.i.i, !dbg !7045
  %236 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i320.i.i, 2, !dbg !7045
  br label %ok.i, !dbg !7045

tcl.mul.exit257.i.i:                              ; preds = %ipow.64.i
  %z.643.i304.i.i = mul i64 %33, %33, !dbg !7047
  %z.643.i288.i.i = mul i64 %z.643.i304.i.i, %33, !dbg !7049
  %z.643.i272.i.i = mul i64 %z.643.i288.i.i, %z.643.i288.i.i, !dbg !7051
  %z.643.i256.i.i = mul i64 %z.643.i272.i.i, %33, !dbg !7053
  %z.643.i240.i.i = mul i64 %z.643.i256.i.i, %z.643.i272.i.i, !dbg !7055
  %237 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i240.i.i, 2, !dbg !7055
  br label %ok.i, !dbg !7055

tcl.mul.exit177.i.i:                              ; preds = %ipow.64.i
  %z.643.i224.i.i = mul i64 %33, %33, !dbg !7057
  %z.643.i208.i.i = mul i64 %z.643.i224.i.i, %33, !dbg !7059
  %z.643.i192.i.i = mul i64 %z.643.i208.i.i, %33, !dbg !7061
  %z.643.i176.i.i = mul i64 %z.643.i192.i.i, %z.643.i208.i.i, !dbg !7063
  %z.643.i160.i.i = mul i64 %z.643.i176.i.i, %z.643.i176.i.i, !dbg !7065
  %238 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i160.i.i, 2, !dbg !7065
  br label %ok.i, !dbg !7065

239:                                              ; preds = %ipow.64.i
  %z.643.i144.i.i = mul i64 %33, %33, !dbg !7067
  %z.643.i128.i.i = mul i64 %z.643.i144.i.i, %33, !dbg !7069
  %z.643.i112.i.i = mul i64 %z.643.i128.i.i, %33, !dbg !7071
  %z.643.i96.i.i = mul i64 %z.643.i112.i.i, %z.643.i128.i.i, !dbg !7073
  %z.643.i80.i.i = mul i64 %z.643.i96.i.i, %33, !dbg !7075
  %z.643.i64.i.i = mul i64 %z.643.i80.i.i, %z.643.i96.i.i, !dbg !7077
  %240 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i64.i.i, 2, !dbg !7077
  br label %ok.i, !dbg !7077

tcl.mul.exit17.i.i:                               ; preds = %ipow.64.i
  %z.643.i48.i.i = mul i64 %33, %33, !dbg !7079
  %z.643.i32.i.i = mul i64 %z.643.i48.i.i, %z.643.i48.i.i, !dbg !7081
  %z.643.i16.i.i = mul i64 %z.643.i32.i.i, %z.643.i32.i.i, !dbg !7083
  %z.643.i.i.i = mul i64 %z.643.i16.i.i, %z.643.i16.i.i, !dbg !7085
  %241 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i.i.i, 2, !dbg !7085
  br label %ok.i, !dbg !7085

loop.bit0.i.i.i:                                  ; preds = %ipow.64.i, %tcl.mul.exit.i.i.i
  %result.test27.i.i.i = phi %INT [ %result.double31.i.i.i, %tcl.mul.exit.i.i.i ], [ { i1 true, i32 undef, i64 1 }, %ipow.64.i ]
  %x.test22.i.i.i = phi %INT [ %x.double3.i.i.i, %tcl.mul.exit.i.i.i ], [ %x3, %ipow.64.i ]
  %n.test21.i.i.i = phi i64 [ %n.double1.i.i.i, %tcl.mul.exit.i.i.i ], [ %x.64210.i214.i, %ipow.64.i ]
  %242 = and i64 %n.test21.i.i.i, 1, !dbg !7087
  %243 = icmp eq i64 %242, 0, !dbg !7087
  %.pre.i.i.i = extractvalue %INT %x.test22.i.i.i, 0, !dbg !7089
  br i1 %243, label %loop.bit0.loop.double_crit_edge.i.i.i, label %loop.mult.i.i.i, !dbg !7087

loop.bit0.loop.double_crit_edge.i.i.i:            ; preds = %loop.bit0.i.i.i
  br i1 %.pre.i.i.i, label %loop.bit0.loop.double_crit_edge.i._crit_edge.i.i, label %loop.bit0.loop.double_crit_edge.i.op.32bit.i.i_crit_edge.i.i, !dbg !7090

loop.bit0.loop.double_crit_edge.i._crit_edge.i.i: ; preds = %loop.bit0.loop.double_crit_edge.i.i.i
  %.pre.i.i = extractvalue %INT %x.test22.i.i.i, 2, !dbg !7092
  br label %265, !dbg !7090

loop.bit0.loop.double_crit_edge.i.op.32bit.i.i_crit_edge.i.i: ; preds = %loop.bit0.loop.double_crit_edge.i.i.i
  %.pre866.i.i = extractvalue %INT %x.test22.i.i.i, 1, !dbg !7094
  br label %op.32bit.i.i.i.i, !dbg !7090

loop.mult.i.i.i:                                  ; preds = %loop.bit0.i.i.i
  br i1 %.pre.i.i.i, label %tcl.int.64.exit.i15.i.i.i, label %check2.i4.i.i.i, !dbg !7095

check2.i4.i.i.i:                                  ; preds = %loop.mult.i.i.i
  %244 = extractvalue %INT %result.test27.i.i.i, 0, !dbg !7097
  %245 = extractvalue %INT %x.test22.i.i.i, 1, !dbg !7098
  br i1 %244, label %loop.double.i.i.i, label %op.32bit.i6.i.i.i, !dbg !7097

op.32bit.i6.i.i.i:                                ; preds = %check2.i4.i.i.i
  %y.32.i5.i.i.i = extractvalue %INT %result.test27.i.i.i, 1, !dbg !7099
  %246 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %245, i32 %y.32.i5.i.i.i) #5, !dbg !7100
  %247 = extractvalue { i32, i1 } %246, 1, !dbg !7101
  %248 = tail call i1 @llvm.expect.i1(i1 %247, i1 false) #5, !dbg !7101
  br i1 %248, label %overflow.32bit.i10.i.i.i, label %return.32bit.i12.i.i.i, !dbg !7101

overflow.32bit.i10.i.i.i:                         ; preds = %op.32bit.i6.i.i.i
  %x.64.i7.i.i.i = sext i32 %245 to i64, !dbg !7102
  %x.641.i8.i.i.i = sext i32 %y.32.i5.i.i.i to i64, !dbg !7103
  %z.64.i9.i.i.i = mul nsw i64 %x.64.i7.i.i.i, %x.641.i8.i.i.i, !dbg !7104
  %249 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i9.i.i.i, 2, !dbg !7104
  br label %loop.double.thread.i.i.i, !dbg !7104

return.32bit.i12.i.i.i:                           ; preds = %op.32bit.i6.i.i.i
  %z.32.i11.i.i.i = extractvalue { i32, i1 } %246, 0, !dbg !7105
  %250 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i11.i.i.i, 1, !dbg !7105
  br label %loop.double.thread.i.i.i, !dbg !7105

tcl.int.64.exit.i15.i.i.i:                        ; preds = %loop.mult.i.i.i
  %251 = extractvalue %INT %x.test22.i.i.i, 2, !dbg !7106
  %.pre.i14.i.i.i = extractvalue %INT %result.test27.i.i.i, 0, !dbg !7108
  br i1 %.pre.i14.i.i.i, label %loop.double.thread40.i.i.i, label %loop.double.thread36.i.i.i, !dbg !7108

loop.double.thread40.i.i.i:                       ; preds = %tcl.int.64.exit.i15.i.i.i
  %252 = extractvalue %INT %result.test27.i.i.i, 2, !dbg !7108
  %z.643.i1842.i.i.i = mul i64 %251, %252, !dbg !7110
  %253 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i1842.i.i.i, 2, !dbg !7110
  %n.mult43.i.i.i = add i64 %n.test21.i.i.i, -1, !dbg !7111
  br label %265, !dbg !7090

loop.double.thread36.i.i.i:                       ; preds = %tcl.int.64.exit.i15.i.i.i
  %254 = extractvalue %INT %result.test27.i.i.i, 1, !dbg !7108
  %255 = sext i32 %254 to i64, !dbg !7108
  %z.643.i1838.i.i.i = mul i64 %251, %255, !dbg !7110
  %256 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i1838.i.i.i, 2, !dbg !7110
  %n.mult39.i.i.i = add i64 %n.test21.i.i.i, -1, !dbg !7111
  br label %265, !dbg !7090

loop.double.thread.i.i.i:                         ; preds = %return.32bit.i12.i.i.i, %overflow.32bit.i10.i.i.i
  %result.mult20.ph.i.i.i = phi %INT [ %250, %return.32bit.i12.i.i.i ], [ %249, %overflow.32bit.i10.i.i.i ]
  %n.mult35.i.i.i = add i64 %n.test21.i.i.i, -1, !dbg !7111
  br label %op.32bit.i.i.i.i, !dbg !7090

loop.double.i.i.i:                                ; preds = %check2.i4.i.i.i
  %257 = sext i32 %245 to i64, !dbg !7112
  %258 = extractvalue %INT %result.test27.i.i.i, 2, !dbg !7108
  %z.643.i18.i.i.i = mul i64 %258, %257, !dbg !7110
  %259 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i18.i.i.i, 2, !dbg !7110
  %n.mult.i.i.i = add i64 %n.test21.i.i.i, -1, !dbg !7111
  br label %op.32bit.i.i.i.i

op.32bit.i.i.i.i:                                 ; preds = %loop.double.i.i.i, %loop.double.thread.i.i.i, %loop.bit0.loop.double_crit_edge.i.op.32bit.i.i_crit_edge.i.i
  %.pre-phi867.i.i = phi i32 [ %.pre866.i.i, %loop.bit0.loop.double_crit_edge.i.op.32bit.i.i_crit_edge.i.i ], [ %245, %loop.double.i.i.i ], [ %245, %loop.double.thread.i.i.i ], !dbg !7094
  %result.double32.i.i.i = phi %INT [ %result.test27.i.i.i, %loop.bit0.loop.double_crit_edge.i.op.32bit.i.i_crit_edge.i.i ], [ %259, %loop.double.i.i.i ], [ %result.mult20.ph.i.i.i, %loop.double.thread.i.i.i ]
  %n.double29.i.i.i = phi i64 [ %n.test21.i.i.i, %loop.bit0.loop.double_crit_edge.i.op.32bit.i.i_crit_edge.i.i ], [ %n.mult.i.i.i, %loop.double.i.i.i ], [ %n.mult35.i.i.i, %loop.double.thread.i.i.i ]
  %260 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %.pre-phi867.i.i, i32 %.pre-phi867.i.i) #5, !dbg !7113
  %261 = extractvalue { i32, i1 } %260, 1, !dbg !7114
  %262 = tail call i1 @llvm.expect.i1(i1 %261, i1 false) #5, !dbg !7114
  br i1 %262, label %overflow.32bit.i.i.i.i, label %return.32bit.i.i.i.i, !dbg !7114

overflow.32bit.i.i.i.i:                           ; preds = %op.32bit.i.i.i.i
  %x.64.i.i.i.i = sext i32 %.pre-phi867.i.i to i64, !dbg !7115
  %z.64.i.i.i.i = mul nsw i64 %x.64.i.i.i.i, %x.64.i.i.i.i, !dbg !7116
  %263 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.64.i.i.i.i, 2, !dbg !7116
  br label %tcl.mul.exit.i.i.i, !dbg !7116

return.32bit.i.i.i.i:                             ; preds = %op.32bit.i.i.i.i
  %z.32.i.i.i.i = extractvalue { i32, i1 } %260, 0, !dbg !7117
  %264 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %z.32.i.i.i.i, 1, !dbg !7117
  br label %tcl.mul.exit.i.i.i, !dbg !7117

265:                                              ; preds = %loop.double.thread36.i.i.i, %loop.double.thread40.i.i.i, %loop.bit0.loop.double_crit_edge.i._crit_edge.i.i
  %.pre-phi.i.i = phi i64 [ %.pre.i.i, %loop.bit0.loop.double_crit_edge.i._crit_edge.i.i ], [ %251, %loop.double.thread36.i.i.i ], [ %251, %loop.double.thread40.i.i.i ], !dbg !7092
  %result.double33.i.i.i = phi %INT [ %result.test27.i.i.i, %loop.bit0.loop.double_crit_edge.i._crit_edge.i.i ], [ %256, %loop.double.thread36.i.i.i ], [ %253, %loop.double.thread40.i.i.i ]
  %n.double30.i.i.i = phi i64 [ %n.test21.i.i.i, %loop.bit0.loop.double_crit_edge.i._crit_edge.i.i ], [ %n.mult39.i.i.i, %loop.double.thread36.i.i.i ], [ %n.mult43.i.i.i, %loop.double.thread40.i.i.i ]
  %z.643.i.i.i.i = mul i64 %.pre-phi.i.i, %.pre-phi.i.i, !dbg !7118
  %266 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %z.643.i.i.i.i, 2, !dbg !7118
  br label %tcl.mul.exit.i.i.i, !dbg !7118

tcl.mul.exit.i.i.i:                               ; preds = %265, %return.32bit.i.i.i.i, %overflow.32bit.i.i.i.i
  %result.double31.i.i.i = phi %INT [ %result.double32.i.i.i, %overflow.32bit.i.i.i.i ], [ %result.double32.i.i.i, %return.32bit.i.i.i.i ], [ %result.double33.i.i.i, %265 ]
  %n.double28.i.i.i = phi i64 [ %n.double29.i.i.i, %overflow.32bit.i.i.i.i ], [ %n.double29.i.i.i, %return.32bit.i.i.i.i ], [ %n.double30.i.i.i, %265 ]
  %x.double3.i.i.i = phi %INT [ %263, %overflow.32bit.i.i.i.i ], [ %264, %return.32bit.i.i.i.i ], [ %266, %265 ]
  %n.double1.i.i.i = ashr i64 %n.double28.i.i.i, 1, !dbg !7119
  %267 = icmp eq i64 %n.double1.i.i.i, 0, !dbg !7120
  br i1 %267, label %ok.i, label %loop.bit0.i.i.i, !dbg !7120

ok.i:                                             ; preds = %tcl.mul.exit.i.i211.i, %tcl.mul.exit.i.i.i, %tcl.mul.exit17.i.i, %239, %tcl.mul.exit177.i.i, %tcl.mul.exit257.i.i, %235, %233, %tcl.mul.exit481.i.i, %tcl.mul.exit545.i.i, %229, %227, %tcl.mul.exit737.i.i, %224, %tcl.mul.exit817.i.i, %tcl.mul.exit849.i.i, %pow2.i.i, %192, %return.32bit.i.i160.i, %overflow.32bit.i.i158.i, %165, %return.32bit.i42.i136.i, %overflow.32bit.i40.i134.i, %127, %return.32bit.i106.i105.i, %overflow.32bit.i104.i103.i, %100, %return.32bit.i154.i74.i, %overflow.32bit.i152.i72.i, %73, %return.32bit.i202.i50.i, %overflow.32bit.i200.i48.i, %57, %return.32bit.i234.i30.i, %overflow.32bit.i232.i28.i, %return.32bit.i266.i10.i, %overflow.32bit.i264.i8.i, %pow1.i, %check.powSize.i14
  %result.i = phi %INT [ %x3, %pow1.i ], [ { i1 true, i32 undef, i64 1 }, %check.powSize.i14 ], [ %42, %overflow.32bit.i264.i8.i ], [ %43, %return.32bit.i266.i10.i ], [ %55, %overflow.32bit.i232.i28.i ], [ %56, %return.32bit.i234.i30.i ], [ %59, %57 ], [ %71, %overflow.32bit.i200.i48.i ], [ %72, %return.32bit.i202.i50.i ], [ %75, %73 ], [ %98, %overflow.32bit.i152.i72.i ], [ %99, %return.32bit.i154.i74.i ], [ %102, %100 ], [ %125, %overflow.32bit.i104.i103.i ], [ %126, %return.32bit.i106.i105.i ], [ %129, %127 ], [ %163, %overflow.32bit.i40.i134.i ], [ %164, %return.32bit.i42.i136.i ], [ %167, %165 ], [ %190, %overflow.32bit.i.i158.i ], [ %191, %return.32bit.i.i160.i ], [ %194, %192 ], [ %221, %pow2.i.i ], [ %222, %tcl.mul.exit849.i.i ], [ %223, %tcl.mul.exit817.i.i ], [ %225, %224 ], [ %226, %tcl.mul.exit737.i.i ], [ %228, %227 ], [ %230, %229 ], [ %231, %tcl.mul.exit545.i.i ], [ %232, %tcl.mul.exit481.i.i ], [ %234, %233 ], [ %236, %235 ], [ %237, %tcl.mul.exit257.i.i ], [ %238, %tcl.mul.exit177.i.i ], [ %240, %239 ], [ %241, %tcl.mul.exit17.i.i ], [ %result.double31.i.i.i, %tcl.mul.exit.i.i.i ], [ %result.double31.i.i207.i, %tcl.mul.exit.i.i211.i ]
  %268 = insertvalue { i32, %INT } { i32 0, %INT undef }, %INT %result.i, 1, !dbg !7121
  br label %tcl.ipow.exit, !dbg !7121

fail.zeroToNegative.i22:                          ; preds = %intToInt
  %interp.i15 = load %Interp*, %Interp** @tclInterp, align 8, !dbg !7122, !invariant.load !3, !noalias !7123, !nonnull !3, !dereferenceable !1051
  %exception.message.i16 = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.6, align 8, !dbg !7122, !invariant.load !3, !noalias !7123, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i2.i17 = getelementptr %Tcl_Obj, %Tcl_Obj* %exception.message.i16, i64 0, i32 0, !dbg !7126
  %refCount.i3.i18 = load i32, i32* %refCountPtr.i2.i17, align 4, !dbg !7126, !noalias !7123
  %269 = icmp sgt i32 %refCount.i3.i18, 1, !dbg !7122
  tail call void @llvm.assume(i1 %269) #5, !dbg !7122, !noalias !7123
  %exception.code.i19 = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.7, align 8, !dbg !7122, !invariant.load !3, !noalias !7123, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i.i20 = getelementptr %Tcl_Obj, %Tcl_Obj* %exception.code.i19, i64 0, i32 0, !dbg !7128
  %refCount.i.i21 = load i32, i32* %refCountPtr.i.i20, align 4, !dbg !7128, !noalias !7123
  %270 = icmp sgt i32 %refCount.i.i21, 1, !dbg !7122
  tail call void @llvm.assume(i1 %270) #5, !dbg !7122, !noalias !7123
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp.i15, %Tcl_Obj* noalias nonnull %exception.message.i16) #5, !dbg !7122, !noalias !7123
  tail call void @Tcl_SetObjErrorCode(%Interp* noalias nocapture nonnull %interp.i15, %Tcl_Obj* noalias nonnull %exception.code.i19) #5, !dbg !7122, !noalias !7123
  store i32 1, i32* %ecvar, align 4, !dbg !7122, !alias.scope !7123
  br label %tcl.ipow.exit, !dbg !7130

tcl.ipow.exit:                                    ; preds = %fail.zeroToNegative.i22, %ok.i
  %271 = phi { i32, %INT } [ %268, %ok.i ], [ { i32 1, %INT undef }, %fail.zeroToNegative.i22 ]
  %272 = extractvalue { i32, %INT } %271, 0, !dbg !7131
  %273 = icmp eq i32 %272, 0, !dbg !7131
  %274 = extractvalue { i32, %INT } %271, 1, !dbg !7131
  %275 = insertvalue %NUMERIC { i1 false, %INT undef, double undef }, %INT %274, 1, !dbg !7131
  %276 = insertvalue { i32, %NUMERIC } { i32 0, %NUMERIC undef }, %NUMERIC %275, 1, !dbg !7131
  %277 = select i1 %273, { i32, %NUMERIC } %276, { i32, %NUMERIC } { i32 1, %NUMERIC undef }, !dbg !7131
  ret { i32, %NUMERIC } %277, !dbg !7131

dblToInt:                                         ; preds = %intPow
  %x5 = extractvalue %NUMERIC %x, 2, !dbg !7132
  %278 = fcmp oeq double %x5, 0.000000e+00, !dbg !7133
  %279 = extractvalue %INT %y4, 0, !dbg !7135
  %280 = extractvalue %INT %y4, 1, !dbg !7135
  %281 = sext i32 %280 to i64, !dbg !7135
  %282 = extractvalue %INT %y4, 2, !dbg !7135
  %x.64210.i.i = select i1 %279, i64 %282, i64 %281, !dbg !7135
  %z.bit1.i.i = icmp slt i64 %x.64210.i.i, 0, !dbg !7137
  %283 = and i1 %278, %z.bit1.i.i, !dbg !7133
  br i1 %283, label %fail.zeroToNegative.i, label %check.powSize.i, !dbg !7133

check.powSize.i:                                  ; preds = %dblToInt
  br i1 %279, label %checkfalse32.i, label %apply.powi.i, !dbg !7138

checkfalse32.i:                                   ; preds = %check.powSize.i
  %.off.i = add i64 %282, 2147483648, !dbg !7139
  %284 = icmp ult i64 %.off.i, 4294967296, !dbg !7139
  %285 = tail call i1 @llvm.expect.i1(i1 %284, i1 true) #5, !dbg !7139
  br i1 %285, label %false32.i, label %out.of.range.i, !dbg !7139

false32.i:                                        ; preds = %checkfalse32.i
  %286 = trunc i64 %282 to i32, !dbg !7140
  br label %apply.powi.i, !dbg !7141

out.of.range.i:                                   ; preds = %checkfalse32.i
  %287 = sitofp i64 %282 to double, !dbg !7142
  %288 = tail call double @llvm.pow.f64(double %x5, double %287) #5, !dbg !7142
  %289 = insertvalue { i32, double } { i32 0, double undef }, double %288, 1, !dbg !7142
  br label %tcl.powi.exit, !dbg !7142

apply.powi.i:                                     ; preds = %false32.i, %check.powSize.i
  %290 = phi i32 [ %286, %false32.i ], [ %280, %check.powSize.i ]
  %291 = tail call double @llvm.powi.f64(double %x5, i32 %290) #5, !dbg !7143
  %292 = insertvalue { i32, double } { i32 0, double undef }, double %291, 1, !dbg !7143
  br label %tcl.powi.exit, !dbg !7143

fail.zeroToNegative.i:                            ; preds = %dblToInt
  %interp.i = load %Interp*, %Interp** @tclInterp, align 8, !dbg !7144, !invariant.load !3, !noalias !7145, !nonnull !3, !dereferenceable !1051
  %exception.message.i = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.6, align 8, !dbg !7144, !invariant.load !3, !noalias !7145, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i2.i = getelementptr %Tcl_Obj, %Tcl_Obj* %exception.message.i, i64 0, i32 0, !dbg !7148
  %refCount.i3.i = load i32, i32* %refCountPtr.i2.i, align 4, !dbg !7148, !noalias !7145
  %293 = icmp sgt i32 %refCount.i3.i, 1, !dbg !7144
  tail call void @llvm.assume(i1 %293) #5, !dbg !7144, !noalias !7145
  %exception.code.i = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.7, align 8, !dbg !7144, !invariant.load !3, !noalias !7145, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %exception.code.i, i64 0, i32 0, !dbg !7150
  %refCount.i.i = load i32, i32* %refCountPtr.i.i, align 4, !dbg !7150, !noalias !7145
  %294 = icmp sgt i32 %refCount.i.i, 1, !dbg !7144
  tail call void @llvm.assume(i1 %294) #5, !dbg !7144, !noalias !7145
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp.i, %Tcl_Obj* noalias nonnull %exception.message.i) #5, !dbg !7144, !noalias !7145
  tail call void @Tcl_SetObjErrorCode(%Interp* noalias nocapture nonnull %interp.i, %Tcl_Obj* noalias nonnull %exception.code.i) #5, !dbg !7144, !noalias !7145
  store i32 1, i32* %ecvar, align 4, !dbg !7144, !alias.scope !7145
  br label %tcl.powi.exit, !dbg !7152

tcl.powi.exit:                                    ; preds = %fail.zeroToNegative.i, %apply.powi.i, %out.of.range.i
  %295 = phi { i32, double } [ %289, %out.of.range.i ], [ %292, %apply.powi.i ], [ { i32 1, double undef }, %fail.zeroToNegative.i ]
  %296 = extractvalue { i32, double } %295, 0, !dbg !7153
  %297 = icmp eq i32 %296, 0, !dbg !7153
  %298 = extractvalue { i32, double } %295, 1, !dbg !7153
  %299 = insertvalue %NUMERIC { i1 true, %INT undef, double undef }, double %298, 2, !dbg !7153
  %300 = insertvalue { i32, %NUMERIC } { i32 0, %NUMERIC undef }, %NUMERIC %299, 1, !dbg !7153
  %301 = select i1 %297, { i32, %NUMERIC } %300, { i32, %NUMERIC } { i32 1, %NUMERIC undef }, !dbg !7153
  ret { i32, %NUMERIC } %301, !dbg !7153
}

; Function Attrs: alwaysinline nounwind
define hidden nonnull %Tcl_Obj* @tcl.getresult() local_unnamed_addr #6 !dbg !7154 {
enter:
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !7157, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %resultObj = tail call nonnull %Tcl_Obj* @Tcl_GetObjResult(%Interp* nocapture nonnull %interp), !dbg !7157
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %resultObj, i64 0, i32 0, !dbg !7158
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !7161
  %0 = add nsw i32 %refCount1.i.i, 1, !dbg !7161
  store i32 %0, i32* %refCount.i.i, align 4, !dbg !7161
  ret %Tcl_Obj* %resultObj, !dbg !7162
}

; Function Attrs: alwaysinline nounwind
define hidden noalias nonnull %Tcl_Obj* @tcl.getreturnopts(%INT %returnCode) local_unnamed_addr #6 !dbg !7163 {
enter:
  %code = extractvalue %INT %returnCode, 1, !dbg !7166
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !7167, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %optionsObj = tail call noalias nonnull %Tcl_Obj* @Tcl_GetReturnOptions(%Interp* nocapture nonnull %interp, i32 %code), !dbg !7167
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %optionsObj, i64 0, i32 0, !dbg !7168
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !7170
  %0 = icmp eq i32 %refCount1.i, 0, !dbg !7170
  tail call void @llvm.assume(i1 %0) #5, !dbg !7170
  store i32 1, i32* %refCount.i, align 4, !dbg !7171
  ret %Tcl_Obj* %optionsObj, !dbg !7174
}

; Function Attrs: alwaysinline nounwind
define hidden i32 @tcl.initExceptionOptions(%Tcl_Obj* nonnull %objPtr, %Tcl_Obj* nonnull %dictPtr) local_unnamed_addr #6 !dbg !7175 {
enter:
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !7179, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %code = tail call i32 @Tcl_SetReturnOptions(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %dictPtr), !dbg !7180
  switch i32 %code, label %other [
    i32 0, label %ok
    i32 1, label %error
  ], !dbg !7181

ok:                                               ; preds = %enter
  ret i32 0, !dbg !7182

error:                                            ; preds = %enter
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %objPtr), !dbg !7183
  %code1 = tail call i32 @Tcl_SetReturnOptions(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %dictPtr), !dbg !7184
  ret i32 1, !dbg !7185

other:                                            ; preds = %enter
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %objPtr), !dbg !7186
  ret i32 %code, !dbg !7187
}

; Function Attrs: alwaysinline nounwind
define hidden void @tcl.initExceptionSimple(%Tcl_Obj* nonnull %message, %Tcl_Obj* nonnull %errorcode) local_unnamed_addr #6 !dbg !7188 {
enter:
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !7192, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %message), !dbg !7193
  %returnOpts = getelementptr %Interp, %Interp* %interp, i64 0, i32 42, !dbg !7194
  %returnOpts1 = load %Tcl_Obj*, %Tcl_Obj** %returnOpts, align 8, !dbg !7195
  %objPtr = tail call noalias nonnull %Tcl_Obj* @Tcl_NewObj(), !dbg !7196
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !7197
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !7199
  %0 = icmp eq i32 %refCount1.i, 0, !dbg !7199
  tail call void @llvm.assume(i1 %0) #5, !dbg !7199
  %str.8 = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.8, align 8, !dbg !7200, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %str.8, i64 0, i32 0, !dbg !7201
  %refCount.i4 = load i32, i32* %refCountPtr.i, align 4, !dbg !7201
  %1 = icmp sgt i32 %refCount.i4, 1, !dbg !7200
  tail call void @llvm.assume(i1 %1), !dbg !7200
  %code = tail call i32 @Tcl_DictObjPut(%Interp* nocapture null, %Tcl_Obj* nocapture nonnull %objPtr, %Tcl_Obj* nonnull %str.8, %Tcl_Obj* nonnull %errorcode), !dbg !7203
  store %Tcl_Obj* %objPtr, %Tcl_Obj** %returnOpts, align 8, !dbg !7204
  %refCount1.i.i11 = load i32, i32* %refCount.i, align 4, !dbg !7205
  %2 = add nsw i32 %refCount1.i.i11, 1, !dbg !7205
  store i32 %2, i32* %refCount.i, align 4, !dbg !7205
  %3 = icmp eq %Tcl_Obj* %returnOpts1, null, !dbg !7208
  br i1 %3, label %test.for.error, label %swap.dropOld, !dbg !7208

swap.dropOld:                                     ; preds = %enter
  %refCount.i.i5 = getelementptr %Tcl_Obj, %Tcl_Obj* %returnOpts1, i64 0, i32 0, !dbg !7209
  %refCount1.i.i6 = load i32, i32* %refCount.i.i5, align 4, !dbg !7212
  %4 = icmp slt i32 %refCount1.i.i6, 2, !dbg !7213
  br i1 %4, label %freeObject.i.i7, label %leave.i.i8, !dbg !7213

freeObject.i.i7:                                  ; preds = %swap.dropOld
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %returnOpts1) #5, !dbg !7214
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %returnOpts1) #5, !dbg !7215
  br label %test.for.error, !dbg !7216

leave.i.i8:                                       ; preds = %swap.dropOld
  %5 = add nsw i32 %refCount1.i.i6, -1, !dbg !7212
  store i32 %5, i32* %refCount.i.i5, align 4, !dbg !7217
  br label %test.for.error, !dbg !7218

test.for.error:                                   ; preds = %leave.i.i8, %freeObject.i.i7, %enter
  %errorInfo = getelementptr %Interp, %Interp* %interp, i64 0, i32 43, !dbg !7219
  %errorInfo2 = load %Tcl_Obj*, %Tcl_Obj** %errorInfo, align 8, !dbg !7220
  %6 = icmp eq %Tcl_Obj* %errorInfo2, null, !dbg !7221
  br i1 %6, label %error.setErrorCode, label %error.clearErrorInfo, !dbg !7221

error.clearErrorInfo:                             ; preds = %test.for.error
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %errorInfo2, i64 0, i32 0, !dbg !7222
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !7225
  %7 = icmp slt i32 %refCount1.i.i, 2, !dbg !7226
  br i1 %7, label %freeObject.i.i, label %leave.i.i, !dbg !7226

freeObject.i.i:                                   ; preds = %error.clearErrorInfo
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %errorInfo2) #5, !dbg !7227
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %errorInfo2) #5, !dbg !7228
  br label %tcl.dropReference.exit, !dbg !7229

leave.i.i:                                        ; preds = %error.clearErrorInfo
  %8 = add nsw i32 %refCount1.i.i, -1, !dbg !7225
  store i32 %8, i32* %refCount.i.i, align 4, !dbg !7230
  br label %tcl.dropReference.exit, !dbg !7231

tcl.dropReference.exit:                           ; preds = %freeObject.i.i, %leave.i.i
  store %Tcl_Obj* null, %Tcl_Obj** %errorInfo, align 8, !dbg !7232
  br label %error.setErrorCode, !dbg !7233

error.setErrorCode:                               ; preds = %test.for.error, %tcl.dropReference.exit
  tail call void @Tcl_SetObjErrorCode(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %errorcode), !dbg !7234
  %flags = getelementptr %Interp, %Interp* %interp, i64 0, i32 30, !dbg !7235
  %flags3 = load i32, i32* %flags, align 4, !dbg !7236
  %9 = or i32 %flags3, 2048, !dbg !7236
  store i32 %9, i32* %flags, align 4, !dbg !7236
  ret void, !dbg !7237
}

; Function Attrs: alwaysinline nounwind
define hidden i32 @tcl.processReturn(%Tcl_Obj* nonnull %result, i32 %code, i32 %level, %Tcl_Obj* %returnOpts) local_unnamed_addr #6 !dbg !7238 {
enter:
  %valuePtr = alloca %Tcl_Obj*, align 8, !dbg !7246
  %infoLen = alloca i32, align 4, !dbg !7247
  %0 = alloca i32, align 4, !dbg !7248
  %1 = alloca %Tcl_Obj**, align 8, !dbg !7249
  %2 = alloca i32, align 4, !dbg !7250
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !7251, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %result), !dbg !7252
  %returnOpts3 = getelementptr %Interp, %Interp* %interp, i64 0, i32 42, !dbg !7253
  %returnOpts34 = load %Tcl_Obj*, %Tcl_Obj** %returnOpts3, align 8, !dbg !7254
  %3 = icmp eq %Tcl_Obj* %returnOpts34, %returnOpts, !dbg !7255
  br i1 %3, label %test.for.error, label %swap, !dbg !7255

swap:                                             ; preds = %enter
  %4 = icmp eq %Tcl_Obj* %returnOpts34, null, !dbg !7256
  br i1 %4, label %swap.inNew, label %swap.dropOld, !dbg !7256

swap.dropOld:                                     ; preds = %swap
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %returnOpts34, i64 0, i32 0, !dbg !7257
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !7260
  %5 = icmp slt i32 %refCount1.i.i, 2, !dbg !7261
  br i1 %5, label %freeObject.i.i, label %leave.i.i, !dbg !7261

freeObject.i.i:                                   ; preds = %swap.dropOld
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %returnOpts34) #5, !dbg !7262
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %returnOpts34) #5, !dbg !7263
  br label %tcl.dropReference.exit, !dbg !7264

leave.i.i:                                        ; preds = %swap.dropOld
  %6 = add nsw i32 %refCount1.i.i, -1, !dbg !7260
  store i32 %6, i32* %refCount.i.i, align 4, !dbg !7265
  br label %tcl.dropReference.exit, !dbg !7266

tcl.dropReference.exit:                           ; preds = %freeObject.i.i, %leave.i.i
  %7 = icmp eq %Tcl_Obj* %returnOpts, null, !dbg !7267
  br i1 %7, label %swap.totallyNew, label %swap.inNew, !dbg !7267

swap.totallyNew:                                  ; preds = %tcl.dropReference.exit
  %objPtr = tail call noalias nonnull %Tcl_Obj* @Tcl_NewObj(), !dbg !7268
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !7269
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !7271
  %8 = icmp eq i32 %refCount1.i, 0, !dbg !7271
  tail call void @llvm.assume(i1 %8) #5, !dbg !7271
  store %Tcl_Obj* %objPtr, %Tcl_Obj** %returnOpts3, align 8, !dbg !7272
  br label %test.for.error.sink.split, !dbg !7273

swap.inNew:                                       ; preds = %tcl.dropReference.exit, %swap
  store %Tcl_Obj* %returnOpts, %Tcl_Obj** %returnOpts3, align 8, !dbg !7274
  %refCount.i.i57 = getelementptr %Tcl_Obj, %Tcl_Obj* %returnOpts, i64 0, i32 0, !dbg !7275
  br label %test.for.error.sink.split, !dbg !7278

test.for.error.sink.split:                        ; preds = %swap.totallyNew, %swap.inNew
  %refCount.i.i57.sink61 = phi i32* [ %refCount.i.i57, %swap.inNew ], [ %refCount.i, %swap.totallyNew ]
  %refCount1.i.i58 = load i32, i32* %refCount.i.i57.sink61, align 4, !dbg !7279
  %9 = add nsw i32 %refCount1.i.i58, 1, !dbg !7279
  store i32 %9, i32* %refCount.i.i57.sink61, align 4, !dbg !7279
  br label %test.for.error, !dbg !7280

test.for.error:                                   ; preds = %test.for.error.sink.split, %enter
  %10 = icmp eq i32 %code, 1, !dbg !7280
  br i1 %10, label %error, label %test.for.return, !dbg !7280

error:                                            ; preds = %test.for.error
  %errorInfo = getelementptr %Interp, %Interp* %interp, i64 0, i32 43, !dbg !7281
  %errorInfo5 = load %Tcl_Obj*, %Tcl_Obj** %errorInfo, align 8, !dbg !7282
  %11 = icmp eq %Tcl_Obj* %errorInfo5, null, !dbg !7283
  br i1 %11, label %error.getErrorInfo, label %error.clearErrorInfo, !dbg !7283

error.clearErrorInfo:                             ; preds = %error
  %refCount.i.i52 = getelementptr %Tcl_Obj, %Tcl_Obj* %errorInfo5, i64 0, i32 0, !dbg !7284
  %refCount1.i.i53 = load i32, i32* %refCount.i.i52, align 4, !dbg !7287
  %12 = icmp slt i32 %refCount1.i.i53, 2, !dbg !7288
  br i1 %12, label %freeObject.i.i54, label %leave.i.i55, !dbg !7288

freeObject.i.i54:                                 ; preds = %error.clearErrorInfo
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %errorInfo5) #5, !dbg !7289
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %errorInfo5) #5, !dbg !7290
  br label %tcl.dropReference.exit56, !dbg !7291

leave.i.i55:                                      ; preds = %error.clearErrorInfo
  %13 = add nsw i32 %refCount1.i.i53, -1, !dbg !7287
  store i32 %13, i32* %refCount.i.i52, align 4, !dbg !7292
  br label %tcl.dropReference.exit56, !dbg !7293

tcl.dropReference.exit56:                         ; preds = %freeObject.i.i54, %leave.i.i55
  store %Tcl_Obj* null, %Tcl_Obj** %errorInfo, align 8, !dbg !7294
  br label %error.getErrorInfo, !dbg !7295

error.getErrorInfo:                               ; preds = %error, %tcl.dropReference.exit56
  store %Tcl_Obj* null, %Tcl_Obj** %valuePtr, align 8, !dbg !7296
  %cond = icmp eq %Tcl_Obj* %returnOpts, null, !dbg !7297
  br i1 %cond, label %error.getErrorLine, label %error.testHaveErrorInfo, !dbg !7297

error.testHaveErrorInfo:                          ; preds = %error.getErrorInfo
  %str.9 = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.9, align 8, !dbg !7298, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i50 = getelementptr %Tcl_Obj, %Tcl_Obj* %str.9, i64 0, i32 0, !dbg !7299
  %refCount.i51 = load i32, i32* %refCountPtr.i50, align 4, !dbg !7299
  %14 = icmp sgt i32 %refCount.i51, 1, !dbg !7298
  tail call void @llvm.assume(i1 %14), !dbg !7298
  %code6 = call i32 @Tcl_DictObjGet(%Interp* nocapture null, %Tcl_Obj* nocapture nonnull %returnOpts, %Tcl_Obj* nocapture nonnull readonly %str.9, %Tcl_Obj** nocapture nonnull %valuePtr), !dbg !7298
  %errorInfo7 = load %Tcl_Obj*, %Tcl_Obj** %valuePtr, align 8, !dbg !7301
  %15 = icmp eq %Tcl_Obj* %errorInfo7, null, !dbg !7302
  br i1 %15, label %error.testHaveErrorStack, label %error.installErrorInfo, !dbg !7302

error.installErrorInfo:                           ; preds = %error.testHaveErrorInfo
  %str = call nonnull i8* @Tcl_GetStringFromObj(%Tcl_Obj* noalias nocapture nonnull %errorInfo7, i32* noalias nocapture nonnull %infoLen), !dbg !7303
  %infoLen8 = load i32, i32* %infoLen, align 4, !dbg !7304
  %16 = icmp eq i32 %infoLen8, 0, !dbg !7304
  br i1 %16, label %error.testHaveErrorStack, label %error.setErrorInfo, !dbg !7304

error.setErrorInfo:                               ; preds = %error.installErrorInfo
  store %Tcl_Obj* %errorInfo7, %Tcl_Obj** %errorInfo, align 8, !dbg !7305
  %refCount.i.i48 = getelementptr %Tcl_Obj, %Tcl_Obj* %errorInfo7, i64 0, i32 0, !dbg !7306
  %refCount1.i.i49 = load i32, i32* %refCount.i.i48, align 4, !dbg !7309
  %17 = add nsw i32 %refCount1.i.i49, 1, !dbg !7309
  store i32 %17, i32* %refCount.i.i48, align 4, !dbg !7309
  %flags = getelementptr %Interp, %Interp* %interp, i64 0, i32 30, !dbg !7310
  %flags9 = load i32, i32* %flags, align 4, !dbg !7311
  %18 = or i32 %flags9, 4, !dbg !7311
  store i32 %18, i32* %flags, align 4, !dbg !7311
  br label %error.testHaveErrorStack, !dbg !7312

error.testHaveErrorStack:                         ; preds = %error.setErrorInfo, %error.testHaveErrorInfo, %error.installErrorInfo
  %str.10 = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.10, align 8, !dbg !7313, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i46 = getelementptr %Tcl_Obj, %Tcl_Obj* %str.10, i64 0, i32 0, !dbg !7314
  %refCount.i47 = load i32, i32* %refCountPtr.i46, align 4, !dbg !7314
  %19 = icmp sgt i32 %refCount.i47, 1, !dbg !7313
  tail call void @llvm.assume(i1 %19), !dbg !7313
  %code11 = call i32 @Tcl_DictObjGet(%Interp* nocapture null, %Tcl_Obj* nocapture nonnull %returnOpts, %Tcl_Obj* nocapture nonnull readonly %str.10, %Tcl_Obj** nocapture nonnull %valuePtr), !dbg !7313
  %errorStack = load %Tcl_Obj*, %Tcl_Obj** %valuePtr, align 8, !dbg !7316
  %20 = icmp eq %Tcl_Obj* %errorStack, null, !dbg !7317
  br i1 %20, label %error.testHaveErrorCode, label %error.installErrorStack, !dbg !7317

error.installErrorStack:                          ; preds = %error.testHaveErrorStack
  %errorStack12 = getelementptr %Interp, %Interp* %interp, i64 0, i32 69, !dbg !7318
  %errorStack1213 = load %Tcl_Obj*, %Tcl_Obj** %errorStack12, align 8, !dbg !7319
  %refCountPtr.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %errorStack1213, i64 0, i32 0, !dbg !7320
  %refCount.i.i45 = load i32, i32* %refCountPtr.i.i, align 4, !dbg !7320
  %shared.i = icmp sgt i32 %refCount.i.i45, 1, !dbg !7323
  br i1 %shared.i, label %error.deduplicateErrorStack, label %error.getErrorStackElements, !dbg !7319

error.deduplicateErrorStack:                      ; preds = %error.installErrorStack
  %objPtr15 = tail call noalias nonnull %Tcl_Obj* @Tcl_DuplicateObj(%Tcl_Obj* nocapture nonnull readonly %errorStack1213), !dbg !7324
  %refCount.i43 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr15, i64 0, i32 0, !dbg !7325
  %refCount1.i44 = load i32, i32* %refCount.i43, align 4, !dbg !7327
  %21 = icmp eq i32 %refCount1.i44, 0, !dbg !7327
  tail call void @llvm.assume(i1 %21) #5, !dbg !7327
  %refCount1.i.i37 = load i32, i32* %refCountPtr.i.i, align 4, !dbg !7328
  %22 = icmp slt i32 %refCount1.i.i37, 2, !dbg !7331
  br i1 %22, label %freeObject.i.i38, label %leave.i.i39, !dbg !7331

freeObject.i.i38:                                 ; preds = %error.deduplicateErrorStack
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %errorStack1213) #5, !dbg !7332
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %errorStack1213) #5, !dbg !7333
  br label %tcl.dropReference.exit40, !dbg !7334

leave.i.i39:                                      ; preds = %error.deduplicateErrorStack
  %23 = add nsw i32 %refCount1.i.i37, -1, !dbg !7328
  store i32 %23, i32* %refCountPtr.i.i, align 4, !dbg !7335
  br label %tcl.dropReference.exit40, !dbg !7336

tcl.dropReference.exit40:                         ; preds = %freeObject.i.i38, %leave.i.i39
  %refCount1.i.i35 = load i32, i32* %refCount.i43, align 4, !dbg !7337
  %24 = add nsw i32 %refCount1.i.i35, 1, !dbg !7337
  store i32 %24, i32* %refCount.i43, align 4, !dbg !7337
  store %Tcl_Obj* %objPtr15, %Tcl_Obj** %errorStack12, align 8, !dbg !7340
  br label %error.getErrorStackElements, !dbg !7341

error.getErrorStackElements:                      ; preds = %tcl.dropReference.exit40, %error.installErrorStack
  %code16 = call i32 @Tcl_ListObjGetElements(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %errorStack, i32* noalias nocapture nonnull %0, %Tcl_Obj*** noalias nocapture nonnull %1), !dbg !7342
  %25 = icmp eq i32 %code16, 0, !dbg !7342
  br i1 %25, label %error.setErrorStack, label %error.getErrorStackElements.notList, !dbg !7342

error.getErrorStackElements.notList:              ; preds = %test.for.error2, %error.addFlag, %error.getErrorStackElements
  ret i32 %code, !dbg !7343

error.setErrorStack:                              ; preds = %error.getErrorStackElements
  %resetErrorStack = getelementptr %Interp, %Interp* %interp, i64 0, i32 74, !dbg !7344
  store i32 0, i32* %resetErrorStack, align 4, !dbg !7344
  %errorStack1217 = load %Tcl_Obj*, %Tcl_Obj** %errorStack12, align 8, !dbg !7345
  %code18 = call i32 @Tcl_ListObjLength(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %errorStack1217, i32* noalias nocapture nonnull %2), !dbg !7346
  %len = load i32, i32* %2, align 4, !dbg !7347
  %objc = load i32, i32* %0, align 4, !dbg !7347
  %objv = load %Tcl_Obj**, %Tcl_Obj*** %1, align 8, !dbg !7347
  %code19 = tail call i32 @Tcl_ListObjReplace(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %errorStack1217, i32 0, i32 %len, i32 %objc, %Tcl_Obj** noalias nocapture nonnull readonly %objv), !dbg !7347
  br label %error.testHaveErrorCode, !dbg !7348

error.testHaveErrorCode:                          ; preds = %error.setErrorStack, %error.testHaveErrorStack
  %str.8 = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.8, align 8, !dbg !7349, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i32 = getelementptr %Tcl_Obj, %Tcl_Obj* %str.8, i64 0, i32 0, !dbg !7350
  %refCount.i33 = load i32, i32* %refCountPtr.i32, align 4, !dbg !7350
  %26 = icmp sgt i32 %refCount.i33, 1, !dbg !7349
  tail call void @llvm.assume(i1 %26), !dbg !7349
  %code21 = call i32 @Tcl_DictObjGet(%Interp* nocapture null, %Tcl_Obj* nocapture nonnull %returnOpts, %Tcl_Obj* nocapture nonnull readonly %str.8, %Tcl_Obj** nocapture nonnull %valuePtr), !dbg !7349
  %errorCode = load %Tcl_Obj*, %Tcl_Obj** %valuePtr, align 8, !dbg !7352
  %27 = icmp eq %Tcl_Obj* %errorCode, null, !dbg !7353
  br i1 %27, label %error.getErrorLine.thread60, label %error.getErrorLine.thread, !dbg !7353

error.getErrorLine.thread60:                      ; preds = %error.testHaveErrorCode
  tail call void (%Interp*, ...) @Tcl_SetErrorCode(%Interp* nocapture nonnull %interp, i8* nocapture getelementptr inbounds ([5 x i8], [5 x i8]* @string.constant.18, i64 0, i64 0), i8* nocapture null), !dbg !7354
  br label %error.testHaveErrorInfo1, !dbg !7355

error.getErrorLine.thread:                        ; preds = %error.testHaveErrorCode
  tail call void @Tcl_SetObjErrorCode(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %errorCode), !dbg !7356
  br label %error.testHaveErrorInfo1, !dbg !7355

error.getErrorLine:                               ; preds = %error.getErrorInfo
  tail call void (%Interp*, ...) @Tcl_SetErrorCode(%Interp* nocapture nonnull %interp, i8* nocapture getelementptr inbounds ([5 x i8], [5 x i8]* @string.constant.18, i64 0, i64 0), i8* nocapture null), !dbg !7354
  br label %test.for.return, !dbg !7355

error.testHaveErrorInfo1:                         ; preds = %error.getErrorLine.thread60, %error.getErrorLine.thread
  %str.11 = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.11, align 8, !dbg !7357, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %str.11, i64 0, i32 0, !dbg !7358
  %refCount.i31 = load i32, i32* %refCountPtr.i, align 4, !dbg !7358
  %28 = icmp sgt i32 %refCount.i31, 1, !dbg !7357
  tail call void @llvm.assume(i1 %28), !dbg !7357
  %code23 = call i32 @Tcl_DictObjGet(%Interp* nocapture null, %Tcl_Obj* nocapture nonnull %returnOpts, %Tcl_Obj* nocapture nonnull readonly %str.11, %Tcl_Obj** nocapture nonnull %valuePtr), !dbg !7357
  %errorLine = load %Tcl_Obj*, %Tcl_Obj** %valuePtr, align 8, !dbg !7360
  %29 = icmp eq %Tcl_Obj* %errorLine, null, !dbg !7361
  br i1 %29, label %test.for.return, label %error.installErrorLine, !dbg !7361

error.installErrorLine:                           ; preds = %error.testHaveErrorInfo1
  %errorLine24 = getelementptr %Interp, %Interp* %interp, i64 0, i32 2, !dbg !7362
  %code25 = tail call i32 @Tcl_GetIntFromObj(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %errorLine, i32* noalias nocapture nonnull %errorLine24), !dbg !7362
  br label %test.for.return, !dbg !7363

test.for.return:                                  ; preds = %error.getErrorLine, %error.testHaveErrorInfo1, %error.installErrorLine, %test.for.error
  %30 = icmp eq i32 %level, 0, !dbg !7364
  br i1 %30, label %test.for.error2, label %return.process, !dbg !7364

return.process:                                   ; preds = %test.for.return
  %interp.returnLevel = getelementptr %Interp, %Interp* %interp, i64 0, i32 47, !dbg !7365
  store i32 %level, i32* %interp.returnLevel, align 4, !dbg !7365
  %interp.returnCode = getelementptr %Interp, %Interp* %interp, i64 0, i32 14, !dbg !7366
  store i32 %code, i32* %interp.returnCode, align 4, !dbg !7366
  ret i32 2, !dbg !7367

test.for.error2:                                  ; preds = %test.for.return
  br i1 %10, label %error.addFlag, label %error.getErrorStackElements.notList, !dbg !7368

error.addFlag:                                    ; preds = %test.for.error2
  %flags26 = getelementptr %Interp, %Interp* %interp, i64 0, i32 30, !dbg !7369
  %flags2627 = load i32, i32* %flags26, align 4, !dbg !7370
  %31 = or i32 %flags2627, 2048, !dbg !7370
  store i32 %31, i32* %flags26, align 4, !dbg !7370
  br label %error.getErrorStackElements.notList, !dbg !7371
}

; Function Attrs: alwaysinline nofree norecurse nounwind
define hidden i1 @tcl.handleExceptionResult(i32 %code, %Tcl_Obj* nocapture %result) local_unnamed_addr #10 !dbg !7372 {
enter:
  %ok = icmp eq i32 %code, 0, !dbg !7378
  br i1 %ok, label %addRef, label %done, !dbg !7379

addRef:                                           ; preds = %enter
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %result, i64 0, i32 0, !dbg !7380
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !7383
  %0 = add nsw i32 %refCount1.i.i, 1, !dbg !7383
  store i32 %0, i32* %refCount.i.i, align 4, !dbg !7383
  br label %done, !dbg !7384

done:                                             ; preds = %addRef, %enter
  ret i1 %ok, !dbg !7385
}

; Function Attrs: alwaysinline nounwind
define hidden i32 @tcl.procedure.return(%INT %code, %Tcl_Obj* nocapture nonnull %procName, i32* nocapture nonnull %ecvar) local_unnamed_addr #6 !dbg !7386 {
enter:
  %0 = alloca i32, align 4, !dbg !7393
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !7394, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %1 = extractvalue %INT %code, 0, !dbg !7395
  %2 = extractvalue %INT %code, 1, !dbg !7395
  %3 = extractvalue %INT %code, 2, !dbg !7395
  %4 = trunc i64 %3 to i32, !dbg !7395
  %5 = select i1 %1, i32 %4, i32 %2, !dbg !7395
  switch i32 %5, label %done [
    i32 2, label %handle.return
    i32 3, label %handle.leaked.break
    i32 4, label %handle.leaked.continue
    i32 1, label %handle.error
  ], !dbg !7397

handle.error:                                     ; preds = %enter
  %name = call nonnull i8* @Tcl_GetStringFromObj(%Tcl_Obj* noalias nocapture nonnull %procName, i32* noalias nocapture nonnull %0), !dbg !7398
  %name.len = load i32, i32* %0, align 4, !dbg !7399
  %6 = icmp sgt i32 %name.len, 60, !dbg !7400
  %7 = select i1 %6, i32 60, i32 %name.len, !dbg !7401
  %8 = select i1 %6, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @string.constant.20, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @wrongargs_, i64 0, i64 0), !dbg !7401
  %errorLine.ptr = getelementptr %Interp, %Interp* %interp, i64 0, i32 2, !dbg !7401
  %errorLine = load i32, i32* %errorLine.ptr, align 4, !dbg !7401
  %objPtr = tail call noalias nonnull %Tcl_Obj* (i8*, ...) @Tcl_ObjPrintf(i8* nocapture nonnull readonly getelementptr inbounds ([34 x i8], [34 x i8]* @string.constant.19, i64 0, i64 0), i32 %7, i8* nocapture nonnull %name, i8* nocapture %8, i32 %errorLine), !dbg !7401
  %refCount.i10 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !7402
  %refCount1.i11 = load i32, i32* %refCount.i10, align 4, !dbg !7404
  %9 = icmp eq i32 %refCount1.i11, 0, !dbg !7404
  tail call void @llvm.assume(i1 %9) #5, !dbg !7404
  tail call void @Tcl_AppendObjToErrorInfo(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %objPtr), !dbg !7401
  br label %done, !dbg !7405

handle.return:                                    ; preds = %enter
  %10 = tail call i32 @TclUpdateReturnInfo(%Interp* nonnull %interp), !dbg !7406
  store i32 %10, i32* %ecvar, align 4, !dbg !7407
  ret i32 %10, !dbg !7408

handle.leaked.break:                              ; preds = %enter
  %objPtr1 = tail call noalias nonnull %Tcl_Obj* (i8*, ...) @Tcl_ObjPrintf(i8* nocapture nonnull readonly getelementptr inbounds ([31 x i8], [31 x i8]* @string.constant.24, i64 0, i64 0), i8* nocapture getelementptr inbounds ([6 x i8], [6 x i8]* @string.constant.23, i64 0, i64 0)), !dbg !7409
  %refCount.i8 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr1, i64 0, i32 0, !dbg !7410
  %refCount1.i9 = load i32, i32* %refCount.i8, align 4, !dbg !7412
  %11 = icmp eq i32 %refCount1.i9, 0, !dbg !7412
  tail call void @llvm.assume(i1 %11) #5, !dbg !7412
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %objPtr1), !dbg !7409
  %str.12 = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.12, align 8, !dbg !7413, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i6 = getelementptr %Tcl_Obj, %Tcl_Obj* %str.12, i64 0, i32 0, !dbg !7414
  %refCount.i7 = load i32, i32* %refCountPtr.i6, align 4, !dbg !7414
  %12 = icmp sgt i32 %refCount.i7, 1, !dbg !7413
  tail call void @llvm.assume(i1 %12), !dbg !7413
  tail call void @Tcl_SetObjErrorCode(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %str.12), !dbg !7413
  store i32 1, i32* %ecvar, align 4, !dbg !7416
  ret i32 1, !dbg !7417

handle.leaked.continue:                           ; preds = %enter
  %objPtr2 = tail call noalias nonnull %Tcl_Obj* (i8*, ...) @Tcl_ObjPrintf(i8* nocapture nonnull readonly getelementptr inbounds ([31 x i8], [31 x i8]* @string.constant.24, i64 0, i64 0), i8* nocapture getelementptr inbounds ([9 x i8], [9 x i8]* @string.constant.25, i64 0, i64 0)), !dbg !7418
  %refCount.i5 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr2, i64 0, i32 0, !dbg !7419
  %refCount1.i = load i32, i32* %refCount.i5, align 4, !dbg !7421
  %13 = icmp eq i32 %refCount1.i, 0, !dbg !7421
  tail call void @llvm.assume(i1 %13) #5, !dbg !7421
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %objPtr2), !dbg !7418
  %str.123 = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.12, align 8, !dbg !7422, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %str.123, i64 0, i32 0, !dbg !7423
  %refCount.i = load i32, i32* %refCountPtr.i, align 4, !dbg !7423
  %14 = icmp sgt i32 %refCount.i, 1, !dbg !7422
  tail call void @llvm.assume(i1 %14), !dbg !7422
  tail call void @Tcl_SetObjErrorCode(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %str.123), !dbg !7422
  store i32 1, i32* %ecvar, align 4, !dbg !7425
  ret i32 1, !dbg !7426

done:                                             ; preds = %enter, %handle.error
  store i32 %5, i32* %ecvar, align 4, !dbg !7427
  ret i32 %5, !dbg !7428
}

; Function Attrs: alwaysinline nounwind
define hidden void @tcl.logCommandInfo(i32 %code, i32 %length, i8* nocapture nonnull %command, i8* nocapture nonnull %ellipsis) local_unnamed_addr #6 !dbg !7429 {
enter:
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !7437, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %flags = getelementptr %Interp, %Interp* %interp, i64 0, i32 30, !dbg !7438
  %flags1 = load i32, i32* %flags, align 4, !dbg !7439
  %0 = icmp eq i32 %code, 1, !dbg !7440
  %1 = and i32 %flags1, 4, !dbg !7441
  %2 = icmp eq i32 %1, 0, !dbg !7441
  %or.cond = and i1 %0, %2, !dbg !7440
  br i1 %or.cond, label %log.error, label %done, !dbg !7440

log.error:                                        ; preds = %enter
  %errorInfo.ptr = getelementptr %Interp, %Interp* %interp, i64 0, i32 43, !dbg !7442
  %errorInfo = load %Tcl_Obj*, %Tcl_Obj** %errorInfo.ptr, align 8, !dbg !7442
  %3 = icmp eq %Tcl_Obj* %errorInfo, null, !dbg !7442
  %4 = select i1 %3, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @string.constant.27, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @string.constant.26, i64 0, i64 0), !dbg !7442
  %objPtr = tail call noalias nonnull %Tcl_Obj* (i8*, ...) @Tcl_ObjPrintf(i8* nocapture nonnull readonly getelementptr inbounds ([17 x i8], [17 x i8]* @string.constant.28, i64 0, i64 0), i8* nocapture %4, i32 %length, i8* nocapture nonnull %command, i8* nocapture nonnull %ellipsis), !dbg !7443
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !7444
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !7446
  %5 = icmp eq i32 %refCount1.i, 0, !dbg !7446
  tail call void @llvm.assume(i1 %5) #5, !dbg !7446
  tail call void @Tcl_AppendObjToErrorInfo(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %objPtr), !dbg !7443
  br label %done, !dbg !7447

done:                                             ; preds = %log.error, %enter
  %6 = and i32 %flags1, -5, !dbg !7448
  store i32 %6, i32* %flags, align 4, !dbg !7448
  ret void, !dbg !7449
}

; Function Attrs: alwaysinline nounwind
define hidden void @tcl.setErrorLine(i1 %test, i32 %code, i32 %line, i32 %length, i8* nocapture nonnull %command, i8* nocapture nonnull %ellipsis) local_unnamed_addr #6 !dbg !7450 {
enter:
  br i1 %test, label %set.error.line, label %done, !dbg !7460

set.error.line:                                   ; preds = %enter
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !7461, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %errorLine = getelementptr %Interp, %Interp* %interp, i64 0, i32 2, !dbg !7462
  store i32 %line, i32* %errorLine, align 4, !dbg !7462
  %flags.i = getelementptr %Interp, %Interp* %interp, i64 0, i32 30, !dbg !7463
  %flags1.i = load i32, i32* %flags.i, align 4, !dbg !7465
  %0 = icmp eq i32 %code, 1, !dbg !7466
  %1 = and i32 %flags1.i, 4, !dbg !7467
  %2 = icmp eq i32 %1, 0, !dbg !7467
  %or.cond.i = and i1 %0, %2, !dbg !7466
  br i1 %or.cond.i, label %log.error.i, label %tcl.logCommandInfo.exit, !dbg !7466

log.error.i:                                      ; preds = %set.error.line
  %errorInfo.ptr.i = getelementptr %Interp, %Interp* %interp, i64 0, i32 43, !dbg !7468
  %errorInfo.i = load %Tcl_Obj*, %Tcl_Obj** %errorInfo.ptr.i, align 8, !dbg !7468
  %3 = icmp eq %Tcl_Obj* %errorInfo.i, null, !dbg !7468
  %4 = select i1 %3, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @string.constant.27, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @string.constant.26, i64 0, i64 0), !dbg !7468
  %objPtr.i = tail call noalias nonnull %Tcl_Obj* (i8*, ...) @Tcl_ObjPrintf(i8* nocapture nonnull readonly getelementptr inbounds ([17 x i8], [17 x i8]* @string.constant.28, i64 0, i64 0), i8* nocapture %4, i32 %length, i8* nocapture nonnull %command, i8* nocapture nonnull %ellipsis) #5, !dbg !7469
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr.i, i64 0, i32 0, !dbg !7470
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !7472
  %5 = icmp eq i32 %refCount1.i.i, 0, !dbg !7472
  tail call void @llvm.assume(i1 %5) #5, !dbg !7472
  tail call void @Tcl_AppendObjToErrorInfo(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %objPtr.i) #5, !dbg !7469
  br label %tcl.logCommandInfo.exit, !dbg !7473

tcl.logCommandInfo.exit:                          ; preds = %set.error.line, %log.error.i
  %6 = and i32 %flags1.i, -5, !dbg !7474
  store i32 %6, i32* %flags.i, align 4, !dbg !7474
  br label %done, !dbg !7475

done:                                             ; preds = %tcl.logCommandInfo.exit, %enter
  ret void, !dbg !7476
}

; Function Attrs: alwaysinline
define hidden i1 @tcl.booleanTest(%Tcl_Obj* nocapture nonnull %objPtr) local_unnamed_addr #12 !dbg !7477 {
enter:
  %tclBooleanType = load %ObjType*, %ObjType** @tclBooleanType, align 8, !dbg !7480, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %setFromAnyProc.ptr.i = getelementptr %ObjType, %ObjType* %tclBooleanType, i64 0, i32 4, !dbg !7481
  %setFromAnyProc.i = load i32 (%Interp*, %Tcl_Obj*)*, i32 (%Interp*, %Tcl_Obj*)** %setFromAnyProc.ptr.i, align 8, !dbg !7481, !alias.scope !7483, !noalias !7486
  %code.i = tail call i32 %setFromAnyProc.i(%Interp* nocapture null, %Tcl_Obj* nocapture nonnull %objPtr), !dbg !7489, !noalias !7483
  %0 = icmp eq i32 %code.i, 0, !dbg !7490
  ret i1 %0, !dbg !7490
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, %Tcl_Obj* } @tcl.invoke.command(i32 %objc, %Tcl_Obj** noalias nocapture nonnull readonly %objv, %CallFrame* noalias %frame, i32* noalias nocapture nonnull %ecvar) local_unnamed_addr #6 !dbg !7491 {
enter:
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !7500, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %0 = icmp eq %CallFrame* %frame, null, !dbg !7501
  br i1 %0, label %invoke.standard, label %invoke.with.callframe, !dbg !7501

invoke.standard:                                  ; preds = %enter
  %code = tail call i32 @Tcl_EvalObjv(%Interp* noalias nocapture nonnull %interp, i32 %objc, %Tcl_Obj** noalias nocapture nonnull readonly %objv, i32 0), !dbg !7502
  %1 = icmp eq i32 %code, 0, !dbg !7503
  br i1 %1, label %ok, label %fail, !dbg !7503

invoke.with.callframe:                            ; preds = %enter
  %varFramePtr = getelementptr %Interp, %Interp* %interp, i64 0, i32 12, !dbg !7504
  %varFramePtr1 = load %CallFrame*, %CallFrame** %varFramePtr, align 8, !dbg !7505
  store %CallFrame* %frame, %CallFrame** %varFramePtr, align 8, !dbg !7506
  %code2 = tail call i32 @Tcl_EvalObjv(%Interp* noalias nocapture nonnull %interp, i32 %objc, %Tcl_Obj** noalias nocapture nonnull readonly %objv, i32 0), !dbg !7507
  store %CallFrame* %varFramePtr1, %CallFrame** %varFramePtr, align 8, !dbg !7508
  %2 = icmp eq i32 %code2, 0, !dbg !7509
  br i1 %2, label %ok, label %fail, !dbg !7509

ok:                                               ; preds = %invoke.with.callframe, %invoke.standard
  %objPtr = tail call nonnull %Tcl_Obj* @Tcl_GetObjResult(%Interp* nocapture nonnull %interp), !dbg !7510
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !7511
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !7514
  %3 = add nsw i32 %refCount1.i.i, 1, !dbg !7514
  store i32 %3, i32* %refCount.i.i, align 4, !dbg !7514
  %4 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %objPtr, 1, !dbg !7515
  ret { i32, %Tcl_Obj* } %4, !dbg !7515

fail:                                             ; preds = %invoke.with.callframe, %invoke.standard
  %code3 = phi i32 [ %code, %invoke.standard ], [ %code2, %invoke.with.callframe ]
  store i32 %code3, i32* %ecvar, align 4, !dbg !7516
  %5 = insertvalue { i32, %Tcl_Obj* } undef, i32 %code3, 0, !dbg !7517
  ret { i32, %Tcl_Obj* } %5, !dbg !7517
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, %Tcl_Obj* } @tcl.invoke.expanded(i32 %objc, %Tcl_Obj** noalias nocapture nonnull readonly %objv, i1* noalias nocapture nonnull readonly %flags, i32* noalias nocapture nonnull %ecvar) local_unnamed_addr #6 !dbg !7518 {
enter:
  %objcPtr = alloca i32, align 4, !dbg !7528
  %objvPtr = alloca %Tcl_Obj**, align 8, !dbg !7529
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !7530, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %0 = icmp sgt i32 %objc, 0, !dbg !7531
  br i1 %0, label %body.findLength, label %setup.expansion, !dbg !7531

body.findLength:                                  ; preds = %enter, %next.findLength
  %i.019 = phi i32 [ %5, %next.findLength ], [ 0, %enter ]
  %len.018 = phi i32 [ %4, %next.findLength ], [ 0, %enter ]
  %1 = zext i32 %i.019 to i64, !dbg !7532
  %2 = getelementptr i1, i1* %flags, i64 %1, !dbg !7532
  %flag = load i1, i1* %2, align 1, !dbg !7532
  br i1 %flag, label %body.findLength.expand, label %next.findLength, !dbg !7533

body.findLength.expand:                           ; preds = %body.findLength
  %3 = getelementptr %Tcl_Obj*, %Tcl_Obj** %objv, i64 %1, !dbg !7534
  %objPtr = load %Tcl_Obj*, %Tcl_Obj** %3, align 8, !dbg !7534
  %code = call i32 @Tcl_ListObjLength(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %objPtr, i32* noalias nocapture nonnull %objcPtr), !dbg !7535
  %lenStep = load i32, i32* %objcPtr, align 4, !dbg !7536
  br label %next.findLength, !dbg !7537

next.findLength:                                  ; preds = %body.findLength, %body.findLength.expand
  %lenStep3 = phi i32 [ %lenStep, %body.findLength.expand ], [ 1, %body.findLength ]
  %4 = add i32 %lenStep3, %len.018, !dbg !7538
  %5 = add nuw nsw i32 %i.019, 1, !dbg !7539
  %6 = icmp slt i32 %5, %objc, !dbg !7531
  br i1 %6, label %body.findLength, label %setup.expansion, !dbg !7531

setup.expansion:                                  ; preds = %next.findLength, %enter
  %len.0.lcssa = phi i32 [ 0, %enter ], [ %4, %next.findLength ], !dbg !7540
  %7 = shl i32 %len.0.lcssa, 3, !dbg !7541
  %ptr = tail call noalias nonnull i8* @Tcl_Alloc(i32 %7), !dbg !7541
  tail call void @llvm.lifetime.start.p0i8(i64 -1, i8* nonnull %ptr), !dbg !7541
  %array = bitcast i8* %ptr to %Tcl_Obj**, !dbg !7541
  br i1 %0, label %body.expansion.lr.ph, label %invoke, !dbg !7542

body.expansion.lr.ph:                             ; preds = %setup.expansion
  %8 = bitcast %Tcl_Obj*** %objvPtr to i8**, !dbg !7540
  br label %body.expansion, !dbg !7542

body.expansion:                                   ; preds = %body.expansion.lr.ph, %next.expansion
  %i.117 = phi i32 [ 0, %body.expansion.lr.ph ], [ %16, %next.expansion ]
  %j.016 = phi i32 [ 0, %body.expansion.lr.ph ], [ %j.1, %next.expansion ]
  %9 = zext i32 %i.117 to i64, !dbg !7543
  %10 = getelementptr i1, i1* %flags, i64 %9, !dbg !7543
  %flag7 = load i1, i1* %10, align 1, !dbg !7543
  %11 = getelementptr %Tcl_Obj*, %Tcl_Obj** %objv, i64 %9, !dbg !7544
  %objPtr8 = load %Tcl_Obj*, %Tcl_Obj** %11, align 8, !dbg !7544
  %12 = sext i32 %j.016 to i64, !dbg !7545
  %13 = getelementptr %Tcl_Obj*, %Tcl_Obj** %array, i64 %12, !dbg !7545
  br i1 %flag7, label %body.expansion.expand, label %body.expansion.simple, !dbg !7546

body.expansion.expand:                            ; preds = %body.expansion
  %code9 = call i32 @Tcl_ListObjGetElements(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %objPtr8, i32* noalias nocapture nonnull %objcPtr, %Tcl_Obj*** noalias nocapture nonnull %objvPtr), !dbg !7547
  %objc10 = load i32, i32* %objcPtr, align 4, !dbg !7548
  %objv1115 = load i8*, i8** %8, align 8, !dbg !7549
  %14 = shl i32 %objc10, 3, !dbg !7550
  %15 = bitcast %Tcl_Obj** %13 to i8*, !dbg !7550
  tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %15, i8* align 1 %objv1115, i32 %14, i1 false), !dbg !7550
  br label %next.expansion, !dbg !7551

body.expansion.simple:                            ; preds = %body.expansion
  store %Tcl_Obj* %objPtr8, %Tcl_Obj** %13, align 8, !dbg !7552
  br label %next.expansion, !dbg !7553

next.expansion:                                   ; preds = %body.expansion.simple, %body.expansion.expand
  %objc10.pn = phi i32 [ %objc10, %body.expansion.expand ], [ 1, %body.expansion.simple ]
  %j.1 = add i32 %objc10.pn, %j.016, !dbg !7540
  %16 = add nuw nsw i32 %i.117, 1, !dbg !7554
  %17 = icmp slt i32 %16, %objc, !dbg !7542
  br i1 %17, label %body.expansion, label %invoke, !dbg !7542

invoke:                                           ; preds = %next.expansion, %setup.expansion
  %code12 = tail call i32 @Tcl_EvalObjv(%Interp* noalias nocapture nonnull %interp, i32 %len.0.lcssa, %Tcl_Obj** noalias nocapture nonnull readonly %array, i32 0), !dbg !7555
  tail call void @Tcl_Free(i8* nonnull %ptr), !dbg !7556
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %ptr), !dbg !7556
  %18 = icmp eq i32 %code12, 0, !dbg !7557
  br i1 %18, label %ok, label %fail, !dbg !7557

ok:                                               ; preds = %invoke
  %objPtr14 = tail call nonnull %Tcl_Obj* @Tcl_GetObjResult(%Interp* nocapture nonnull %interp), !dbg !7558
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr14, i64 0, i32 0, !dbg !7559
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !7562
  %19 = add nsw i32 %refCount1.i.i, 1, !dbg !7562
  store i32 %19, i32* %refCount.i.i, align 4, !dbg !7562
  %20 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %objPtr14, 1, !dbg !7563
  ret { i32, %Tcl_Obj* } %20, !dbg !7563

fail:                                             ; preds = %invoke
  store i32 %code12, i32* %ecvar, align 4, !dbg !7564
  %21 = insertvalue { i32, %Tcl_Obj* } undef, i32 %code12, 0, !dbg !7565
  ret { i32, %Tcl_Obj* } %21, !dbg !7565
}

; Function Attrs: alwaysinline nounwind
define hidden i1 @tcl.existsOrError(i1 returned %exists, %Tcl_Obj* noalias nonnull %message, %Tcl_Obj* nonnull %exception, i32* noalias nocapture nonnull %ecvar) local_unnamed_addr #6 !dbg !7566 {
enter:
  br i1 %exists, label %doError, label %done, !dbg !7574

doError:                                          ; preds = %enter
  %interp.i = load %Interp*, %Interp** @tclInterp, align 8, !dbg !7575, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp.i, %Tcl_Obj* noalias nonnull %message) #5, !dbg !7577
  %returnOpts.i = getelementptr %Interp, %Interp* %interp.i, i64 0, i32 42, !dbg !7578
  %returnOpts1.i = load %Tcl_Obj*, %Tcl_Obj** %returnOpts.i, align 8, !dbg !7579
  %objPtr.i = tail call noalias nonnull %Tcl_Obj* @Tcl_NewObj() #5, !dbg !7580
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr.i, i64 0, i32 0, !dbg !7581
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !7583
  %0 = icmp eq i32 %refCount1.i.i, 0, !dbg !7583
  tail call void @llvm.assume(i1 %0) #5, !dbg !7583
  %str.8.i = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.8, align 8, !dbg !7584, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %str.8.i, i64 0, i32 0, !dbg !7585
  %refCount.i4.i = load i32, i32* %refCountPtr.i.i, align 4, !dbg !7585
  %1 = icmp sgt i32 %refCount.i4.i, 1, !dbg !7584
  tail call void @llvm.assume(i1 %1) #5, !dbg !7584
  %code.i = tail call i32 @Tcl_DictObjPut(%Interp* nocapture null, %Tcl_Obj* nocapture nonnull %objPtr.i, %Tcl_Obj* nonnull %str.8.i, %Tcl_Obj* nonnull %exception) #5, !dbg !7587
  store %Tcl_Obj* %objPtr.i, %Tcl_Obj** %returnOpts.i, align 8, !dbg !7588
  %refCount1.i.i11.i = load i32, i32* %refCount.i.i, align 4, !dbg !7589
  %2 = add nsw i32 %refCount1.i.i11.i, 1, !dbg !7589
  store i32 %2, i32* %refCount.i.i, align 4, !dbg !7589
  %3 = icmp eq %Tcl_Obj* %returnOpts1.i, null, !dbg !7592
  br i1 %3, label %test.for.error.i, label %swap.dropOld.i, !dbg !7592

swap.dropOld.i:                                   ; preds = %doError
  %refCount.i.i5.i = getelementptr %Tcl_Obj, %Tcl_Obj* %returnOpts1.i, i64 0, i32 0, !dbg !7593
  %refCount1.i.i6.i = load i32, i32* %refCount.i.i5.i, align 4, !dbg !7596
  %4 = icmp slt i32 %refCount1.i.i6.i, 2, !dbg !7597
  br i1 %4, label %freeObject.i.i7.i, label %leave.i.i8.i, !dbg !7597

freeObject.i.i7.i:                                ; preds = %swap.dropOld.i
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %returnOpts1.i) #5, !dbg !7598
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %returnOpts1.i) #5, !dbg !7599
  br label %test.for.error.i, !dbg !7600

leave.i.i8.i:                                     ; preds = %swap.dropOld.i
  %5 = add nsw i32 %refCount1.i.i6.i, -1, !dbg !7596
  store i32 %5, i32* %refCount.i.i5.i, align 4, !dbg !7601
  br label %test.for.error.i, !dbg !7602

test.for.error.i:                                 ; preds = %leave.i.i8.i, %freeObject.i.i7.i, %doError
  %errorInfo.i = getelementptr %Interp, %Interp* %interp.i, i64 0, i32 43, !dbg !7603
  %errorInfo2.i = load %Tcl_Obj*, %Tcl_Obj** %errorInfo.i, align 8, !dbg !7604
  %6 = icmp eq %Tcl_Obj* %errorInfo2.i, null, !dbg !7605
  br i1 %6, label %tcl.initExceptionSimple.exit, label %error.clearErrorInfo.i, !dbg !7605

error.clearErrorInfo.i:                           ; preds = %test.for.error.i
  %refCount.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %errorInfo2.i, i64 0, i32 0, !dbg !7606
  %refCount1.i.i.i = load i32, i32* %refCount.i.i.i, align 4, !dbg !7609
  %7 = icmp slt i32 %refCount1.i.i.i, 2, !dbg !7610
  br i1 %7, label %freeObject.i.i.i, label %leave.i.i.i, !dbg !7610

freeObject.i.i.i:                                 ; preds = %error.clearErrorInfo.i
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %errorInfo2.i) #5, !dbg !7611
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %errorInfo2.i) #5, !dbg !7612
  br label %tcl.dropReference.exit.i, !dbg !7613

leave.i.i.i:                                      ; preds = %error.clearErrorInfo.i
  %8 = add nsw i32 %refCount1.i.i.i, -1, !dbg !7609
  store i32 %8, i32* %refCount.i.i.i, align 4, !dbg !7614
  br label %tcl.dropReference.exit.i, !dbg !7615

tcl.dropReference.exit.i:                         ; preds = %leave.i.i.i, %freeObject.i.i.i
  store %Tcl_Obj* null, %Tcl_Obj** %errorInfo.i, align 8, !dbg !7616
  br label %tcl.initExceptionSimple.exit, !dbg !7617

tcl.initExceptionSimple.exit:                     ; preds = %test.for.error.i, %tcl.dropReference.exit.i
  tail call void @Tcl_SetObjErrorCode(%Interp* noalias nocapture nonnull %interp.i, %Tcl_Obj* noalias nonnull %exception) #5, !dbg !7618
  %flags.i = getelementptr %Interp, %Interp* %interp.i, i64 0, i32 30, !dbg !7619
  %flags3.i = load i32, i32* %flags.i, align 4, !dbg !7620
  %9 = or i32 %flags3.i, 2048, !dbg !7620
  store i32 %9, i32* %flags.i, align 4, !dbg !7620
  store i32 1, i32* %ecvar, align 4, !dbg !7621
  br label %done, !dbg !7622

done:                                             ; preds = %tcl.initExceptionSimple.exit, %enter
  ret i1 %exists, !dbg !7623
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, i1 } @tcl.not.string(%Tcl_Obj* nocapture nonnull %value, i32* noalias nocapture nonnull %ecvar) local_unnamed_addr #6 !dbg !7624 {
enter:
  %0 = alloca i32, align 4, !dbg !7630
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !7631, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %code = call i32 @Tcl_GetBooleanFromObj(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %value, i32* noalias nocapture nonnull %0), !dbg !7632
  %1 = icmp eq i32 %code, 0, !dbg !7633
  br i1 %1, label %ok, label %fail, !dbg !7633

fail:                                             ; preds = %enter
  store i32 1, i32* %ecvar, align 4, !dbg !7634
  ret { i32, i1 } { i32 1, i1 undef }, !dbg !7635

ok:                                               ; preds = %enter
  %bool = load i32, i32* %0, align 4, !dbg !7636
  %2 = icmp ne i32 %bool, 1, !dbg !7636
  %3 = insertvalue { i32, i1 } { i32 0, i1 undef }, i1 %2, 1, !dbg !7636
  ret { i32, i1 } %3, !dbg !7636
}

; Function Attrs: alwaysinline norecurse nounwind readonly
define hidden %Tcl_Obj* @var.value(%Var* nocapture nonnull readonly %varPtr) local_unnamed_addr #15 !dbg !7637 {
enter:
  %value.ptr = getelementptr %Var, %Var* %varPtr, i64 0, i32 1, !dbg !7644
  %value = load %Tcl_Obj*, %Tcl_Obj** %value.ptr, align 8, !dbg !7644
  ret %Tcl_Obj* %value, !dbg !7644
}

; Function Attrs: alwaysinline norecurse nounwind readonly
define hidden i1 @var.defined(%Var* nocapture nonnull readonly %varPtr) local_unnamed_addr #15 !dbg !7645 {
enter:
  %value.ptr.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 1, !dbg !7650
  %value.i = load %Tcl_Obj*, %Tcl_Obj** %value.ptr.i, align 8, !dbg !7650
  %0 = icmp ne %Tcl_Obj* %value.i, null, !dbg !7652
  ret i1 %0, !dbg !7652
}

; Function Attrs: alwaysinline nofree norecurse nounwind writeonly
define hidden void @var.value.set(%Var* nocapture nonnull %varPtr, %Tcl_Obj* %valuePtr) local_unnamed_addr #18 !dbg !7653 {
enter:
  %value = getelementptr %Var, %Var* %varPtr, i64 0, i32 1, !dbg !7659
  store %Tcl_Obj* %valuePtr, %Tcl_Obj** %value, align 8, !dbg !7660
  ret void, !dbg !7661
}

; Function Attrs: alwaysinline nofree norecurse nounwind
define hidden void @var.value.set.undefined(%Var* nocapture nonnull %varPtr) local_unnamed_addr #10 !dbg !7662 {
enter:
  %flags = getelementptr %Var, %Var* %varPtr, i64 0, i32 0, !dbg !7667
  %flags1 = load i32, i32* %flags, align 4, !dbg !7668
  %0 = and i32 %flags1, -4, !dbg !7668
  store i32 %0, i32* %flags, align 4, !dbg !7668
  %value = getelementptr %Var, %Var* %varPtr, i64 0, i32 1, !dbg !7669
  store %Tcl_Obj* null, %Tcl_Obj** %value, align 8, !dbg !7669
  ret void, !dbg !7670
}

; Function Attrs: alwaysinline norecurse nounwind readonly
define hidden %VarHashTable* @var.array(%Var* nocapture nonnull readonly %varPtr) local_unnamed_addr #15 !dbg !7671 {
enter:
  %value.ptr = getelementptr %Var, %Var* %varPtr, i64 0, i32 1, !dbg !7676
  %0 = bitcast %Tcl_Obj** %value.ptr to %VarHashTable**, !dbg !7676
  %value1 = load %VarHashTable*, %VarHashTable** %0, align 8, !dbg !7676
  ret %VarHashTable* %value1, !dbg !7677
}

; Function Attrs: alwaysinline norecurse nounwind readonly
define hidden %Var* @var.link(%Var* nocapture nonnull readonly %varPtr) local_unnamed_addr #15 !dbg !7678 {
enter:
  %value.ptr = getelementptr %Var, %Var* %varPtr, i64 0, i32 1, !dbg !7683
  %0 = bitcast %Tcl_Obj** %value.ptr to %Var**, !dbg !7683
  %value1 = load %Var*, %Var** %0, align 8, !dbg !7683
  ret %Var* %value1, !dbg !7684
}

; Function Attrs: alwaysinline norecurse nounwind readonly
define hidden i1 @var.flag(%Var* nocapture nonnull readonly %varPtr, i32 %flag) local_unnamed_addr #15 !dbg !7685 {
enter:
  %flags.ptr = getelementptr %Var, %Var* %varPtr, i64 0, i32 0, !dbg !7691
  %flags = load i32, i32* %flags.ptr, align 4, !dbg !7691
  %0 = and i32 %flags, %flag, !dbg !7692
  %1 = icmp ne i32 %0, 0, !dbg !7692
  ret i1 %1, !dbg !7692
}

; Function Attrs: alwaysinline nofree norecurse nounwind
define hidden void @var.flag.set(%Var* nocapture nonnull %varPtr, i32 %flag) local_unnamed_addr #10 !dbg !7693 {
enter:
  %flags = getelementptr %Var, %Var* %varPtr, i64 0, i32 0, !dbg !7699
  %flags1 = load i32, i32* %flags, align 4, !dbg !7700
  %0 = or i32 %flags1, %flag, !dbg !7700
  store i32 %0, i32* %flags, align 4, !dbg !7700
  ret void, !dbg !7701
}

; Function Attrs: alwaysinline nofree norecurse nounwind
define hidden void @var.flag.clear(%Var* nocapture nonnull %varPtr, i32 %flag) local_unnamed_addr #10 !dbg !7702 {
enter:
  %flags = getelementptr %Var, %Var* %varPtr, i64 0, i32 0, !dbg !7706
  %flags1 = load i32, i32* %flags, align 4, !dbg !7707
  %0 = xor i32 %flag, -1, !dbg !7707
  %1 = and i32 %flags1, %0, !dbg !7707
  store i32 %1, i32* %flags, align 4, !dbg !7707
  ret void, !dbg !7708
}

; Function Attrs: alwaysinline nofree norecurse nounwind
define hidden void @var.array.set(%Var* nocapture nonnull %varPtr, %VarHashTable* nonnull %tablePtr) local_unnamed_addr #10 !dbg !7709 {
enter:
  %flags.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 0, !dbg !7715
  %flags1.i = load i32, i32* %flags.i, align 4, !dbg !7717
  %0 = or i32 %flags1.i, 1, !dbg !7717
  store i32 %0, i32* %flags.i, align 4, !dbg !7717
  %value.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 1, !dbg !7718
  %1 = bitcast %Tcl_Obj** %value.i to %VarHashTable**, !dbg !7720
  store %VarHashTable* %tablePtr, %VarHashTable** %1, align 8, !dbg !7720
  ret void, !dbg !7721
}

; Function Attrs: alwaysinline nofree norecurse nounwind
define hidden void @var.link.set(%Var* nocapture nonnull %varPtr, %Var* nonnull %otherPtr) local_unnamed_addr #10 !dbg !7722 {
enter:
  %flags.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 0, !dbg !7728
  %flags1.i = load i32, i32* %flags.i, align 4, !dbg !7730
  %0 = or i32 %flags1.i, 2, !dbg !7730
  store i32 %0, i32* %flags.i, align 4, !dbg !7730
  %value.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 1, !dbg !7731
  %1 = bitcast %Tcl_Obj** %value.i to %Var**, !dbg !7733
  store %Var* %otherPtr, %Var** %1, align 8, !dbg !7733
  ret void, !dbg !7734
}

; Function Attrs: alwaysinline norecurse nounwind readonly
define hidden i1 @var.isScalar(%Var* nocapture nonnull readonly %varPtr) local_unnamed_addr #15 !dbg !7735 {
enter:
  %flags.ptr.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 0, !dbg !7738
  %flags.i = load i32, i32* %flags.ptr.i, align 4, !dbg !7738
  %0 = and i32 %flags.i, 3, !dbg !7740
  %1 = icmp eq i32 %0, 0, !dbg !7740
  ret i1 %1, !dbg !7741
}

; Function Attrs: alwaysinline norecurse nounwind readonly
define hidden i1 @var.isArray(%Var* nocapture nonnull readonly %varPtr) local_unnamed_addr #15 !dbg !7742 {
enter:
  %flags.ptr.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 0, !dbg !7745
  %flags.i = load i32, i32* %flags.ptr.i, align 4, !dbg !7745
  %0 = and i32 %flags.i, 1, !dbg !7747
  %1 = icmp ne i32 %0, 0, !dbg !7747
  ret i1 %1, !dbg !7748
}

; Function Attrs: alwaysinline norecurse nounwind readonly
define hidden i1 @var.isLink(%Var* nocapture nonnull readonly %varPtr) local_unnamed_addr #15 !dbg !7749 {
enter:
  %flags.ptr.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 0, !dbg !7752
  %flags.i = load i32, i32* %flags.ptr.i, align 4, !dbg !7752
  %0 = and i32 %flags.i, 2, !dbg !7754
  %1 = icmp ne i32 %0, 0, !dbg !7754
  ret i1 %1, !dbg !7755
}

; Function Attrs: alwaysinline norecurse nounwind readonly
define hidden i1 @var.isArrayElement(%Var* nocapture nonnull readonly %varPtr) local_unnamed_addr #15 !dbg !7756 {
enter:
  %flags.ptr.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 0, !dbg !7759
  %flags.i = load i32, i32* %flags.ptr.i, align 4, !dbg !7759
  %0 = and i32 %flags.i, 4096, !dbg !7761
  %1 = icmp ne i32 %0, 0, !dbg !7761
  ret i1 %1, !dbg !7762
}

; Function Attrs: alwaysinline norecurse nounwind readonly
define hidden i1 @var.hasSearch(%Var* nocapture nonnull readonly %varPtr) local_unnamed_addr #15 !dbg !7763 {
enter:
  %flags.ptr.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 0, !dbg !7766
  %flags.i = load i32, i32* %flags.ptr.i, align 4, !dbg !7766
  %0 = and i32 %flags.i, 16384, !dbg !7768
  %1 = icmp ne i32 %0, 0, !dbg !7768
  ret i1 %1, !dbg !7769
}

; Function Attrs: alwaysinline norecurse nounwind readonly
define hidden i1 @var.isTraced(%Var* nocapture nonnull readonly %varPtr) local_unnamed_addr #15 !dbg !7770 {
enter:
  %flags.ptr.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 0, !dbg !7773
  %flags.i = load i32, i32* %flags.ptr.i, align 4, !dbg !7773
  %0 = and i32 %flags.i, 2160, !dbg !7775
  %1 = icmp ne i32 %0, 0, !dbg !7775
  ret i1 %1, !dbg !7776
}

; Function Attrs: alwaysinline norecurse nounwind readonly
define hidden i1 @var.isTraced.read(%Var* nocapture nonnull readonly %varPtr) local_unnamed_addr #15 !dbg !7777 {
enter:
  %flags.ptr.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 0, !dbg !7780
  %flags.i = load i32, i32* %flags.ptr.i, align 4, !dbg !7780
  %0 = and i32 %flags.i, 16, !dbg !7782
  %1 = icmp ne i32 %0, 0, !dbg !7782
  ret i1 %1, !dbg !7783
}

; Function Attrs: alwaysinline norecurse nounwind readonly
define hidden i1 @var.isTraced.write(%Var* nocapture nonnull readonly %varPtr) local_unnamed_addr #15 !dbg !7784 {
enter:
  %flags.ptr.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 0, !dbg !7787
  %flags.i = load i32, i32* %flags.ptr.i, align 4, !dbg !7787
  %0 = and i32 %flags.i, 32, !dbg !7789
  %1 = icmp ne i32 %0, 0, !dbg !7789
  ret i1 %1, !dbg !7790
}

; Function Attrs: alwaysinline norecurse nounwind readonly
define hidden i1 @var.isTraced.unset(%Var* nocapture nonnull readonly %varPtr) local_unnamed_addr #15 !dbg !7791 {
enter:
  %flags.ptr.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 0, !dbg !7794
  %flags.i = load i32, i32* %flags.ptr.i, align 4, !dbg !7794
  %0 = and i32 %flags.i, 64, !dbg !7796
  %1 = icmp ne i32 %0, 0, !dbg !7796
  ret i1 %1, !dbg !7797
}

; Function Attrs: alwaysinline norecurse nounwind readonly
define hidden i1 @var.isTraced.array(%Var* nocapture nonnull readonly %varPtr) local_unnamed_addr #15 !dbg !7798 {
enter:
  %flags.ptr.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 0, !dbg !7801
  %flags.i = load i32, i32* %flags.ptr.i, align 4, !dbg !7801
  %0 = and i32 %flags.i, 2048, !dbg !7803
  %1 = icmp ne i32 %0, 0, !dbg !7803
  ret i1 %1, !dbg !7804
}

; Function Attrs: alwaysinline norecurse nounwind readonly
define hidden i1 @var.isInHash(%Var* nocapture nonnull readonly %varPtr) local_unnamed_addr #15 !dbg !7805 {
enter:
  %flags.ptr.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 0, !dbg !7808
  %flags.i = load i32, i32* %flags.ptr.i, align 4, !dbg !7808
  %0 = and i32 %flags.i, 4, !dbg !7810
  %1 = icmp ne i32 %0, 0, !dbg !7810
  ret i1 %1, !dbg !7811
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden nonnull i32* @var.hash.refCount(%Var* nonnull readnone %varPtr) local_unnamed_addr #0 !dbg !7812 {
enter:
  %0 = getelementptr inbounds %Var, %Var* %varPtr, i64 1, i32 0, !dbg !7817
  ret i32* %0, !dbg !7817
}

; Function Attrs: alwaysinline nofree norecurse nounwind
define hidden void @var.hash.invalidateEntry(%Var* nocapture nonnull %varPtr) local_unnamed_addr #10 !dbg !7818 {
enter:
  %flags.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 0, !dbg !7821
  %flags1.i = load i32, i32* %flags.i, align 4, !dbg !7823
  %0 = or i32 %flags1.i, 8, !dbg !7823
  store i32 %0, i32* %flags.i, align 4, !dbg !7823
  ret void, !dbg !7824
}

; Function Attrs: alwaysinline nofree norecurse nounwind
define hidden void @var.setNamespaceVar(%Var* %varPtr) local_unnamed_addr #10 !dbg !7825 {
enter:
  %0 = icmp eq %Var* %varPtr, null, !dbg !7828
  br i1 %0, label %done, label %l1, !dbg !7828

l1:                                               ; preds = %enter
  %flags.ptr.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 0, !dbg !7829
  %flags.i = load i32, i32* %flags.ptr.i, align 4, !dbg !7829
  %1 = and i32 %flags.i, 128, !dbg !7831
  %2 = icmp eq i32 %1, 0, !dbg !7831
  br i1 %2, label %l2, label %done, !dbg !7832

l2:                                               ; preds = %l1
  %3 = or i32 %flags.i, 128, !dbg !7833
  store i32 %3, i32* %flags.ptr.i, align 4, !dbg !7833
  %4 = and i32 %flags.i, 4, !dbg !7835
  %5 = icmp eq i32 %4, 0, !dbg !7835
  br i1 %5, label %done, label %l3, !dbg !7838

l3:                                               ; preds = %l2
  %6 = getelementptr inbounds %Var, %Var* %varPtr, i64 1, i32 0, !dbg !7839
  %7 = load i32, i32* %6, align 4, !dbg !7841
  %8 = add i32 %7, 1, !dbg !7841
  store i32 %8, i32* %6, align 4, !dbg !7841
  br label %done, !dbg !7842

done:                                             ; preds = %l2, %l1, %enter, %l3
  ret void, !dbg !7843
}

; Function Attrs: alwaysinline nofree norecurse nounwind
define hidden void @var.clearNamespaceVar(%Var* nocapture nonnull %varPtr) local_unnamed_addr #10 !dbg !7844 {
enter:
  %flags.ptr.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 0, !dbg !7847
  %flags.i = load i32, i32* %flags.ptr.i, align 4, !dbg !7847
  %0 = and i32 %flags.i, 128, !dbg !7849
  %1 = icmp eq i32 %0, 0, !dbg !7849
  br i1 %1, label %done, label %"2", !dbg !7850

"2":                                              ; preds = %enter
  %2 = and i32 %flags.i, -129, !dbg !7851
  store i32 %2, i32* %flags.ptr.i, align 4, !dbg !7851
  %3 = and i32 %flags.i, 4, !dbg !7853
  %4 = icmp eq i32 %3, 0, !dbg !7853
  br i1 %4, label %done, label %"3", !dbg !7856

"3":                                              ; preds = %"2"
  %5 = getelementptr inbounds %Var, %Var* %varPtr, i64 1, i32 0, !dbg !7857
  %6 = load i32, i32* %5, align 4, !dbg !7859
  %7 = add i32 %6, -1, !dbg !7859
  store i32 %7, i32* %5, align 4, !dbg !7859
  br label %done, !dbg !7860

done:                                             ; preds = %"2", %enter, %"3"
  ret void, !dbg !7861
}

; Function Attrs: alwaysinline norecurse nounwind readonly
define hidden %Tcl_Obj* @var.hash.getKey(%Var* nocapture nonnull readonly %varPtr) local_unnamed_addr #15 !dbg !7862 {
enter:
  %entry = getelementptr %Var, %Var* %varPtr, i64 1, i32 1, !dbg !7865
  %key.ptr = getelementptr %Tcl_Obj*, %Tcl_Obj** %entry, i64 4, !dbg !7866
  %key2 = load %Tcl_Obj*, %Tcl_Obj** %key.ptr, align 8, !dbg !7866
  ret %Tcl_Obj* %key2, !dbg !7867
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden nonnull %Var* @var.hash.getValue(%HashEntry* nonnull readnone %hPtr) local_unnamed_addr #0 !dbg !7868 {
enter:
  %ptr1 = getelementptr %HashEntry, %HashEntry* %hPtr, i64 -1, i32 2, !dbg !7874
  %var = bitcast i8** %ptr1 to %Var*, !dbg !7875
  ret %Var* %var, !dbg !7875
}

; Function Attrs: alwaysinline nounwind
define hidden void @var.hash.delete(%Var* nocapture nonnull readonly %varPtr) local_unnamed_addr #6 !dbg !7876 {
enter:
  %value.ptr.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 1, !dbg !7879
  %0 = bitcast %Tcl_Obj** %value.ptr.i to %VarHashTable**, !dbg !7879
  %value1.i = load %VarHashTable*, %VarHashTable** %0, align 8, !dbg !7879
  %table = getelementptr %VarHashTable, %VarHashTable* %value1.i, i64 0, i32 0, !dbg !7881
  tail call void @Tcl_DeleteHashTable(%HashTable* nonnull %table), !dbg !7882
  %ptr = bitcast %VarHashTable* %value1.i to i8*, !dbg !7883
  tail call void @Tcl_Free(i8* nonnull %ptr), !dbg !7883
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* %ptr), !dbg !7883
  ret void, !dbg !7884
}

; Function Attrs: alwaysinline nounwind
define hidden %Var* @var.hash.firstVar(%VarHashTable* nonnull readonly %tablePtr, %HashSearch* nocapture nonnull %searchPtr) local_unnamed_addr #6 !dbg !7885 {
enter:
  %table = getelementptr %VarHashTable, %VarHashTable* %tablePtr, i64 0, i32 0, !dbg !7895
  %hPtr = tail call %HashEntry* @Tcl_FirstHashEntry(%HashTable* nonnull readonly %table, %HashSearch* nocapture nonnull %searchPtr), !dbg !7896
  %0 = icmp eq %HashEntry* %hPtr, null, !dbg !7897
  br i1 %0, label %no, label %yes, !dbg !7897

yes:                                              ; preds = %enter
  %ptr1.i = getelementptr %HashEntry, %HashEntry* %hPtr, i64 -1, i32 2, !dbg !7898
  %var.i = bitcast i8** %ptr1.i to %Var*, !dbg !7900
  ret %Var* %var.i, !dbg !7901

no:                                               ; preds = %enter
  ret %Var* null, !dbg !7902
}

; Function Attrs: alwaysinline nounwind
define hidden %Var* @var.hash.nextVar(%HashSearch* nocapture nonnull %searchPtr) local_unnamed_addr #6 !dbg !7903 {
enter:
  %hPtr = tail call %HashEntry* @Tcl_NextHashEntry(%HashSearch* nocapture nonnull %searchPtr), !dbg !7908
  %0 = icmp eq %HashEntry* %hPtr, null, !dbg !7909
  br i1 %0, label %no, label %yes, !dbg !7909

yes:                                              ; preds = %enter
  %ptr1.i = getelementptr %HashEntry, %HashEntry* %hPtr, i64 -1, i32 2, !dbg !7910
  %var.i = bitcast i8** %ptr1.i to %Var*, !dbg !7912
  ret %Var* %var.i, !dbg !7913

no:                                               ; preds = %enter
  ret %Var* null, !dbg !7914
}

; Function Attrs: alwaysinline norecurse nounwind readonly
define hidden i1 @var.isDeadHash(%Var* nocapture nonnull readonly %varPtr) local_unnamed_addr #15 !dbg !7915 {
enter:
  %flags.ptr.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 0, !dbg !7918
  %flags.i = load i32, i32* %flags.ptr.i, align 4, !dbg !7918
  %0 = and i32 %flags.i, 8, !dbg !7920
  %1 = icmp ne i32 %0, 0, !dbg !7920
  ret i1 %1, !dbg !7921
}

; Function Attrs: alwaysinline norecurse nounwind readonly
define hidden %Var* @var.followLinks(%Var* nonnull readonly %var) local_unnamed_addr #15 !dbg !7922 {
enter:
  %flags.ptr.i.i1 = getelementptr %Var, %Var* %var, i64 0, i32 0, !dbg !7925
  %flags.i.i2 = load i32, i32* %flags.ptr.i.i1, align 4, !dbg !7925
  %0 = and i32 %flags.i.i2, 2, !dbg !7928
  %1 = icmp eq i32 %0, 0, !dbg !7928
  br i1 %1, label %done, label %follow, !dbg !7929

follow:                                           ; preds = %enter, %follow
  %.03 = phi %Var* [ %value1.i, %follow ], [ %var, %enter ]
  %value.ptr.i = getelementptr %Var, %Var* %.03, i64 0, i32 1, !dbg !7930
  %2 = bitcast %Tcl_Obj** %value.ptr.i to %Var**, !dbg !7930
  %value1.i = load %Var*, %Var** %2, align 8, !dbg !7930
  %flags.ptr.i.i = getelementptr %Var, %Var* %value1.i, i64 0, i32 0, !dbg !7925
  %flags.i.i = load i32, i32* %flags.ptr.i.i, align 4, !dbg !7925
  %3 = and i32 %flags.i.i, 2, !dbg !7928
  %4 = icmp eq i32 %3, 0, !dbg !7928
  br i1 %4, label %done, label %follow, !dbg !7929

done:                                             ; preds = %follow, %enter
  %.0.lcssa = phi %Var* [ %var, %enter ], [ %value1.i, %follow ], !dbg !7932
  ret %Var* %.0.lcssa, !dbg !7933
}

; Function Attrs: alwaysinline nounwind
define hidden i8* @tcl.getornull(%Tcl_Obj* %objPtr) local_unnamed_addr #6 !dbg !7934 {
enter:
  %0 = icmp eq %Tcl_Obj* %objPtr, null, !dbg !7939
  br i1 %0, label %nullObj, label %realObj, !dbg !7939

nullObj:                                          ; preds = %enter
  ret i8* null, !dbg !7940

realObj:                                          ; preds = %enter
  %str = tail call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %objPtr), !dbg !7941
  ret i8* %str, !dbg !7941
}

; Function Attrs: alwaysinline norecurse nounwind readonly
define hidden i1 @var.fast.allowed(%Var* noalias nocapture nonnull readonly %varPtr, %Var* noalias readnone %arrayPtr, i32 %flags) local_unnamed_addr #15 !dbg !7942 {
enter:
  %flags.ptr = getelementptr %Var, %Var* %varPtr, i64 0, i32 0, !dbg !7949
  %flags1 = load i32, i32* %flags.ptr, align 4, !dbg !7949
  %0 = icmp eq %Var* %arrayPtr, null, !dbg !7950
  %1 = and i32 %flags, 12, !dbg !7951
  %2 = or i32 %flags1, %1, !dbg !7952
  %3 = icmp eq i32 %2, 0, !dbg !7952
  %4 = and i1 %0, %3, !dbg !7952
  ret i1 %4, !dbg !7952
}

; Function Attrs: alwaysinline norecurse nounwind readonly
define hidden i8* @var.readerr(%Var* nocapture nonnull readonly %varPtr, %Var* readonly %arrayPtr) local_unnamed_addr #15 !dbg !7953 {
enter:
  %value.ptr.i.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 1, !dbg !7959
  %value.i.i = load %Tcl_Obj*, %Tcl_Obj** %value.ptr.i.i, align 8, !dbg !7959
  %0 = icmp eq %Tcl_Obj* %value.i.i, null, !dbg !7962
  %1 = icmp ne %Var* %arrayPtr, null, !dbg !7963
  %2 = and i1 %1, %0, !dbg !7963
  br i1 %2, label %testDefinedArray, label %testArray, !dbg !7963

testDefinedArray:                                 ; preds = %enter
  %value.ptr.i.i1 = getelementptr %Var, %Var* %arrayPtr, i64 0, i32 1, !dbg !7964
  %value.i.i2 = load %Tcl_Obj*, %Tcl_Obj** %value.ptr.i.i1, align 8, !dbg !7964
  %3 = icmp eq %Tcl_Obj* %value.i.i2, null, !dbg !7967
  br i1 %3, label %testArray, label %noSuchElement, !dbg !7968

testArray:                                        ; preds = %testDefinedArray, %enter
  %flags.ptr.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 0, !dbg !7969
  %flags.i = load i32, i32* %flags.ptr.i, align 4, !dbg !7969
  %4 = and i32 %flags.i, 1, !dbg !7971
  %5 = icmp eq i32 %4, 0, !dbg !7971
  %. = select i1 %5, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @noSuchVar, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @isArray, i64 0, i64 0)
  br label %noSuchElement

noSuchElement:                                    ; preds = %testDefinedArray, %testArray
  %merge = phi i8* [ getelementptr inbounds ([25 x i8], [25 x i8]* @noSuchElement, i64 0, i64 0), %testDefinedArray ], [ %., %testArray ]
  ret i8* %merge, !dbg !7972
}

; Function Attrs: alwaysinline nounwind
define hidden %Tcl_Obj* @tcl.read.var.ptr(%Interp* noalias nocapture nonnull %interp, %Var* noalias nocapture nonnull %varPtr, %Var* %arrayPtr, %Tcl_Obj* nocapture nonnull %part1Ptr, %Tcl_Obj* nocapture %part2Ptr, i32 %flags) local_unnamed_addr #6 !dbg !7973 {
enter:
  %flags.ptr.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 0, !dbg !7983
  %flags1.i = load i32, i32* %flags.ptr.i, align 4, !dbg !7983, !alias.scope !7985, !noalias !7988
  %0 = icmp eq %Var* %arrayPtr, null, !dbg !7990
  %1 = and i32 %flags, 12, !dbg !7991
  %2 = or i32 %flags1.i, %1, !dbg !7992
  %3 = icmp eq i32 %2, 0, !dbg !7992
  %4 = and i1 %0, %3, !dbg !7992
  br i1 %4, label %get.fast, label %get.slow, !dbg !7993

get.fast:                                         ; preds = %enter
  %value.ptr.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 1, !dbg !7994
  %value.i = load %Tcl_Obj*, %Tcl_Obj** %value.ptr.i, align 8, !dbg !7994
  %5 = icmp eq %Tcl_Obj* %value.i, null, !dbg !7996
  br i1 %5, label %get.slow, label %get.fast.done, !dbg !7996

get.fast.done:                                    ; preds = %get.fast
  ret %Tcl_Obj* %value.i, !dbg !7997

get.slow:                                         ; preds = %get.fast, %enter
  %objPtr = tail call %Tcl_Obj* @TclPtrGetVar(%Interp* noalias nocapture nonnull %interp, %Var* noalias nocapture nonnull %varPtr, %Var* noalias nocapture %arrayPtr, %Tcl_Obj* nocapture nonnull %part1Ptr, %Tcl_Obj* nocapture %part2Ptr, i32 %flags), !dbg !7998
  ret %Tcl_Obj* %objPtr, !dbg !7998
}

; Function Attrs: alwaysinline nounwind
define hidden i1 @set.by.append.element(%Interp* nocapture nonnull %interp, %Var* nocapture nonnull %var, %Tcl_Obj* %oldValue, %Tcl_Obj* nonnull %newValue) local_unnamed_addr #6 !dbg !7999 {
enter:
  %0 = icmp eq %Tcl_Obj* %oldValue, null, !dbg !8007
  br i1 %0, label %initial, label %update, !dbg !8007

initial:                                          ; preds = %enter
  %oldValue1 = tail call noalias nonnull %Tcl_Obj* @Tcl_NewObj(), !dbg !8008
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %oldValue1, i64 0, i32 0, !dbg !8009
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !8011
  %1 = icmp eq i32 %refCount1.i, 0, !dbg !8011
  tail call void @llvm.assume(i1 %1) #5, !dbg !8011
  %value.i = getelementptr %Var, %Var* %var, i64 0, i32 1, !dbg !8012
  store %Tcl_Obj* %oldValue1, %Tcl_Obj** %value.i, align 8, !dbg !8014
  store i32 1, i32* %refCount.i, align 4, !dbg !8015
  br label %append, !dbg !8017

update:                                           ; preds = %enter
  %refCountPtr.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %oldValue, i64 0, i32 0, !dbg !8018
  %refCount.i.i = load i32, i32* %refCountPtr.i.i, align 4, !dbg !8018
  %shared.i = icmp sgt i32 %refCount.i.i, 1, !dbg !8021
  br i1 %shared.i, label %unshare, label %append, !dbg !8022

unshare:                                          ; preds = %update
  %oldValue2 = tail call noalias nonnull %Tcl_Obj* @Tcl_DuplicateObj(%Tcl_Obj* nocapture nonnull readonly %oldValue), !dbg !8023
  %refCount.i9 = getelementptr %Tcl_Obj, %Tcl_Obj* %oldValue2, i64 0, i32 0, !dbg !8024
  %value.i8 = getelementptr %Var, %Var* %var, i64 0, i32 1, !dbg !8026
  store %Tcl_Obj* %oldValue2, %Tcl_Obj** %value.i8, align 8, !dbg !8028
  %refCount1.i7 = load i32, i32* %refCountPtr.i.i, align 4, !dbg !8029
  %2 = icmp slt i32 %refCount1.i7, 2, !dbg !8031
  br i1 %2, label %freeObject.i, label %leave.i, !dbg !8031

freeObject.i:                                     ; preds = %unshare
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %oldValue) #5, !dbg !8032
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %oldValue) #5, !dbg !8033
  %refCount1.i5.pre = load i32, i32* %refCount.i9, align 4, !dbg !8034
  %phitmp = add i32 %refCount1.i5.pre, 1, !dbg !8036
  br label %Tcl_DecrRefCount.exit, !dbg !8036

leave.i:                                          ; preds = %unshare
  %3 = add nsw i32 %refCount1.i7, -1, !dbg !8029
  store i32 %3, i32* %refCountPtr.i.i, align 4, !dbg !8037
  br label %Tcl_DecrRefCount.exit, !dbg !8038

Tcl_DecrRefCount.exit:                            ; preds = %leave.i, %freeObject.i
  %refCount1.i5 = phi i32 [ 1, %leave.i ], [ %phitmp, %freeObject.i ]
  store i32 %refCount1.i5, i32* %refCount.i9, align 4, !dbg !8034
  br label %append, !dbg !8039

append:                                           ; preds = %Tcl_DecrRefCount.exit, %update, %initial
  %oldValue3 = phi %Tcl_Obj* [ %oldValue1, %initial ], [ %oldValue2, %Tcl_DecrRefCount.exit ], [ %oldValue, %update ]
  %code = tail call i32 @Tcl_ListObjAppendElement(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %oldValue3, %Tcl_Obj* noalias nonnull %newValue), !dbg !8040
  %4 = icmp eq i32 %code, 0, !dbg !8041
  ret i1 %4, !dbg !8041
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden void @set.copy.continuations(%Tcl_Obj* nocapture %to, %Tcl_Obj* nocapture %from) local_unnamed_addr #0 !dbg !8042 {
enter:
  ret void, !dbg !8046
}

; Function Attrs: alwaysinline nounwind
define hidden void @set.by.append.string(%Var* nocapture nonnull %var, %Tcl_Obj* %oldValue, %Tcl_Obj* nonnull %newValue) local_unnamed_addr #6 !dbg !8047 {
enter:
  %0 = icmp eq %Tcl_Obj* %oldValue, null, !dbg !8054
  br i1 %0, label %initial, label %update, !dbg !8054

initial:                                          ; preds = %enter
  %value.i = getelementptr %Var, %Var* %var, i64 0, i32 1, !dbg !8055
  store %Tcl_Obj* %newValue, %Tcl_Obj** %value.i, align 8, !dbg !8057
  %refCount.i3 = getelementptr %Tcl_Obj, %Tcl_Obj* %newValue, i64 0, i32 0, !dbg !8058
  %refCount1.i4 = load i32, i32* %refCount.i3, align 4, !dbg !8060
  %1 = add nsw i32 %refCount1.i4, 1, !dbg !8060
  store i32 %1, i32* %refCount.i3, align 4, !dbg !8060
  br label %done, !dbg !8061

update:                                           ; preds = %enter
  %refCountPtr.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %oldValue, i64 0, i32 0, !dbg !8062
  %refCount.i.i = load i32, i32* %refCountPtr.i.i, align 4, !dbg !8062
  %shared.i = icmp sgt i32 %refCount.i.i, 1, !dbg !8065
  br i1 %shared.i, label %unshare, label %append, !dbg !8066

unshare:                                          ; preds = %update
  %oldValue1 = tail call noalias nonnull %Tcl_Obj* @Tcl_DuplicateObj(%Tcl_Obj* nocapture nonnull readonly %oldValue), !dbg !8067
  %refCount.i14 = getelementptr %Tcl_Obj, %Tcl_Obj* %oldValue1, i64 0, i32 0, !dbg !8068
  %value.i13 = getelementptr %Var, %Var* %var, i64 0, i32 1, !dbg !8070
  store %Tcl_Obj* %oldValue1, %Tcl_Obj** %value.i13, align 8, !dbg !8072
  %refCount1.i9 = load i32, i32* %refCountPtr.i.i, align 4, !dbg !8073
  %2 = icmp slt i32 %refCount1.i9, 2, !dbg !8075
  br i1 %2, label %freeObject.i10, label %leave.i11, !dbg !8075

freeObject.i10:                                   ; preds = %unshare
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %oldValue) #5, !dbg !8076
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %oldValue) #5, !dbg !8077
  %refCount1.i7.pre = load i32, i32* %refCount.i14, align 4, !dbg !8078
  %phitmp = add i32 %refCount1.i7.pre, 1, !dbg !8080
  br label %Tcl_DecrRefCount.exit12, !dbg !8080

leave.i11:                                        ; preds = %unshare
  %3 = add nsw i32 %refCount1.i9, -1, !dbg !8073
  store i32 %3, i32* %refCountPtr.i.i, align 4, !dbg !8081
  br label %Tcl_DecrRefCount.exit12, !dbg !8082

Tcl_DecrRefCount.exit12:                          ; preds = %leave.i11, %freeObject.i10
  %refCount1.i7 = phi i32 [ 1, %leave.i11 ], [ %phitmp, %freeObject.i10 ]
  store i32 %refCount1.i7, i32* %refCount.i14, align 4, !dbg !8078
  br label %append, !dbg !8083

append:                                           ; preds = %Tcl_DecrRefCount.exit12, %update
  %oldValue2 = phi %Tcl_Obj* [ %oldValue1, %Tcl_DecrRefCount.exit12 ], [ %oldValue, %update ]
  tail call void @Tcl_AppendObjToObj(%Tcl_Obj* noalias nocapture nonnull %oldValue2, %Tcl_Obj* noalias nocapture nonnull %newValue), !dbg !8084
  %refCountPtr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %newValue, i64 0, i32 0, !dbg !8085
  %refCount.i5 = load i32, i32* %refCountPtr.i, align 4, !dbg !8085
  %4 = icmp eq i32 %refCount.i5, 0, !dbg !8087
  br i1 %4, label %Tcl_DecrRefCount.exit, label %done, !dbg !8087

Tcl_DecrRefCount.exit:                            ; preds = %append
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %newValue) #5, !dbg !8088
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %newValue) #5, !dbg !8090
  br label %done, !dbg !8091

done:                                             ; preds = %Tcl_DecrRefCount.exit, %append, %initial
  ret void, !dbg !8092
}

; Function Attrs: alwaysinline nounwind
define hidden void @set.direct(%Var* nocapture nonnull %var, %Tcl_Obj* %oldValue, %Tcl_Obj* nonnull %newValue) local_unnamed_addr #6 !dbg !8093 {
enter:
  %0 = icmp eq %Tcl_Obj* %newValue, %oldValue, !dbg !8098
  br i1 %0, label %done, label %replace, !dbg !8098

replace:                                          ; preds = %enter
  %value.i = getelementptr %Var, %Var* %var, i64 0, i32 1, !dbg !8099
  store %Tcl_Obj* %newValue, %Tcl_Obj** %value.i, align 8, !dbg !8101
  %refCount.i1 = getelementptr %Tcl_Obj, %Tcl_Obj* %newValue, i64 0, i32 0, !dbg !8102
  %refCount1.i2 = load i32, i32* %refCount.i1, align 4, !dbg !8104
  %1 = add nsw i32 %refCount1.i2, 1, !dbg !8104
  store i32 %1, i32* %refCount.i1, align 4, !dbg !8104
  %2 = icmp eq %Tcl_Obj* %oldValue, null, !dbg !8105
  br i1 %2, label %done, label %dropReference, !dbg !8105

dropReference:                                    ; preds = %replace
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %oldValue, i64 0, i32 0, !dbg !8106
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !8108
  %3 = icmp slt i32 %refCount1.i, 2, !dbg !8109
  br i1 %3, label %freeObject.i, label %leave.i, !dbg !8109

freeObject.i:                                     ; preds = %dropReference
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %oldValue) #5, !dbg !8110
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %oldValue) #5, !dbg !8111
  br label %done, !dbg !8112

leave.i:                                          ; preds = %dropReference
  %4 = add nsw i32 %refCount1.i, -1, !dbg !8108
  store i32 %4, i32* %refCount.i, align 4, !dbg !8113
  br label %done, !dbg !8114

done:                                             ; preds = %freeObject.i, %leave.i, %replace, %enter
  ret void, !dbg !8115
}

; Function Attrs: alwaysinline nounwind
define hidden void @var.fast.set(%Var* nocapture nonnull %varPtr, %Tcl_Obj* nonnull %newValuePtr) local_unnamed_addr #6 !dbg !8116 {
enter:
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %newValuePtr, i64 0, i32 0, !dbg !8120
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !8123
  %0 = add nsw i32 %refCount1.i.i, 1, !dbg !8123
  store i32 %0, i32* %refCount.i.i, align 4, !dbg !8123
  %value.ptr.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 1, !dbg !8124
  %value.i = load %Tcl_Obj*, %Tcl_Obj** %value.ptr.i, align 8, !dbg !8124
  store %Tcl_Obj* %newValuePtr, %Tcl_Obj** %value.ptr.i, align 8, !dbg !8126
  %1 = icmp eq %Tcl_Obj* %value.i, null, !dbg !8128
  br i1 %1, label %set.fast.done, label %set.fast.drop.old, !dbg !8128

set.fast.drop.old:                                ; preds = %enter
  %refCount.i.i1 = getelementptr %Tcl_Obj, %Tcl_Obj* %value.i, i64 0, i32 0, !dbg !8129
  %refCount1.i.i2 = load i32, i32* %refCount.i.i1, align 4, !dbg !8132
  %2 = icmp slt i32 %refCount1.i.i2, 2, !dbg !8133
  br i1 %2, label %freeObject.i.i, label %leave.i.i, !dbg !8133

freeObject.i.i:                                   ; preds = %set.fast.drop.old
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %value.i) #5, !dbg !8134
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %value.i) #5, !dbg !8135
  br label %set.fast.done, !dbg !8136

leave.i.i:                                        ; preds = %set.fast.drop.old
  %3 = add nsw i32 %refCount1.i.i2, -1, !dbg !8132
  store i32 %3, i32* %refCount.i.i1, align 4, !dbg !8137
  br label %set.fast.done, !dbg !8138

set.fast.done:                                    ; preds = %leave.i.i, %freeObject.i.i, %enter
  ret void, !dbg !8139
}

; Function Attrs: alwaysinline nounwind
define hidden %Tcl_Obj* @tcl.write.var.ptr(%Interp* noalias nocapture nonnull %interp, %Var* noalias nocapture nonnull %varPtr, %Var* noalias %arrayPtr, %Tcl_Obj* nocapture nonnull %part1Ptr, %Tcl_Obj* %part2Ptr, %Tcl_Obj* nonnull %newValuePtr, i32 %flags) local_unnamed_addr #6 !dbg !8140 {
enter:
  %flags.ptr.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 0, !dbg !8151
  %flags1.i = load i32, i32* %flags.ptr.i, align 4, !dbg !8151, !alias.scope !8153, !noalias !8156
  %0 = icmp eq %Var* %arrayPtr, null, !dbg !8158
  %1 = and i32 %flags, 12, !dbg !8159
  %2 = or i32 %flags1.i, %1, !dbg !8160
  %3 = icmp eq i32 %2, 0, !dbg !8160
  %4 = and i1 %0, %3, !dbg !8160
  br i1 %4, label %set.fast, label %set.slow, !dbg !8161

set.fast:                                         ; preds = %enter
  %refCount.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %newValuePtr, i64 0, i32 0, !dbg !8162
  %refCount1.i.i.i = load i32, i32* %refCount.i.i.i, align 4, !dbg !8166
  %5 = add nsw i32 %refCount1.i.i.i, 1, !dbg !8166
  store i32 %5, i32* %refCount.i.i.i, align 4, !dbg !8166
  %value.ptr.i.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 1, !dbg !8167
  %value.i.i = load %Tcl_Obj*, %Tcl_Obj** %value.ptr.i.i, align 8, !dbg !8167
  store %Tcl_Obj* %newValuePtr, %Tcl_Obj** %value.ptr.i.i, align 8, !dbg !8169
  %6 = icmp eq %Tcl_Obj* %value.i.i, null, !dbg !8171
  br i1 %6, label %var.fast.set.exit, label %set.fast.drop.old.i, !dbg !8171

set.fast.drop.old.i:                              ; preds = %set.fast
  %refCount.i.i1.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value.i.i, i64 0, i32 0, !dbg !8172
  %refCount1.i.i2.i = load i32, i32* %refCount.i.i1.i, align 4, !dbg !8175
  %7 = icmp slt i32 %refCount1.i.i2.i, 2, !dbg !8176
  br i1 %7, label %freeObject.i.i.i, label %leave.i.i.i, !dbg !8176

freeObject.i.i.i:                                 ; preds = %set.fast.drop.old.i
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %value.i.i) #5, !dbg !8177
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %value.i.i) #5, !dbg !8178
  br label %var.fast.set.exit, !dbg !8179

leave.i.i.i:                                      ; preds = %set.fast.drop.old.i
  %8 = add nsw i32 %refCount1.i.i2.i, -1, !dbg !8175
  store i32 %8, i32* %refCount.i.i1.i, align 4, !dbg !8180
  br label %var.fast.set.exit, !dbg !8181

var.fast.set.exit:                                ; preds = %set.fast, %freeObject.i.i.i, %leave.i.i.i
  ret %Tcl_Obj* %newValuePtr, !dbg !8182

set.slow:                                         ; preds = %enter
  %objPtr = tail call %Tcl_Obj* @TclPtrSetVar(%Interp* noalias nocapture nonnull %interp, %Var* noalias nocapture nonnull %varPtr, %Var* noalias nocapture %arrayPtr, %Tcl_Obj* nocapture nonnull %part1Ptr, %Tcl_Obj* %part2Ptr, %Tcl_Obj* nonnull %newValuePtr, i32 %flags), !dbg !8183
  ret %Tcl_Obj* %objPtr, !dbg !8183
}

; Function Attrs: alwaysinline nounwind
define hidden %Tcl_Obj* @tcl.write.var.ptr.numeric(%Interp* noalias nocapture nonnull %interp, %Var* noalias nocapture nonnull %varPtr, %Var* noalias %arrayPtr, %Tcl_Obj* nocapture nonnull %part1Ptr, %Tcl_Obj* %part2Ptr, %NUMERIC %newValue, i32 %flags) local_unnamed_addr #6 !dbg !8184 {
enter:
  %flags.ptr.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 0, !dbg !8195
  %flags1.i = load i32, i32* %flags.ptr.i, align 4, !dbg !8195, !alias.scope !8197, !noalias !8200
  %0 = icmp eq %Var* %arrayPtr, null, !dbg !8202
  %1 = and i32 %flags, 12, !dbg !8203
  %2 = or i32 %flags1.i, %1, !dbg !8204
  %3 = icmp eq i32 %2, 0, !dbg !8204
  %4 = and i1 %0, %3, !dbg !8204
  br i1 %4, label %set.checkExists, label %set.slow, !dbg !8205

set.checkExists:                                  ; preds = %enter
  %value.ptr.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 1, !dbg !8206
  %value.i = load %Tcl_Obj*, %Tcl_Obj** %value.ptr.i, align 8, !dbg !8206
  %5 = icmp eq %Tcl_Obj* %value.i, null, !dbg !8208
  br i1 %5, label %set.slow, label %set.checkShared, !dbg !8208

set.checkShared:                                  ; preds = %set.checkExists
  %refCountPtr.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value.i, i64 0, i32 0, !dbg !8209
  %refCount.i.i2 = load i32, i32* %refCountPtr.i.i, align 4, !dbg !8209
  %shared.i = icmp sgt i32 %refCount.i.i2, 1, !dbg !8212
  br i1 %shared.i, label %unshare, label %set.fast, !dbg !8213

unshare:                                          ; preds = %set.checkShared
  %objPtr = tail call noalias nonnull %Tcl_Obj* @Tcl_DuplicateObj(%Tcl_Obj* nocapture nonnull readonly %value.i), !dbg !8214
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !8215
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !8217
  %6 = icmp eq i32 %refCount1.i, 0, !dbg !8217
  tail call void @llvm.assume(i1 %6) #5, !dbg !8217
  store %Tcl_Obj* %objPtr, %Tcl_Obj** %value.ptr.i, align 8, !dbg !8218
  store i32 1, i32* %refCount.i, align 4, !dbg !8220
  br label %set.fast, !dbg !8223

set.fast:                                         ; preds = %unshare, %set.checkShared
  %7 = phi %Tcl_Obj* [ %value.i, %set.checkShared ], [ %objPtr, %unshare ]
  %8 = extractvalue %NUMERIC %newValue, 0, !dbg !8224
  br i1 %8, label %set.fast.double.replace, label %set.fast.int, !dbg !8224

set.fast.int:                                     ; preds = %set.fast
  %9 = extractvalue %NUMERIC %newValue, 1, !dbg !8225
  %10 = extractvalue %INT %9, 0, !dbg !8226
  br i1 %10, label %set.fast.int64.replace, label %set.fast.int32.replace, !dbg !8226

set.fast.int32.replace:                           ; preds = %set.fast.int
  %11 = extractvalue %INT %9, 1, !dbg !8227
  tail call void @Tcl_SetIntObj(%Tcl_Obj* nocapture nonnull %7, i32 %11), !dbg !8227
  ret %Tcl_Obj* %7, !dbg !8228

set.fast.int64.replace:                           ; preds = %set.fast.int
  %12 = extractvalue %INT %9, 2, !dbg !8229
  tail call void @Tcl_SetWideIntObj(%Tcl_Obj* nocapture nonnull %7, i64 %12), !dbg !8229
  ret %Tcl_Obj* %7, !dbg !8230

set.fast.double.replace:                          ; preds = %set.fast
  %13 = extractvalue %NUMERIC %newValue, 2, !dbg !8231
  tail call void @Tcl_SetDoubleObj(%Tcl_Obj* nocapture nonnull %7, double %13), !dbg !8232
  ret %Tcl_Obj* %7, !dbg !8233

set.slow:                                         ; preds = %set.checkExists, %enter
  %14 = extractvalue %NUMERIC %newValue, 0, !dbg !8234
  br i1 %14, label %op.double.i, label %op.int.i, !dbg !8234

op.int.i:                                         ; preds = %set.slow
  %15 = extractvalue %NUMERIC %newValue, 1, !dbg !8236
  %16 = extractvalue %INT %15, 0, !dbg !8237
  br i1 %16, label %op.64bit.i.i, label %op.32bit.i.i, !dbg !8237

op.32bit.i.i:                                     ; preds = %op.int.i
  %17 = extractvalue %INT %15, 1, !dbg !8239
  %objPtr.i.i = tail call noalias nonnull %Tcl_Obj* @Tcl_NewIntObj(i32 %17) #5, !dbg !8239
  %typePtr.ptr.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr.i.i, i64 0, i32 3, !dbg !8240
  %typePtr.i.i = load %ObjType*, %ObjType** %typePtr.ptr.i.i, align 8, !dbg !8240, !nonnull !3
  %tclWideIntType.i.i = load %ObjType*, %ObjType** @tclWideIntType, align 8, !dbg !8241, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %18 = icmp eq %ObjType* %typePtr.i.i, %tclWideIntType.i.i, !dbg !8241
  %tclIntType.i.i = load %ObjType*, %ObjType** @tclIntType, align 8, !dbg !8241, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %19 = icmp eq %ObjType* %typePtr.i.i, %tclIntType.i.i, !dbg !8241
  %20 = or i1 %18, %19, !dbg !8241
  br label %tcl.stringify.numeric.exit, !dbg !8242

op.64bit.i.i:                                     ; preds = %op.int.i
  %21 = extractvalue %INT %15, 2, !dbg !8243
  %objPtr1.i.i = tail call noalias nonnull %Tcl_Obj* @Tcl_NewWideIntObj(i64 %21) #5, !dbg !8243
  %typePtr.ptr2.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr1.i.i, i64 0, i32 3, !dbg !8244
  %typePtr3.i.i = load %ObjType*, %ObjType** %typePtr.ptr2.i.i, align 8, !dbg !8244, !nonnull !3
  %tclWideIntType4.i.i = load %ObjType*, %ObjType** @tclWideIntType, align 8, !dbg !8245, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %22 = icmp eq %ObjType* %typePtr3.i.i, %tclWideIntType4.i.i, !dbg !8245
  %tclIntType5.i.i = load %ObjType*, %ObjType** @tclIntType, align 8, !dbg !8245, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %23 = icmp eq %ObjType* %typePtr3.i.i, %tclIntType5.i.i, !dbg !8245
  %24 = or i1 %22, %23, !dbg !8245
  br label %tcl.stringify.numeric.exit, !dbg !8246

op.double.i:                                      ; preds = %set.slow
  %25 = extractvalue %NUMERIC %newValue, 2, !dbg !8247
  %objPtr.i1.i = tail call noalias nonnull %Tcl_Obj* @Tcl_NewDoubleObj(double %25) #5, !dbg !8248
  %typePtr.ptr.i4.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr.i1.i, i64 0, i32 3, !dbg !8250
  %typePtr.i5.i = load %ObjType*, %ObjType** %typePtr.ptr.i4.i, align 8, !dbg !8250, !nonnull !3
  %tclDoubleType.i.i = load %ObjType*, %ObjType** @tclDoubleType, align 8, !dbg !8251, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %26 = icmp eq %ObjType* %typePtr.i5.i, %tclDoubleType.i.i, !dbg !8251
  br label %tcl.stringify.numeric.exit, !dbg !8247

tcl.stringify.numeric.exit:                       ; preds = %op.32bit.i.i, %op.64bit.i.i, %op.double.i
  %.sink = phi i1 [ %20, %op.32bit.i.i ], [ %24, %op.64bit.i.i ], [ %26, %op.double.i ]
  %27 = phi %Tcl_Obj* [ %objPtr.i.i, %op.32bit.i.i ], [ %objPtr1.i.i, %op.64bit.i.i ], [ %objPtr.i1.i, %op.double.i ]
  tail call void @llvm.assume(i1 %.sink) #5, !dbg !8252
  %refCount.i.i3 = getelementptr %Tcl_Obj, %Tcl_Obj* %27, i64 0, i32 0, !dbg !8253
  store i32 1, i32* %refCount.i.i3, align 4, !dbg !8256
  br i1 %4, label %set.fast.i, label %set.slow.i, !dbg !8257

set.fast.i:                                       ; preds = %tcl.stringify.numeric.exit
  store i32 2, i32* %refCount.i.i3, align 4, !dbg !8259, !noalias !8263
  %value.ptr.i.i.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 1, !dbg !8268
  %value.i.i.i = load %Tcl_Obj*, %Tcl_Obj** %value.ptr.i.i.i, align 8, !dbg !8268, !alias.scope !8270, !noalias !8271
  store %Tcl_Obj* %27, %Tcl_Obj** %value.ptr.i.i.i, align 8, !dbg !8272, !alias.scope !8270, !noalias !8271
  %28 = icmp eq %Tcl_Obj* %value.i.i.i, null, !dbg !8274
  br i1 %28, label %leave.i.i, label %set.fast.drop.old.i.i, !dbg !8274

set.fast.drop.old.i.i:                            ; preds = %set.fast.i
  %refCount.i.i1.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value.i.i.i, i64 0, i32 0, !dbg !8275
  %refCount1.i.i2.i.i = load i32, i32* %refCount.i.i1.i.i, align 4, !dbg !8278, !noalias !8279
  %29 = icmp slt i32 %refCount1.i.i2.i.i, 2, !dbg !8280
  br i1 %29, label %freeObject.i.i.i.i, label %leave.i.i.i.i, !dbg !8280

freeObject.i.i.i.i:                               ; preds = %set.fast.drop.old.i.i
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %value.i.i.i) #5, !dbg !8281, !noalias !8279
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %value.i.i.i) #5, !dbg !8282, !noalias !8279
  br label %tcl.write.var.ptr.exit, !dbg !8283

leave.i.i.i.i:                                    ; preds = %set.fast.drop.old.i.i
  %30 = add nsw i32 %refCount1.i.i2.i.i, -1, !dbg !8278
  store i32 %30, i32* %refCount.i.i1.i.i, align 4, !dbg !8284, !noalias !8279
  br label %tcl.write.var.ptr.exit, !dbg !8285

set.slow.i:                                       ; preds = %tcl.stringify.numeric.exit
  %objPtr.i = tail call %Tcl_Obj* @TclPtrSetVar(%Interp* noalias nocapture nonnull %interp, %Var* noalias nocapture nonnull %varPtr, %Var* noalias nocapture %arrayPtr, %Tcl_Obj* nocapture nonnull %part1Ptr, %Tcl_Obj* %part2Ptr, %Tcl_Obj* nonnull %27, i32 %flags) #5, !dbg !8286
  br label %tcl.write.var.ptr.exit, !dbg !8286

tcl.write.var.ptr.exit:                           ; preds = %freeObject.i.i.i.i, %leave.i.i.i.i, %set.slow.i
  %.ph = phi %Tcl_Obj* [ %27, %freeObject.i.i.i.i ], [ %27, %leave.i.i.i.i ], [ %objPtr.i, %set.slow.i ]
  %refCount1.i.i.pr = load i32, i32* %refCount.i.i3, align 4, !dbg !8287
  %31 = icmp slt i32 %refCount1.i.i.pr, 2, !dbg !8290
  br i1 %31, label %freeObject.i.i, label %leave.i.i, !dbg !8290

freeObject.i.i:                                   ; preds = %tcl.write.var.ptr.exit
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %27) #5, !dbg !8291
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %27) #5, !dbg !8292
  br label %tcl.dropReference.exit, !dbg !8293

leave.i.i:                                        ; preds = %set.fast.i, %tcl.write.var.ptr.exit
  %32 = phi %Tcl_Obj* [ %.ph, %tcl.write.var.ptr.exit ], [ %27, %set.fast.i ]
  %refCount1.i.i10 = phi i32 [ %refCount1.i.i.pr, %tcl.write.var.ptr.exit ], [ 2, %set.fast.i ]
  %33 = add nsw i32 %refCount1.i.i10, -1, !dbg !8287
  store i32 %33, i32* %refCount.i.i3, align 4, !dbg !8294
  br label %tcl.dropReference.exit, !dbg !8295

tcl.dropReference.exit:                           ; preds = %freeObject.i.i, %leave.i.i
  %34 = phi %Tcl_Obj* [ %.ph, %freeObject.i.i ], [ %32, %leave.i.i ]
  ret %Tcl_Obj* %34, !dbg !8296
}

; Function Attrs: alwaysinline nounwind
define hidden void @var.deleteSearches(%Interp* nocapture nonnull %interp, %Var* %varPtr) local_unnamed_addr #6 !dbg !8297 {
enter:
  %0 = icmp eq %Var* %varPtr, null, !dbg !8303
  br i1 %0, label %done, label %testBit, !dbg !8303

testBit:                                          ; preds = %enter
  %flags.ptr.i.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 0, !dbg !8304
  %flags.i.i = load i32, i32* %flags.ptr.i.i, align 4, !dbg !8304
  %1 = and i32 %flags.i.i, 16384, !dbg !8307
  %2 = icmp eq i32 %1, 0, !dbg !8307
  br i1 %2, label %done, label %delete.searches, !dbg !8308

delete.searches:                                  ; preds = %testBit
  %varSearches = getelementptr %Interp, %Interp* %interp, i64 0, i32 61, !dbg !8309
  %key = bitcast %Var* %varPtr to i8*, !dbg !8310
  %sPtr = tail call %HashEntry* @Tcl_FindHashEntry(%HashTable* noalias nocapture nonnull %varSearches, i8* noalias nocapture nonnull readonly %key), !dbg !8310
  %clientData.ptr = getelementptr %HashEntry, %HashEntry* %sPtr, i64 0, i32 3, !dbg !8311
  %3 = bitcast i8** %clientData.ptr to %ArraySearch**, !dbg !8311
  %clientData2 = load %ArraySearch*, %ArraySearch** %3, align 8, !dbg !8311
  %4 = icmp eq %ArraySearch* %clientData2, null, !dbg !8312
  br i1 %4, label %loop.done, label %loop.body, !dbg !8312

loop.body:                                        ; preds = %delete.searches, %Tcl_DecrRefCount.exit
  %.in = phi %ArraySearch* [ %nextPtr, %Tcl_DecrRefCount.exit ], [ %clientData2, %delete.searches ]
  %5 = bitcast %ArraySearch* %.in to i8*, !dbg !8313
  %nextPtr.ptr = getelementptr %ArraySearch, %ArraySearch* %.in, i64 0, i32 5, !dbg !8314
  %nextPtr = load %ArraySearch*, %ArraySearch** %nextPtr.ptr, align 8, !dbg !8314
  %name.ptr = getelementptr %ArraySearch, %ArraySearch* %.in, i64 0, i32 0, !dbg !8315
  %name = load %Tcl_Obj*, %Tcl_Obj** %name.ptr, align 8, !dbg !8315
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %name, i64 0, i32 0, !dbg !8316
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !8318
  %6 = icmp slt i32 %refCount1.i, 2, !dbg !8319
  br i1 %6, label %freeObject.i, label %leave.i, !dbg !8319

freeObject.i:                                     ; preds = %loop.body
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %name) #5, !dbg !8320
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %name) #5, !dbg !8321
  br label %Tcl_DecrRefCount.exit, !dbg !8322

leave.i:                                          ; preds = %loop.body
  %7 = add nsw i32 %refCount1.i, -1, !dbg !8318
  store i32 %7, i32* %refCount.i, align 4, !dbg !8323
  br label %Tcl_DecrRefCount.exit, !dbg !8324

Tcl_DecrRefCount.exit:                            ; preds = %leave.i, %freeObject.i
  tail call void @Tcl_Free(i8* nonnull %5), !dbg !8325
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %5), !dbg !8325
  %8 = icmp eq %ArraySearch* %nextPtr, null, !dbg !8312
  br i1 %8, label %loop.done, label %loop.body, !dbg !8312

loop.done:                                        ; preds = %Tcl_DecrRefCount.exit, %delete.searches
  %flags1.i = load i32, i32* %flags.ptr.i.i, align 4, !dbg !8326
  %9 = and i32 %flags1.i, -16385, !dbg !8326
  store i32 %9, i32* %flags.ptr.i.i, align 4, !dbg !8326
  tail call void @Tcl_DeleteHashEntry(%HashEntry* nonnull %sPtr), !dbg !8328
  br label %done, !dbg !8329

done:                                             ; preds = %testBit, %enter, %loop.done
  ret void, !dbg !8330
}

; Function Attrs: alwaysinline nounwind
define hidden void @var.eventuallyFreeTrace(%VarTrace* nonnull %trace) local_unnamed_addr #6 !dbg !8331 {
enter:
  %0 = bitcast %VarTrace* %trace to i8*, !dbg !8338
  tail call void @Tcl_EventuallyFree(i8* nonnull %0, void (i8*)* nonnull inttoptr (i32 3 to void (i8*)*)), !dbg !8338
  ret void, !dbg !8339
}

; Function Attrs: alwaysinline nounwind
define hidden void @tcl.unset.var.array(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %part1Ptr, %Var* noalias nocapture nonnull %varPtr, i32 %flags) local_unnamed_addr #6 !dbg !8340 {
enter:
  %search = alloca %HashSearch, align 8, !dbg !8348
  %flags.ptr.i.i.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 0, !dbg !8349
  %flags.i.i.i = load i32, i32* %flags.ptr.i.i.i, align 4, !dbg !8349
  %0 = and i32 %flags.i.i.i, 16384, !dbg !8353
  %1 = icmp eq i32 %0, 0, !dbg !8353
  br i1 %1, label %var.deleteSearches.exit, label %delete.searches.i, !dbg !8354

delete.searches.i:                                ; preds = %enter
  %varSearches.i = getelementptr %Interp, %Interp* %interp, i64 0, i32 61, !dbg !8355
  %key.i = bitcast %Var* %varPtr to i8*, !dbg !8356
  %sPtr.i = tail call %HashEntry* @Tcl_FindHashEntry(%HashTable* noalias nocapture nonnull %varSearches.i, i8* noalias nocapture nonnull readonly %key.i) #5, !dbg !8356
  %clientData.ptr.i = getelementptr %HashEntry, %HashEntry* %sPtr.i, i64 0, i32 3, !dbg !8357
  %2 = bitcast i8** %clientData.ptr.i to %ArraySearch**, !dbg !8357
  %clientData2.i = load %ArraySearch*, %ArraySearch** %2, align 8, !dbg !8357
  %3 = icmp eq %ArraySearch* %clientData2.i, null, !dbg !8358
  br i1 %3, label %loop.done.i, label %loop.body.i, !dbg !8358

loop.body.i:                                      ; preds = %delete.searches.i, %Tcl_DecrRefCount.exit.i
  %.in.i = phi %ArraySearch* [ %nextPtr.i, %Tcl_DecrRefCount.exit.i ], [ %clientData2.i, %delete.searches.i ]
  %4 = bitcast %ArraySearch* %.in.i to i8*, !dbg !8359
  %nextPtr.ptr.i = getelementptr %ArraySearch, %ArraySearch* %.in.i, i64 0, i32 5, !dbg !8360
  %nextPtr.i = load %ArraySearch*, %ArraySearch** %nextPtr.ptr.i, align 8, !dbg !8360
  %name.ptr.i = getelementptr %ArraySearch, %ArraySearch* %.in.i, i64 0, i32 0, !dbg !8361
  %name.i = load %Tcl_Obj*, %Tcl_Obj** %name.ptr.i, align 8, !dbg !8361
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %name.i, i64 0, i32 0, !dbg !8362
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !8364
  %5 = icmp slt i32 %refCount1.i.i, 2, !dbg !8365
  br i1 %5, label %freeObject.i.i, label %leave.i.i, !dbg !8365

freeObject.i.i:                                   ; preds = %loop.body.i
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %name.i) #5, !dbg !8366
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %name.i) #5, !dbg !8367
  br label %Tcl_DecrRefCount.exit.i, !dbg !8368

leave.i.i:                                        ; preds = %loop.body.i
  %6 = add nsw i32 %refCount1.i.i, -1, !dbg !8364
  store i32 %6, i32* %refCount.i.i, align 4, !dbg !8369
  br label %Tcl_DecrRefCount.exit.i, !dbg !8370

Tcl_DecrRefCount.exit.i:                          ; preds = %leave.i.i, %freeObject.i.i
  tail call void @Tcl_Free(i8* nonnull %4) #5, !dbg !8371
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %4) #5, !dbg !8371
  %7 = icmp eq %ArraySearch* %nextPtr.i, null, !dbg !8358
  br i1 %7, label %loop.done.i, label %loop.body.i, !dbg !8358

loop.done.i:                                      ; preds = %Tcl_DecrRefCount.exit.i, %delete.searches.i
  %8 = and i32 %flags.i.i.i, -16385, !dbg !8372
  store i32 %8, i32* %flags.ptr.i.i.i, align 4, !dbg !8372
  tail call void @Tcl_DeleteHashEntry(%HashEntry* nonnull %sPtr.i) #5, !dbg !8374
  br label %var.deleteSearches.exit, !dbg !8375

var.deleteSearches.exit:                          ; preds = %enter, %loop.done.i
  %value.ptr.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 1, !dbg !8376
  %9 = bitcast %Tcl_Obj** %value.ptr.i to %VarHashTable**, !dbg !8376
  %value1.i = load %VarHashTable*, %VarHashTable** %9, align 8, !dbg !8376
  %table.i = getelementptr %VarHashTable, %VarHashTable* %value1.i, i64 0, i32 0, !dbg !8378
  %hPtr.i = call %HashEntry* @Tcl_FirstHashEntry(%HashTable* nonnull readonly %table.i, %HashSearch* nocapture nonnull %search) #5, !dbg !8380
  %10 = icmp eq %HashEntry* %hPtr.i, null, !dbg !8381
  %ptr1.i.i = getelementptr %HashEntry, %HashEntry* %hPtr.i, i64 -1, i32 2, !dbg !8381
  %11 = icmp eq i8** %ptr1.i.i, null, !dbg !8382
  %12 = or i1 %10, %11, !dbg !8382
  br i1 %12, label %loop.done, label %loop.body.lr.ph, !dbg !8382

loop.body.lr.ph:                                  ; preds = %var.deleteSearches.exit
  %var.i.i = bitcast i8** %ptr1.i.i to %Var*, !dbg !8381
  %varTraces = getelementptr %Interp, %Interp* %interp, i64 0, i32 60, !dbg !8383
  %activeVarTracePtr.ptr = getelementptr %Interp, %Interp* %interp, i64 0, i32 13, !dbg !8383
  br label %loop.body, !dbg !8382

loop.body:                                        ; preds = %loop.body.lr.ph, %var.clearNamespaceVar.exit
  %elPtr.035 = phi %Var* [ %var.i.i, %loop.body.lr.ph ], [ %43, %var.clearNamespaceVar.exit ]
  %flags.ptr.i.i = getelementptr %Var, %Var* %elPtr.035, i64 0, i32 0, !dbg !8384
  %flags.i.i = load i32, i32* %flags.ptr.i.i, align 4, !dbg !8384
  %13 = and i32 %flags.i.i, 3, !dbg !8387
  %14 = icmp eq i32 %13, 0, !dbg !8387
  %value.ptr.i.i = getelementptr %Var, %Var* %elPtr.035, i64 0, i32 1, !dbg !8388
  %value.i.i = load %Tcl_Obj*, %Tcl_Obj** %value.ptr.i.i, align 8, !dbg !8388
  %15 = icmp ne %Tcl_Obj* %value.i.i, null, !dbg !8391
  %16 = and i1 %14, %15, !dbg !8392
  br i1 %16, label %clear.element.contents, label %consider.element.traces, !dbg !8392

clear.element.contents:                           ; preds = %loop.body
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value.i.i, i64 0, i32 0, !dbg !8393
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !8395
  %17 = icmp slt i32 %refCount1.i, 2, !dbg !8396
  br i1 %17, label %freeObject.i, label %leave.i, !dbg !8396

freeObject.i:                                     ; preds = %clear.element.contents
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %value.i.i) #5, !dbg !8397
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %value.i.i) #5, !dbg !8398
  br label %Tcl_DecrRefCount.exit, !dbg !8399

leave.i:                                          ; preds = %clear.element.contents
  %18 = add nsw i32 %refCount1.i, -1, !dbg !8395
  store i32 %18, i32* %refCount.i, align 4, !dbg !8400
  br label %Tcl_DecrRefCount.exit, !dbg !8401

Tcl_DecrRefCount.exit:                            ; preds = %leave.i, %freeObject.i
  store %Tcl_Obj* null, %Tcl_Obj** %value.ptr.i.i, align 8, !dbg !8402
  %flags1.i.i14.pre = load i32, i32* %flags.ptr.i.i, align 4, !dbg !8404
  br label %consider.element.traces, !dbg !8407

consider.element.traces:                          ; preds = %Tcl_DecrRefCount.exit, %loop.body
  %flags1.i.i14 = phi i32 [ %flags1.i.i14.pre, %Tcl_DecrRefCount.exit ], [ %flags.i.i, %loop.body ], !dbg !8404
  %19 = or i32 %flags1.i.i14, 8, !dbg !8404
  store i32 %19, i32* %flags.ptr.i.i, align 4, !dbg !8404
  %20 = and i32 %flags1.i.i14, 2160, !dbg !8408
  %21 = icmp eq i32 %20, 0, !dbg !8408
  br i1 %21, label %clear.element, label %handle.element.traces, !dbg !8411

handle.element.traces:                            ; preds = %consider.element.traces
  %22 = and i32 %flags1.i.i14, 64, !dbg !8412
  %23 = icmp eq i32 %22, 0, !dbg !8412
  br i1 %23, label %squelch.element.traces, label %call.element.traces, !dbg !8415

call.element.traces:                              ; preds = %handle.element.traces
  %entry.i = getelementptr %Var, %Var* %elPtr.035, i64 1, i32 1, !dbg !8416
  %key.ptr.i = getelementptr %Tcl_Obj*, %Tcl_Obj** %entry.i, i64 4, !dbg !8418
  %key2.i = load %Tcl_Obj*, %Tcl_Obj** %key.ptr.i, align 8, !dbg !8418
  %24 = and i32 %19, -8193, !dbg !8419
  store i32 %24, i32* %flags.ptr.i.i, align 4, !dbg !8419
  %str = tail call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %part1Ptr), !dbg !8421
  %str2 = tail call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %key2.i), !dbg !8421
  %code = tail call i32 @TclCallVarTraces(%Interp* nocapture nonnull %interp, %Var* nocapture nonnull null, %Var* nocapture nonnull %elPtr.035, i8* nocapture nonnull %str, i8* nocapture nonnull %str2, i32 %flags, i32 0), !dbg !8421
  br label %squelch.element.traces, !dbg !8422

squelch.element.traces:                           ; preds = %handle.element.traces, %call.element.traces
  %key = bitcast %Var* %elPtr.035 to i8*, !dbg !8423
  %tPtr = tail call %HashEntry* @Tcl_FindHashEntry(%HashTable* noalias nocapture nonnull %varTraces, i8* noalias nocapture nonnull readonly %key), !dbg !8423
  %clientData.ptr = getelementptr %HashEntry, %HashEntry* %tPtr, i64 0, i32 3, !dbg !8424
  %25 = bitcast i8** %clientData.ptr to %VarTrace**, !dbg !8424
  %clientData8 = load %VarTrace*, %VarTrace** %25, align 8, !dbg !8424
  %26 = icmp eq %VarTrace* %clientData8, null, !dbg !8425
  br i1 %26, label %clear.element.traces.active, label %squelch.element.traces.body, !dbg !8425

squelch.element.traces.body:                      ; preds = %squelch.element.traces, %squelch.element.traces.body
  %.in31 = phi %VarTrace* [ %nextPtr, %squelch.element.traces.body ], [ %clientData8, %squelch.element.traces ]
  %27 = bitcast %VarTrace* %.in31 to i8*, !dbg !8383
  %nextPtr.ptr = getelementptr %VarTrace, %VarTrace* %.in31, i64 0, i32 3, !dbg !8426
  %nextPtr = load %VarTrace*, %VarTrace** %nextPtr.ptr, align 8, !dbg !8426
  store %VarTrace* null, %VarTrace** %nextPtr.ptr, align 8, !dbg !8427
  tail call void @Tcl_EventuallyFree(i8* nonnull %27, void (i8*)* nonnull inttoptr (i32 3 to void (i8*)*)) #5, !dbg !8428
  %28 = icmp eq %VarTrace* %nextPtr, null, !dbg !8425
  br i1 %28, label %clear.element.traces.active, label %squelch.element.traces.body, !dbg !8425

clear.element.traces.active:                      ; preds = %squelch.element.traces.body, %squelch.element.traces
  tail call void @Tcl_DeleteHashEntry(%HashEntry* nonnull %tPtr), !dbg !8430
  %flags1.i26 = load i32, i32* %flags.ptr.i.i, align 4, !dbg !8431
  %29 = and i32 %flags1.i26, -2161, !dbg !8431
  store i32 %29, i32* %flags.ptr.i.i, align 4, !dbg !8431
  %activePtr.032 = load %ActiveVarTrace*, %ActiveVarTrace** %activeVarTracePtr.ptr, align 8, !dbg !8383
  %30 = icmp eq %ActiveVarTrace* %activePtr.032, null, !dbg !8433
  br i1 %30, label %clear.element, label %clear.element.traces.active.body, !dbg !8433

clear.element.traces.active.body:                 ; preds = %clear.element.traces.active, %clear.element.traces.active.next1
  %activePtr.033 = phi %ActiveVarTrace* [ %activePtr.0, %clear.element.traces.active.next1 ], [ %activePtr.032, %clear.element.traces.active ]
  %varPtr.ptr = getelementptr %ActiveVarTrace, %ActiveVarTrace* %activePtr.033, i64 0, i32 0, !dbg !8434
  %varPtr5 = load %Var*, %Var** %varPtr.ptr, align 8, !dbg !8434
  %31 = icmp eq %Var* %varPtr5, %elPtr.035, !dbg !8435
  br i1 %31, label %clear.element.traces.active.next, label %clear.element.traces.active.next1, !dbg !8435

clear.element.traces.active.next:                 ; preds = %clear.element.traces.active.body
  %nextTracePtr = getelementptr %ActiveVarTrace, %ActiveVarTrace* %activePtr.033, i64 0, i32 2, !dbg !8436
  store %VarTrace* null, %VarTrace** %nextTracePtr, align 8, !dbg !8436
  br label %clear.element.traces.active.next1, !dbg !8437

clear.element.traces.active.next1:                ; preds = %clear.element.traces.active.next, %clear.element.traces.active.body
  %nextPtr.ptr6 = getelementptr %ActiveVarTrace, %ActiveVarTrace* %activePtr.033, i64 0, i32 1, !dbg !8438
  %activePtr.0 = load %ActiveVarTrace*, %ActiveVarTrace** %nextPtr.ptr6, align 8, !dbg !8383
  %32 = icmp eq %ActiveVarTrace* %activePtr.0, null, !dbg !8433
  br i1 %32, label %clear.element.loopexit, label %clear.element.traces.active.body, !dbg !8433

clear.element.loopexit:                           ; preds = %clear.element.traces.active.next1
  %flags1.i.pre = load i32, i32* %flags.ptr.i.i, align 4, !dbg !8439
  br label %clear.element, !dbg !8439

clear.element:                                    ; preds = %clear.element.loopexit, %clear.element.traces.active, %consider.element.traces
  %flags1.i = phi i32 [ %flags1.i.pre, %clear.element.loopexit ], [ %29, %clear.element.traces.active ], [ %19, %consider.element.traces ], !dbg !8439
  %33 = and i32 %flags1.i, -4, !dbg !8439
  store i32 %33, i32* %flags.ptr.i.i, align 4, !dbg !8439
  store %Tcl_Obj* null, %Tcl_Obj** %value.ptr.i.i, align 8, !dbg !8441
  %34 = and i32 %flags1.i, 128, !dbg !8442
  %35 = icmp eq i32 %34, 0, !dbg !8442
  br i1 %35, label %var.clearNamespaceVar.exit, label %"2.i", !dbg !8445

"2.i":                                            ; preds = %clear.element
  %36 = and i32 %flags1.i, -132, !dbg !8446
  store i32 %36, i32* %flags.ptr.i.i, align 4, !dbg !8446
  %37 = and i32 %flags1.i, 4, !dbg !8448
  %38 = icmp eq i32 %37, 0, !dbg !8448
  br i1 %38, label %var.clearNamespaceVar.exit, label %"3.i", !dbg !8451

"3.i":                                            ; preds = %"2.i"
  %39 = getelementptr inbounds %Var, %Var* %elPtr.035, i64 1, i32 0, !dbg !8452
  %40 = load i32, i32* %39, align 4, !dbg !8454
  %41 = add i32 %40, -1, !dbg !8454
  store i32 %41, i32* %39, align 4, !dbg !8454
  br label %var.clearNamespaceVar.exit, !dbg !8455

var.clearNamespaceVar.exit:                       ; preds = %clear.element, %"2.i", %"3.i"
  %hPtr.i15 = call %HashEntry* @Tcl_NextHashEntry(%HashSearch* nocapture nonnull %search) #5, !dbg !8456
  %42 = icmp eq %HashEntry* %hPtr.i15, null, !dbg !8458
  %ptr1.i.i16 = getelementptr %HashEntry, %HashEntry* %hPtr.i15, i64 -1, i32 2, !dbg !8458
  %var.i.i17 = bitcast i8** %ptr1.i.i16 to %Var*, !dbg !8458
  %43 = select i1 %42, %Var* null, %Var* %var.i.i17, !dbg !8458
  %44 = icmp eq %Var* %43, null, !dbg !8382
  br i1 %44, label %loop.done, label %loop.body, !dbg !8382

loop.done:                                        ; preds = %var.clearNamespaceVar.exit, %var.deleteSearches.exit
  tail call void @Tcl_DeleteHashTable(%HashTable* nonnull %table.i) #5, !dbg !8459
  %ptr.i = bitcast %VarHashTable* %value1.i to i8*, !dbg !8461
  tail call void @Tcl_Free(i8* nonnull %ptr.i) #5, !dbg !8461
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* %ptr.i) #5, !dbg !8461
  ret void, !dbg !8462
}

; Function Attrs: alwaysinline nounwind
define hidden void @var.dispose.activetraces(%Interp* noalias nocapture nonnull readonly %interp, %Var* noalias nonnull readnone %varPtr, %VarTrace* noalias %tracePtr) local_unnamed_addr #6 !dbg !8463 {
enter:
  %0 = icmp eq %VarTrace* %tracePtr, null, !dbg !8470
  br i1 %0, label %unlinkActive, label %traceBody, !dbg !8470

traceBody:                                        ; preds = %enter, %traceBody
  %store.08 = phi %VarTrace* [ %nextPtr, %traceBody ], [ %tracePtr, %enter ]
  %nextPtr.ptr = getelementptr %VarTrace, %VarTrace* %store.08, i64 0, i32 3, !dbg !8471
  %nextPtr = load %VarTrace*, %VarTrace** %nextPtr.ptr, align 8, !dbg !8471
  store %VarTrace* null, %VarTrace** %nextPtr.ptr, align 8, !dbg !8472
  %1 = bitcast %VarTrace* %store.08 to i8*, !dbg !8473
  tail call void @Tcl_EventuallyFree(i8* nonnull %1, void (i8*)* nonnull inttoptr (i32 3 to void (i8*)*)) #5, !dbg !8473
  %2 = icmp eq %VarTrace* %nextPtr, null, !dbg !8470
  br i1 %2, label %unlinkActive, label %traceBody, !dbg !8470

unlinkActive:                                     ; preds = %traceBody, %enter
  %activeVarTracePtr.ptr = getelementptr %Interp, %Interp* %interp, i64 0, i32 13, !dbg !8475
  %activeStore.05 = load %ActiveVarTrace*, %ActiveVarTrace** %activeVarTracePtr.ptr, align 8, !dbg !8476
  %3 = icmp eq %ActiveVarTrace* %activeStore.05, null, !dbg !8477
  br i1 %3, label %done, label %activeBody, !dbg !8477

activeBody:                                       ; preds = %unlinkActive, %activeNext
  %activeStore.06 = phi %ActiveVarTrace* [ %activeStore.0, %activeNext ], [ %activeStore.05, %unlinkActive ]
  %varPtr.ptr = getelementptr %ActiveVarTrace, %ActiveVarTrace* %activeStore.06, i64 0, i32 0, !dbg !8478
  %varPtr2 = load %Var*, %Var** %varPtr.ptr, align 8, !dbg !8478
  %4 = icmp eq %Var* %varPtr2, %varPtr, !dbg !8479
  br i1 %4, label %activeBody2, label %activeNext, !dbg !8479

activeBody2:                                      ; preds = %activeBody
  %nextTracePtr = getelementptr %ActiveVarTrace, %ActiveVarTrace* %activeStore.06, i64 0, i32 2, !dbg !8480
  store %VarTrace* null, %VarTrace** %nextTracePtr, align 8, !dbg !8480
  br label %activeNext, !dbg !8481

activeNext:                                       ; preds = %activeBody2, %activeBody
  %nextPtr.ptr3 = getelementptr %ActiveVarTrace, %ActiveVarTrace* %activeStore.06, i64 0, i32 1, !dbg !8482
  %activeStore.0 = load %ActiveVarTrace*, %ActiveVarTrace** %nextPtr.ptr3, align 8, !dbg !8476
  %5 = icmp eq %ActiveVarTrace* %activeStore.0, null, !dbg !8477
  br i1 %5, label %done, label %activeBody, !dbg !8477

done:                                             ; preds = %activeNext, %unlinkActive
  ret void, !dbg !8483
}

; Function Attrs: alwaysinline nounwind
define hidden void @tcl.unset.var.struct(%Var* noalias nonnull %varPtr, %Var* %arrayPtr, %Interp* noalias nocapture nonnull %interp, %Tcl_Obj* nocapture nonnull %part1Ptr, %Tcl_Obj* %part2Ptr, i32 %flags) local_unnamed_addr #6 !dbg !8484 {
enter:
  %search.i = alloca %HashSearch, align 8, !dbg !8494
  %dummyVar = alloca %Var, align 8, !dbg !8496
  %flags.ptr.i.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 0, !dbg !8497
  %flags.i.i = load i32, i32* %flags.ptr.i.i, align 4, !dbg !8497
  %0 = and i32 %flags.i.i, 2160, !dbg !8500
  %1 = icmp ne i32 %0, 0, !dbg !8500
  %2 = icmp eq %Var* %arrayPtr, null, !dbg !8501
  %or.cond = or i1 %2, %1, !dbg !8502
  br i1 %or.cond, label %computed.traced, label %check.array.for.traced1, !dbg !8502

check.array.for.traced1:                          ; preds = %enter
  %flags.ptr.i.i23 = getelementptr %Var, %Var* %arrayPtr, i64 0, i32 0, !dbg !8503
  %flags.i.i24 = load i32, i32* %flags.ptr.i.i23, align 4, !dbg !8503
  %3 = and i32 %flags.i.i24, 64, !dbg !8506
  %4 = icmp ne i32 %3, 0, !dbg !8506
  br label %computed.traced, !dbg !8507

computed.traced:                                  ; preds = %check.array.for.traced1, %enter
  %traced = phi i1 [ %1, %enter ], [ %4, %check.array.for.traced1 ]
  br i1 %2, label %var.deleteSearches.exit, label %testBit.i, !dbg !8508

testBit.i:                                        ; preds = %computed.traced
  %flags.ptr.i.i.i25 = getelementptr %Var, %Var* %arrayPtr, i64 0, i32 0, !dbg !8510
  %flags.i.i.i26 = load i32, i32* %flags.ptr.i.i.i25, align 4, !dbg !8510
  %5 = and i32 %flags.i.i.i26, 16384, !dbg !8513
  %6 = icmp eq i32 %5, 0, !dbg !8513
  br i1 %6, label %var.deleteSearches.exit, label %delete.searches.i, !dbg !8514

delete.searches.i:                                ; preds = %testBit.i
  %varSearches.i = getelementptr %Interp, %Interp* %interp, i64 0, i32 61, !dbg !8515
  %key.i27 = bitcast %Var* %arrayPtr to i8*, !dbg !8516
  %sPtr.i = tail call %HashEntry* @Tcl_FindHashEntry(%HashTable* noalias nocapture nonnull %varSearches.i, i8* noalias nocapture nonnull readonly %key.i27) #5, !dbg !8516
  %clientData.ptr.i28 = getelementptr %HashEntry, %HashEntry* %sPtr.i, i64 0, i32 3, !dbg !8517
  %7 = bitcast i8** %clientData.ptr.i28 to %ArraySearch**, !dbg !8517
  %clientData2.i = load %ArraySearch*, %ArraySearch** %7, align 8, !dbg !8517
  %8 = icmp eq %ArraySearch* %clientData2.i, null, !dbg !8518
  br i1 %8, label %loop.done.i, label %loop.body.i33, !dbg !8518

loop.body.i33:                                    ; preds = %delete.searches.i, %Tcl_DecrRefCount.exit.i36
  %.in.i = phi %ArraySearch* [ %nextPtr.i30, %Tcl_DecrRefCount.exit.i36 ], [ %clientData2.i, %delete.searches.i ]
  %9 = bitcast %ArraySearch* %.in.i to i8*, !dbg !8519
  %nextPtr.ptr.i29 = getelementptr %ArraySearch, %ArraySearch* %.in.i, i64 0, i32 5, !dbg !8520
  %nextPtr.i30 = load %ArraySearch*, %ArraySearch** %nextPtr.ptr.i29, align 8, !dbg !8520
  %name.ptr.i = getelementptr %ArraySearch, %ArraySearch* %.in.i, i64 0, i32 0, !dbg !8521
  %name.i = load %Tcl_Obj*, %Tcl_Obj** %name.ptr.i, align 8, !dbg !8521
  %refCount.i.i31 = getelementptr %Tcl_Obj, %Tcl_Obj* %name.i, i64 0, i32 0, !dbg !8522
  %refCount1.i.i32 = load i32, i32* %refCount.i.i31, align 4, !dbg !8524
  %10 = icmp slt i32 %refCount1.i.i32, 2, !dbg !8525
  br i1 %10, label %freeObject.i.i34, label %leave.i.i35, !dbg !8525

freeObject.i.i34:                                 ; preds = %loop.body.i33
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %name.i) #5, !dbg !8526
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %name.i) #5, !dbg !8527
  br label %Tcl_DecrRefCount.exit.i36, !dbg !8528

leave.i.i35:                                      ; preds = %loop.body.i33
  %11 = add nsw i32 %refCount1.i.i32, -1, !dbg !8524
  store i32 %11, i32* %refCount.i.i31, align 4, !dbg !8529
  br label %Tcl_DecrRefCount.exit.i36, !dbg !8530

Tcl_DecrRefCount.exit.i36:                        ; preds = %leave.i.i35, %freeObject.i.i34
  tail call void @Tcl_Free(i8* nonnull %9) #5, !dbg !8531
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %9) #5, !dbg !8531
  %12 = icmp eq %ArraySearch* %nextPtr.i30, null, !dbg !8518
  br i1 %12, label %loop.done.i, label %loop.body.i33, !dbg !8518

loop.done.i:                                      ; preds = %Tcl_DecrRefCount.exit.i36, %delete.searches.i
  %flags1.i.i37 = load i32, i32* %flags.ptr.i.i.i25, align 4, !dbg !8532
  %13 = and i32 %flags1.i.i37, -16385, !dbg !8532
  store i32 %13, i32* %flags.ptr.i.i.i25, align 4, !dbg !8532
  tail call void @Tcl_DeleteHashEntry(%HashEntry* nonnull %sPtr.i) #5, !dbg !8534
  %flags.i.i.i39.pre = load i32, i32* %flags.ptr.i.i, align 4, !dbg !8535
  br label %var.deleteSearches.exit, !dbg !8539

var.deleteSearches.exit:                          ; preds = %computed.traced, %testBit.i, %loop.done.i
  %flags.i.i.i39 = phi i32 [ %flags.i.i, %computed.traced ], [ %flags.i.i, %testBit.i ], [ %flags.i.i.i39.pre, %loop.done.i ], !dbg !8535
  %14 = and i32 %flags.i.i.i39, 16384, !dbg !8540
  %15 = icmp eq i32 %14, 0, !dbg !8540
  br i1 %15, label %var.deleteSearches.exit60, label %delete.searches.i46, !dbg !8541

delete.searches.i46:                              ; preds = %var.deleteSearches.exit
  %varSearches.i41 = getelementptr %Interp, %Interp* %interp, i64 0, i32 61, !dbg !8542
  %key.i42 = bitcast %Var* %varPtr to i8*, !dbg !8543
  %sPtr.i43 = tail call %HashEntry* @Tcl_FindHashEntry(%HashTable* noalias nocapture nonnull %varSearches.i41, i8* noalias nocapture nonnull readonly %key.i42) #5, !dbg !8543
  %clientData.ptr.i44 = getelementptr %HashEntry, %HashEntry* %sPtr.i43, i64 0, i32 3, !dbg !8544
  %16 = bitcast i8** %clientData.ptr.i44 to %ArraySearch**, !dbg !8544
  %clientData2.i45 = load %ArraySearch*, %ArraySearch** %16, align 8, !dbg !8544
  %17 = icmp eq %ArraySearch* %clientData2.i45, null, !dbg !8545
  br i1 %17, label %loop.done.i59, label %loop.body.i54, !dbg !8545

loop.body.i54:                                    ; preds = %delete.searches.i46, %Tcl_DecrRefCount.exit.i57
  %.in.i47 = phi %ArraySearch* [ %nextPtr.i49, %Tcl_DecrRefCount.exit.i57 ], [ %clientData2.i45, %delete.searches.i46 ]
  %18 = bitcast %ArraySearch* %.in.i47 to i8*, !dbg !8546
  %nextPtr.ptr.i48 = getelementptr %ArraySearch, %ArraySearch* %.in.i47, i64 0, i32 5, !dbg !8547
  %nextPtr.i49 = load %ArraySearch*, %ArraySearch** %nextPtr.ptr.i48, align 8, !dbg !8547
  %name.ptr.i50 = getelementptr %ArraySearch, %ArraySearch* %.in.i47, i64 0, i32 0, !dbg !8548
  %name.i51 = load %Tcl_Obj*, %Tcl_Obj** %name.ptr.i50, align 8, !dbg !8548
  %refCount.i.i52 = getelementptr %Tcl_Obj, %Tcl_Obj* %name.i51, i64 0, i32 0, !dbg !8549
  %refCount1.i.i53 = load i32, i32* %refCount.i.i52, align 4, !dbg !8551
  %19 = icmp slt i32 %refCount1.i.i53, 2, !dbg !8552
  br i1 %19, label %freeObject.i.i55, label %leave.i.i56, !dbg !8552

freeObject.i.i55:                                 ; preds = %loop.body.i54
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %name.i51) #5, !dbg !8553
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %name.i51) #5, !dbg !8554
  br label %Tcl_DecrRefCount.exit.i57, !dbg !8555

leave.i.i56:                                      ; preds = %loop.body.i54
  %20 = add nsw i32 %refCount1.i.i53, -1, !dbg !8551
  store i32 %20, i32* %refCount.i.i52, align 4, !dbg !8556
  br label %Tcl_DecrRefCount.exit.i57, !dbg !8557

Tcl_DecrRefCount.exit.i57:                        ; preds = %leave.i.i56, %freeObject.i.i55
  tail call void @Tcl_Free(i8* nonnull %18) #5, !dbg !8558
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %18) #5, !dbg !8558
  %21 = icmp eq %ArraySearch* %nextPtr.i49, null, !dbg !8545
  br i1 %21, label %loop.done.i59, label %loop.body.i54, !dbg !8545

loop.done.i59:                                    ; preds = %Tcl_DecrRefCount.exit.i57, %delete.searches.i46
  %flags1.i.i58 = load i32, i32* %flags.ptr.i.i, align 4, !dbg !8559
  %22 = and i32 %flags1.i.i58, -16385, !dbg !8559
  store i32 %22, i32* %flags.ptr.i.i, align 4, !dbg !8559
  tail call void @Tcl_DeleteHashEntry(%HashEntry* nonnull %sPtr.i43) #5, !dbg !8561
  br label %var.deleteSearches.exit60, !dbg !8562

var.deleteSearches.exit60:                        ; preds = %var.deleteSearches.exit, %loop.done.i59
  %varPtr5 = load %Var, %Var* %varPtr, align 8, !dbg !8563
  %23 = extractvalue %Var %varPtr5, 0, !dbg !8564
  %24 = and i32 %23, -4237, !dbg !8564
  %.fca.0.gep = getelementptr inbounds %Var, %Var* %dummyVar, i64 0, i32 0, !dbg !8565
  store i32 %24, i32* %.fca.0.gep, align 8, !dbg !8565
  %.fca.1.extract = extractvalue %Var %varPtr5, 1, !dbg !8565
  %.fca.1.gep = getelementptr inbounds %Var, %Var* %dummyVar, i64 0, i32 1, !dbg !8565
  store %Tcl_Obj* %.fca.1.extract, %Tcl_Obj** %.fca.1.gep, align 8, !dbg !8565
  %flags1.i = load i32, i32* %flags.ptr.i.i, align 4, !dbg !8566
  %25 = and i32 %flags1.i, -4, !dbg !8566
  store i32 %25, i32* %flags.ptr.i.i, align 4, !dbg !8566
  %value.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 1, !dbg !8568
  store %Tcl_Obj* null, %Tcl_Obj** %value.i, align 8, !dbg !8568
  br i1 %traced, label %process.traces, label %clear.values, !dbg !8569

process.traces:                                   ; preds = %var.deleteSearches.exit60
  %varTraces = getelementptr %Interp, %Interp* %interp, i64 0, i32 60, !dbg !8570
  %26 = and i32 %23, 2160, !dbg !8571
  %27 = icmp eq i32 %26, 0, !dbg !8571
  br i1 %27, label %call.unset.traces, label %remove.original.traces, !dbg !8574

remove.original.traces:                           ; preds = %process.traces
  %key = bitcast %Var* %varPtr to i8*, !dbg !8575
  %tPtr = tail call %HashEntry* @Tcl_FindHashEntry(%HashTable* noalias nocapture nonnull %varTraces, i8* noalias nocapture nonnull readonly %key), !dbg !8575
  %clientData.ptr = getelementptr %HashEntry, %HashEntry* %tPtr, i64 0, i32 3, !dbg !8576
  %28 = bitcast i8** %clientData.ptr to %VarTrace**, !dbg !8576
  %clientData16 = load %VarTrace*, %VarTrace** %28, align 8, !dbg !8576
  %flags1.i64 = load i32, i32* %flags.ptr.i.i, align 4, !dbg !8577
  %29 = and i32 %flags1.i64, -2161, !dbg !8577
  store i32 %29, i32* %flags.ptr.i.i, align 4, !dbg !8577
  tail call void @Tcl_DeleteHashEntry(%HashEntry* nonnull %tPtr), !dbg !8579
  %30 = and i32 %23, 64, !dbg !8580
  %31 = icmp eq i32 %30, 0, !dbg !8580
  br i1 %31, label %call.unset.traces.check, label %recreate.unset.traces, !dbg !8583

recreate.unset.traces:                            ; preds = %remove.original.traces
  %key6 = bitcast %Var* %dummyVar to i8*, !dbg !8584
  %isNew = alloca i32, align 4, !dbg !8584
  %tPtr7 = call nonnull %HashEntry* @Tcl_CreateHashEntry(%HashTable* noalias nocapture nonnull %varTraces, i8* noalias nonnull %key6, i32* noalias nocapture nonnull %isNew), !dbg !8584
  %clientData8 = getelementptr %HashEntry, %HashEntry* %tPtr7, i64 0, i32 3, !dbg !8585
  %32 = bitcast i8** %clientData8 to %VarTrace**, !dbg !8585
  store %VarTrace* %clientData16, %VarTrace** %32, align 8, !dbg !8585
  %flags.i.i68.pre = load i32, i32* %.fca.0.gep, align 8, !dbg !8586
  br label %call.unset.traces.check, !dbg !8589

call.unset.traces.check:                          ; preds = %remove.original.traces, %recreate.unset.traces
  %flags.i.i68 = phi i32 [ %24, %remove.original.traces ], [ %flags.i.i68.pre, %recreate.unset.traces ], !dbg !8586
  %33 = and i32 %flags.i.i68, 64, !dbg !8590
  %34 = icmp eq i32 %33, 0, !dbg !8590
  br i1 %34, label %call.unset.traces.check2, label %call.unset.traces, !dbg !8591

call.unset.traces.check2:                         ; preds = %call.unset.traces.check
  br i1 %2, label %dispose.active.traces, label %call.unset.traces.check3, !dbg !8592

call.unset.traces.check3:                         ; preds = %call.unset.traces.check2
  %flags.ptr.i.i69 = getelementptr %Var, %Var* %arrayPtr, i64 0, i32 0, !dbg !8593
  %flags.i.i70 = load i32, i32* %flags.ptr.i.i69, align 4, !dbg !8593
  %35 = and i32 %flags.i.i70, 64, !dbg !8596
  %36 = icmp eq i32 %35, 0, !dbg !8596
  br i1 %36, label %dispose.active.traces, label %call.unset.traces, !dbg !8597

call.unset.traces:                                ; preds = %call.unset.traces.check3, %call.unset.traces.check, %process.traces
  %flags1.i72 = phi i32 [ %flags.i.i68, %call.unset.traces.check3 ], [ %flags.i.i68, %call.unset.traces.check ], [ %24, %process.traces ], !dbg !8598
  %37 = and i32 %flags1.i72, -8193, !dbg !8598
  store i32 %37, i32* %.fca.0.gep, align 8, !dbg !8598
  %str = call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %part1Ptr), !dbg !8600
  %38 = icmp eq %Tcl_Obj* %part2Ptr, null, !dbg !8601
  br i1 %38, label %tcl.getornull.exit, label %realObj.i, !dbg !8601

realObj.i:                                        ; preds = %call.unset.traces
  %str.i73 = call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %part2Ptr) #5, !dbg !8603
  br label %tcl.getornull.exit, !dbg !8603

tcl.getornull.exit:                               ; preds = %call.unset.traces, %realObj.i
  %39 = phi i8* [ %str.i73, %realObj.i ], [ null, %call.unset.traces ]
  %40 = and i32 %flags, 3, !dbg !8600
  %41 = or i32 %40, 64, !dbg !8600
  %code = call i32 @TclCallVarTraces(%Interp* nocapture nonnull %interp, %Var* nocapture nonnull %arrayPtr, %Var* nocapture nonnull %dummyVar, i8* nocapture nonnull %str, i8* nocapture %39, i32 %41, i32 0), !dbg !8600
  %flags.i.i75 = load i32, i32* %.fca.0.gep, align 8, !dbg !8604
  %42 = and i32 %flags.i.i75, 2160, !dbg !8607
  %43 = icmp eq i32 %42, 0, !dbg !8607
  br i1 %43, label %clear.values, label %refetch.active.trace, !dbg !8608

refetch.active.trace:                             ; preds = %tcl.getornull.exit
  %key9 = bitcast %Var* %dummyVar to i8*, !dbg !8609
  %tPtr10 = call %HashEntry* @Tcl_FindHashEntry(%HashTable* noalias nocapture nonnull %varTraces, i8* noalias nocapture nonnull readonly %key9), !dbg !8609
  %44 = icmp eq %HashEntry* %tPtr10, null, !dbg !8610
  br i1 %44, label %clear.values, label %refetch.active.trace4, !dbg !8610

refetch.active.trace4:                            ; preds = %refetch.active.trace
  %clientData.ptr11 = getelementptr %HashEntry, %HashEntry* %tPtr10, i64 0, i32 3, !dbg !8611
  %45 = bitcast i8** %clientData.ptr11 to %VarTrace**, !dbg !8611
  %clientData1215 = load %VarTrace*, %VarTrace** %45, align 8, !dbg !8611
  call void @Tcl_DeleteHashEntry(%HashEntry* nonnull %tPtr10), !dbg !8612
  br label %dispose.active.traces, !dbg !8613

dispose.active.traces:                            ; preds = %call.unset.traces.check3, %call.unset.traces.check2, %refetch.active.trace4
  %.0 = phi %VarTrace* [ %clientData1215, %refetch.active.trace4 ], [ %clientData16, %call.unset.traces.check3 ], [ %clientData16, %call.unset.traces.check2 ], !dbg !8614
  %46 = icmp eq %VarTrace* %.0, null, !dbg !8615
  br i1 %46, label %clear.values, label %traceBody.i, !dbg !8615

traceBody.i:                                      ; preds = %dispose.active.traces, %traceBody.i
  %store.08.i = phi %VarTrace* [ %nextPtr.i77, %traceBody.i ], [ %.0, %dispose.active.traces ]
  %nextPtr.ptr.i76 = getelementptr %VarTrace, %VarTrace* %store.08.i, i64 0, i32 3, !dbg !8616
  %nextPtr.i77 = load %VarTrace*, %VarTrace** %nextPtr.ptr.i76, align 8, !dbg !8616, !noalias !8618
  store %VarTrace* null, %VarTrace** %nextPtr.ptr.i76, align 8, !dbg !8621, !noalias !8618
  %47 = bitcast %VarTrace* %store.08.i to i8*, !dbg !8622
  call void @Tcl_EventuallyFree(i8* nonnull %47, void (i8*)* nonnull inttoptr (i32 3 to void (i8*)*)) #5, !dbg !8622, !noalias !8618
  %48 = icmp eq %VarTrace* %nextPtr.i77, null, !dbg !8624
  br i1 %48, label %unlinkActive.i, label %traceBody.i, !dbg !8624

unlinkActive.i:                                   ; preds = %traceBody.i
  %activeVarTracePtr.ptr.i78 = getelementptr %Interp, %Interp* %interp, i64 0, i32 13, !dbg !8625
  %activeStore.05.i = load %ActiveVarTrace*, %ActiveVarTrace** %activeVarTracePtr.ptr.i78, align 8, !dbg !8626, !alias.scope !8618, !noalias !8627
  %49 = icmp eq %ActiveVarTrace* %activeStore.05.i, null, !dbg !8630
  br i1 %49, label %var.dispose.activetraces.exit, label %activeBody.i, !dbg !8630

activeBody.i:                                     ; preds = %unlinkActive.i, %activeNext.i
  %activeStore.06.i = phi %ActiveVarTrace* [ %activeStore.0.i, %activeNext.i ], [ %activeStore.05.i, %unlinkActive.i ]
  %varPtr.ptr.i79 = getelementptr %ActiveVarTrace, %ActiveVarTrace* %activeStore.06.i, i64 0, i32 0, !dbg !8631
  %varPtr2.i = load %Var*, %Var** %varPtr.ptr.i79, align 8, !dbg !8631, !noalias !8618
  %50 = icmp eq %Var* %varPtr2.i, %varPtr, !dbg !8632
  br i1 %50, label %activeBody2.i, label %activeNext.i, !dbg !8632

activeBody2.i:                                    ; preds = %activeBody.i
  %nextTracePtr.i80 = getelementptr %ActiveVarTrace, %ActiveVarTrace* %activeStore.06.i, i64 0, i32 2, !dbg !8633
  store %VarTrace* null, %VarTrace** %nextTracePtr.i80, align 8, !dbg !8633, !noalias !8618
  br label %activeNext.i, !dbg !8634

activeNext.i:                                     ; preds = %activeBody2.i, %activeBody.i
  %nextPtr.ptr3.i = getelementptr %ActiveVarTrace, %ActiveVarTrace* %activeStore.06.i, i64 0, i32 1, !dbg !8635
  %activeStore.0.i = load %ActiveVarTrace*, %ActiveVarTrace** %nextPtr.ptr3.i, align 8, !dbg !8626, !noalias !8618
  %51 = icmp eq %ActiveVarTrace* %activeStore.0.i, null, !dbg !8630
  br i1 %51, label %var.dispose.activetraces.exit, label %activeBody.i, !dbg !8630

var.dispose.activetraces.exit:                    ; preds = %activeNext.i, %unlinkActive.i
  %flags1.i82 = load i32, i32* %.fca.0.gep, align 8, !dbg !8636
  %52 = and i32 %flags1.i82, -2161, !dbg !8636
  store i32 %52, i32* %.fca.0.gep, align 8, !dbg !8636
  br label %clear.values, !dbg !8638

clear.values:                                     ; preds = %tcl.getornull.exit, %refetch.active.trace, %dispose.active.traces, %var.dispose.activetraces.exit, %var.deleteSearches.exit60
  %flags.i.i84 = load i32, i32* %.fca.0.gep, align 8, !dbg !8639
  %53 = and i32 %flags.i.i84, 3, !dbg !8642
  %54 = icmp eq i32 %53, 0, !dbg !8642
  %value.i.i = load %Tcl_Obj*, %Tcl_Obj** %.fca.1.gep, align 8, !dbg !8643
  %55 = icmp ne %Tcl_Obj* %value.i.i, null, !dbg !8646
  %56 = and i1 %54, %55, !dbg !8647
  %57 = bitcast %Tcl_Obj* %value.i.i to %VarHashTable*, !dbg !8647
  %58 = bitcast %Tcl_Obj* %value.i.i to %Var*, !dbg !8647
  br i1 %56, label %clear.scalar, label %clear.array.test, !dbg !8647

clear.scalar:                                     ; preds = %clear.values
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value.i.i, i64 0, i32 0, !dbg !8648
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !8650
  %59 = icmp slt i32 %refCount1.i, 2, !dbg !8651
  br i1 %59, label %freeObject.i, label %leave.i, !dbg !8651

freeObject.i:                                     ; preds = %clear.scalar
  call void @TclFreeObj(%Tcl_Obj* nonnull %value.i.i) #5, !dbg !8652
  call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %value.i.i) #5, !dbg !8653
  br label %clear.namespace.var, !dbg !8654

leave.i:                                          ; preds = %clear.scalar
  %60 = add nsw i32 %refCount1.i, -1, !dbg !8650
  store i32 %60, i32* %refCount.i, align 4, !dbg !8655
  br label %clear.namespace.var, !dbg !8656

clear.array.test:                                 ; preds = %clear.values
  %61 = and i32 %flags.i.i84, 1, !dbg !8657
  %62 = icmp eq i32 %61, 0, !dbg !8657
  br i1 %62, label %clear.link.test, label %clear.array, !dbg !8660

clear.array:                                      ; preds = %clear.array.test
  %63 = and i32 %flags, 3, !dbg !8661
  %64 = or i32 %63, 64, !dbg !8661
  %65 = bitcast %HashSearch* %search.i to i8*, !dbg !8662
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %65), !dbg !8662
  %66 = and i32 %flags.i.i84, 16384, !dbg !8666
  %67 = icmp eq i32 %66, 0, !dbg !8666
  br i1 %67, label %var.deleteSearches.exit.i, label %delete.searches.i.i, !dbg !8667

delete.searches.i.i:                              ; preds = %clear.array
  %varSearches.i.i = getelementptr %Interp, %Interp* %interp, i64 0, i32 61, !dbg !8668
  %key.i.i = bitcast %Var* %dummyVar to i8*, !dbg !8669
  %sPtr.i.i = call %HashEntry* @Tcl_FindHashEntry(%HashTable* noalias nocapture nonnull %varSearches.i.i, i8* noalias nocapture nonnull readonly %key.i.i) #5, !dbg !8669, !noalias !8670
  %clientData.ptr.i.i = getelementptr %HashEntry, %HashEntry* %sPtr.i.i, i64 0, i32 3, !dbg !8673
  %68 = bitcast i8** %clientData.ptr.i.i to %ArraySearch**, !dbg !8673
  %clientData2.i.i = load %ArraySearch*, %ArraySearch** %68, align 8, !dbg !8673, !noalias !8674
  %69 = icmp eq %ArraySearch* %clientData2.i.i, null, !dbg !8677
  br i1 %69, label %loop.done.i.i, label %loop.body.i.i, !dbg !8677

loop.body.i.i:                                    ; preds = %delete.searches.i.i, %Tcl_DecrRefCount.exit.i.i
  %.in.i.i = phi %ArraySearch* [ %nextPtr.i.i, %Tcl_DecrRefCount.exit.i.i ], [ %clientData2.i.i, %delete.searches.i.i ]
  %70 = bitcast %ArraySearch* %.in.i.i to i8*, !dbg !8678
  %nextPtr.ptr.i.i = getelementptr %ArraySearch, %ArraySearch* %.in.i.i, i64 0, i32 5, !dbg !8679
  %nextPtr.i.i = load %ArraySearch*, %ArraySearch** %nextPtr.ptr.i.i, align 8, !dbg !8679, !noalias !8674
  %name.ptr.i.i = getelementptr %ArraySearch, %ArraySearch* %.in.i.i, i64 0, i32 0, !dbg !8680
  %name.i.i = load %Tcl_Obj*, %Tcl_Obj** %name.ptr.i.i, align 8, !dbg !8680, !noalias !8674
  %refCount.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %name.i.i, i64 0, i32 0, !dbg !8681
  %refCount1.i.i.i = load i32, i32* %refCount.i.i.i, align 4, !dbg !8683, !noalias !8674
  %71 = icmp slt i32 %refCount1.i.i.i, 2, !dbg !8684
  br i1 %71, label %freeObject.i.i.i, label %leave.i.i.i, !dbg !8684

freeObject.i.i.i:                                 ; preds = %loop.body.i.i
  call void @TclFreeObj(%Tcl_Obj* nonnull %name.i.i) #5, !dbg !8685, !noalias !8674
  call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %name.i.i) #5, !dbg !8686, !noalias !8674
  br label %Tcl_DecrRefCount.exit.i.i, !dbg !8687

leave.i.i.i:                                      ; preds = %loop.body.i.i
  %72 = add nsw i32 %refCount1.i.i.i, -1, !dbg !8683
  store i32 %72, i32* %refCount.i.i.i, align 4, !dbg !8688, !noalias !8674
  br label %Tcl_DecrRefCount.exit.i.i, !dbg !8689

Tcl_DecrRefCount.exit.i.i:                        ; preds = %leave.i.i.i, %freeObject.i.i.i
  call void @Tcl_Free(i8* nonnull %70) #5, !dbg !8690, !noalias !8674
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %70) #5, !dbg !8690, !noalias !8674
  %73 = icmp eq %ArraySearch* %nextPtr.i.i, null, !dbg !8677
  br i1 %73, label %loop.done.i.i, label %loop.body.i.i, !dbg !8677

loop.done.i.i:                                    ; preds = %Tcl_DecrRefCount.exit.i.i, %delete.searches.i.i
  %74 = and i32 %flags.i.i84, -16385, !dbg !8691
  store i32 %74, i32* %.fca.0.gep, align 8, !dbg !8691, !alias.scope !8693, !noalias !8694
  call void @Tcl_DeleteHashEntry(%HashEntry* nonnull %sPtr.i.i) #5, !dbg !8695, !noalias !8674
  %.phi.trans.insert = bitcast %Tcl_Obj** %.fca.1.gep to %VarHashTable**, !dbg !8696
  %value1.i.i.pre = load %VarHashTable*, %VarHashTable** %.phi.trans.insert, align 8, !dbg !8698, !alias.scope !8693, !noalias !8694
  br label %var.deleteSearches.exit.i, !dbg !8699

var.deleteSearches.exit.i:                        ; preds = %clear.array, %loop.done.i.i
  %value1.i.i = phi %VarHashTable* [ %value1.i.i.pre, %loop.done.i.i ], [ %57, %clear.array ], !dbg !8698
  %table.i.i = getelementptr %VarHashTable, %VarHashTable* %value1.i.i, i64 0, i32 0, !dbg !8700
  %hPtr.i.i = call %HashEntry* @Tcl_FirstHashEntry(%HashTable* nonnull readonly %table.i.i, %HashSearch* nocapture nonnull %search.i) #5, !dbg !8702, !noalias !8674
  %75 = icmp eq %HashEntry* %hPtr.i.i, null, !dbg !8703
  %ptr1.i.i.i = getelementptr %HashEntry, %HashEntry* %hPtr.i.i, i64 -1, i32 2, !dbg !8703
  %76 = icmp eq i8** %ptr1.i.i.i, null, !dbg !8704
  %77 = or i1 %75, %76, !dbg !8704
  br i1 %77, label %tcl.unset.var.array.exit, label %loop.body.lr.ph.i, !dbg !8704

loop.body.lr.ph.i:                                ; preds = %var.deleteSearches.exit.i
  %var.i.i.i = bitcast i8** %ptr1.i.i.i to %Var*, !dbg !8703
  %varTraces.i = getelementptr %Interp, %Interp* %interp, i64 0, i32 60, !dbg !8705
  %activeVarTracePtr.ptr.i = getelementptr %Interp, %Interp* %interp, i64 0, i32 13, !dbg !8705
  br label %loop.body.i, !dbg !8704

loop.body.i:                                      ; preds = %var.clearNamespaceVar.exit.i, %loop.body.lr.ph.i
  %elPtr.035.i = phi %Var* [ %var.i.i.i, %loop.body.lr.ph.i ], [ %108, %var.clearNamespaceVar.exit.i ]
  %flags.ptr.i.i.i = getelementptr %Var, %Var* %elPtr.035.i, i64 0, i32 0, !dbg !8706
  %flags.i.i.i = load i32, i32* %flags.ptr.i.i.i, align 4, !dbg !8706, !noalias !8674
  %78 = and i32 %flags.i.i.i, 3, !dbg !8709
  %79 = icmp eq i32 %78, 0, !dbg !8709
  %value.ptr.i.i.i = getelementptr %Var, %Var* %elPtr.035.i, i64 0, i32 1, !dbg !8710
  %value.i.i.i = load %Tcl_Obj*, %Tcl_Obj** %value.ptr.i.i.i, align 8, !dbg !8710, !noalias !8674
  %80 = icmp ne %Tcl_Obj* %value.i.i.i, null, !dbg !8713
  %81 = and i1 %79, %80, !dbg !8714
  br i1 %81, label %clear.element.contents.i, label %consider.element.traces.i, !dbg !8714

clear.element.contents.i:                         ; preds = %loop.body.i
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value.i.i.i, i64 0, i32 0, !dbg !8715
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !8717, !noalias !8674
  %82 = icmp slt i32 %refCount1.i.i, 2, !dbg !8718
  br i1 %82, label %freeObject.i.i, label %leave.i.i, !dbg !8718

freeObject.i.i:                                   ; preds = %clear.element.contents.i
  call void @TclFreeObj(%Tcl_Obj* nonnull %value.i.i.i) #5, !dbg !8719, !noalias !8674
  call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %value.i.i.i) #5, !dbg !8720, !noalias !8674
  br label %Tcl_DecrRefCount.exit.i, !dbg !8721

leave.i.i:                                        ; preds = %clear.element.contents.i
  %83 = add nsw i32 %refCount1.i.i, -1, !dbg !8717
  store i32 %83, i32* %refCount.i.i, align 4, !dbg !8722, !noalias !8674
  br label %Tcl_DecrRefCount.exit.i, !dbg !8723

Tcl_DecrRefCount.exit.i:                          ; preds = %leave.i.i, %freeObject.i.i
  store %Tcl_Obj* null, %Tcl_Obj** %value.ptr.i.i.i, align 8, !dbg !8724, !noalias !8674
  %flags1.i.i14.pre.i = load i32, i32* %flags.ptr.i.i.i, align 4, !dbg !8726, !noalias !8674
  br label %consider.element.traces.i, !dbg !8729

consider.element.traces.i:                        ; preds = %Tcl_DecrRefCount.exit.i, %loop.body.i
  %flags1.i.i14.i = phi i32 [ %flags1.i.i14.pre.i, %Tcl_DecrRefCount.exit.i ], [ %flags.i.i.i, %loop.body.i ], !dbg !8726
  %84 = or i32 %flags1.i.i14.i, 8, !dbg !8726
  store i32 %84, i32* %flags.ptr.i.i.i, align 4, !dbg !8726, !noalias !8674
  %85 = and i32 %flags1.i.i14.i, 2160, !dbg !8730
  %86 = icmp eq i32 %85, 0, !dbg !8730
  br i1 %86, label %clear.element.i, label %handle.element.traces.i, !dbg !8733

handle.element.traces.i:                          ; preds = %consider.element.traces.i
  %87 = and i32 %flags1.i.i14.i, 64, !dbg !8734
  %88 = icmp eq i32 %87, 0, !dbg !8734
  br i1 %88, label %squelch.element.traces.i, label %call.element.traces.i, !dbg !8737

call.element.traces.i:                            ; preds = %handle.element.traces.i
  %entry.i.i = getelementptr %Var, %Var* %elPtr.035.i, i64 1, i32 1, !dbg !8738
  %key.ptr.i.i = getelementptr %Tcl_Obj*, %Tcl_Obj** %entry.i.i, i64 4, !dbg !8740
  %key2.i.i = load %Tcl_Obj*, %Tcl_Obj** %key.ptr.i.i, align 8, !dbg !8740, !noalias !8674
  %89 = and i32 %84, -8193, !dbg !8741
  store i32 %89, i32* %flags.ptr.i.i.i, align 4, !dbg !8741, !noalias !8674
  %str.i = call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %part1Ptr) #5, !dbg !8743, !noalias !8744
  %str2.i = call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %key2.i.i) #5, !dbg !8743, !noalias !8674
  %code.i = call i32 @TclCallVarTraces(%Interp* nocapture nonnull %interp, %Var* nocapture nonnull null, %Var* nocapture nonnull %elPtr.035.i, i8* nocapture nonnull %str.i, i8* nocapture nonnull %str2.i, i32 %64, i32 0) #5, !dbg !8743, !noalias !8745
  br label %squelch.element.traces.i, !dbg !8746

squelch.element.traces.i:                         ; preds = %call.element.traces.i, %handle.element.traces.i
  %key.i = bitcast %Var* %elPtr.035.i to i8*, !dbg !8747
  %tPtr.i = call %HashEntry* @Tcl_FindHashEntry(%HashTable* noalias nocapture nonnull %varTraces.i, i8* noalias nocapture nonnull readonly %key.i) #5, !dbg !8747, !noalias !8745
  %clientData.ptr.i = getelementptr %HashEntry, %HashEntry* %tPtr.i, i64 0, i32 3, !dbg !8748
  %90 = bitcast i8** %clientData.ptr.i to %VarTrace**, !dbg !8748
  %clientData8.i = load %VarTrace*, %VarTrace** %90, align 8, !dbg !8748, !noalias !8674
  %91 = icmp eq %VarTrace* %clientData8.i, null, !dbg !8749
  br i1 %91, label %clear.element.traces.active.i, label %squelch.element.traces.body.i, !dbg !8749

squelch.element.traces.body.i:                    ; preds = %squelch.element.traces.i, %squelch.element.traces.body.i
  %.in31.i = phi %VarTrace* [ %nextPtr.i, %squelch.element.traces.body.i ], [ %clientData8.i, %squelch.element.traces.i ]
  %92 = bitcast %VarTrace* %.in31.i to i8*, !dbg !8705
  %nextPtr.ptr.i = getelementptr %VarTrace, %VarTrace* %.in31.i, i64 0, i32 3, !dbg !8750
  %nextPtr.i = load %VarTrace*, %VarTrace** %nextPtr.ptr.i, align 8, !dbg !8750, !noalias !8674
  store %VarTrace* null, %VarTrace** %nextPtr.ptr.i, align 8, !dbg !8751, !noalias !8674
  call void @Tcl_EventuallyFree(i8* nonnull %92, void (i8*)* nonnull inttoptr (i32 3 to void (i8*)*)) #5, !dbg !8752, !noalias !8674
  %93 = icmp eq %VarTrace* %nextPtr.i, null, !dbg !8749
  br i1 %93, label %clear.element.traces.active.i, label %squelch.element.traces.body.i, !dbg !8749

clear.element.traces.active.i:                    ; preds = %squelch.element.traces.body.i, %squelch.element.traces.i
  call void @Tcl_DeleteHashEntry(%HashEntry* nonnull %tPtr.i) #5, !dbg !8754, !noalias !8674
  %flags1.i26.i = load i32, i32* %flags.ptr.i.i.i, align 4, !dbg !8755, !noalias !8674
  %94 = and i32 %flags1.i26.i, -2161, !dbg !8755
  store i32 %94, i32* %flags.ptr.i.i.i, align 4, !dbg !8755, !noalias !8674
  %activePtr.032.i = load %ActiveVarTrace*, %ActiveVarTrace** %activeVarTracePtr.ptr.i, align 8, !dbg !8705, !alias.scope !8757, !noalias !8745
  %95 = icmp eq %ActiveVarTrace* %activePtr.032.i, null, !dbg !8758
  br i1 %95, label %clear.element.i, label %clear.element.traces.active.body.i, !dbg !8758

clear.element.traces.active.body.i:               ; preds = %clear.element.traces.active.i, %clear.element.traces.active.next1.i
  %activePtr.033.i = phi %ActiveVarTrace* [ %activePtr.0.i, %clear.element.traces.active.next1.i ], [ %activePtr.032.i, %clear.element.traces.active.i ]
  %varPtr.ptr.i = getelementptr %ActiveVarTrace, %ActiveVarTrace* %activePtr.033.i, i64 0, i32 0, !dbg !8759
  %varPtr5.i = load %Var*, %Var** %varPtr.ptr.i, align 8, !dbg !8759, !noalias !8674
  %96 = icmp eq %Var* %varPtr5.i, %elPtr.035.i, !dbg !8760
  br i1 %96, label %clear.element.traces.active.next.i, label %clear.element.traces.active.next1.i, !dbg !8760

clear.element.traces.active.next.i:               ; preds = %clear.element.traces.active.body.i
  %nextTracePtr.i = getelementptr %ActiveVarTrace, %ActiveVarTrace* %activePtr.033.i, i64 0, i32 2, !dbg !8761
  store %VarTrace* null, %VarTrace** %nextTracePtr.i, align 8, !dbg !8761, !noalias !8674
  br label %clear.element.traces.active.next1.i, !dbg !8762

clear.element.traces.active.next1.i:              ; preds = %clear.element.traces.active.next.i, %clear.element.traces.active.body.i
  %nextPtr.ptr6.i = getelementptr %ActiveVarTrace, %ActiveVarTrace* %activePtr.033.i, i64 0, i32 1, !dbg !8763
  %activePtr.0.i = load %ActiveVarTrace*, %ActiveVarTrace** %nextPtr.ptr6.i, align 8, !dbg !8705, !noalias !8674
  %97 = icmp eq %ActiveVarTrace* %activePtr.0.i, null, !dbg !8758
  br i1 %97, label %clear.element.loopexit.i, label %clear.element.traces.active.body.i, !dbg !8758

clear.element.loopexit.i:                         ; preds = %clear.element.traces.active.next1.i
  %flags1.i.pre.i = load i32, i32* %flags.ptr.i.i.i, align 4, !dbg !8764, !noalias !8674
  br label %clear.element.i, !dbg !8764

clear.element.i:                                  ; preds = %clear.element.loopexit.i, %clear.element.traces.active.i, %consider.element.traces.i
  %flags1.i.i = phi i32 [ %flags1.i.pre.i, %clear.element.loopexit.i ], [ %94, %clear.element.traces.active.i ], [ %84, %consider.element.traces.i ], !dbg !8764
  %98 = and i32 %flags1.i.i, -4, !dbg !8764
  store i32 %98, i32* %flags.ptr.i.i.i, align 4, !dbg !8764, !noalias !8674
  store %Tcl_Obj* null, %Tcl_Obj** %value.ptr.i.i.i, align 8, !dbg !8766, !noalias !8674
  %99 = and i32 %flags1.i.i, 128, !dbg !8767
  %100 = icmp eq i32 %99, 0, !dbg !8767
  br i1 %100, label %var.clearNamespaceVar.exit.i, label %"2.i.i", !dbg !8770

"2.i.i":                                          ; preds = %clear.element.i
  %101 = and i32 %flags1.i.i, -132, !dbg !8771
  store i32 %101, i32* %flags.ptr.i.i.i, align 4, !dbg !8771, !noalias !8674
  %102 = and i32 %flags1.i.i, 4, !dbg !8773
  %103 = icmp eq i32 %102, 0, !dbg !8773
  br i1 %103, label %var.clearNamespaceVar.exit.i, label %"3.i.i", !dbg !8776

"3.i.i":                                          ; preds = %"2.i.i"
  %104 = getelementptr inbounds %Var, %Var* %elPtr.035.i, i64 1, i32 0, !dbg !8777
  %105 = load i32, i32* %104, align 4, !dbg !8779, !noalias !8674
  %106 = add i32 %105, -1, !dbg !8779
  store i32 %106, i32* %104, align 4, !dbg !8779, !noalias !8674
  br label %var.clearNamespaceVar.exit.i, !dbg !8780

var.clearNamespaceVar.exit.i:                     ; preds = %"3.i.i", %"2.i.i", %clear.element.i
  %hPtr.i15.i = call %HashEntry* @Tcl_NextHashEntry(%HashSearch* nocapture nonnull %search.i) #5, !dbg !8781, !noalias !8674
  %107 = icmp eq %HashEntry* %hPtr.i15.i, null, !dbg !8783
  %ptr1.i.i16.i = getelementptr %HashEntry, %HashEntry* %hPtr.i15.i, i64 -1, i32 2, !dbg !8783
  %var.i.i17.i = bitcast i8** %ptr1.i.i16.i to %Var*, !dbg !8783
  %108 = select i1 %107, %Var* null, %Var* %var.i.i17.i, !dbg !8783
  %109 = icmp eq %Var* %108, null, !dbg !8704
  br i1 %109, label %tcl.unset.var.array.exit, label %loop.body.i, !dbg !8704

tcl.unset.var.array.exit:                         ; preds = %var.clearNamespaceVar.exit.i, %var.deleteSearches.exit.i
  call void @Tcl_DeleteHashTable(%HashTable* nonnull %table.i.i) #5, !dbg !8784, !noalias !8674
  %ptr.i.i = bitcast %VarHashTable* %value1.i.i to i8*, !dbg !8786
  call void @Tcl_Free(i8* nonnull %ptr.i.i) #5, !dbg !8786, !noalias !8674
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %ptr.i.i) #5, !dbg !8786, !noalias !8674
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %65), !dbg !8787
  br label %clear.namespace.var, !dbg !8788

clear.link.test:                                  ; preds = %clear.array.test
  %110 = and i32 %flags.i.i84, 2, !dbg !8789
  %111 = icmp eq i32 %110, 0, !dbg !8789
  br i1 %111, label %clear.namespace.var, label %clear.link, !dbg !8792

clear.link:                                       ; preds = %clear.link.test
  %flags.ptr.i.i19 = getelementptr inbounds %Tcl_Obj, %Tcl_Obj* %value.i.i, i64 0, i32 0, !dbg !8793
  %flags.i.i20 = load i32, i32* %flags.ptr.i.i19, align 4, !dbg !8793
  %112 = and i32 %flags.i.i20, 4, !dbg !8796
  %113 = icmp eq i32 %112, 0, !dbg !8796
  br i1 %113, label %clear.namespace.var, label %clean.linked.variable, !dbg !8797

clean.linked.variable:                            ; preds = %clear.link
  %114 = getelementptr inbounds %Tcl_Obj, %Tcl_Obj* %value.i.i, i64 0, i32 2, !dbg !8798
  %115 = load i32, i32* %114, align 4, !dbg !8800
  %116 = add i32 %115, -1, !dbg !8800
  store i32 %116, i32* %114, align 4, !dbg !8800
  call void @TclCleanupVar(%Var* noalias nocapture nonnull %58, %Var* noalias nocapture null), !dbg !8801
  br label %clear.namespace.var, !dbg !8802

clear.namespace.var:                              ; preds = %clear.link, %clear.link.test, %freeObject.i, %leave.i, %clean.linked.variable, %tcl.unset.var.array.exit
  %flags.i.i18 = load i32, i32* %flags.ptr.i.i, align 4, !dbg !8803
  %117 = and i32 %flags.i.i18, 128, !dbg !8806
  %118 = icmp eq i32 %117, 0, !dbg !8806
  br i1 %118, label %var.clearNamespaceVar.exit, label %"2.i", !dbg !8807

"2.i":                                            ; preds = %clear.namespace.var
  %119 = and i32 %flags.i.i18, -129, !dbg !8808
  store i32 %119, i32* %flags.ptr.i.i, align 4, !dbg !8808
  %120 = and i32 %flags.i.i18, 4, !dbg !8810
  %121 = icmp eq i32 %120, 0, !dbg !8810
  br i1 %121, label %var.clearNamespaceVar.exit, label %"3.i", !dbg !8813

"3.i":                                            ; preds = %"2.i"
  %122 = getelementptr inbounds %Var, %Var* %varPtr, i64 1, i32 0, !dbg !8814
  %123 = load i32, i32* %122, align 4, !dbg !8816
  %124 = add i32 %123, -1, !dbg !8816
  store i32 %124, i32* %122, align 4, !dbg !8816
  br label %var.clearNamespaceVar.exit, !dbg !8817

var.clearNamespaceVar.exit:                       ; preds = %clear.namespace.var, %"2.i", %"3.i"
  ret void, !dbg !8818
}

; Function Attrs: alwaysinline nounwind
define hidden i32 @tcl.unset.var.ptr(%Interp* noalias nocapture nonnull %interp, %Var* noalias nocapture nonnull %varPtr, %Var* noalias %arrayPtr, %Tcl_Obj* nocapture nonnull %part1Ptr, %Tcl_Obj* nocapture %part2Ptr, i32 %flags) local_unnamed_addr #6 !dbg !8819 {
enter:
  %flags.ptr.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 0, !dbg !8829
  %flags1.i = load i32, i32* %flags.ptr.i, align 4, !dbg !8829, !alias.scope !8831, !noalias !8834
  %0 = icmp eq %Var* %arrayPtr, null, !dbg !8836
  %1 = and i32 %flags, 12, !dbg !8837
  %2 = or i32 %flags1.i, %1, !dbg !8838
  %3 = icmp eq i32 %2, 0, !dbg !8838
  %4 = and i1 %0, %3, !dbg !8838
  br i1 %4, label %unset.fast, label %unset.slow, !dbg !8839

unset.fast:                                       ; preds = %enter
  %value.ptr.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 1, !dbg !8840
  %value.i = load %Tcl_Obj*, %Tcl_Obj** %value.ptr.i, align 8, !dbg !8840
  %5 = icmp eq %Tcl_Obj* %value.i, null, !dbg !8842
  br i1 %5, label %unset.slow, label %unset.fast.done, !dbg !8842

unset.fast.done:                                  ; preds = %unset.fast
  store %Tcl_Obj* null, %Tcl_Obj** %value.ptr.i, align 8, !dbg !8843
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value.i, i64 0, i32 0, !dbg !8845
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !8848
  %6 = icmp slt i32 %refCount1.i.i, 2, !dbg !8849
  br i1 %6, label %freeObject.i.i, label %leave.i.i, !dbg !8849

freeObject.i.i:                                   ; preds = %unset.fast.done
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %value.i) #5, !dbg !8850
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %value.i) #5, !dbg !8851
  br label %tcl.dropReference.exit, !dbg !8852

leave.i.i:                                        ; preds = %unset.fast.done
  %7 = add nsw i32 %refCount1.i.i, -1, !dbg !8848
  store i32 %7, i32* %refCount.i.i, align 4, !dbg !8853
  br label %tcl.dropReference.exit, !dbg !8854

tcl.dropReference.exit:                           ; preds = %freeObject.i.i, %leave.i.i
  ret i32 0, !dbg !8855

unset.slow:                                       ; preds = %unset.fast, %enter
  %code = tail call i32 @TclPtrUnsetVar(%Interp* noalias nocapture nonnull %interp, %Var* noalias nocapture nonnull %varPtr, %Var* noalias nocapture %arrayPtr, %Tcl_Obj* nocapture nonnull %part1Ptr, %Tcl_Obj* nocapture %part2Ptr, i32 %flags), !dbg !8856
  ret i32 %code, !dbg !8856
}

; Function Attrs: alwaysinline nounwind
define hidden { i1, %Tcl_Obj* } @tcl.read.global.ns(%Namespace* nonnull %ns, %Tcl_Obj* nonnull %varname, i32* nocapture nonnull %ecvar) local_unnamed_addr #6 !dbg !8857 {
enter:
  %0 = alloca %Var*, align 8, !dbg !8865
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !8866, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %varFramePtr.ptr = getelementptr %Interp, %Interp* %interp, i64 0, i32 12, !dbg !8867
  %varFramePtr = load %CallFrame*, %CallFrame** %varFramePtr.ptr, align 8, !dbg !8867
  %nsPtr = getelementptr %CallFrame, %CallFrame* %varFramePtr, i64 0, i32 0, !dbg !8867
  %savedNs = load %Namespace*, %Namespace** %nsPtr, align 8, !dbg !8868
  store %Namespace* %ns, %Namespace** %nsPtr, align 8, !dbg !8869
  %varPtr = call %Var* @TclObjLookupVar(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %varname, i8* noalias nocapture readonly null, i32 262658, i8* noalias nocapture nonnull readonly getelementptr inbounds ([7 x i8], [7 x i8]* @string.constant.47, i64 0, i64 0), i32 1, i32 1, %Var** noalias nocapture nonnull %0), !dbg !8870
  store %Namespace* %savedNs, %Namespace** %nsPtr, align 8, !dbg !8871
  %1 = icmp ne %Var* %varPtr, null, !dbg !8872
  %2 = tail call i1 @llvm.expect.i1(i1 %1, i1 true), !dbg !8872
  br i1 %2, label %gotVar, label %fail, !dbg !8872

gotVar:                                           ; preds = %enter
  %flags.ptr.i.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 0, !dbg !8873
  %flags1.i.i = load i32, i32* %flags.ptr.i.i, align 4, !dbg !8873, !alias.scope !8876, !noalias !8879
  %3 = icmp eq i32 %flags1.i.i, 0, !dbg !8881
  br i1 %3, label %get.fast.i, label %get.slow.i, !dbg !8882

get.fast.i:                                       ; preds = %gotVar
  %value.ptr.i.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 1, !dbg !8883
  %value.i.i = load %Tcl_Obj*, %Tcl_Obj** %value.ptr.i.i, align 8, !dbg !8883, !alias.scope !8876, !noalias !8879
  %4 = icmp eq %Tcl_Obj* %value.i.i, null, !dbg !8885
  br i1 %4, label %get.slow.i, label %tcl.read.var.ptr.exit, !dbg !8885

get.slow.i:                                       ; preds = %get.fast.i, %gotVar
  %objPtr.i = tail call %Tcl_Obj* @TclPtrGetVar(%Interp* noalias nocapture nonnull %interp, %Var* noalias nocapture nonnull %varPtr, %Var* noalias nocapture null, %Tcl_Obj* nocapture nonnull %varname, %Tcl_Obj* nocapture null, i32 512) #5, !dbg !8886
  br label %tcl.read.var.ptr.exit, !dbg !8886

tcl.read.var.ptr.exit:                            ; preds = %get.fast.i, %get.slow.i
  %5 = phi %Tcl_Obj* [ %objPtr.i, %get.slow.i ], [ %value.i.i, %get.fast.i ]
  %6 = icmp ne %Tcl_Obj* %5, null, !dbg !8887
  %7 = tail call i1 @llvm.expect.i1(i1 %6, i1 true), !dbg !8887
  br i1 %7, label %gotValue, label %fail, !dbg !8887

gotValue:                                         ; preds = %tcl.read.var.ptr.exit
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %5, i64 0, i32 0, !dbg !8888
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !8891
  %8 = add nsw i32 %refCount1.i.i, 1, !dbg !8891
  store i32 %8, i32* %refCount.i.i, align 4, !dbg !8891
  %9 = insertvalue { i1, %Tcl_Obj* } { i1 false, %Tcl_Obj* undef }, %Tcl_Obj* %5, 1, !dbg !8892
  ret { i1, %Tcl_Obj* } %9, !dbg !8892

fail:                                             ; preds = %tcl.read.var.ptr.exit, %enter
  store i32 1, i32* %ecvar, align 4, !dbg !8893
  ret { i1, %Tcl_Obj* } { i1 true, %Tcl_Obj* undef }, !dbg !8894
}

; Function Attrs: alwaysinline nounwind
define hidden { i1, %Tcl_Obj* } @tcl.read.global(%Tcl_Obj* nocapture nonnull %nsname, %Tcl_Obj* nonnull %varname, i32* nocapture nonnull %ecvar) local_unnamed_addr #6 !dbg !8895 {
enter:
  %0 = alloca %Var*, align 8, !dbg !8902
  %1 = alloca %Namespace*, align 8, !dbg !8904
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !8905, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %code = call i32 @TclGetNamespaceFromObj(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %nsname, %Namespace** noalias nocapture nonnull %1), !dbg !8906
  %2 = icmp eq i32 %code, 0, !dbg !8907
  %3 = tail call i1 @llvm.expect.i1(i1 %2, i1 true), !dbg !8907
  br i1 %3, label %gotNS, label %fail, !dbg !8907

gotNS:                                            ; preds = %enter
  %4 = load %Namespace*, %Namespace** %1, align 8, !dbg !8908, !nonnull !3
  %5 = bitcast %Var** %0 to i8*, !dbg !8909
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5), !dbg !8909
  %varFramePtr.ptr.i = getelementptr %Interp, %Interp* %interp, i64 0, i32 12, !dbg !8910
  %varFramePtr.i = load %CallFrame*, %CallFrame** %varFramePtr.ptr.i, align 8, !dbg !8910
  %nsPtr.i = getelementptr %CallFrame, %CallFrame* %varFramePtr.i, i64 0, i32 0, !dbg !8910
  %savedNs.i = load %Namespace*, %Namespace** %nsPtr.i, align 8, !dbg !8911
  store %Namespace* %4, %Namespace** %nsPtr.i, align 8, !dbg !8912
  %varPtr.i = call %Var* @TclObjLookupVar(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %varname, i8* noalias nocapture readonly null, i32 262658, i8* noalias nocapture nonnull readonly getelementptr inbounds ([7 x i8], [7 x i8]* @string.constant.47, i64 0, i64 0), i32 1, i32 1, %Var** noalias nocapture nonnull %0) #5, !dbg !8913
  store %Namespace* %savedNs.i, %Namespace** %nsPtr.i, align 8, !dbg !8914
  %6 = icmp ne %Var* %varPtr.i, null, !dbg !8915
  %7 = tail call i1 @llvm.expect.i1(i1 %6, i1 true) #5, !dbg !8915
  br i1 %7, label %gotVar.i, label %fail.i, !dbg !8915

gotVar.i:                                         ; preds = %gotNS
  %flags.ptr.i.i.i = getelementptr %Var, %Var* %varPtr.i, i64 0, i32 0, !dbg !8916
  %flags1.i.i.i = load i32, i32* %flags.ptr.i.i.i, align 4, !dbg !8916, !alias.scope !8919, !noalias !8922
  %8 = icmp eq i32 %flags1.i.i.i, 0, !dbg !8924
  br i1 %8, label %get.fast.i.i, label %get.slow.i.i, !dbg !8925

get.fast.i.i:                                     ; preds = %gotVar.i
  %value.ptr.i.i.i = getelementptr %Var, %Var* %varPtr.i, i64 0, i32 1, !dbg !8926
  %value.i.i.i = load %Tcl_Obj*, %Tcl_Obj** %value.ptr.i.i.i, align 8, !dbg !8926, !alias.scope !8919, !noalias !8922
  %9 = icmp eq %Tcl_Obj* %value.i.i.i, null, !dbg !8928
  br i1 %9, label %get.slow.i.i, label %tcl.read.var.ptr.exit.i, !dbg !8928

get.slow.i.i:                                     ; preds = %get.fast.i.i, %gotVar.i
  %objPtr.i.i = tail call %Tcl_Obj* @TclPtrGetVar(%Interp* noalias nocapture nonnull %interp, %Var* noalias nocapture nonnull %varPtr.i, %Var* noalias nocapture null, %Tcl_Obj* nocapture nonnull %varname, %Tcl_Obj* nocapture null, i32 512) #5, !dbg !8929
  br label %tcl.read.var.ptr.exit.i, !dbg !8929

tcl.read.var.ptr.exit.i:                          ; preds = %get.slow.i.i, %get.fast.i.i
  %10 = phi %Tcl_Obj* [ %objPtr.i.i, %get.slow.i.i ], [ %value.i.i.i, %get.fast.i.i ]
  %11 = icmp ne %Tcl_Obj* %10, null, !dbg !8930
  %12 = tail call i1 @llvm.expect.i1(i1 %11, i1 true) #5, !dbg !8930
  br i1 %12, label %gotValue.i, label %fail.i, !dbg !8930

gotValue.i:                                       ; preds = %tcl.read.var.ptr.exit.i
  %refCount.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %10, i64 0, i32 0, !dbg !8931
  %refCount1.i.i.i = load i32, i32* %refCount.i.i.i, align 4, !dbg !8934
  %13 = add nsw i32 %refCount1.i.i.i, 1, !dbg !8934
  store i32 %13, i32* %refCount.i.i.i, align 4, !dbg !8934
  %14 = insertvalue { i1, %Tcl_Obj* } { i1 false, %Tcl_Obj* undef }, %Tcl_Obj* %10, 1, !dbg !8935
  br label %tcl.read.global.ns.exit, !dbg !8935

fail.i:                                           ; preds = %tcl.read.var.ptr.exit.i, %gotNS
  store i32 1, i32* %ecvar, align 4, !dbg !8936
  br label %tcl.read.global.ns.exit, !dbg !8937

tcl.read.global.ns.exit:                          ; preds = %fail.i, %gotValue.i
  %15 = phi { i1, %Tcl_Obj* } [ %14, %gotValue.i ], [ { i1 true, %Tcl_Obj* undef }, %fail.i ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5), !dbg !8938
  ret { i1, %Tcl_Obj* } %15, !dbg !8939

fail:                                             ; preds = %enter
  store i32 1, i32* %ecvar, align 4, !dbg !8940
  ret { i1, %Tcl_Obj* } { i1 true, %Tcl_Obj* undef }, !dbg !8941
}

; Function Attrs: alwaysinline norecurse nounwind readonly
define hidden %Namespace* @tcl.namespace.global() local_unnamed_addr #15 !dbg !8942 {
enter:
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !8945, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %globalNsPtr.ptr = getelementptr %Interp, %Interp* %interp, i64 0, i32 5, !dbg !8946
  %globalNsPtr = load %Namespace*, %Namespace** %globalNsPtr.ptr, align 8, !dbg !8946
  ret %Namespace* %globalNsPtr, !dbg !8946
}

; Function Attrs: alwaysinline norecurse nounwind readonly
define hidden %Namespace* @tcl.namespace.current() local_unnamed_addr #15 !dbg !8947 {
enter:
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !8948, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %varFramePtr.ptr = getelementptr %Interp, %Interp* %interp, i64 0, i32 12, !dbg !8949
  %varFramePtr = load %CallFrame*, %CallFrame** %varFramePtr.ptr, align 8, !dbg !8949
  %nsPtr.ptr = getelementptr %CallFrame, %CallFrame* %varFramePtr, i64 0, i32 0, !dbg !8950
  %nsPtr = load %Namespace*, %Namespace** %nsPtr.ptr, align 8, !dbg !8950
  ret %Namespace* %nsPtr, !dbg !8950
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, %Tcl_Obj* } @tcl.direct.append(%Tcl_Obj* nocapture nonnull %varname, %Tcl_Obj* %elem, %Tcl_Obj* nonnull %value, i32* nocapture nonnull %ecvar) local_unnamed_addr #6 !dbg !8951 {
enter:
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !8957, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %objPtr = tail call %Tcl_Obj* @Tcl_ObjSetVar2(%Interp* nocapture nonnull %interp, %Tcl_Obj* nocapture nonnull %varname, %Tcl_Obj* %elem, %Tcl_Obj* nonnull %value, i32 516), !dbg !8958
  %0 = icmp eq %Tcl_Obj* %objPtr, null, !dbg !8959
  br i1 %0, label %fail, label %ok, !dbg !8959

ok:                                               ; preds = %enter
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !8960
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !8963
  %1 = add nsw i32 %refCount1.i.i, 1, !dbg !8963
  store i32 %1, i32* %refCount.i.i, align 4, !dbg !8963
  %2 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %objPtr, 1, !dbg !8964
  ret { i32, %Tcl_Obj* } %2, !dbg !8964

fail:                                             ; preds = %enter
  store i32 1, i32* %ecvar, align 4, !dbg !8965
  ret { i32, %Tcl_Obj* } { i32 1, %Tcl_Obj* undef }, !dbg !8966
}

; Function Attrs: alwaysinline nounwind
define hidden i1 @tcl.direct.exists(%Tcl_Obj* nocapture nonnull %varname, %Tcl_Obj* nocapture %elem) local_unnamed_addr #6 !dbg !8967 {
enter:
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !8971, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %objPtr = tail call %Tcl_Obj* @Tcl_ObjGetVar2(%Interp* nocapture nonnull %interp, %Tcl_Obj* nocapture nonnull %varname, %Tcl_Obj* nocapture %elem, i32 0), !dbg !8972
  %0 = icmp ne %Tcl_Obj* %objPtr, null, !dbg !8973
  ret i1 %0, !dbg !8973
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, %Tcl_Obj* } @tcl.direct.get(%Tcl_Obj* nocapture nonnull %varname, %Tcl_Obj* nocapture %elem, i32* nocapture nonnull %ecvar) local_unnamed_addr #6 !dbg !8974 {
enter:
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !8979, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %objPtr = tail call %Tcl_Obj* @Tcl_ObjGetVar2(%Interp* nocapture nonnull %interp, %Tcl_Obj* nocapture nonnull %varname, %Tcl_Obj* nocapture %elem, i32 512), !dbg !8980
  %0 = icmp eq %Tcl_Obj* %objPtr, null, !dbg !8981
  br i1 %0, label %fail, label %ok, !dbg !8981

ok:                                               ; preds = %enter
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !8982
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !8985
  %1 = add nsw i32 %refCount1.i.i, 1, !dbg !8985
  store i32 %1, i32* %refCount.i.i, align 4, !dbg !8985
  %2 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %objPtr, 1, !dbg !8986
  ret { i32, %Tcl_Obj* } %2, !dbg !8986

fail:                                             ; preds = %enter
  store i32 1, i32* %ecvar, align 4, !dbg !8987
  ret { i32, %Tcl_Obj* } { i32 1, %Tcl_Obj* undef }, !dbg !8988
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, %Tcl_Obj* } @tcl.direct.lappend(%Tcl_Obj* nocapture nonnull %varname, %Tcl_Obj* %elem, %Tcl_Obj* nonnull %value, i32* nocapture nonnull %ecvar) local_unnamed_addr #6 !dbg !8989 {
enter:
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !8995, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %objPtr = tail call %Tcl_Obj* @Tcl_ObjSetVar2(%Interp* nocapture nonnull %interp, %Tcl_Obj* nocapture nonnull %varname, %Tcl_Obj* %elem, %Tcl_Obj* nonnull %value, i32 524), !dbg !8996
  %0 = icmp eq %Tcl_Obj* %objPtr, null, !dbg !8997
  br i1 %0, label %fail, label %ok, !dbg !8997

ok:                                               ; preds = %enter
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !8998
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !9001
  %1 = add nsw i32 %refCount1.i.i, 1, !dbg !9001
  store i32 %1, i32* %refCount.i.i, align 4, !dbg !9001
  %2 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %objPtr, 1, !dbg !9002
  ret { i32, %Tcl_Obj* } %2, !dbg !9002

fail:                                             ; preds = %enter
  store i32 1, i32* %ecvar, align 4, !dbg !9003
  ret { i32, %Tcl_Obj* } { i32 1, %Tcl_Obj* undef }, !dbg !9004
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, %Tcl_Obj* } @tcl.direct.lappendList(%Tcl_Obj* nocapture nonnull %varname, %Tcl_Obj* %elem, %Tcl_Obj* nonnull %value, i32* nocapture nonnull %ecvar) local_unnamed_addr #6 !dbg !9005 {
enter:
  %0 = alloca i32, align 4, !dbg !9011
  %1 = alloca i32, align 4, !dbg !9012
  %2 = alloca %Tcl_Obj**, align 8, !dbg !9013
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !9014, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %contents = tail call %Tcl_Obj* @Tcl_ObjGetVar2(%Interp* nocapture nonnull %interp, %Tcl_Obj* nocapture nonnull %varname, %Tcl_Obj* nocapture %elem, i32 0), !dbg !9015
  %3 = icmp eq %Tcl_Obj* %contents, null, !dbg !9016
  br i1 %3, label %create, label %check.list.from.variable, !dbg !9016

check.list.from.variable:                         ; preds = %enter
  %code = call i32 @Tcl_ListObjLength(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %contents, i32* noalias nocapture nonnull %0), !dbg !9017
  %4 = icmp eq i32 %code, 0, !dbg !9018
  br i1 %4, label %check.list.from.value, label %fail, !dbg !9018

check.list.from.value:                            ; preds = %check.list.from.variable
  %len = load i32, i32* %0, align 4, !dbg !9019
  %code1 = call i32 @Tcl_ListObjGetElements(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %value, i32* noalias nocapture nonnull %1, %Tcl_Obj*** noalias nocapture nonnull %2), !dbg !9020
  %5 = icmp eq i32 %code1, 0, !dbg !9021
  br i1 %5, label %unshare, label %fail, !dbg !9021

unshare:                                          ; preds = %check.list.from.value
  %refCountPtr.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %contents, i64 0, i32 0, !dbg !9022
  %refCount.i.i = load i32, i32* %refCountPtr.i.i, align 4, !dbg !9022
  %shared.i = icmp sgt i32 %refCount.i.i, 1, !dbg !9025
  br i1 %shared.i, label %duplicate, label %update, !dbg !9026

duplicate:                                        ; preds = %unshare
  %objPtr = tail call noalias nonnull %Tcl_Obj* @Tcl_DuplicateObj(%Tcl_Obj* nocapture nonnull readonly %contents), !dbg !9027
  %refCount.i10 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !9028
  %refCount1.i11 = load i32, i32* %refCount.i10, align 4, !dbg !9030
  %6 = icmp eq i32 %refCount1.i11, 0, !dbg !9030
  tail call void @llvm.assume(i1 %6) #5, !dbg !9030
  br label %update, !dbg !9031

update:                                           ; preds = %duplicate, %unshare
  %contents2 = phi %Tcl_Obj* [ %contents, %unshare ], [ %objPtr, %duplicate ]
  %objc = load i32, i32* %1, align 4, !dbg !9032
  %objv = load %Tcl_Obj**, %Tcl_Obj*** %2, align 8, !dbg !9033
  %code3 = tail call i32 @Tcl_ListObjReplace(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %contents2, i32 %len, i32 0, i32 %objc, %Tcl_Obj** noalias nocapture nonnull readonly %objv), !dbg !9034
  %refCount.i12 = getelementptr %Tcl_Obj, %Tcl_Obj* %contents2, i64 0, i32 0, !dbg !9035
  %refCount1.i13 = load i32, i32* %refCount.i12, align 4, !dbg !9037
  %7 = add nsw i32 %refCount1.i13, 1, !dbg !9037
  store i32 %7, i32* %refCount.i12, align 4, !dbg !9037
  %result = tail call %Tcl_Obj* @Tcl_ObjSetVar2(%Interp* nocapture nonnull %interp, %Tcl_Obj* nocapture nonnull %varname, %Tcl_Obj* %elem, %Tcl_Obj* nonnull %contents2, i32 512), !dbg !9038
  %refCount1.i = load i32, i32* %refCount.i12, align 4, !dbg !9039
  %8 = icmp slt i32 %refCount1.i, 2, !dbg !9041
  br i1 %8, label %freeObject.i, label %leave.i, !dbg !9041

freeObject.i:                                     ; preds = %update
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %contents2) #5, !dbg !9042
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %contents2) #5, !dbg !9043
  br label %Tcl_DecrRefCount.exit, !dbg !9044

leave.i:                                          ; preds = %update
  %9 = add nsw i32 %refCount1.i, -1, !dbg !9039
  store i32 %9, i32* %refCount.i12, align 4, !dbg !9045
  br label %Tcl_DecrRefCount.exit, !dbg !9046

Tcl_DecrRefCount.exit:                            ; preds = %leave.i, %freeObject.i
  %10 = icmp eq %Tcl_Obj* %result, null, !dbg !9047
  br i1 %10, label %fail, label %ok, !dbg !9047

create:                                           ; preds = %enter
  %code5 = call i32 @Tcl_ListObjLength(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %value, i32* noalias nocapture nonnull %1), !dbg !9048
  %11 = icmp eq i32 %code5, 0, !dbg !9049
  br i1 %11, label %createSet, label %fail, !dbg !9049

createSet:                                        ; preds = %create
  %result7 = tail call %Tcl_Obj* @Tcl_ObjSetVar2(%Interp* nocapture nonnull %interp, %Tcl_Obj* nocapture nonnull %varname, %Tcl_Obj* %elem, %Tcl_Obj* nonnull %value, i32 512), !dbg !9050
  %12 = icmp eq %Tcl_Obj* %result7, null, !dbg !9051
  br i1 %12, label %fail, label %ok, !dbg !9051

ok:                                               ; preds = %Tcl_DecrRefCount.exit, %createSet
  %result8 = phi %Tcl_Obj* [ %result, %Tcl_DecrRefCount.exit ], [ %result7, %createSet ]
  %refCount.i.i9 = getelementptr %Tcl_Obj, %Tcl_Obj* %result8, i64 0, i32 0, !dbg !9052
  %refCount1.i.i = load i32, i32* %refCount.i.i9, align 4, !dbg !9055
  %13 = add nsw i32 %refCount1.i.i, 1, !dbg !9055
  store i32 %13, i32* %refCount.i.i9, align 4, !dbg !9055
  %14 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %result8, 1, !dbg !9056
  ret { i32, %Tcl_Obj* } %14, !dbg !9056

fail:                                             ; preds = %Tcl_DecrRefCount.exit, %createSet, %create, %check.list.from.value, %check.list.from.variable
  store i32 1, i32* %ecvar, align 4, !dbg !9057
  ret { i32, %Tcl_Obj* } { i32 1, %Tcl_Obj* undef }, !dbg !9058
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, %Tcl_Obj* } @tcl.direct.set(%Tcl_Obj* nocapture nonnull %varname, %Tcl_Obj* %elem, %Tcl_Obj* nonnull %value, i32* nocapture nonnull %ecvar) local_unnamed_addr #6 !dbg !9059 {
enter:
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !9065, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %objPtr = tail call %Tcl_Obj* @Tcl_ObjSetVar2(%Interp* nocapture nonnull %interp, %Tcl_Obj* nocapture nonnull %varname, %Tcl_Obj* %elem, %Tcl_Obj* nonnull %value, i32 512), !dbg !9066
  %0 = icmp eq %Tcl_Obj* %objPtr, null, !dbg !9067
  br i1 %0, label %fail, label %ok, !dbg !9067

ok:                                               ; preds = %enter
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !9068
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !9071
  %1 = add nsw i32 %refCount1.i.i, 1, !dbg !9071
  store i32 %1, i32* %refCount.i.i, align 4, !dbg !9071
  %2 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %objPtr, 1, !dbg !9072
  ret { i32, %Tcl_Obj* } %2, !dbg !9072

fail:                                             ; preds = %enter
  store i32 1, i32* %ecvar, align 4, !dbg !9073
  ret { i32, %Tcl_Obj* } { i32 1, %Tcl_Obj* undef }, !dbg !9074
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, i1 } @tcl.direct.unset(%Tcl_Obj* nocapture nonnull %varname, %Tcl_Obj* %elem, %INT %flag, i32* nocapture nonnull %ecvar) local_unnamed_addr #6 !dbg !9075 {
enter:
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !9083, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %0 = extractvalue %INT %flag, 0, !dbg !9084
  %1 = extractvalue %INT %flag, 1, !dbg !9084
  %2 = zext i32 %1 to i64, !dbg !9084
  %3 = extractvalue %INT %flag, 2, !dbg !9084
  %4 = select i1 %0, i64 %3, i64 %2, !dbg !9084
  %5 = trunc i64 %4 to i32, !dbg !9086
  %flag1 = icmp ne i32 %5, 0, !dbg !9086
  %6 = icmp eq %Tcl_Obj* %elem, null, !dbg !9087
  %str = tail call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %varname), !dbg !9088
  br i1 %6, label %unset.noElement, label %unset.element, !dbg !9087

unset.noElement:                                  ; preds = %enter
  %7 = select i1 %flag1, i32 512, i32 0, !dbg !9089
  %code = tail call i32 @Tcl_UnsetVar2(%Interp* nocapture nonnull %interp, i8* nocapture nonnull readonly %str, i8* nocapture readonly null, i32 %7), !dbg !9089
  br label %test, !dbg !9090

unset.element:                                    ; preds = %enter
  %str3 = tail call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %elem), !dbg !9091
  %8 = select i1 %flag1, i32 512, i32 0, !dbg !9091
  %code4 = tail call i32 @Tcl_UnsetVar2(%Interp* nocapture nonnull %interp, i8* nocapture nonnull readonly %str, i8* nocapture nonnull readonly %str3, i32 %8), !dbg !9091
  br label %test, !dbg !9092

test:                                             ; preds = %unset.element, %unset.noElement
  %result = phi i32 [ %code, %unset.noElement ], [ %code4, %unset.element ]
  %9 = xor i1 %flag1, true, !dbg !9093
  %10 = icmp eq i32 %result, 0, !dbg !9093
  %11 = or i1 %10, %9, !dbg !9093
  br i1 %11, label %ok, label %fail, !dbg !9093

ok:                                               ; preds = %test
  ret { i32, i1 } zeroinitializer, !dbg !9094

fail:                                             ; preds = %test
  store i32 1, i32* %ecvar, align 4, !dbg !9095
  ret { i32, i1 } { i32 1, i1 undef }, !dbg !9096
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, i1 } @tcl.direct.isArray(%Tcl_Obj* nonnull %varname, i32* nocapture nonnull readnone %ecvar) local_unnamed_addr #6 !dbg !9097 {
enter:
  %arrayPtr = alloca %Var*, align 8, !dbg !9101
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !9102, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %varPtr = call %Var* @TclObjLookupVar(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %varname, i8* noalias nocapture readonly null, i32 0, i8* noalias nocapture nonnull readonly null, i32 0, i32 0, %Var** noalias nocapture nonnull %arrayPtr), !dbg !9103
  %0 = icmp eq %Var* %varPtr, null, !dbg !9104
  br i1 %0, label %fail, label %checkForTraces, !dbg !9104

checkForTraces:                                   ; preds = %enter
  %flags.ptr.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 0, !dbg !9105
  %flags.i = load i32, i32* %flags.ptr.i, align 4, !dbg !9105
  %1 = and i32 %flags.i, 2048, !dbg !9107
  %2 = icmp eq i32 %1, 0, !dbg !9107
  br i1 %2, label %computeResult, label %checkForTraces2, !dbg !9108

checkForTraces2:                                  ; preds = %checkForTraces
  %3 = and i32 %flags.i, 1, !dbg !9109
  %4 = icmp ne i32 %3, 0, !dbg !9109
  %value.ptr.i.i1 = getelementptr %Var, %Var* %varPtr, i64 0, i32 1, !dbg !9112
  %value.i.i2 = load %Tcl_Obj*, %Tcl_Obj** %value.ptr.i.i1, align 8, !dbg !9112
  %5 = icmp eq %Tcl_Obj* %value.i.i2, null, !dbg !9115
  %6 = or i1 %4, %5, !dbg !9116
  br i1 %6, label %handleTraces, label %computeResult, !dbg !9116

handleTraces:                                     ; preds = %checkForTraces2
  %str = tail call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %varname), !dbg !9117
  %code = tail call i32 @TclCallVarTraces(%Interp* nocapture nonnull %interp, %Var* nocapture nonnull %varPtr, %Var* nocapture null, i8* nocapture nonnull %str, i8* nocapture null, i32 2563, i32 1), !dbg !9117
  %7 = icmp eq i32 %code, 0, !dbg !9118
  br i1 %7, label %handleTraces.computeResult_crit_edge, label %fail, !dbg !9118

handleTraces.computeResult_crit_edge:             ; preds = %handleTraces
  %flags.i.i.pre = load i32, i32* %flags.ptr.i, align 4, !dbg !9119
  br label %computeResult, !dbg !9118

fail:                                             ; preds = %enter, %handleTraces
  %merge = phi { i32, i1 } [ { i32 1, i1 undef }, %handleTraces ], [ zeroinitializer, %enter ]
  ret { i32, i1 } %merge, !dbg !9122

computeResult:                                    ; preds = %handleTraces.computeResult_crit_edge, %checkForTraces, %checkForTraces2
  %flags.i.i = phi i32 [ %flags.i.i.pre, %handleTraces.computeResult_crit_edge ], [ %flags.i, %checkForTraces ], [ %flags.i, %checkForTraces2 ], !dbg !9119
  %8 = and i32 %flags.i.i, 1, !dbg !9123
  %9 = icmp ne i32 %8, 0, !dbg !9123
  %value.ptr.i.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 1, !dbg !9124
  %value.i.i = load %Tcl_Obj*, %Tcl_Obj** %value.ptr.i.i, align 8, !dbg !9124
  %10 = icmp ne %Tcl_Obj* %value.i.i, null, !dbg !9127
  %result = and i1 %9, %10, !dbg !9128
  %11 = insertvalue { i32, i1 } { i32 0, i1 undef }, i1 %result, 1, !dbg !9129
  ret { i32, i1 } %11, !dbg !9129
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, i1 } @tcl.direct.makeArray(%Tcl_Obj* nonnull %varname, i32* nocapture nonnull readnone %ecvar) local_unnamed_addr #6 !dbg !9130 {
enter:
  %arrayPtr = alloca %Var*, align 8, !dbg !9134
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !9135, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %varPtr = call %Var* @TclObjLookupVar(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %varname, i8* noalias nocapture readonly null, i32 512, i8* noalias nocapture nonnull readonly getelementptr inbounds ([4 x i8], [4 x i8]* @string.constant.30, i64 0, i64 0), i32 1, i32 0, %Var** noalias nocapture nonnull %arrayPtr), !dbg !9136
  %0 = icmp eq %Var* %varPtr, null, !dbg !9137
  br i1 %0, label %done, label %doArrayMake, !dbg !9137

doArrayMake:                                      ; preds = %enter
  %flags.ptr.i.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 0, !dbg !9138
  %flags.i.i = load i32, i32* %flags.ptr.i.i, align 4, !dbg !9138
  %1 = and i32 %flags.i.i, 1, !dbg !9141
  %2 = icmp eq i32 %1, 0, !dbg !9141
  br i1 %2, label %mustWork, label %done, !dbg !9142

mustWork:                                         ; preds = %doArrayMake
  %3 = and i32 %flags.i.i, 4096, !dbg !9143
  %4 = icmp ne i32 %3, 0, !dbg !9143
  %value.ptr.i.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 1, !dbg !9146
  %value.i.i = load %Tcl_Obj*, %Tcl_Obj** %value.ptr.i.i, align 8, !dbg !9146
  %5 = icmp ne %Tcl_Obj* %value.i.i, null, !dbg !9149
  %6 = or i1 %4, %5, !dbg !9150
  br i1 %6, label %generateError, label %createArray, !dbg !9150

createArray:                                      ; preds = %mustWork
  %7 = or i32 %flags.i.i, 1, !dbg !9151
  store i32 %7, i32* %flags.ptr.i.i, align 4, !dbg !9151
  %ptr = tail call noalias nonnull i8* @Tcl_Alloc(i32 96), !dbg !9153
  tail call void @llvm.lifetime.start.p0i8(i64 -1, i8* nonnull %ptr), !dbg !9153
  %ptr1 = bitcast i8* %ptr to %VarHashTable*, !dbg !9153
  %8 = bitcast %Tcl_Obj** %value.ptr.i.i to i8**, !dbg !9154
  store i8* %ptr, i8** %8, align 8, !dbg !9154
  %tablePtr.ptr = getelementptr %Var, %Var* %varPtr, i64 2, !dbg !9156
  %9 = bitcast %Var* %tablePtr.ptr to %VarHashTable**, !dbg !9156
  %tablePtr2 = load %VarHashTable*, %VarHashTable** %9, align 8, !dbg !9156
  %nsPtr.ptr = getelementptr %VarHashTable, %VarHashTable* %tablePtr2, i64 0, i32 1, !dbg !9157
  %nsPtr = load %Namespace*, %Namespace** %nsPtr.ptr, align 8, !dbg !9157
  tail call void @TclInitVarHashTable(%VarHashTable* noalias nocapture nonnull %ptr1, %Namespace* noalias readonly %nsPtr), !dbg !9158
  br label %done, !dbg !9159

done:                                             ; preds = %doArrayMake, %generateError, %enter, %createArray
  %merge = phi { i32, i1 } [ zeroinitializer, %createArray ], [ zeroinitializer, %doArrayMake ], [ { i32 1, i1 undef }, %enter ], [ { i32 1, i1 undef }, %generateError ]
  ret { i32, i1 } %merge, !dbg !9160

generateError:                                    ; preds = %mustWork
  %str = tail call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %varname), !dbg !9161
  tail call void @TclVarErrMsg(%Interp* nocapture nonnull %interp, i8* nocapture nonnull readonly %str, i8* nocapture readonly null, i8* nocapture nonnull readonly getelementptr inbounds ([10 x i8], [10 x i8]* @string.constant.31, i64 0, i64 0), i8* nocapture nonnull readonly getelementptr inbounds ([21 x i8], [21 x i8]* @string.constant.32, i64 0, i64 0)), !dbg !9161
  %str.13 = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.13, align 8, !dbg !9162, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %str.13, i64 0, i32 0, !dbg !9163
  %refCount.i = load i32, i32* %refCountPtr.i, align 4, !dbg !9163
  %10 = icmp sgt i32 %refCount.i, 1, !dbg !9162
  tail call void @llvm.assume(i1 %10), !dbg !9162
  tail call void @Tcl_SetObjErrorCode(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %str.13), !dbg !9162
  br label %done, !dbg !9165
}

; Function Attrs: alwaysinline nounwind
define hidden noalias nonnull %ARRAYIMPL* @array.new() local_unnamed_addr #6 !dbg !9166 {
enter:
  %ptr = tail call noalias nonnull i8* @Tcl_Alloc(i32 96), !dbg !9169
  tail call void @llvm.lifetime.start.p0i8(i64 -1, i8* nonnull %ptr), !dbg !9169
  %ptr1 = bitcast i8* %ptr to %VarHashTable*, !dbg !9169
  tail call void @TclInitVarHashTable(%VarHashTable* noalias nocapture nonnull %ptr1, %Namespace* noalias readonly null), !dbg !9170
  %ptr2 = tail call noalias nonnull i8* @Tcl_Alloc(i32 16), !dbg !9171
  tail call void @llvm.lifetime.start.p0i8(i64 -1, i8* nonnull %ptr2), !dbg !9171
  %array = bitcast i8* %ptr2 to %ARRAYIMPL*, !dbg !9171
  %array.ref = bitcast i8* %ptr2 to i32*, !dbg !9172
  store i32 0, i32* %array.ref, align 4, !dbg !9172
  %array.provenance = getelementptr i8, i8* %ptr2, i64 4, !dbg !9173
  %0 = bitcast i8* %array.provenance to i1*, !dbg !9173
  store i1 false, i1* %0, align 1, !dbg !9173
  %array.ary = getelementptr i8, i8* %ptr2, i64 8, !dbg !9174
  %1 = bitcast i8* %array.ary to i8**, !dbg !9174
  store i8* %ptr, i8** %1, align 8, !dbg !9174
  ret %ARRAYIMPL* %array, !dbg !9175
}

; Function Attrs: alwaysinline nounwind
define hidden void @array.free(%ARRAYIMPL* nonnull %array, %Tcl_Obj* nocapture nonnull %name) local_unnamed_addr #6 !dbg !9176 {
enter:
  %0 = alloca %Var, align 8, !dbg !9182
  %provenance.ptr = getelementptr %ARRAYIMPL, %ARRAYIMPL* %array, i64 0, i32 1, !dbg !9183
  %provenance = load i1, i1* %provenance.ptr, align 1, !dbg !9183
  br i1 %provenance, label %free.store, label %tcl.unset.var.ptr.exit, !dbg !9184

tcl.unset.var.ptr.exit:                           ; preds = %enter
  %ary.ptr = getelementptr %ARRAYIMPL, %ARRAYIMPL* %array, i64 0, i32 2, !dbg !9185
  %ary = load %VarHashTable*, %VarHashTable** %ary.ptr, align 8, !dbg !9185
  %.flags = getelementptr inbounds %Var, %Var* %0, i64 0, i32 0, !dbg !9186
  store i32 1, i32* %.flags, align 8, !dbg !9187
  %value.i.i = getelementptr inbounds %Var, %Var* %0, i64 0, i32 1, !dbg !9190
  %1 = bitcast %Tcl_Obj** %value.i.i to %VarHashTable**, !dbg !9192
  store %VarHashTable* %ary, %VarHashTable** %1, align 8, !dbg !9192
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !9193, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %code.i = call i32 @TclPtrUnsetVar(%Interp* noalias nocapture nonnull %interp, %Var* noalias nocapture nonnull %0, %Var* noalias nocapture null, %Tcl_Obj* nocapture nonnull %name, %Tcl_Obj* nocapture null, i32 0) #5, !dbg !9194
  br label %free.store, !dbg !9196

free.store:                                       ; preds = %enter, %tcl.unset.var.ptr.exit
  %ptr = bitcast %ARRAYIMPL* %array to i8*, !dbg !9197
  tail call void @Tcl_Free(i8* nonnull %ptr), !dbg !9197
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %ptr), !dbg !9197
  ret void, !dbg !9198
}

; Function Attrs: alwaysinline nofree norecurse nounwind
define hidden void @tcl.array.addRef(%ARRAYIMPL* nocapture nonnull %array) local_unnamed_addr #10 !dbg !9199 {
enter:
  %ref = getelementptr %ARRAYIMPL, %ARRAYIMPL* %array, i64 0, i32 0, !dbg !9204
  %ref1 = load i32, i32* %ref, align 4, !dbg !9205
  %0 = add nsw i32 %ref1, 1, !dbg !9205
  store i32 %0, i32* %ref, align 4, !dbg !9205
  ret void, !dbg !9206
}

; Function Attrs: alwaysinline nofree norecurse nounwind
define hidden void @tcl.array.addRef.nexist({ i1, %ARRAYIMPL* } %array) local_unnamed_addr #10 !dbg !9207 {
enter:
  %0 = extractvalue { i1, %ARRAYIMPL* } %array, 0, !dbg !9214
  br i1 %0, label %done, label %add, !dbg !9214

add:                                              ; preds = %enter
  %1 = extractvalue { i1, %ARRAYIMPL* } %array, 1, !dbg !9215
  %ref.i = getelementptr %ARRAYIMPL, %ARRAYIMPL* %1, i64 0, i32 0, !dbg !9216
  %ref1.i = load i32, i32* %ref.i, align 4, !dbg !9218
  %2 = add nsw i32 %ref1.i, 1, !dbg !9218
  store i32 %2, i32* %ref.i, align 4, !dbg !9218
  br label %done, !dbg !9219

done:                                             ; preds = %add, %enter
  ret void, !dbg !9220
}

; Function Attrs: alwaysinline nofree norecurse nounwind
define hidden void @tcl.arraystring.addRef(%ARRAYSTRING %as) local_unnamed_addr #10 !dbg !9221 {
enter:
  %0 = extractvalue %ARRAYSTRING %as, 0, !dbg !9228
  br i1 %0, label %string, label %array, !dbg !9228

array:                                            ; preds = %enter
  %1 = extractvalue %ARRAYSTRING %as, 1, !dbg !9229
  %ref.i = getelementptr %ARRAYIMPL, %ARRAYIMPL* %1, i64 0, i32 0, !dbg !9230
  %ref1.i = load i32, i32* %ref.i, align 4, !dbg !9232
  %2 = add nsw i32 %ref1.i, 1, !dbg !9232
  store i32 %2, i32* %ref.i, align 4, !dbg !9232
  ret void, !dbg !9233

string:                                           ; preds = %enter
  %3 = extractvalue %ARRAYSTRING %as, 2, !dbg !9234
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %3, i64 0, i32 0, !dbg !9235
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !9238
  %4 = add nsw i32 %refCount1.i.i, 1, !dbg !9238
  store i32 %4, i32* %refCount.i.i, align 4, !dbg !9238
  ret void, !dbg !9239
}

; Function Attrs: alwaysinline nofree norecurse nounwind
define hidden void @tcl.arraystring.addRef.nexist({ i1, %ARRAYSTRING } %as) local_unnamed_addr #10 !dbg !9240 {
enter:
  %0 = extractvalue { i1, %ARRAYSTRING } %as, 0, !dbg !9249
  br i1 %0, label %done, label %add, !dbg !9249

add:                                              ; preds = %enter
  %1 = extractvalue { i1, %ARRAYSTRING } %as, 1, !dbg !9250
  %2 = extractvalue %ARRAYSTRING %1, 0, !dbg !9251
  %3 = extractvalue %ARRAYSTRING %1, 1, !dbg !9251
  %ref.i.i = getelementptr %ARRAYIMPL, %ARRAYIMPL* %3, i64 0, i32 0, !dbg !9251
  %4 = extractvalue %ARRAYSTRING %1, 2, !dbg !9251
  %refCount.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %4, i64 0, i32 0, !dbg !9251
  %ref.i.i.sink1 = select i1 %2, i32* %refCount.i.i.i, i32* %ref.i.i, !dbg !9251
  %ref1.i.i = load i32, i32* %ref.i.i.sink1, align 4, !dbg !9253
  %5 = add nsw i32 %ref1.i.i, 1, !dbg !9253
  store i32 %5, i32* %ref.i.i.sink1, align 4, !dbg !9253
  br label %done, !dbg !9254

done:                                             ; preds = %add, %enter
  ret void, !dbg !9254
}

; Function Attrs: alwaysinline nounwind
define hidden void @tcl.array.dropRef(%ARRAYIMPL* nonnull %array, %Tcl_Obj* nocapture nonnull %name) local_unnamed_addr #6 !dbg !9255 {
enter:
  %0 = alloca %Var, align 8, !dbg !9259
  %ref = getelementptr %ARRAYIMPL, %ARRAYIMPL* %array, i64 0, i32 0, !dbg !9261
  %ref1 = load i32, i32* %ref, align 4, !dbg !9262
  %1 = icmp slt i32 %ref1, 2, !dbg !9263
  br i1 %1, label %del, label %done, !dbg !9263

del:                                              ; preds = %enter
  %2 = bitcast %Var* %0 to i8*, !dbg !9264
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2), !dbg !9264
  %provenance.ptr.i = getelementptr %ARRAYIMPL, %ARRAYIMPL* %array, i64 0, i32 1, !dbg !9264
  %provenance.i = load i1, i1* %provenance.ptr.i, align 1, !dbg !9264
  br i1 %provenance.i, label %array.free.exit, label %tcl.unset.var.ptr.exit.i, !dbg !9265

tcl.unset.var.ptr.exit.i:                         ; preds = %del
  %ary.ptr.i = getelementptr %ARRAYIMPL, %ARRAYIMPL* %array, i64 0, i32 2, !dbg !9266
  %ary.i = load %VarHashTable*, %VarHashTable** %ary.ptr.i, align 8, !dbg !9266
  %.flags.i = getelementptr inbounds %Var, %Var* %0, i64 0, i32 0, !dbg !9267
  store i32 1, i32* %.flags.i, align 8, !dbg !9268
  %value.i.i.i = getelementptr inbounds %Var, %Var* %0, i64 0, i32 1, !dbg !9271
  %3 = bitcast %Tcl_Obj** %value.i.i.i to %VarHashTable**, !dbg !9273
  store %VarHashTable* %ary.i, %VarHashTable** %3, align 8, !dbg !9273
  %interp.i = load %Interp*, %Interp** @tclInterp, align 8, !dbg !9274, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %code.i.i = call i32 @TclPtrUnsetVar(%Interp* noalias nocapture nonnull %interp.i, %Var* noalias nocapture nonnull %0, %Var* noalias nocapture null, %Tcl_Obj* nocapture nonnull %name, %Tcl_Obj* nocapture null, i32 0) #5, !dbg !9275
  br label %array.free.exit, !dbg !9277

array.free.exit:                                  ; preds = %del, %tcl.unset.var.ptr.exit.i
  %ptr.i = bitcast %ARRAYIMPL* %array to i8*, !dbg !9278
  tail call void @Tcl_Free(i8* nonnull %ptr.i) #5, !dbg !9278
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %ptr.i) #5, !dbg !9278
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2), !dbg !9279
  ret void, !dbg !9280

done:                                             ; preds = %enter
  %4 = add nsw i32 %ref1, -1, !dbg !9281
  store i32 %4, i32* %ref, align 4, !dbg !9281
  ret void, !dbg !9282
}

; Function Attrs: alwaysinline nounwind
define hidden void @tcl.array.dropRef.nexist({ i1, %ARRAYIMPL* } %array, %Tcl_Obj* nocapture nonnull %name) local_unnamed_addr #6 !dbg !9283 {
enter:
  %0 = alloca %Var, align 8, !dbg !9289
  %1 = extractvalue { i1, %ARRAYIMPL* } %array, 0, !dbg !9292
  br i1 %1, label %done, label %drop, !dbg !9292

drop:                                             ; preds = %enter
  %2 = extractvalue { i1, %ARRAYIMPL* } %array, 1, !dbg !9293
  %ref.i = getelementptr %ARRAYIMPL, %ARRAYIMPL* %2, i64 0, i32 0, !dbg !9294
  %ref1.i = load i32, i32* %ref.i, align 4, !dbg !9295
  %3 = icmp slt i32 %ref1.i, 2, !dbg !9296
  br i1 %3, label %del.i, label %done.i, !dbg !9296

del.i:                                            ; preds = %drop
  %4 = bitcast %Var* %0 to i8*, !dbg !9297
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #5, !dbg !9297
  %provenance.ptr.i.i = getelementptr %ARRAYIMPL, %ARRAYIMPL* %2, i64 0, i32 1, !dbg !9297
  %provenance.i.i = load i1, i1* %provenance.ptr.i.i, align 1, !dbg !9297
  br i1 %provenance.i.i, label %array.free.exit.i, label %tcl.unset.var.ptr.exit.i.i, !dbg !9298

tcl.unset.var.ptr.exit.i.i:                       ; preds = %del.i
  %ary.ptr.i.i = getelementptr %ARRAYIMPL, %ARRAYIMPL* %2, i64 0, i32 2, !dbg !9299
  %ary.i.i = load %VarHashTable*, %VarHashTable** %ary.ptr.i.i, align 8, !dbg !9299
  %.flags.i.i = getelementptr inbounds %Var, %Var* %0, i64 0, i32 0, !dbg !9300
  store i32 1, i32* %.flags.i.i, align 8, !dbg !9301
  %value.i.i.i.i = getelementptr inbounds %Var, %Var* %0, i64 0, i32 1, !dbg !9304
  %5 = bitcast %Tcl_Obj** %value.i.i.i.i to %VarHashTable**, !dbg !9306
  store %VarHashTable* %ary.i.i, %VarHashTable** %5, align 8, !dbg !9306
  %interp.i.i = load %Interp*, %Interp** @tclInterp, align 8, !dbg !9307, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %code.i.i.i = call i32 @TclPtrUnsetVar(%Interp* noalias nocapture nonnull %interp.i.i, %Var* noalias nocapture nonnull %0, %Var* noalias nocapture null, %Tcl_Obj* nocapture nonnull %name, %Tcl_Obj* nocapture null, i32 0) #5, !dbg !9308
  br label %array.free.exit.i, !dbg !9310

array.free.exit.i:                                ; preds = %tcl.unset.var.ptr.exit.i.i, %del.i
  %ptr.i.i = bitcast %ARRAYIMPL* %2 to i8*, !dbg !9311
  tail call void @Tcl_Free(i8* nonnull %ptr.i.i) #5, !dbg !9311
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %ptr.i.i) #5, !dbg !9311
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #5, !dbg !9312
  br label %done, !dbg !9313

done.i:                                           ; preds = %drop
  %6 = add nsw i32 %ref1.i, -1, !dbg !9314
  store i32 %6, i32* %ref.i, align 4, !dbg !9314
  br label %done, !dbg !9315

done:                                             ; preds = %array.free.exit.i, %done.i, %enter
  ret void, !dbg !9316
}

; Function Attrs: alwaysinline nounwind
define hidden void @tcl.array.dropRef.fail({ i32, %ARRAYIMPL* } %array, %Tcl_Obj* nocapture nonnull %name) local_unnamed_addr #6 !dbg !9317 {
enter:
  %0 = alloca %Var, align 8, !dbg !9325
  %1 = extractvalue { i32, %ARRAYIMPL* } %array, 0, !dbg !9328
  %2 = icmp eq i32 %1, 0, !dbg !9328
  br i1 %2, label %drop, label %done, !dbg !9328

drop:                                             ; preds = %enter
  %3 = extractvalue { i32, %ARRAYIMPL* } %array, 1, !dbg !9329
  %ref.i = getelementptr %ARRAYIMPL, %ARRAYIMPL* %3, i64 0, i32 0, !dbg !9330
  %ref1.i = load i32, i32* %ref.i, align 4, !dbg !9331
  %4 = icmp slt i32 %ref1.i, 2, !dbg !9332
  br i1 %4, label %del.i, label %done.i, !dbg !9332

del.i:                                            ; preds = %drop
  %5 = bitcast %Var* %0 to i8*, !dbg !9333
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #5, !dbg !9333
  %provenance.ptr.i.i = getelementptr %ARRAYIMPL, %ARRAYIMPL* %3, i64 0, i32 1, !dbg !9333
  %provenance.i.i = load i1, i1* %provenance.ptr.i.i, align 1, !dbg !9333
  br i1 %provenance.i.i, label %array.free.exit.i, label %tcl.unset.var.ptr.exit.i.i, !dbg !9334

tcl.unset.var.ptr.exit.i.i:                       ; preds = %del.i
  %ary.ptr.i.i = getelementptr %ARRAYIMPL, %ARRAYIMPL* %3, i64 0, i32 2, !dbg !9335
  %ary.i.i = load %VarHashTable*, %VarHashTable** %ary.ptr.i.i, align 8, !dbg !9335
  %.flags.i.i = getelementptr inbounds %Var, %Var* %0, i64 0, i32 0, !dbg !9336
  store i32 1, i32* %.flags.i.i, align 8, !dbg !9337
  %value.i.i.i.i = getelementptr inbounds %Var, %Var* %0, i64 0, i32 1, !dbg !9340
  %6 = bitcast %Tcl_Obj** %value.i.i.i.i to %VarHashTable**, !dbg !9342
  store %VarHashTable* %ary.i.i, %VarHashTable** %6, align 8, !dbg !9342
  %interp.i.i = load %Interp*, %Interp** @tclInterp, align 8, !dbg !9343, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %code.i.i.i = call i32 @TclPtrUnsetVar(%Interp* noalias nocapture nonnull %interp.i.i, %Var* noalias nocapture nonnull %0, %Var* noalias nocapture null, %Tcl_Obj* nocapture nonnull %name, %Tcl_Obj* nocapture null, i32 0) #5, !dbg !9344
  br label %array.free.exit.i, !dbg !9346

array.free.exit.i:                                ; preds = %tcl.unset.var.ptr.exit.i.i, %del.i
  %ptr.i.i = bitcast %ARRAYIMPL* %3 to i8*, !dbg !9347
  tail call void @Tcl_Free(i8* nonnull %ptr.i.i) #5, !dbg !9347
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %ptr.i.i) #5, !dbg !9347
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #5, !dbg !9348
  br label %done, !dbg !9349

done.i:                                           ; preds = %drop
  %7 = add nsw i32 %ref1.i, -1, !dbg !9350
  store i32 %7, i32* %ref.i, align 4, !dbg !9350
  br label %done, !dbg !9351

done:                                             ; preds = %array.free.exit.i, %done.i, %enter
  ret void, !dbg !9352
}

; Function Attrs: alwaysinline nounwind
define hidden void @tcl.arraystring.dropRef(%ARRAYSTRING %as, %Tcl_Obj* nocapture nonnull %name) local_unnamed_addr #6 !dbg !9353 {
enter:
  %0 = alloca %Var, align 8, !dbg !9359
  %1 = extractvalue %ARRAYSTRING %as, 0, !dbg !9362
  br i1 %1, label %string, label %array, !dbg !9362

array:                                            ; preds = %enter
  %2 = extractvalue %ARRAYSTRING %as, 1, !dbg !9363
  %ref.i = getelementptr %ARRAYIMPL, %ARRAYIMPL* %2, i64 0, i32 0, !dbg !9364
  %ref1.i = load i32, i32* %ref.i, align 4, !dbg !9365
  %3 = icmp slt i32 %ref1.i, 2, !dbg !9366
  br i1 %3, label %del.i, label %done.i, !dbg !9366

del.i:                                            ; preds = %array
  %4 = bitcast %Var* %0 to i8*, !dbg !9367
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #5, !dbg !9367
  %provenance.ptr.i.i = getelementptr %ARRAYIMPL, %ARRAYIMPL* %2, i64 0, i32 1, !dbg !9367
  %provenance.i.i = load i1, i1* %provenance.ptr.i.i, align 1, !dbg !9367
  br i1 %provenance.i.i, label %array.free.exit.i, label %tcl.unset.var.ptr.exit.i.i, !dbg !9368

tcl.unset.var.ptr.exit.i.i:                       ; preds = %del.i
  %ary.ptr.i.i = getelementptr %ARRAYIMPL, %ARRAYIMPL* %2, i64 0, i32 2, !dbg !9369
  %ary.i.i = load %VarHashTable*, %VarHashTable** %ary.ptr.i.i, align 8, !dbg !9369
  %.flags.i.i = getelementptr inbounds %Var, %Var* %0, i64 0, i32 0, !dbg !9370
  store i32 1, i32* %.flags.i.i, align 8, !dbg !9371
  %value.i.i.i.i = getelementptr inbounds %Var, %Var* %0, i64 0, i32 1, !dbg !9374
  %5 = bitcast %Tcl_Obj** %value.i.i.i.i to %VarHashTable**, !dbg !9376
  store %VarHashTable* %ary.i.i, %VarHashTable** %5, align 8, !dbg !9376
  %interp.i.i = load %Interp*, %Interp** @tclInterp, align 8, !dbg !9377, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %code.i.i.i = call i32 @TclPtrUnsetVar(%Interp* noalias nocapture nonnull %interp.i.i, %Var* noalias nocapture nonnull %0, %Var* noalias nocapture null, %Tcl_Obj* nocapture nonnull %name, %Tcl_Obj* nocapture null, i32 0) #5, !dbg !9378
  br label %array.free.exit.i, !dbg !9380

array.free.exit.i:                                ; preds = %tcl.unset.var.ptr.exit.i.i, %del.i
  %ptr.i.i = bitcast %ARRAYIMPL* %2 to i8*, !dbg !9381
  tail call void @Tcl_Free(i8* nonnull %ptr.i.i) #5, !dbg !9381
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %ptr.i.i) #5, !dbg !9381
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #5, !dbg !9382
  br label %tcl.array.dropRef.exit, !dbg !9383

done.i:                                           ; preds = %array
  %6 = add nsw i32 %ref1.i, -1, !dbg !9384
  store i32 %6, i32* %ref.i, align 4, !dbg !9384
  br label %tcl.array.dropRef.exit, !dbg !9385

tcl.array.dropRef.exit:                           ; preds = %leave.i.i, %freeObject.i.i, %done.i, %array.free.exit.i
  ret void, !dbg !9386

string:                                           ; preds = %enter
  %7 = extractvalue %ARRAYSTRING %as, 2, !dbg !9387
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %7, i64 0, i32 0, !dbg !9388
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !9391
  %8 = icmp slt i32 %refCount1.i.i, 2, !dbg !9392
  br i1 %8, label %freeObject.i.i, label %leave.i.i, !dbg !9392

freeObject.i.i:                                   ; preds = %string
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %7) #5, !dbg !9393
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %7) #5, !dbg !9394
  br label %tcl.array.dropRef.exit, !dbg !9395

leave.i.i:                                        ; preds = %string
  %9 = add nsw i32 %refCount1.i.i, -1, !dbg !9391
  store i32 %9, i32* %refCount.i.i, align 4, !dbg !9396
  br label %tcl.array.dropRef.exit, !dbg !9397
}

; Function Attrs: alwaysinline nounwind
define hidden void @tcl.arraystring.dropRef.nexist({ i1, %ARRAYSTRING } %as, %Tcl_Obj* nocapture nonnull %name) local_unnamed_addr #6 !dbg !9398 {
enter:
  %0 = alloca %Var, align 8, !dbg !9404
  %1 = extractvalue { i1, %ARRAYSTRING } %as, 0, !dbg !9408
  br i1 %1, label %done, label %drop, !dbg !9408

drop:                                             ; preds = %enter
  %2 = extractvalue { i1, %ARRAYSTRING } %as, 1, !dbg !9409
  %3 = extractvalue %ARRAYSTRING %2, 0, !dbg !9410
  br i1 %3, label %string.i, label %array.i, !dbg !9410

array.i:                                          ; preds = %drop
  %4 = extractvalue %ARRAYSTRING %2, 1, !dbg !9411
  %ref.i.i = getelementptr %ARRAYIMPL, %ARRAYIMPL* %4, i64 0, i32 0, !dbg !9412
  %ref1.i.i = load i32, i32* %ref.i.i, align 4, !dbg !9413
  %5 = icmp slt i32 %ref1.i.i, 2, !dbg !9414
  br i1 %5, label %del.i.i, label %done.i.i, !dbg !9414

del.i.i:                                          ; preds = %array.i
  %6 = bitcast %Var* %0 to i8*, !dbg !9415
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #5, !dbg !9415
  %provenance.ptr.i.i.i = getelementptr %ARRAYIMPL, %ARRAYIMPL* %4, i64 0, i32 1, !dbg !9415
  %provenance.i.i.i = load i1, i1* %provenance.ptr.i.i.i, align 1, !dbg !9415
  br i1 %provenance.i.i.i, label %array.free.exit.i.i, label %tcl.unset.var.ptr.exit.i.i.i, !dbg !9416

tcl.unset.var.ptr.exit.i.i.i:                     ; preds = %del.i.i
  %ary.ptr.i.i.i = getelementptr %ARRAYIMPL, %ARRAYIMPL* %4, i64 0, i32 2, !dbg !9417
  %ary.i.i.i = load %VarHashTable*, %VarHashTable** %ary.ptr.i.i.i, align 8, !dbg !9417
  %.flags.i.i.i = getelementptr inbounds %Var, %Var* %0, i64 0, i32 0, !dbg !9418
  store i32 1, i32* %.flags.i.i.i, align 8, !dbg !9419
  %value.i.i.i.i.i = getelementptr inbounds %Var, %Var* %0, i64 0, i32 1, !dbg !9422
  %7 = bitcast %Tcl_Obj** %value.i.i.i.i.i to %VarHashTable**, !dbg !9424
  store %VarHashTable* %ary.i.i.i, %VarHashTable** %7, align 8, !dbg !9424
  %interp.i.i.i = load %Interp*, %Interp** @tclInterp, align 8, !dbg !9425, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %code.i.i.i.i = call i32 @TclPtrUnsetVar(%Interp* noalias nocapture nonnull %interp.i.i.i, %Var* noalias nocapture nonnull %0, %Var* noalias nocapture null, %Tcl_Obj* nocapture nonnull %name, %Tcl_Obj* nocapture null, i32 0) #5, !dbg !9426
  br label %array.free.exit.i.i, !dbg !9428

array.free.exit.i.i:                              ; preds = %tcl.unset.var.ptr.exit.i.i.i, %del.i.i
  %ptr.i.i.i = bitcast %ARRAYIMPL* %4 to i8*, !dbg !9429
  tail call void @Tcl_Free(i8* nonnull %ptr.i.i.i) #5, !dbg !9429
  tail call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %ptr.i.i.i) #5, !dbg !9429
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #5, !dbg !9430
  br label %done, !dbg !9431

done.i.i:                                         ; preds = %array.i
  %8 = add nsw i32 %ref1.i.i, -1, !dbg !9432
  store i32 %8, i32* %ref.i.i, align 4, !dbg !9432
  br label %done, !dbg !9433

string.i:                                         ; preds = %drop
  %9 = extractvalue %ARRAYSTRING %2, 2, !dbg !9434
  %refCount.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %9, i64 0, i32 0, !dbg !9435
  %refCount1.i.i.i = load i32, i32* %refCount.i.i.i, align 4, !dbg !9438
  %10 = icmp slt i32 %refCount1.i.i.i, 2, !dbg !9439
  br i1 %10, label %freeObject.i.i.i, label %leave.i.i.i, !dbg !9439

freeObject.i.i.i:                                 ; preds = %string.i
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %9) #5, !dbg !9440
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %9) #5, !dbg !9441
  br label %done, !dbg !9442

leave.i.i.i:                                      ; preds = %string.i
  %11 = add nsw i32 %refCount1.i.i.i, -1, !dbg !9438
  store i32 %11, i32* %refCount.i.i.i, align 4, !dbg !9443
  br label %done, !dbg !9444

done:                                             ; preds = %leave.i.i.i, %freeObject.i.i.i, %done.i.i, %array.free.exit.i.i, %enter
  ret void, !dbg !9445
}

; Function Attrs: alwaysinline nounwind
define hidden %ARRAYIMPL* @tcl.array.init({ i1, %ARRAYIMPL* } %array) local_unnamed_addr #6 !dbg !9446 {
enter:
  %0 = extractvalue { i1, %ARRAYIMPL* } %array, 0, !dbg !9451
  br i1 %0, label %init, label %done, !dbg !9451

done:                                             ; preds = %enter
  %1 = extractvalue { i1, %ARRAYIMPL* } %array, 1, !dbg !9452
  %ref.i = getelementptr %ARRAYIMPL, %ARRAYIMPL* %1, i64 0, i32 0, !dbg !9453
  %ref1.i = load i32, i32* %ref.i, align 4, !dbg !9455
  %2 = add nsw i32 %ref1.i, 1, !dbg !9455
  store i32 %2, i32* %ref.i, align 4, !dbg !9455
  ret %ARRAYIMPL* %1, !dbg !9456

init:                                             ; preds = %enter
  %ptr.i = tail call noalias nonnull i8* @Tcl_Alloc(i32 96) #5, !dbg !9457
  tail call void @llvm.lifetime.start.p0i8(i64 -1, i8* nonnull %ptr.i) #5, !dbg !9457
  %ptr1.i = bitcast i8* %ptr.i to %VarHashTable*, !dbg !9457
  tail call void @TclInitVarHashTable(%VarHashTable* noalias nocapture nonnull %ptr1.i, %Namespace* noalias readonly null) #5, !dbg !9459
  %ptr2.i = tail call noalias nonnull i8* @Tcl_Alloc(i32 16) #5, !dbg !9460
  tail call void @llvm.lifetime.start.p0i8(i64 -1, i8* nonnull %ptr2.i) #5, !dbg !9460
  %array.i = bitcast i8* %ptr2.i to %ARRAYIMPL*, !dbg !9460
  %array.ref.i = bitcast i8* %ptr2.i to i32*, !dbg !9461
  %array.provenance.i = getelementptr i8, i8* %ptr2.i, i64 4, !dbg !9462
  %3 = bitcast i8* %array.provenance.i to i1*, !dbg !9462
  store i1 false, i1* %3, align 1, !dbg !9462
  %array.ary.i = getelementptr i8, i8* %ptr2.i, i64 8, !dbg !9463
  %4 = bitcast i8* %array.ary.i to i8**, !dbg !9463
  store i8* %ptr.i, i8** %4, align 8, !dbg !9463
  store i32 1, i32* %array.ref.i, align 4, !dbg !9464
  ret %ARRAYIMPL* %array.i, !dbg !9466
}

; Function Attrs: alwaysinline nounwind
define hidden %ARRAYSTRING @tcl.arraystring.init({ i1, %ARRAYSTRING } %as) local_unnamed_addr #6 !dbg !9467 {
enter:
  %0 = extractvalue { i1, %ARRAYSTRING } %as, 0, !dbg !9472
  br i1 %0, label %init, label %done, !dbg !9472

done:                                             ; preds = %enter
  %1 = extractvalue { i1, %ARRAYSTRING } %as, 1, !dbg !9473
  %2 = extractvalue %ARRAYSTRING %1, 0, !dbg !9474
  %3 = extractvalue %ARRAYSTRING %1, 2, !dbg !9474
  %refCount.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %3, i64 0, i32 0, !dbg !9474
  %4 = extractvalue %ARRAYSTRING %1, 1, !dbg !9474
  %ref.i.i = getelementptr %ARRAYIMPL, %ARRAYIMPL* %4, i64 0, i32 0, !dbg !9474
  %refCount.i.i.i.sink2 = select i1 %2, i32* %refCount.i.i.i, i32* %ref.i.i, !dbg !9474
  %refCount.i.i.i.sink = select i1 %2, i32* %refCount.i.i.i, i32* %ref.i.i, !dbg !9474
  %refCount1.i.i.i = load i32, i32* %refCount.i.i.i.sink2, align 4, !dbg !9476
  %5 = add nsw i32 %refCount1.i.i.i, 1, !dbg !9476
  store i32 %5, i32* %refCount.i.i.i.sink, align 4, !dbg !9476
  ret %ARRAYSTRING %1, !dbg !9477

init:                                             ; preds = %enter
  %ptr.i = tail call noalias nonnull i8* @Tcl_Alloc(i32 96) #5, !dbg !9478
  tail call void @llvm.lifetime.start.p0i8(i64 -1, i8* nonnull %ptr.i) #5, !dbg !9478
  %ptr1.i = bitcast i8* %ptr.i to %VarHashTable*, !dbg !9478
  tail call void @TclInitVarHashTable(%VarHashTable* noalias nocapture nonnull %ptr1.i, %Namespace* noalias readonly null) #5, !dbg !9480
  %ptr2.i = tail call noalias nonnull i8* @Tcl_Alloc(i32 16) #5, !dbg !9481
  tail call void @llvm.lifetime.start.p0i8(i64 -1, i8* nonnull %ptr2.i) #5, !dbg !9481
  %array.i1 = bitcast i8* %ptr2.i to %ARRAYIMPL*, !dbg !9481
  %array.ref.i = bitcast i8* %ptr2.i to i32*, !dbg !9482
  %array.provenance.i = getelementptr i8, i8* %ptr2.i, i64 4, !dbg !9483
  %6 = bitcast i8* %array.provenance.i to i1*, !dbg !9483
  store i1 false, i1* %6, align 1, !dbg !9483
  %array.ary.i = getelementptr i8, i8* %ptr2.i, i64 8, !dbg !9484
  %7 = bitcast i8* %array.ary.i to i8**, !dbg !9484
  store i8* %ptr.i, i8** %7, align 8, !dbg !9484
  store i32 1, i32* %array.ref.i, align 4, !dbg !9485
  %8 = insertvalue %ARRAYSTRING { i1 false, %ARRAYIMPL* undef, %Tcl_Obj* undef }, %ARRAYIMPL* %array.i1, 1, !dbg !9487
  ret %ARRAYSTRING %8, !dbg !9487
}

; Function Attrs: alwaysinline nofree norecurse nounwind
define hidden %ARRAYIMPL* @tcl.arraystring.extractarray(%ARRAYSTRING %as) local_unnamed_addr #10 !dbg !9488 {
enter:
  %0 = extractvalue %ARRAYSTRING %as, 1, !dbg !9493
  %ref.i = getelementptr %ARRAYIMPL, %ARRAYIMPL* %0, i64 0, i32 0, !dbg !9494
  %ref1.i = load i32, i32* %ref.i, align 4, !dbg !9496
  %1 = add nsw i32 %ref1.i, 1, !dbg !9496
  store i32 %1, i32* %ref.i, align 4, !dbg !9496
  ret %ARRAYIMPL* %0, !dbg !9497
}

; Function Attrs: alwaysinline nofree norecurse nounwind
define hidden { i1, %ARRAYIMPL* } @tcl.arraystring.extractarray.nexist({ i1, %ARRAYSTRING } %as) local_unnamed_addr #10 !dbg !9498 {
enter:
  %0 = extractvalue { i1, %ARRAYSTRING } %as, 0, !dbg !9503
  br i1 %0, label %nothing, label %array, !dbg !9503

array:                                            ; preds = %enter
  %1 = extractvalue { i1, %ARRAYSTRING } %as, 1, !dbg !9504
  %2 = extractvalue %ARRAYSTRING %1, 1, !dbg !9505
  %ref.i.i = getelementptr %ARRAYIMPL, %ARRAYIMPL* %2, i64 0, i32 0, !dbg !9507
  %ref1.i.i = load i32, i32* %ref.i.i, align 4, !dbg !9509
  %3 = add nsw i32 %ref1.i.i, 1, !dbg !9509
  store i32 %3, i32* %ref.i.i, align 4, !dbg !9509
  %4 = insertvalue { i1, %ARRAYIMPL* } { i1 false, %ARRAYIMPL* undef }, %ARRAYIMPL* %2, 1, !dbg !9510
  ret { i1, %ARRAYIMPL* } %4, !dbg !9510

nothing:                                          ; preds = %enter
  ret { i1, %ARRAYIMPL* } { i1 true, %ARRAYIMPL* undef }, !dbg !9511
}

; Function Attrs: alwaysinline nofree norecurse nounwind
define hidden %Tcl_Obj* @tcl.arraystring.extractscalar(%ARRAYSTRING %as) local_unnamed_addr #10 !dbg !9512 {
enter:
  %0 = extractvalue %ARRAYSTRING %as, 2, !dbg !9517
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %0, i64 0, i32 0, !dbg !9518
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !9521
  %1 = add nsw i32 %refCount1.i.i, 1, !dbg !9521
  store i32 %1, i32* %refCount.i.i, align 4, !dbg !9521
  ret %Tcl_Obj* %0, !dbg !9522
}

; Function Attrs: alwaysinline nofree norecurse nounwind
define hidden { i1, %Tcl_Obj* } @tcl.arraystring.extractscalar.nexist({ i1, %ARRAYSTRING } %as) local_unnamed_addr #10 !dbg !9523 {
enter:
  %0 = extractvalue { i1, %ARRAYSTRING } %as, 0, !dbg !9528
  br i1 %0, label %nothing, label %scalar, !dbg !9528

scalar:                                           ; preds = %enter
  %1 = extractvalue { i1, %ARRAYSTRING } %as, 1, !dbg !9529
  %2 = extractvalue %ARRAYSTRING %1, 2, !dbg !9530
  %refCount.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %2, i64 0, i32 0, !dbg !9532
  %refCount1.i.i.i = load i32, i32* %refCount.i.i.i, align 4, !dbg !9535
  %3 = add nsw i32 %refCount1.i.i.i, 1, !dbg !9535
  store i32 %3, i32* %refCount.i.i.i, align 4, !dbg !9535
  %4 = insertvalue { i1, %Tcl_Obj* } { i1 false, %Tcl_Obj* undef }, %Tcl_Obj* %2, 1, !dbg !9536
  ret { i1, %Tcl_Obj* } %4, !dbg !9536

nothing:                                          ; preds = %enter
  ret { i1, %Tcl_Obj* } { i1 true, %Tcl_Obj* undef }, !dbg !9537
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden i1 @tcl.arraystring.isarray({ i1, %ARRAYSTRING } %as) local_unnamed_addr #0 !dbg !9538 {
enter:
  %0 = extractvalue { i1, %ARRAYSTRING } %as, 0, !dbg !9543
  br i1 %0, label %nothing, label %value, !dbg !9543

nothing:                                          ; preds = %enter
  ret i1 false, !dbg !9544

value:                                            ; preds = %enter
  %1 = extractvalue { i1, %ARRAYSTRING } %as, 1, !dbg !9545
  %2 = extractvalue %ARRAYSTRING %1, 0, !dbg !9545
  %3 = xor i1 %2, true, !dbg !9545
  ret i1 %3, !dbg !9545
}

; Function Attrs: alwaysinline nounwind
define hidden i1 @tcl.array.elemexists(%ARRAYIMPL* nocapture readonly %array, %Tcl_Obj* nocapture nonnull readonly %key) local_unnamed_addr #6 !dbg !9546 {
enter:
  %ary.ptr = getelementptr %ARRAYIMPL, %ARRAYIMPL* %array, i64 0, i32 2, !dbg !9552
  %ary = load %VarHashTable*, %VarHashTable** %ary.ptr, align 8, !dbg !9552
  %table = getelementptr %VarHashTable, %VarHashTable* %ary, i64 0, i32 0, !dbg !9553
  %key1 = bitcast %Tcl_Obj* %key to i8*, !dbg !9553
  %entry = tail call %HashEntry* @Tcl_FindHashEntry(%HashTable* noalias nocapture nonnull %table, i8* noalias nocapture nonnull readonly %key1), !dbg !9553
  %0 = icmp eq %HashEntry* %entry, null, !dbg !9554
  br i1 %0, label %unfound, label %found, !dbg !9554

found:                                            ; preds = %enter
  %ptr1.i = getelementptr %HashEntry, %HashEntry* %entry, i64 -1, i32 2, !dbg !9555
  %value.ptr.i.i = getelementptr i8*, i8** %ptr1.i, i64 1, !dbg !9557
  %1 = bitcast i8** %value.ptr.i.i to %Tcl_Obj**, !dbg !9557
  %value.i.i = load %Tcl_Obj*, %Tcl_Obj** %1, align 8, !dbg !9557
  %2 = icmp ne %Tcl_Obj* %value.i.i, null, !dbg !9560
  ret i1 %2, !dbg !9561

unfound:                                          ; preds = %enter
  ret i1 false, !dbg !9562
}

; Function Attrs: alwaysinline nounwind
define hidden i1 @tcl.arraystring.elemexists(%ARRAYSTRING %as, %Tcl_Obj* nocapture readonly %key) local_unnamed_addr #6 !dbg !9563 {
enter:
  %0 = extractvalue %ARRAYSTRING %as, 0, !dbg !9569
  br i1 %0, label %tcl.array.elemexists.exit, label %array, !dbg !9569

array:                                            ; preds = %enter
  %1 = extractvalue %ARRAYSTRING %as, 1, !dbg !9570
  %ary.ptr.i = getelementptr %ARRAYIMPL, %ARRAYIMPL* %1, i64 0, i32 2, !dbg !9571
  %ary.i = load %VarHashTable*, %VarHashTable** %ary.ptr.i, align 8, !dbg !9571
  %table.i = getelementptr %VarHashTable, %VarHashTable* %ary.i, i64 0, i32 0, !dbg !9573
  %key1.i = bitcast %Tcl_Obj* %key to i8*, !dbg !9573
  %entry.i = tail call %HashEntry* @Tcl_FindHashEntry(%HashTable* noalias nocapture nonnull %table.i, i8* noalias nocapture nonnull readonly %key1.i) #5, !dbg !9573
  %2 = icmp eq %HashEntry* %entry.i, null, !dbg !9574
  br i1 %2, label %tcl.array.elemexists.exit, label %found.i, !dbg !9574

found.i:                                          ; preds = %array
  %ptr1.i.i = getelementptr %HashEntry, %HashEntry* %entry.i, i64 -1, i32 2, !dbg !9575
  %value.ptr.i.i.i = getelementptr i8*, i8** %ptr1.i.i, i64 1, !dbg !9577
  %3 = bitcast i8** %value.ptr.i.i.i to %Tcl_Obj**, !dbg !9577
  %value.i.i.i = load %Tcl_Obj*, %Tcl_Obj** %3, align 8, !dbg !9577
  %4 = icmp ne %Tcl_Obj* %value.i.i.i, null, !dbg !9580
  br label %tcl.array.elemexists.exit, !dbg !9581

tcl.array.elemexists.exit:                        ; preds = %enter, %array, %found.i
  %5 = phi i1 [ %4, %found.i ], [ false, %array ], [ false, %enter ]
  ret i1 %5, !dbg !9582
}

; Function Attrs: alwaysinline nounwind
define hidden { i1, %Tcl_Obj* } @tcl.array.get(%ARRAYIMPL* nocapture readonly %array, %Tcl_Obj* nocapture nonnull readonly %key) local_unnamed_addr #6 !dbg !9583 {
enter:
  %ary.ptr = getelementptr %ARRAYIMPL, %ARRAYIMPL* %array, i64 0, i32 2, !dbg !9589
  %ary = load %VarHashTable*, %VarHashTable** %ary.ptr, align 8, !dbg !9589
  %table = getelementptr %VarHashTable, %VarHashTable* %ary, i64 0, i32 0, !dbg !9590
  %key1 = bitcast %Tcl_Obj* %key to i8*, !dbg !9590
  %entry = tail call %HashEntry* @Tcl_FindHashEntry(%HashTable* noalias nocapture nonnull %table, i8* noalias nocapture nonnull readonly %key1), !dbg !9590
  %0 = icmp eq %HashEntry* %entry, null, !dbg !9591
  br i1 %0, label %unfound, label %found, !dbg !9591

found:                                            ; preds = %enter
  %ptr1.i = getelementptr %HashEntry, %HashEntry* %entry, i64 -1, i32 2, !dbg !9592
  %value.ptr.i = getelementptr i8*, i8** %ptr1.i, i64 1, !dbg !9594
  %1 = bitcast i8** %value.ptr.i to %Tcl_Obj**, !dbg !9594
  %value.i = load %Tcl_Obj*, %Tcl_Obj** %1, align 8, !dbg !9594
  %2 = icmp eq %Tcl_Obj* %value.i, null, !dbg !9596
  br i1 %2, label %unfound, label %found.for.real, !dbg !9596

found.for.real:                                   ; preds = %found
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value.i, i64 0, i32 0, !dbg !9597
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !9600
  %3 = add nsw i32 %refCount1.i.i, 1, !dbg !9600
  store i32 %3, i32* %refCount.i.i, align 4, !dbg !9600
  %4 = insertvalue { i1, %Tcl_Obj* } { i1 false, %Tcl_Obj* undef }, %Tcl_Obj* %value.i, 1, !dbg !9601
  ret { i1, %Tcl_Obj* } %4, !dbg !9601

unfound:                                          ; preds = %found, %enter
  ret { i1, %Tcl_Obj* } { i1 true, %Tcl_Obj* undef }, !dbg !9602
}

; Function Attrs: alwaysinline nounwind
define hidden %ARRAYIMPL* @tcl.array.set(%ARRAYIMPL* returned %array, %Tcl_Obj* nonnull %key, %Tcl_Obj* nonnull %value) local_unnamed_addr #6 !dbg !9603 {
enter:
  %isNew.ptr = alloca i32, align 4, !dbg !9610
  %ary.ptr = getelementptr %ARRAYIMPL, %ARRAYIMPL* %array, i64 0, i32 2, !dbg !9611
  %ary = load %VarHashTable*, %VarHashTable** %ary.ptr, align 8, !dbg !9611
  %table = getelementptr %VarHashTable, %VarHashTable* %ary, i64 0, i32 0, !dbg !9612
  %key1 = bitcast %Tcl_Obj* %key to i8*, !dbg !9612
  %entry = call nonnull %HashEntry* @Tcl_CreateHashEntry(%HashTable* noalias nocapture nonnull %table, i8* noalias nonnull %key1, i32* noalias nocapture nonnull %isNew.ptr), !dbg !9612
  %ptr1.i = getelementptr %HashEntry, %HashEntry* %entry, i64 -1, i32 2, !dbg !9613
  %refCount.i.i2 = getelementptr %Tcl_Obj, %Tcl_Obj* %value, i64 0, i32 0, !dbg !9615
  %refCount1.i.i3 = load i32, i32* %refCount.i.i2, align 4, !dbg !9618
  %0 = add nsw i32 %refCount1.i.i3, 1, !dbg !9618
  store i32 %0, i32* %refCount.i.i2, align 4, !dbg !9618
  %isNew = load i32, i32* %isNew.ptr, align 4, !dbg !9619
  %is.new = icmp eq i32 %isNew, 0, !dbg !9619
  %value.ptr.i = getelementptr i8*, i8** %ptr1.i, i64 1, !dbg !9620
  %1 = bitcast i8** %value.ptr.i to %Tcl_Obj**, !dbg !9620
  br i1 %is.new, label %update, label %create, !dbg !9621

create:                                           ; preds = %enter
  store %Tcl_Obj* %value, %Tcl_Obj** %1, align 8, !dbg !9622
  %flags.i = bitcast i8** %ptr1.i to i32*, !dbg !9624
  %flags1.i = load i32, i32* %flags.i, align 4, !dbg !9626
  %2 = or i32 %flags1.i, 4096, !dbg !9626
  store i32 %2, i32* %flags.i, align 4, !dbg !9626
  br label %done, !dbg !9627

update:                                           ; preds = %enter
  %value.i4 = load %Tcl_Obj*, %Tcl_Obj** %1, align 8, !dbg !9628
  store %Tcl_Obj* %value, %Tcl_Obj** %1, align 8, !dbg !9630
  %3 = icmp eq %Tcl_Obj* %value.i4, null, !dbg !9632
  br i1 %3, label %done, label %drop.old.value, !dbg !9632

drop.old.value:                                   ; preds = %update
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value.i4, i64 0, i32 0, !dbg !9633
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !9636
  %4 = icmp slt i32 %refCount1.i.i, 2, !dbg !9637
  br i1 %4, label %freeObject.i.i, label %leave.i.i, !dbg !9637

freeObject.i.i:                                   ; preds = %drop.old.value
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %value.i4) #5, !dbg !9638
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %value.i4) #5, !dbg !9639
  br label %done, !dbg !9640

leave.i.i:                                        ; preds = %drop.old.value
  %5 = add nsw i32 %refCount1.i.i, -1, !dbg !9636
  store i32 %5, i32* %refCount.i.i, align 4, !dbg !9641
  br label %done, !dbg !9642

done:                                             ; preds = %leave.i.i, %freeObject.i.i, %update, %create
  %ref.i = getelementptr %ARRAYIMPL, %ARRAYIMPL* %array, i64 0, i32 0, !dbg !9643
  %ref1.i = load i32, i32* %ref.i, align 4, !dbg !9645
  %6 = add nsw i32 %ref1.i, 1, !dbg !9645
  store i32 %6, i32* %ref.i, align 4, !dbg !9645
  ret %ARRAYIMPL* %array, !dbg !9646
}

; Function Attrs: alwaysinline nounwind
define hidden %ARRAYIMPL* @tcl.array.unset(%ARRAYIMPL* returned %array, %Tcl_Obj* nocapture nonnull readonly %key, %Tcl_Obj* nocapture nonnull %name) local_unnamed_addr #6 !dbg !9647 {
enter:
  %ary.ptr = getelementptr %ARRAYIMPL, %ARRAYIMPL* %array, i64 0, i32 2, !dbg !9652
  %ary = load %VarHashTable*, %VarHashTable** %ary.ptr, align 8, !dbg !9652
  %table = getelementptr %VarHashTable, %VarHashTable* %ary, i64 0, i32 0, !dbg !9653
  %key1 = bitcast %Tcl_Obj* %key to i8*, !dbg !9653
  %entry = tail call %HashEntry* @Tcl_FindHashEntry(%HashTable* noalias nocapture nonnull %table, i8* noalias nocapture nonnull readonly %key1), !dbg !9653
  %0 = icmp eq %HashEntry* %entry, null, !dbg !9654
  br i1 %0, label %done, label %found, !dbg !9654

found:                                            ; preds = %enter
  %ptr1.i = getelementptr %HashEntry, %HashEntry* %entry, i64 -1, i32 2, !dbg !9655
  %var.i = bitcast i8** %ptr1.i to %Var*, !dbg !9657
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !9658, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %flags.ptr.i.i = bitcast i8** %ptr1.i to i32*, !dbg !9659
  %flags1.i.i = load i32, i32* %flags.ptr.i.i, align 4, !dbg !9659, !alias.scope !9662, !noalias !9665
  %1 = icmp eq i32 %flags1.i.i, 0, !dbg !9668
  br i1 %1, label %unset.fast.i, label %unset.slow.i, !dbg !9669

unset.fast.i:                                     ; preds = %found
  %value.ptr.i.i = getelementptr i8*, i8** %ptr1.i, i64 1, !dbg !9670
  %2 = bitcast i8** %value.ptr.i.i to %Tcl_Obj**, !dbg !9670
  %value.i.i = load %Tcl_Obj*, %Tcl_Obj** %2, align 8, !dbg !9670, !alias.scope !9662, !noalias !9665
  %3 = icmp eq %Tcl_Obj* %value.i.i, null, !dbg !9672
  br i1 %3, label %unset.slow.i, label %unset.fast.done.i, !dbg !9672

unset.fast.done.i:                                ; preds = %unset.fast.i
  store %Tcl_Obj* null, %Tcl_Obj** %2, align 8, !dbg !9673, !alias.scope !9662, !noalias !9665
  %refCount.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value.i.i, i64 0, i32 0, !dbg !9675
  %refCount1.i.i.i = load i32, i32* %refCount.i.i.i, align 4, !dbg !9678, !noalias !9679
  %4 = icmp slt i32 %refCount1.i.i.i, 2, !dbg !9680
  br i1 %4, label %freeObject.i.i.i, label %leave.i.i.i, !dbg !9680

freeObject.i.i.i:                                 ; preds = %unset.fast.done.i
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %value.i.i) #5, !dbg !9681, !noalias !9679
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %value.i.i) #5, !dbg !9682, !noalias !9679
  br label %done, !dbg !9683

leave.i.i.i:                                      ; preds = %unset.fast.done.i
  %5 = add nsw i32 %refCount1.i.i.i, -1, !dbg !9678
  store i32 %5, i32* %refCount.i.i.i, align 4, !dbg !9684, !noalias !9679
  br label %done, !dbg !9685

unset.slow.i:                                     ; preds = %unset.fast.i, %found
  %code.i = tail call i32 @TclPtrUnsetVar(%Interp* noalias nocapture nonnull %interp, %Var* noalias nocapture nonnull %var.i, %Var* noalias nocapture null, %Tcl_Obj* nocapture nonnull %name, %Tcl_Obj* nocapture null, i32 0) #5, !dbg !9686
  br label %done, !dbg !9686

done:                                             ; preds = %unset.slow.i, %leave.i.i.i, %freeObject.i.i.i, %enter
  %ref.i = getelementptr %ARRAYIMPL, %ARRAYIMPL* %array, i64 0, i32 0, !dbg !9687
  %ref1.i = load i32, i32* %ref.i, align 4, !dbg !9689
  %6 = add nsw i32 %ref1.i, 1, !dbg !9689
  store i32 %6, i32* %ref.i, align 4, !dbg !9689
  ret %ARRAYIMPL* %array, !dbg !9690
}

; Function Attrs: alwaysinline nounwind
define hidden void @callframe.kill.var.contents(%Interp* nocapture nonnull %interp, %Var* nocapture nonnull %var, %Tcl_Obj* nocapture nonnull %varName) local_unnamed_addr #6 !dbg !9691 {
enter:
  %0 = getelementptr inbounds %Var, %Var* %var, i64 1, i32 0, !dbg !9698
  %refCount1 = load i32, i32* %0, align 4, !dbg !9699
  %1 = add nsw i32 %refCount1, 1, !dbg !9699
  store i32 %1, i32* %0, align 4, !dbg !9699
  %flags.ptr.i.i = getelementptr %Var, %Var* %var, i64 0, i32 0, !dbg !9700
  %flags1.i.i = load i32, i32* %flags.ptr.i.i, align 4, !dbg !9700, !alias.scope !9703, !noalias !9706
  %2 = icmp eq i32 %flags1.i.i, 0, !dbg !9709
  br i1 %2, label %unset.fast.i, label %unset.slow.i, !dbg !9710

unset.fast.i:                                     ; preds = %enter
  %value.ptr.i.i = getelementptr %Var, %Var* %var, i64 0, i32 1, !dbg !9711
  %value.i.i = load %Tcl_Obj*, %Tcl_Obj** %value.ptr.i.i, align 8, !dbg !9711, !alias.scope !9703, !noalias !9706
  %3 = icmp eq %Tcl_Obj* %value.i.i, null, !dbg !9713
  br i1 %3, label %unset.slow.i, label %unset.fast.done.i, !dbg !9713

unset.fast.done.i:                                ; preds = %unset.fast.i
  store %Tcl_Obj* null, %Tcl_Obj** %value.ptr.i.i, align 8, !dbg !9714, !alias.scope !9703, !noalias !9706
  %refCount.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value.i.i, i64 0, i32 0, !dbg !9716
  %refCount1.i.i.i = load i32, i32* %refCount.i.i.i, align 4, !dbg !9719, !noalias !9720
  %4 = icmp slt i32 %refCount1.i.i.i, 2, !dbg !9721
  br i1 %4, label %freeObject.i.i.i, label %leave.i.i.i, !dbg !9721

freeObject.i.i.i:                                 ; preds = %unset.fast.done.i
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %value.i.i) #5, !dbg !9722, !noalias !9720
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %value.i.i) #5, !dbg !9723, !noalias !9720
  br label %tcl.unset.var.ptr.exit, !dbg !9724

leave.i.i.i:                                      ; preds = %unset.fast.done.i
  %5 = add nsw i32 %refCount1.i.i.i, -1, !dbg !9719
  store i32 %5, i32* %refCount.i.i.i, align 4, !dbg !9725, !noalias !9720
  br label %tcl.unset.var.ptr.exit, !dbg !9726

unset.slow.i:                                     ; preds = %unset.fast.i, %enter
  %code.i = tail call i32 @TclPtrUnsetVar(%Interp* noalias nocapture nonnull %interp, %Var* noalias nocapture nonnull %var, %Var* noalias nocapture null, %Tcl_Obj* nocapture nonnull %varName, %Tcl_Obj* nocapture null, i32 0) #5, !dbg !9727
  br label %tcl.unset.var.ptr.exit, !dbg !9727

tcl.unset.var.ptr.exit:                           ; preds = %freeObject.i.i.i, %leave.i.i.i, %unset.slow.i
  %refCount2 = load i32, i32* %0, align 4, !dbg !9728
  %6 = add nsw i32 %refCount2, -1, !dbg !9728
  store i32 %6, i32* %0, align 4, !dbg !9728
  ret void, !dbg !9729
}

; Function Attrs: alwaysinline nounwind
define hidden void @callframe.store.array(%Interp* nocapture %interp, %Var* nocapture %var, %Tcl_Obj* nocapture %varName, %ARRAYIMPL* nocapture %array) local_unnamed_addr #6 !dbg !9730 {
enter:
  %ary.ptr = getelementptr %ARRAYIMPL, %ARRAYIMPL* %array, i64 0, i32 2, !dbg !9738
  %ary = load %VarHashTable*, %VarHashTable** %ary.ptr, align 8, !dbg !9738
  %array.provenance = getelementptr %ARRAYIMPL, %ARRAYIMPL* %array, i64 0, i32 1, !dbg !9739
  store i1 true, i1* %array.provenance, align 1, !dbg !9739
  %value.ptr.i.i = getelementptr %Var, %Var* %var, i64 0, i32 1, !dbg !9740
  %value.i.i = load %Tcl_Obj*, %Tcl_Obj** %value.ptr.i.i, align 8, !dbg !9740
  %0 = icmp eq %Tcl_Obj* %value.i.i, null, !dbg !9743
  br i1 %0, label %make.array, label %already.array, !dbg !9744

already.array:                                    ; preds = %enter
  %1 = bitcast %Tcl_Obj* %value.i.i to %VarHashTable*, !dbg !9744
  %2 = bitcast %Tcl_Obj** %value.ptr.i.i to %VarHashTable**, !dbg !9745
  %3 = icmp eq %VarHashTable* %ary, %1, !dbg !9747
  br i1 %3, label %done, label %change.array, !dbg !9747

done:                                             ; preds = %already.array
  ret void, !dbg !9748

change.array:                                     ; preds = %already.array
  %4 = getelementptr inbounds %Var, %Var* %var, i64 1, i32 0, !dbg !9749
  %refCount1.i = load i32, i32* %4, align 4, !dbg !9751
  %5 = add nsw i32 %refCount1.i, 1, !dbg !9751
  store i32 %5, i32* %4, align 4, !dbg !9751
  %flags.ptr.i.i.i = getelementptr %Var, %Var* %var, i64 0, i32 0, !dbg !9752
  %flags1.i.i.i = load i32, i32* %flags.ptr.i.i.i, align 4, !dbg !9752, !alias.scope !9755, !noalias !9758
  %6 = icmp eq i32 %flags1.i.i.i, 0, !dbg !9761
  br i1 %6, label %unset.fast.done.i.i, label %unset.slow.i.i, !dbg !9762

unset.fast.done.i.i:                              ; preds = %change.array
  store %Tcl_Obj* null, %Tcl_Obj** %value.ptr.i.i, align 8, !dbg !9763, !alias.scope !9755, !noalias !9758
  %refCount.i.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value.i.i, i64 0, i32 0, !dbg !9765
  %refCount1.i.i.i.i = load i32, i32* %refCount.i.i.i.i, align 4, !dbg !9768, !noalias !9769
  %7 = icmp slt i32 %refCount1.i.i.i.i, 2, !dbg !9770
  br i1 %7, label %freeObject.i.i.i.i, label %leave.i.i.i.i, !dbg !9770

freeObject.i.i.i.i:                               ; preds = %unset.fast.done.i.i
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %value.i.i) #5, !dbg !9771, !noalias !9769
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %value.i.i) #5, !dbg !9772, !noalias !9769
  br label %callframe.kill.var.contents.exit, !dbg !9773

leave.i.i.i.i:                                    ; preds = %unset.fast.done.i.i
  %8 = add nsw i32 %refCount1.i.i.i.i, -1, !dbg !9768
  store i32 %8, i32* %refCount.i.i.i.i, align 4, !dbg !9774, !noalias !9769
  br label %callframe.kill.var.contents.exit, !dbg !9775

unset.slow.i.i:                                   ; preds = %change.array
  %code.i.i = tail call i32 @TclPtrUnsetVar(%Interp* noalias nocapture nonnull %interp, %Var* noalias nocapture nonnull %var, %Var* noalias nocapture null, %Tcl_Obj* nocapture nonnull %varName, %Tcl_Obj* nocapture null, i32 0) #5, !dbg !9776
  br label %callframe.kill.var.contents.exit, !dbg !9776

callframe.kill.var.contents.exit:                 ; preds = %freeObject.i.i.i.i, %leave.i.i.i.i, %unset.slow.i.i
  %refCount2.i = load i32, i32* %4, align 4, !dbg !9777
  %9 = add nsw i32 %refCount2.i, -1, !dbg !9777
  store i32 %9, i32* %4, align 4, !dbg !9777
  %flags1.i.i3 = load i32, i32* %flags.ptr.i.i.i, align 4, !dbg !9778
  %10 = or i32 %flags1.i.i3, 1, !dbg !9778
  store i32 %10, i32* %flags.ptr.i.i.i, align 4, !dbg !9778
  store %VarHashTable* %ary, %VarHashTable** %2, align 8, !dbg !9781
  ret void, !dbg !9783

make.array:                                       ; preds = %enter
  %flags.i.i = getelementptr %Var, %Var* %var, i64 0, i32 0, !dbg !9784
  %flags1.i.i = load i32, i32* %flags.i.i, align 4, !dbg !9787
  %11 = or i32 %flags1.i.i, 1, !dbg !9787
  store i32 %11, i32* %flags.i.i, align 4, !dbg !9787
  %12 = bitcast %Tcl_Obj** %value.ptr.i.i to %VarHashTable**, !dbg !9788
  store %VarHashTable* %ary, %VarHashTable** %12, align 8, !dbg !9788
  ret void, !dbg !9790
}

; Function Attrs: alwaysinline nounwind
define hidden void @callframe.kill.scalar(%Interp* nocapture %interp, %Var* nocapture %var, %Tcl_Obj* nocapture %varName) local_unnamed_addr #6 !dbg !9791 {
enter:
  %value.ptr.i.i = getelementptr %Var, %Var* %var, i64 0, i32 1, !dbg !9796
  %value.i.i = load %Tcl_Obj*, %Tcl_Obj** %value.ptr.i.i, align 8, !dbg !9796
  %0 = icmp ne %Tcl_Obj* %value.i.i, null, !dbg !9799
  %flags.ptr.i.i = getelementptr %Var, %Var* %var, i64 0, i32 0, !dbg !9800
  %flags.i.i = load i32, i32* %flags.ptr.i.i, align 4, !dbg !9800
  %1 = and i32 %flags.i.i, 3, !dbg !9803
  %2 = icmp eq i32 %1, 0, !dbg !9803
  %3 = and i1 %0, %2, !dbg !9804
  br i1 %3, label %kill, label %done, !dbg !9804

kill:                                             ; preds = %enter
  %4 = getelementptr inbounds %Var, %Var* %var, i64 1, i32 0, !dbg !9805
  %refCount1.i = load i32, i32* %4, align 4, !dbg !9807
  %5 = add nsw i32 %refCount1.i, 1, !dbg !9807
  store i32 %5, i32* %4, align 4, !dbg !9807
  %6 = icmp eq i32 %flags.i.i, 0, !dbg !9808
  br i1 %6, label %unset.fast.done.i.i, label %unset.slow.i.i, !dbg !9811

unset.fast.done.i.i:                              ; preds = %kill
  store %Tcl_Obj* null, %Tcl_Obj** %value.ptr.i.i, align 8, !dbg !9812, !alias.scope !9814, !noalias !9817
  %refCount.i.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value.i.i, i64 0, i32 0, !dbg !9820
  %refCount1.i.i.i.i = load i32, i32* %refCount.i.i.i.i, align 4, !dbg !9823, !noalias !9824
  %7 = icmp slt i32 %refCount1.i.i.i.i, 2, !dbg !9825
  br i1 %7, label %freeObject.i.i.i.i, label %leave.i.i.i.i, !dbg !9825

freeObject.i.i.i.i:                               ; preds = %unset.fast.done.i.i
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %value.i.i) #5, !dbg !9826, !noalias !9824
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %value.i.i) #5, !dbg !9827, !noalias !9824
  br label %callframe.kill.var.contents.exit, !dbg !9828

leave.i.i.i.i:                                    ; preds = %unset.fast.done.i.i
  %8 = add nsw i32 %refCount1.i.i.i.i, -1, !dbg !9823
  store i32 %8, i32* %refCount.i.i.i.i, align 4, !dbg !9829, !noalias !9824
  br label %callframe.kill.var.contents.exit, !dbg !9830

unset.slow.i.i:                                   ; preds = %kill
  %code.i.i = tail call i32 @TclPtrUnsetVar(%Interp* noalias nocapture nonnull %interp, %Var* noalias nocapture nonnull %var, %Var* noalias nocapture null, %Tcl_Obj* nocapture nonnull %varName, %Tcl_Obj* nocapture null, i32 0) #5, !dbg !9831
  br label %callframe.kill.var.contents.exit, !dbg !9831

callframe.kill.var.contents.exit:                 ; preds = %freeObject.i.i.i.i, %leave.i.i.i.i, %unset.slow.i.i
  %refCount2.i = load i32, i32* %4, align 4, !dbg !9832
  %9 = add nsw i32 %refCount2.i, -1, !dbg !9832
  store i32 %9, i32* %4, align 4, !dbg !9832
  ret void, !dbg !9833

done:                                             ; preds = %enter
  ret void, !dbg !9834
}

; Function Attrs: alwaysinline nounwind
define hidden void @callframe.kill.array(%Interp* nocapture %interp, %Var* nocapture %var, %Tcl_Obj* nocapture %varName) local_unnamed_addr #6 !dbg !9835 {
enter:
  %value.ptr.i.i = getelementptr %Var, %Var* %var, i64 0, i32 1, !dbg !9840
  %value.i.i = load %Tcl_Obj*, %Tcl_Obj** %value.ptr.i.i, align 8, !dbg !9840
  %0 = icmp ne %Tcl_Obj* %value.i.i, null, !dbg !9843
  %flags.ptr.i.i = getelementptr %Var, %Var* %var, i64 0, i32 0, !dbg !9844
  %flags.i.i = load i32, i32* %flags.ptr.i.i, align 4, !dbg !9844
  %1 = and i32 %flags.i.i, 1, !dbg !9847
  %2 = icmp ne i32 %1, 0, !dbg !9847
  %3 = and i1 %0, %2, !dbg !9848
  br i1 %3, label %kill, label %done, !dbg !9848

kill:                                             ; preds = %enter
  %4 = getelementptr inbounds %Var, %Var* %var, i64 1, i32 0, !dbg !9849
  %refCount1.i = load i32, i32* %4, align 4, !dbg !9851
  %5 = add nsw i32 %refCount1.i, 1, !dbg !9851
  store i32 %5, i32* %4, align 4, !dbg !9851
  %6 = icmp eq i32 %flags.i.i, 0, !dbg !9852
  br i1 %6, label %unset.fast.done.i.i, label %unset.slow.i.i, !dbg !9855

unset.fast.done.i.i:                              ; preds = %kill
  store %Tcl_Obj* null, %Tcl_Obj** %value.ptr.i.i, align 8, !dbg !9856, !alias.scope !9858, !noalias !9861
  %refCount.i.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value.i.i, i64 0, i32 0, !dbg !9864
  %refCount1.i.i.i.i = load i32, i32* %refCount.i.i.i.i, align 4, !dbg !9867, !noalias !9868
  %7 = icmp slt i32 %refCount1.i.i.i.i, 2, !dbg !9869
  br i1 %7, label %freeObject.i.i.i.i, label %leave.i.i.i.i, !dbg !9869

freeObject.i.i.i.i:                               ; preds = %unset.fast.done.i.i
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %value.i.i) #5, !dbg !9870, !noalias !9868
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %value.i.i) #5, !dbg !9871, !noalias !9868
  br label %callframe.kill.var.contents.exit, !dbg !9872

leave.i.i.i.i:                                    ; preds = %unset.fast.done.i.i
  %8 = add nsw i32 %refCount1.i.i.i.i, -1, !dbg !9867
  store i32 %8, i32* %refCount.i.i.i.i, align 4, !dbg !9873, !noalias !9868
  br label %callframe.kill.var.contents.exit, !dbg !9874

unset.slow.i.i:                                   ; preds = %kill
  %code.i.i = tail call i32 @TclPtrUnsetVar(%Interp* noalias nocapture nonnull %interp, %Var* noalias nocapture nonnull %var, %Var* noalias nocapture null, %Tcl_Obj* nocapture nonnull %varName, %Tcl_Obj* nocapture null, i32 0) #5, !dbg !9875
  br label %callframe.kill.var.contents.exit, !dbg !9875

callframe.kill.var.contents.exit:                 ; preds = %freeObject.i.i.i.i, %leave.i.i.i.i, %unset.slow.i.i
  %refCount2.i = load i32, i32* %4, align 4, !dbg !9876
  %9 = add nsw i32 %refCount2.i, -1, !dbg !9876
  store i32 %9, i32* %4, align 4, !dbg !9876
  ret void, !dbg !9877

done:                                             ; preds = %enter
  ret void, !dbg !9878
}

; Function Attrs: alwaysinline nounwind
define hidden void @tcl.callframe.store.array(%Var* nocapture %var, %Tcl_Obj* nocapture %varName, { i1, %ARRAYIMPL* } %array) local_unnamed_addr #6 !dbg !9879 {
enter:
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !9886, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %flags.ptr.i.i1.i = getelementptr %Var, %Var* %var, i64 0, i32 0, !dbg !9887
  %flags.i.i2.i = load i32, i32* %flags.ptr.i.i1.i, align 4, !dbg !9887
  %0 = and i32 %flags.i.i2.i, 2, !dbg !9891
  %1 = icmp eq i32 %0, 0, !dbg !9891
  br i1 %1, label %var.followLinks.exit, label %follow.i, !dbg !9892

follow.i:                                         ; preds = %enter, %follow.i
  %.03.i = phi %Var* [ %value1.i.i, %follow.i ], [ %var, %enter ]
  %value.ptr.i.i = getelementptr %Var, %Var* %.03.i, i64 0, i32 1, !dbg !9893
  %2 = bitcast %Tcl_Obj** %value.ptr.i.i to %Var**, !dbg !9893
  %value1.i.i = load %Var*, %Var** %2, align 8, !dbg !9893
  %flags.ptr.i.i.i = getelementptr %Var, %Var* %value1.i.i, i64 0, i32 0, !dbg !9887
  %flags.i.i.i = load i32, i32* %flags.ptr.i.i.i, align 4, !dbg !9887
  %3 = and i32 %flags.i.i.i, 2, !dbg !9891
  %4 = icmp eq i32 %3, 0, !dbg !9891
  br i1 %4, label %var.followLinks.exit, label %follow.i, !dbg !9892

var.followLinks.exit:                             ; preds = %follow.i, %enter
  %flags1.i.i = phi i32 [ %flags.i.i2.i, %enter ], [ %flags.i.i.i, %follow.i ]
  %.0.lcssa.i = phi %Var* [ %var, %enter ], [ %value1.i.i, %follow.i ], !dbg !9895
  %5 = extractvalue { i1, %ARRAYIMPL* } %array, 0, !dbg !9896
  br i1 %5, label %nothing, label %realArray, !dbg !9896

nothing:                                          ; preds = %var.followLinks.exit
  %6 = icmp eq i32 %flags1.i.i, 0, !dbg !9897
  br i1 %6, label %unset.fast.i, label %unset.slow.i, !dbg !9900

unset.fast.i:                                     ; preds = %nothing
  %value.ptr.i.i2 = getelementptr %Var, %Var* %.0.lcssa.i, i64 0, i32 1, !dbg !9901
  %value.i.i = load %Tcl_Obj*, %Tcl_Obj** %value.ptr.i.i2, align 8, !dbg !9901, !alias.scope !9903, !noalias !9906
  %7 = icmp eq %Tcl_Obj* %value.i.i, null, !dbg !9909
  br i1 %7, label %unset.slow.i, label %unset.fast.done.i, !dbg !9909

unset.fast.done.i:                                ; preds = %unset.fast.i
  store %Tcl_Obj* null, %Tcl_Obj** %value.ptr.i.i2, align 8, !dbg !9910, !alias.scope !9903, !noalias !9906
  %refCount.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value.i.i, i64 0, i32 0, !dbg !9912
  %refCount1.i.i.i = load i32, i32* %refCount.i.i.i, align 4, !dbg !9915, !noalias !9916
  %8 = icmp slt i32 %refCount1.i.i.i, 2, !dbg !9917
  br i1 %8, label %freeObject.i.i.i, label %leave.i.i.i, !dbg !9917

freeObject.i.i.i:                                 ; preds = %unset.fast.done.i
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %value.i.i) #5, !dbg !9918, !noalias !9916
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %value.i.i) #5, !dbg !9919, !noalias !9916
  br label %tcl.unset.var.ptr.exit, !dbg !9920

leave.i.i.i:                                      ; preds = %unset.fast.done.i
  %9 = add nsw i32 %refCount1.i.i.i, -1, !dbg !9915
  store i32 %9, i32* %refCount.i.i.i, align 4, !dbg !9921, !noalias !9916
  br label %tcl.unset.var.ptr.exit, !dbg !9922

unset.slow.i:                                     ; preds = %unset.fast.i, %nothing
  %code.i = tail call i32 @TclPtrUnsetVar(%Interp* noalias nocapture nonnull %interp, %Var* noalias nocapture nonnull %.0.lcssa.i, %Var* noalias nocapture null, %Tcl_Obj* nocapture nonnull %varName, %Tcl_Obj* nocapture null, i32 0) #5, !dbg !9923
  br label %tcl.unset.var.ptr.exit, !dbg !9923

tcl.unset.var.ptr.exit:                           ; preds = %callframe.kill.var.contents.exit.i, %make.array.i, %already.array.i, %freeObject.i.i.i, %leave.i.i.i, %unset.slow.i
  ret void, !dbg !9924

realArray:                                        ; preds = %var.followLinks.exit
  %10 = extractvalue { i1, %ARRAYIMPL* } %array, 1, !dbg !9925
  %value.ptr.i.i.i3 = getelementptr %Var, %Var* %.0.lcssa.i, i64 0, i32 1, !dbg !9926
  %value.i.i.i4 = load %Tcl_Obj*, %Tcl_Obj** %value.ptr.i.i.i3, align 8, !dbg !9926
  %11 = icmp ne %Tcl_Obj* %value.i.i.i4, null, !dbg !9930
  %flags.ptr.i.i.i5 = getelementptr %Var, %Var* %.0.lcssa.i, i64 0, i32 0, !dbg !9931
  %12 = and i32 %flags1.i.i, 3, !dbg !9934
  %13 = icmp eq i32 %12, 0, !dbg !9934
  %14 = and i1 %11, %13, !dbg !9935
  br i1 %14, label %kill.i, label %callframe.kill.scalar.exit, !dbg !9935

kill.i:                                           ; preds = %realArray
  %15 = getelementptr inbounds %Var, %Var* %.0.lcssa.i, i64 1, i32 0, !dbg !9936
  %refCount1.i.i7 = load i32, i32* %15, align 4, !dbg !9938
  %16 = add nsw i32 %refCount1.i.i7, 1, !dbg !9938
  store i32 %16, i32* %15, align 4, !dbg !9938
  %17 = icmp eq i32 %flags1.i.i, 0, !dbg !9939
  br i1 %17, label %unset.fast.done.i.i.i10, label %unset.slow.i.i.i14, !dbg !9942

unset.fast.done.i.i.i10:                          ; preds = %kill.i
  store %Tcl_Obj* null, %Tcl_Obj** %value.ptr.i.i.i3, align 8, !dbg !9943, !alias.scope !9945, !noalias !9948
  %refCount.i.i.i.i.i8 = getelementptr %Tcl_Obj, %Tcl_Obj* %value.i.i.i4, i64 0, i32 0, !dbg !9951
  %refCount1.i.i.i.i.i9 = load i32, i32* %refCount.i.i.i.i.i8, align 4, !dbg !9954, !noalias !9955
  %18 = icmp slt i32 %refCount1.i.i.i.i.i9, 2, !dbg !9956
  br i1 %18, label %freeObject.i.i.i.i.i11, label %leave.i.i.i.i.i12, !dbg !9956

freeObject.i.i.i.i.i11:                           ; preds = %unset.fast.done.i.i.i10
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %value.i.i.i4) #5, !dbg !9957, !noalias !9955
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %value.i.i.i4) #5, !dbg !9958, !noalias !9955
  br label %callframe.kill.var.contents.exit.i16, !dbg !9959

leave.i.i.i.i.i12:                                ; preds = %unset.fast.done.i.i.i10
  %19 = add nsw i32 %refCount1.i.i.i.i.i9, -1, !dbg !9954
  store i32 %19, i32* %refCount.i.i.i.i.i8, align 4, !dbg !9960, !noalias !9955
  br label %callframe.kill.var.contents.exit.i16, !dbg !9961

unset.slow.i.i.i14:                               ; preds = %kill.i
  %code.i.i.i13 = tail call i32 @TclPtrUnsetVar(%Interp* noalias nocapture nonnull %interp, %Var* noalias nocapture nonnull %.0.lcssa.i, %Var* noalias nocapture null, %Tcl_Obj* nocapture nonnull %varName, %Tcl_Obj* nocapture null, i32 0) #5, !dbg !9962
  br label %callframe.kill.var.contents.exit.i16, !dbg !9962

callframe.kill.var.contents.exit.i16:             ; preds = %unset.slow.i.i.i14, %leave.i.i.i.i.i12, %freeObject.i.i.i.i.i11
  %refCount2.i.i15 = load i32, i32* %15, align 4, !dbg !9963
  %20 = add nsw i32 %refCount2.i.i15, -1, !dbg !9963
  store i32 %20, i32* %15, align 4, !dbg !9963
  br label %callframe.kill.scalar.exit, !dbg !9964

callframe.kill.scalar.exit:                       ; preds = %realArray, %callframe.kill.var.contents.exit.i16
  %ary.ptr.i = getelementptr %ARRAYIMPL, %ARRAYIMPL* %10, i64 0, i32 2, !dbg !9965
  %ary.i = load %VarHashTable*, %VarHashTable** %ary.ptr.i, align 8, !dbg !9965
  %array.provenance.i = getelementptr %ARRAYIMPL, %ARRAYIMPL* %10, i64 0, i32 1, !dbg !9967
  store i1 true, i1* %array.provenance.i, align 1, !dbg !9967
  %value.i.i.i = load %Tcl_Obj*, %Tcl_Obj** %value.ptr.i.i.i3, align 8, !dbg !9968
  %21 = icmp eq %Tcl_Obj* %value.i.i.i, null, !dbg !9971
  br i1 %21, label %make.array.i, label %already.array.i, !dbg !9972

already.array.i:                                  ; preds = %callframe.kill.scalar.exit
  %22 = bitcast %Tcl_Obj* %value.i.i.i to %VarHashTable*, !dbg !9972
  %23 = bitcast %Tcl_Obj** %value.ptr.i.i.i3 to %VarHashTable**, !dbg !9973
  %24 = icmp eq %VarHashTable* %ary.i, %22, !dbg !9975
  br i1 %24, label %tcl.unset.var.ptr.exit, label %change.array.i, !dbg !9975

change.array.i:                                   ; preds = %already.array.i
  %25 = getelementptr inbounds %Var, %Var* %.0.lcssa.i, i64 1, i32 0, !dbg !9976
  %refCount1.i.i = load i32, i32* %25, align 4, !dbg !9978
  %26 = add nsw i32 %refCount1.i.i, 1, !dbg !9978
  store i32 %26, i32* %25, align 4, !dbg !9978
  %flags1.i.i.i.i = load i32, i32* %flags.ptr.i.i.i5, align 4, !dbg !9979, !alias.scope !9982, !noalias !9985
  %27 = icmp eq i32 %flags1.i.i.i.i, 0, !dbg !9988
  br i1 %27, label %unset.fast.done.i.i.i, label %unset.slow.i.i.i, !dbg !9989

unset.fast.done.i.i.i:                            ; preds = %change.array.i
  store %Tcl_Obj* null, %Tcl_Obj** %value.ptr.i.i.i3, align 8, !dbg !9990, !alias.scope !9982, !noalias !9985
  %refCount.i.i.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value.i.i.i, i64 0, i32 0, !dbg !9992
  %refCount1.i.i.i.i.i = load i32, i32* %refCount.i.i.i.i.i, align 4, !dbg !9995, !noalias !9996
  %28 = icmp slt i32 %refCount1.i.i.i.i.i, 2, !dbg !9997
  br i1 %28, label %freeObject.i.i.i.i.i, label %leave.i.i.i.i.i, !dbg !9997

freeObject.i.i.i.i.i:                             ; preds = %unset.fast.done.i.i.i
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %value.i.i.i) #5, !dbg !9998, !noalias !9996
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %value.i.i.i) #5, !dbg !9999, !noalias !9996
  br label %callframe.kill.var.contents.exit.i, !dbg !10000

leave.i.i.i.i.i:                                  ; preds = %unset.fast.done.i.i.i
  %29 = add nsw i32 %refCount1.i.i.i.i.i, -1, !dbg !9995
  store i32 %29, i32* %refCount.i.i.i.i.i, align 4, !dbg !10001, !noalias !9996
  br label %callframe.kill.var.contents.exit.i, !dbg !10002

unset.slow.i.i.i:                                 ; preds = %change.array.i
  %code.i.i.i = tail call i32 @TclPtrUnsetVar(%Interp* noalias nocapture nonnull %interp, %Var* noalias nocapture nonnull %.0.lcssa.i, %Var* noalias nocapture null, %Tcl_Obj* nocapture nonnull %varName, %Tcl_Obj* nocapture null, i32 0) #5, !dbg !10003
  br label %callframe.kill.var.contents.exit.i, !dbg !10003

callframe.kill.var.contents.exit.i:               ; preds = %unset.slow.i.i.i, %leave.i.i.i.i.i, %freeObject.i.i.i.i.i
  %refCount2.i.i = load i32, i32* %25, align 4, !dbg !10004
  %30 = add nsw i32 %refCount2.i.i, -1, !dbg !10004
  store i32 %30, i32* %25, align 4, !dbg !10004
  %flags1.i.i3.i = load i32, i32* %flags.ptr.i.i.i5, align 4, !dbg !10005
  %31 = or i32 %flags1.i.i3.i, 1, !dbg !10005
  store i32 %31, i32* %flags.ptr.i.i.i5, align 4, !dbg !10005
  store %VarHashTable* %ary.i, %VarHashTable** %23, align 8, !dbg !10008
  br label %tcl.unset.var.ptr.exit, !dbg !10010

make.array.i:                                     ; preds = %callframe.kill.scalar.exit
  %flags1.i.i.i = load i32, i32* %flags.ptr.i.i.i5, align 4, !dbg !10011
  %32 = or i32 %flags1.i.i.i, 1, !dbg !10011
  store i32 %32, i32* %flags.ptr.i.i.i5, align 4, !dbg !10011
  %33 = bitcast %Tcl_Obj** %value.ptr.i.i.i3 to %VarHashTable**, !dbg !10014
  store %VarHashTable* %ary.i, %VarHashTable** %33, align 8, !dbg !10014
  br label %tcl.unset.var.ptr.exit, !dbg !10016
}

; Function Attrs: alwaysinline nounwind
define hidden void @tcl.callframe.store.arraystring(%Var* nocapture %var, %Tcl_Obj* nocapture %varName, { i1, %ARRAYSTRING } %as) local_unnamed_addr #6 !dbg !10017 {
enter:
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !10024, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %flags.ptr.i.i1.i = getelementptr %Var, %Var* %var, i64 0, i32 0, !dbg !10025
  %flags.i.i2.i = load i32, i32* %flags.ptr.i.i1.i, align 4, !dbg !10025
  %0 = and i32 %flags.i.i2.i, 2, !dbg !10029
  %1 = icmp eq i32 %0, 0, !dbg !10029
  br i1 %1, label %var.followLinks.exit, label %follow.i, !dbg !10030

follow.i:                                         ; preds = %enter, %follow.i
  %.03.i = phi %Var* [ %value1.i.i, %follow.i ], [ %var, %enter ]
  %value.ptr.i.i = getelementptr %Var, %Var* %.03.i, i64 0, i32 1, !dbg !10031
  %2 = bitcast %Tcl_Obj** %value.ptr.i.i to %Var**, !dbg !10031
  %value1.i.i = load %Var*, %Var** %2, align 8, !dbg !10031
  %flags.ptr.i.i.i = getelementptr %Var, %Var* %value1.i.i, i64 0, i32 0, !dbg !10025
  %flags.i.i.i = load i32, i32* %flags.ptr.i.i.i, align 4, !dbg !10025
  %3 = and i32 %flags.i.i.i, 2, !dbg !10029
  %4 = icmp eq i32 %3, 0, !dbg !10029
  br i1 %4, label %var.followLinks.exit, label %follow.i, !dbg !10030

var.followLinks.exit:                             ; preds = %follow.i, %enter
  %flags1.i.i2 = phi i32 [ %flags.i.i2.i, %enter ], [ %flags.i.i.i, %follow.i ]
  %.0.lcssa.i = phi %Var* [ %var, %enter ], [ %value1.i.i, %follow.i ], !dbg !10033
  %5 = extractvalue { i1, %ARRAYSTRING } %as, 0, !dbg !10034
  br i1 %5, label %delete, label %array.or.string, !dbg !10034

array.or.string:                                  ; preds = %var.followLinks.exit
  %6 = extractvalue { i1, %ARRAYSTRING } %as, 1, !dbg !10035
  %7 = extractvalue %ARRAYSTRING %6, 0, !dbg !10036
  br i1 %7, label %string, label %array, !dbg !10036

delete:                                           ; preds = %var.followLinks.exit
  %8 = icmp eq i32 %flags1.i.i2, 0, !dbg !10037
  br i1 %8, label %unset.fast.i, label %unset.slow.i, !dbg !10040

unset.fast.i:                                     ; preds = %delete
  %value.ptr.i.i3 = getelementptr %Var, %Var* %.0.lcssa.i, i64 0, i32 1, !dbg !10041
  %value.i.i = load %Tcl_Obj*, %Tcl_Obj** %value.ptr.i.i3, align 8, !dbg !10041, !alias.scope !10043, !noalias !10046
  %9 = icmp eq %Tcl_Obj* %value.i.i, null, !dbg !10049
  br i1 %9, label %unset.slow.i, label %unset.fast.done.i, !dbg !10049

unset.fast.done.i:                                ; preds = %unset.fast.i
  store %Tcl_Obj* null, %Tcl_Obj** %value.ptr.i.i3, align 8, !dbg !10050, !alias.scope !10043, !noalias !10046
  %refCount.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value.i.i, i64 0, i32 0, !dbg !10052
  %refCount1.i.i.i = load i32, i32* %refCount.i.i.i, align 4, !dbg !10055, !noalias !10056
  %10 = icmp slt i32 %refCount1.i.i.i, 2, !dbg !10057
  br i1 %10, label %freeObject.i.i.i, label %leave.i.i.i, !dbg !10057

freeObject.i.i.i:                                 ; preds = %unset.fast.done.i
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %value.i.i) #5, !dbg !10058, !noalias !10056
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %value.i.i) #5, !dbg !10059, !noalias !10056
  br label %tcl.unset.var.ptr.exit, !dbg !10060

leave.i.i.i:                                      ; preds = %unset.fast.done.i
  %11 = add nsw i32 %refCount1.i.i.i, -1, !dbg !10055
  store i32 %11, i32* %refCount.i.i.i, align 4, !dbg !10061, !noalias !10056
  br label %tcl.unset.var.ptr.exit, !dbg !10062

unset.slow.i:                                     ; preds = %unset.fast.i, %delete
  %code.i = tail call i32 @TclPtrUnsetVar(%Interp* noalias nocapture nonnull %interp, %Var* noalias nocapture nonnull %.0.lcssa.i, %Var* noalias nocapture null, %Tcl_Obj* nocapture nonnull %varName, %Tcl_Obj* nocapture null, i32 0) #5, !dbg !10063
  br label %tcl.unset.var.ptr.exit, !dbg !10063

tcl.unset.var.ptr.exit:                           ; preds = %set.slow.i, %leave.i.i.i.i, %freeObject.i.i.i.i, %set.fast.i, %callframe.kill.var.contents.exit.i20, %make.array.i, %already.array.i, %freeObject.i.i.i, %leave.i.i.i, %unset.slow.i
  ret void, !dbg !10064

array:                                            ; preds = %array.or.string
  %12 = extractvalue %ARRAYSTRING %6, 1, !dbg !10065
  %value.ptr.i.i.i4 = getelementptr %Var, %Var* %.0.lcssa.i, i64 0, i32 1, !dbg !10066
  %value.i.i.i5 = load %Tcl_Obj*, %Tcl_Obj** %value.ptr.i.i.i4, align 8, !dbg !10066
  %13 = icmp ne %Tcl_Obj* %value.i.i.i5, null, !dbg !10070
  %flags.ptr.i.i.i6 = getelementptr %Var, %Var* %.0.lcssa.i, i64 0, i32 0, !dbg !10071
  %14 = and i32 %flags1.i.i2, 3, !dbg !10074
  %15 = icmp eq i32 %14, 0, !dbg !10074
  %16 = and i1 %13, %15, !dbg !10075
  br i1 %16, label %kill.i, label %callframe.kill.scalar.exit, !dbg !10075

kill.i:                                           ; preds = %array
  %17 = getelementptr inbounds %Var, %Var* %.0.lcssa.i, i64 1, i32 0, !dbg !10076
  %refCount1.i.i = load i32, i32* %17, align 4, !dbg !10078
  %18 = add nsw i32 %refCount1.i.i, 1, !dbg !10078
  store i32 %18, i32* %17, align 4, !dbg !10078
  %19 = icmp eq i32 %flags1.i.i2, 0, !dbg !10079
  br i1 %19, label %unset.fast.done.i.i.i, label %unset.slow.i.i.i, !dbg !10082

unset.fast.done.i.i.i:                            ; preds = %kill.i
  store %Tcl_Obj* null, %Tcl_Obj** %value.ptr.i.i.i4, align 8, !dbg !10083, !alias.scope !10085, !noalias !10088
  %refCount.i.i.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value.i.i.i5, i64 0, i32 0, !dbg !10091
  %refCount1.i.i.i.i.i = load i32, i32* %refCount.i.i.i.i.i, align 4, !dbg !10094, !noalias !10095
  %20 = icmp slt i32 %refCount1.i.i.i.i.i, 2, !dbg !10096
  br i1 %20, label %freeObject.i.i.i.i.i, label %leave.i.i.i.i.i, !dbg !10096

freeObject.i.i.i.i.i:                             ; preds = %unset.fast.done.i.i.i
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %value.i.i.i5) #5, !dbg !10097, !noalias !10095
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %value.i.i.i5) #5, !dbg !10098, !noalias !10095
  br label %callframe.kill.var.contents.exit.i, !dbg !10099

leave.i.i.i.i.i:                                  ; preds = %unset.fast.done.i.i.i
  %21 = add nsw i32 %refCount1.i.i.i.i.i, -1, !dbg !10094
  store i32 %21, i32* %refCount.i.i.i.i.i, align 4, !dbg !10100, !noalias !10095
  br label %callframe.kill.var.contents.exit.i, !dbg !10101

unset.slow.i.i.i:                                 ; preds = %kill.i
  %code.i.i.i = tail call i32 @TclPtrUnsetVar(%Interp* noalias nocapture nonnull %interp, %Var* noalias nocapture nonnull %.0.lcssa.i, %Var* noalias nocapture null, %Tcl_Obj* nocapture nonnull %varName, %Tcl_Obj* nocapture null, i32 0) #5, !dbg !10102
  br label %callframe.kill.var.contents.exit.i, !dbg !10102

callframe.kill.var.contents.exit.i:               ; preds = %unset.slow.i.i.i, %leave.i.i.i.i.i, %freeObject.i.i.i.i.i
  %refCount2.i.i = load i32, i32* %17, align 4, !dbg !10103
  %22 = add nsw i32 %refCount2.i.i, -1, !dbg !10103
  store i32 %22, i32* %17, align 4, !dbg !10103
  br label %callframe.kill.scalar.exit, !dbg !10104

callframe.kill.scalar.exit:                       ; preds = %array, %callframe.kill.var.contents.exit.i
  %ary.ptr.i = getelementptr %ARRAYIMPL, %ARRAYIMPL* %12, i64 0, i32 2, !dbg !10105
  %ary.i = load %VarHashTable*, %VarHashTable** %ary.ptr.i, align 8, !dbg !10105
  %array.provenance.i = getelementptr %ARRAYIMPL, %ARRAYIMPL* %12, i64 0, i32 1, !dbg !10107
  store i1 true, i1* %array.provenance.i, align 1, !dbg !10107
  %value.i.i.i9 = load %Tcl_Obj*, %Tcl_Obj** %value.ptr.i.i.i4, align 8, !dbg !10108
  %23 = icmp eq %Tcl_Obj* %value.i.i.i9, null, !dbg !10111
  br i1 %23, label %make.array.i, label %already.array.i, !dbg !10112

already.array.i:                                  ; preds = %callframe.kill.scalar.exit
  %24 = bitcast %Tcl_Obj* %value.i.i.i9 to %VarHashTable*, !dbg !10112
  %25 = bitcast %Tcl_Obj** %value.ptr.i.i.i4 to %VarHashTable**, !dbg !10113
  %26 = icmp eq %VarHashTable* %ary.i, %24, !dbg !10115
  br i1 %26, label %tcl.unset.var.ptr.exit, label %change.array.i, !dbg !10115

change.array.i:                                   ; preds = %already.array.i
  %27 = getelementptr inbounds %Var, %Var* %.0.lcssa.i, i64 1, i32 0, !dbg !10116
  %refCount1.i.i11 = load i32, i32* %27, align 4, !dbg !10118
  %28 = add nsw i32 %refCount1.i.i11, 1, !dbg !10118
  store i32 %28, i32* %27, align 4, !dbg !10118
  %flags1.i.i.i.i = load i32, i32* %flags.ptr.i.i.i6, align 4, !dbg !10119, !alias.scope !10122, !noalias !10125
  %29 = icmp eq i32 %flags1.i.i.i.i, 0, !dbg !10128
  br i1 %29, label %unset.fast.done.i.i.i14, label %unset.slow.i.i.i18, !dbg !10129

unset.fast.done.i.i.i14:                          ; preds = %change.array.i
  store %Tcl_Obj* null, %Tcl_Obj** %value.ptr.i.i.i4, align 8, !dbg !10130, !alias.scope !10122, !noalias !10125
  %refCount.i.i.i.i.i12 = getelementptr %Tcl_Obj, %Tcl_Obj* %value.i.i.i9, i64 0, i32 0, !dbg !10132
  %refCount1.i.i.i.i.i13 = load i32, i32* %refCount.i.i.i.i.i12, align 4, !dbg !10135, !noalias !10136
  %30 = icmp slt i32 %refCount1.i.i.i.i.i13, 2, !dbg !10137
  br i1 %30, label %freeObject.i.i.i.i.i15, label %leave.i.i.i.i.i16, !dbg !10137

freeObject.i.i.i.i.i15:                           ; preds = %unset.fast.done.i.i.i14
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %value.i.i.i9) #5, !dbg !10138, !noalias !10136
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %value.i.i.i9) #5, !dbg !10139, !noalias !10136
  br label %callframe.kill.var.contents.exit.i20, !dbg !10140

leave.i.i.i.i.i16:                                ; preds = %unset.fast.done.i.i.i14
  %31 = add nsw i32 %refCount1.i.i.i.i.i13, -1, !dbg !10135
  store i32 %31, i32* %refCount.i.i.i.i.i12, align 4, !dbg !10141, !noalias !10136
  br label %callframe.kill.var.contents.exit.i20, !dbg !10142

unset.slow.i.i.i18:                               ; preds = %change.array.i
  %code.i.i.i17 = tail call i32 @TclPtrUnsetVar(%Interp* noalias nocapture nonnull %interp, %Var* noalias nocapture nonnull %.0.lcssa.i, %Var* noalias nocapture null, %Tcl_Obj* nocapture nonnull %varName, %Tcl_Obj* nocapture null, i32 0) #5, !dbg !10143
  br label %callframe.kill.var.contents.exit.i20, !dbg !10143

callframe.kill.var.contents.exit.i20:             ; preds = %unset.slow.i.i.i18, %leave.i.i.i.i.i16, %freeObject.i.i.i.i.i15
  %refCount2.i.i19 = load i32, i32* %27, align 4, !dbg !10144
  %32 = add nsw i32 %refCount2.i.i19, -1, !dbg !10144
  store i32 %32, i32* %27, align 4, !dbg !10144
  %flags1.i.i3.i = load i32, i32* %flags.ptr.i.i.i6, align 4, !dbg !10145
  %33 = or i32 %flags1.i.i3.i, 1, !dbg !10145
  store i32 %33, i32* %flags.ptr.i.i.i6, align 4, !dbg !10145
  store %VarHashTable* %ary.i, %VarHashTable** %25, align 8, !dbg !10148
  br label %tcl.unset.var.ptr.exit, !dbg !10150

make.array.i:                                     ; preds = %callframe.kill.scalar.exit
  %flags1.i.i.i = load i32, i32* %flags.ptr.i.i.i6, align 4, !dbg !10151
  %34 = or i32 %flags1.i.i.i, 1, !dbg !10151
  store i32 %34, i32* %flags.ptr.i.i.i6, align 4, !dbg !10151
  %35 = bitcast %Tcl_Obj** %value.ptr.i.i.i4 to %VarHashTable**, !dbg !10154
  store %VarHashTable* %ary.i, %VarHashTable** %35, align 8, !dbg !10154
  br label %tcl.unset.var.ptr.exit, !dbg !10156

string:                                           ; preds = %array.or.string
  %36 = extractvalue %ARRAYSTRING %6, 2, !dbg !10157
  %value.ptr.i.i.i22 = getelementptr %Var, %Var* %.0.lcssa.i, i64 0, i32 1, !dbg !10158
  %value.i.i.i23 = load %Tcl_Obj*, %Tcl_Obj** %value.ptr.i.i.i22, align 8, !dbg !10158
  %37 = icmp ne %Tcl_Obj* %value.i.i.i23, null, !dbg !10162
  %flags.ptr.i.i.i24 = getelementptr %Var, %Var* %.0.lcssa.i, i64 0, i32 0, !dbg !10163
  %38 = and i32 %flags1.i.i2, 1, !dbg !10166
  %39 = icmp ne i32 %38, 0, !dbg !10166
  %40 = and i1 %37, %39, !dbg !10167
  br i1 %40, label %kill.i27, label %callframe.kill.array.exit, !dbg !10167

kill.i27:                                         ; preds = %string
  %41 = getelementptr inbounds %Var, %Var* %.0.lcssa.i, i64 1, i32 0, !dbg !10168
  %refCount1.i.i26 = load i32, i32* %41, align 4, !dbg !10170
  %42 = add nsw i32 %refCount1.i.i26, 1, !dbg !10170
  store i32 %42, i32* %41, align 4, !dbg !10170
  %43 = icmp eq i32 %flags1.i.i2, 0, !dbg !10171
  br i1 %43, label %unset.fast.done.i.i.i30, label %unset.slow.i.i.i34, !dbg !10174

unset.fast.done.i.i.i30:                          ; preds = %kill.i27
  store %Tcl_Obj* null, %Tcl_Obj** %value.ptr.i.i.i22, align 8, !dbg !10175, !alias.scope !10177, !noalias !10180
  %refCount.i.i.i.i.i28 = getelementptr %Tcl_Obj, %Tcl_Obj* %value.i.i.i23, i64 0, i32 0, !dbg !10183
  %refCount1.i.i.i.i.i29 = load i32, i32* %refCount.i.i.i.i.i28, align 4, !dbg !10186, !noalias !10187
  %44 = icmp slt i32 %refCount1.i.i.i.i.i29, 2, !dbg !10188
  br i1 %44, label %freeObject.i.i.i.i.i31, label %leave.i.i.i.i.i32, !dbg !10188

freeObject.i.i.i.i.i31:                           ; preds = %unset.fast.done.i.i.i30
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %value.i.i.i23) #5, !dbg !10189, !noalias !10187
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %value.i.i.i23) #5, !dbg !10190, !noalias !10187
  br label %callframe.kill.var.contents.exit.i36, !dbg !10191

leave.i.i.i.i.i32:                                ; preds = %unset.fast.done.i.i.i30
  %45 = add nsw i32 %refCount1.i.i.i.i.i29, -1, !dbg !10186
  store i32 %45, i32* %refCount.i.i.i.i.i28, align 4, !dbg !10192, !noalias !10187
  br label %callframe.kill.var.contents.exit.i36, !dbg !10193

unset.slow.i.i.i34:                               ; preds = %kill.i27
  %code.i.i.i33 = tail call i32 @TclPtrUnsetVar(%Interp* noalias nocapture nonnull %interp, %Var* noalias nocapture nonnull %.0.lcssa.i, %Var* noalias nocapture null, %Tcl_Obj* nocapture nonnull %varName, %Tcl_Obj* nocapture null, i32 0) #5, !dbg !10194
  br label %callframe.kill.var.contents.exit.i36, !dbg !10194

callframe.kill.var.contents.exit.i36:             ; preds = %unset.slow.i.i.i34, %leave.i.i.i.i.i32, %freeObject.i.i.i.i.i31
  %refCount2.i.i35 = load i32, i32* %41, align 4, !dbg !10195
  %46 = add nsw i32 %refCount2.i.i35, -1, !dbg !10195
  store i32 %46, i32* %41, align 4, !dbg !10195
  %flags1.i.i.pr = load i32, i32* %flags.ptr.i.i.i24, align 4, !dbg !10196, !alias.scope !10199, !noalias !10202
  br label %callframe.kill.array.exit, !dbg !10205

callframe.kill.array.exit:                        ; preds = %string, %callframe.kill.var.contents.exit.i36
  %flags1.i.i = phi i32 [ %flags1.i.i2, %string ], [ %flags1.i.i.pr, %callframe.kill.var.contents.exit.i36 ], !dbg !10196
  %47 = icmp eq i32 %flags1.i.i, 0, !dbg !10206
  br i1 %47, label %set.fast.i, label %set.slow.i, !dbg !10207

set.fast.i:                                       ; preds = %callframe.kill.array.exit
  %refCount.i.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %36, i64 0, i32 0, !dbg !10208
  %refCount1.i.i.i.i = load i32, i32* %refCount.i.i.i.i, align 4, !dbg !10212, !noalias !10213
  %48 = add nsw i32 %refCount1.i.i.i.i, 1, !dbg !10212
  store i32 %48, i32* %refCount.i.i.i.i, align 4, !dbg !10212, !noalias !10213
  %value.i.i.i = load %Tcl_Obj*, %Tcl_Obj** %value.ptr.i.i.i22, align 8, !dbg !10214, !alias.scope !10199, !noalias !10202
  store %Tcl_Obj* %36, %Tcl_Obj** %value.ptr.i.i.i22, align 8, !dbg !10216, !alias.scope !10199, !noalias !10202
  %49 = icmp eq %Tcl_Obj* %value.i.i.i, null, !dbg !10218
  br i1 %49, label %tcl.unset.var.ptr.exit, label %set.fast.drop.old.i.i, !dbg !10218

set.fast.drop.old.i.i:                            ; preds = %set.fast.i
  %refCount.i.i1.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value.i.i.i, i64 0, i32 0, !dbg !10219
  %refCount1.i.i2.i.i = load i32, i32* %refCount.i.i1.i.i, align 4, !dbg !10222, !noalias !10223
  %50 = icmp slt i32 %refCount1.i.i2.i.i, 2, !dbg !10224
  br i1 %50, label %freeObject.i.i.i.i, label %leave.i.i.i.i, !dbg !10224

freeObject.i.i.i.i:                               ; preds = %set.fast.drop.old.i.i
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %value.i.i.i) #5, !dbg !10225, !noalias !10223
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %value.i.i.i) #5, !dbg !10226, !noalias !10223
  br label %tcl.unset.var.ptr.exit, !dbg !10227

leave.i.i.i.i:                                    ; preds = %set.fast.drop.old.i.i
  %51 = add nsw i32 %refCount1.i.i2.i.i, -1, !dbg !10222
  store i32 %51, i32* %refCount.i.i1.i.i, align 4, !dbg !10228, !noalias !10223
  br label %tcl.unset.var.ptr.exit, !dbg !10229

set.slow.i:                                       ; preds = %callframe.kill.array.exit
  %objPtr.i = tail call %Tcl_Obj* @TclPtrSetVar(%Interp* noalias nocapture nonnull %interp, %Var* noalias nocapture nonnull %.0.lcssa.i, %Var* noalias nocapture null, %Tcl_Obj* nocapture nonnull %varName, %Tcl_Obj* null, %Tcl_Obj* nonnull %36, i32 0) #5, !dbg !10230
  br label %tcl.unset.var.ptr.exit, !dbg !10230
}

; Function Attrs: alwaysinline norecurse nounwind readonly
define hidden i1 @tcl.impl.isBoolean(%Tcl_Obj* nocapture nonnull readonly %objPtr) local_unnamed_addr #15 !dbg !10231 {
enter:
  %tclBooleanType = load %ObjType*, %ObjType** @tclBooleanType, align 8, !dbg !10234, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %typePtr.ptr = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 3, !dbg !10235
  %typePtr = load %ObjType*, %ObjType** %typePtr.ptr, align 8, !dbg !10235
  %0 = icmp ne %ObjType* %typePtr, null, !dbg !10236
  %1 = icmp eq %ObjType* %tclBooleanType, %typePtr, !dbg !10236
  %2 = and i1 %0, %1, !dbg !10236
  ret i1 %2, !dbg !10236
}

; Function Attrs: alwaysinline norecurse nounwind readonly
define hidden i1 @tcl.impl.isDouble(%Tcl_Obj* nocapture nonnull readonly %objPtr) local_unnamed_addr #15 !dbg !10237 {
enter:
  %tclDoubleType = load %ObjType*, %ObjType** @tclDoubleType, align 8, !dbg !10240, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %typePtr.ptr = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 3, !dbg !10241
  %typePtr = load %ObjType*, %ObjType** %typePtr.ptr, align 8, !dbg !10241
  %0 = icmp ne %ObjType* %typePtr, null, !dbg !10242
  %1 = icmp eq %ObjType* %tclDoubleType, %typePtr, !dbg !10242
  %2 = and i1 %0, %1, !dbg !10242
  ret i1 %2, !dbg !10242
}

; Function Attrs: alwaysinline norecurse nounwind readonly
define hidden i1 @tcl.impl.isInteger(%Tcl_Obj* nocapture nonnull readonly %objPtr) local_unnamed_addr #15 !dbg !10243 {
enter:
  %tclIntType = load %ObjType*, %ObjType** @tclIntType, align 8, !dbg !10246, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %tclWideIntType = load %ObjType*, %ObjType** @tclWideIntType, align 8, !dbg !10247, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %typePtr.ptr = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 3, !dbg !10248
  %typePtr = load %ObjType*, %ObjType** %typePtr.ptr, align 8, !dbg !10248
  %0 = icmp ne %ObjType* %typePtr, null, !dbg !10249
  %1 = icmp eq %ObjType* %tclIntType, %typePtr, !dbg !10249
  %2 = icmp eq %ObjType* %tclWideIntType, %typePtr, !dbg !10249
  %3 = or i1 %1, %2, !dbg !10249
  %4 = and i1 %0, %3, !dbg !10249
  ret i1 %4, !dbg !10249
}

; Function Attrs: alwaysinline nounwind readonly
define hidden i1 @tcl.impl.strempty(%Tcl_Obj* nocapture nonnull %value) local_unnamed_addr #16 !dbg !10250 {
enter:
  %bytes.ptr = getelementptr %Tcl_Obj, %Tcl_Obj* %value, i64 0, i32 1, !dbg !10253
  %bytes = load i8*, i8** %bytes.ptr, align 8, !dbg !10253
  %0 = icmp eq i8* %bytes, null, !dbg !10254
  br i1 %0, label %generate, label %get, !dbg !10254

generate:                                         ; preds = %enter
  %bytes1 = tail call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %value), !dbg !10255
  br label %get, !dbg !10256

get:                                              ; preds = %enter, %generate
  %bytes2 = phi i8* [ %bytes, %enter ], [ %bytes1, %generate ]
  %1 = load i8, i8* %bytes2, align 1, !dbg !10257
  %2 = icmp eq i8 %1, 0, !dbg !10257
  ret i1 %2, !dbg !10257
}

; Function Attrs: alwaysinline nounwind
define hidden i1 @tcl.isNumeric(%Tcl_Obj* nocapture nonnull %value, i1 %emptyOK) local_unnamed_addr #6 !dbg !10258 {
enter:
  %dblPtr.i = alloca double, align 8, !dbg !10264
  %typePtr.ptr = getelementptr %Tcl_Obj, %Tcl_Obj* %value, i64 0, i32 3, !dbg !10266
  %typePtr = load %ObjType*, %ObjType** %typePtr.ptr, align 8, !dbg !10266
  %0 = icmp eq %ObjType* %typePtr, null, !dbg !10266
  br i1 %0, label %checkEmptyOK, label %checkDoubleTypes, !dbg !10266

checkDoubleTypes:                                 ; preds = %enter
  %tclDoubleType.i = load %ObjType*, %ObjType** @tclDoubleType, align 8, !dbg !10267, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %1 = icmp eq %ObjType* %tclDoubleType.i, %typePtr, !dbg !10269
  br i1 %1, label %yes, label %checkIntTypes, !dbg !10270

checkIntTypes:                                    ; preds = %checkDoubleTypes
  %tclIntType.i = load %ObjType*, %ObjType** @tclIntType, align 8, !dbg !10271, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %tclWideIntType.i = load %ObjType*, %ObjType** @tclWideIntType, align 8, !dbg !10273, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %2 = icmp eq %ObjType* %tclIntType.i, %typePtr, !dbg !10274
  %3 = icmp eq %ObjType* %tclWideIntType.i, %typePtr, !dbg !10274
  %4 = or i1 %2, %3, !dbg !10274
  br i1 %4, label %yes, label %checkEmptyOK, !dbg !10275

checkEmptyOK:                                     ; preds = %enter, %checkIntTypes
  br i1 %emptyOK, label %checkEmpty, label %checkDouble, !dbg !10276

checkEmpty:                                       ; preds = %checkEmptyOK
  %bytes.ptr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value, i64 0, i32 1, !dbg !10277
  %bytes.i = load i8*, i8** %bytes.ptr.i, align 8, !dbg !10277
  %5 = icmp eq i8* %bytes.i, null, !dbg !10279
  br i1 %5, label %generate.i, label %tcl.impl.strempty.exit, !dbg !10279

generate.i:                                       ; preds = %checkEmpty
  %bytes1.i = tail call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %value) #5, !dbg !10280
  br label %tcl.impl.strempty.exit, !dbg !10281

tcl.impl.strempty.exit:                           ; preds = %checkEmpty, %generate.i
  %bytes2.i = phi i8* [ %bytes.i, %checkEmpty ], [ %bytes1.i, %generate.i ]
  %6 = load i8, i8* %bytes2.i, align 1, !dbg !10282
  %7 = icmp eq i8 %6, 0, !dbg !10282
  br i1 %7, label %yes, label %checkDouble, !dbg !10283

checkDouble:                                      ; preds = %tcl.impl.strempty.exit, %checkEmptyOK
  %8 = bitcast double* %dblPtr.i to i8*, !dbg !10284
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8), !dbg !10284
  %code.i = call i32 @Tcl_GetDoubleFromObj(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %value, double* noalias nocapture nonnull %dblPtr.i) #5, !dbg !10284
  %9 = icmp eq i32 %code.i, 0, !dbg !10285
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8), !dbg !10286
  ret i1 %9, !dbg !10287

yes:                                              ; preds = %tcl.impl.strempty.exit, %checkIntTypes, %checkDoubleTypes
  ret i1 true, !dbg !10288
}

; Function Attrs: alwaysinline nounwind
define hidden i1 @tcl.isNumericOrBoolean(%Tcl_Obj* nocapture nonnull %value) local_unnamed_addr #6 !dbg !10289 {
enter:
  %dblPtr.i = alloca double, align 8, !dbg !10292
  %boolPtr.i = alloca i32, align 4, !dbg !10294
  %typePtr.ptr = getelementptr %Tcl_Obj, %Tcl_Obj* %value, i64 0, i32 3, !dbg !10296
  %typePtr = load %ObjType*, %ObjType** %typePtr.ptr, align 8, !dbg !10296
  %0 = icmp eq %ObjType* %typePtr, null, !dbg !10296
  br i1 %0, label %getDouble, label %checkTypes, !dbg !10296

checkTypes:                                       ; preds = %enter
  %tclDoubleType.i = load %ObjType*, %ObjType** @tclDoubleType, align 8, !dbg !10297, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %1 = icmp eq %ObjType* %tclDoubleType.i, %typePtr, !dbg !10299
  br i1 %1, label %yes, label %checkIntType, !dbg !10300

checkIntType:                                     ; preds = %checkTypes
  %tclIntType.i = load %ObjType*, %ObjType** @tclIntType, align 8, !dbg !10301, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %tclWideIntType.i = load %ObjType*, %ObjType** @tclWideIntType, align 8, !dbg !10303, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %2 = icmp eq %ObjType* %tclIntType.i, %typePtr, !dbg !10304
  %3 = icmp eq %ObjType* %tclWideIntType.i, %typePtr, !dbg !10304
  %4 = or i1 %2, %3, !dbg !10304
  %tclBooleanType.i = load %ObjType*, %ObjType** @tclBooleanType, align 8, !dbg !10305
  %5 = icmp eq %ObjType* %tclBooleanType.i, %typePtr, !dbg !10307
  %or.cond = or i1 %4, %5, !dbg !10308
  br i1 %or.cond, label %yes, label %getDouble, !dbg !10308

getDouble:                                        ; preds = %checkIntType, %enter
  %6 = bitcast double* %dblPtr.i to i8*, !dbg !10309
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6), !dbg !10309
  %code.i6 = call i32 @Tcl_GetDoubleFromObj(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %value, double* noalias nocapture nonnull %dblPtr.i) #5, !dbg !10309
  %7 = icmp eq i32 %code.i6, 0, !dbg !10310
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6), !dbg !10311
  br i1 %7, label %yes, label %getBool, !dbg !10312

getBool:                                          ; preds = %getDouble
  %8 = bitcast i32* %boolPtr.i to i8*, !dbg !10313
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8), !dbg !10313
  %str.i = tail call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %value) #5, !dbg !10313
  %code.i = call i32 @Tcl_GetBooleanFromObj(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %value, i32* noalias nocapture nonnull %boolPtr.i) #5, !dbg !10314
  %9 = icmp eq i32 %code.i, 0, !dbg !10315
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8), !dbg !10316
  ret i1 %9, !dbg !10317

yes:                                              ; preds = %getDouble, %checkIntType, %checkTypes
  ret i1 true, !dbg !10318
}

; Function Attrs: alwaysinline nounwind
define hidden i1 @tcl.isBoolean(%Tcl_Obj* nocapture nonnull %value, i1 %emptyOK) local_unnamed_addr #6 !dbg !10319 {
enter:
  %boolPtr.i = alloca i32, align 4, !dbg !10323
  %tclBooleanType.i = load %ObjType*, %ObjType** @tclBooleanType, align 8, !dbg !10325, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %typePtr.ptr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value, i64 0, i32 3, !dbg !10327
  %typePtr.i = load %ObjType*, %ObjType** %typePtr.ptr.i, align 8, !dbg !10327
  %0 = icmp ne %ObjType* %typePtr.i, null, !dbg !10328
  %1 = icmp eq %ObjType* %tclBooleanType.i, %typePtr.i, !dbg !10328
  %2 = and i1 %0, %1, !dbg !10328
  br i1 %2, label %yes, label %checkEmptyOK, !dbg !10329

checkEmptyOK:                                     ; preds = %enter
  br i1 %emptyOK, label %checkEmpty, label %getBoolean, !dbg !10330

checkEmpty:                                       ; preds = %checkEmptyOK
  %bytes.ptr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value, i64 0, i32 1, !dbg !10331
  %bytes.i = load i8*, i8** %bytes.ptr.i, align 8, !dbg !10331
  %3 = icmp eq i8* %bytes.i, null, !dbg !10333
  br i1 %3, label %generate.i, label %tcl.impl.strempty.exit, !dbg !10333

generate.i:                                       ; preds = %checkEmpty
  %bytes1.i = tail call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %value) #5, !dbg !10334
  br label %tcl.impl.strempty.exit, !dbg !10335

tcl.impl.strempty.exit:                           ; preds = %checkEmpty, %generate.i
  %bytes2.i = phi i8* [ %bytes.i, %checkEmpty ], [ %bytes1.i, %generate.i ]
  %4 = load i8, i8* %bytes2.i, align 1, !dbg !10336
  %5 = icmp eq i8 %4, 0, !dbg !10336
  br i1 %5, label %yes, label %getBoolean, !dbg !10337

getBoolean:                                       ; preds = %tcl.impl.strempty.exit, %checkEmptyOK
  %6 = bitcast i32* %boolPtr.i to i8*, !dbg !10338
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6), !dbg !10338
  %str.i = tail call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %value) #5, !dbg !10338
  %code.i = call i32 @Tcl_GetBooleanFromObj(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %value, i32* noalias nocapture nonnull %boolPtr.i) #5, !dbg !10339
  %7 = icmp eq i32 %code.i, 0, !dbg !10340
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6), !dbg !10341
  ret i1 %7, !dbg !10342

yes:                                              ; preds = %tcl.impl.strempty.exit, %enter
  ret i1 true, !dbg !10343
}

; Function Attrs: alwaysinline nounwind
define hidden i1 @tcl.isDouble(%Tcl_Obj* nocapture nonnull %value, i1 %emptyOK) local_unnamed_addr #6 !dbg !10344 {
enter:
  %dblPtr.i = alloca double, align 8, !dbg !10348
  %tclDoubleType.i = load %ObjType*, %ObjType** @tclDoubleType, align 8, !dbg !10350, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %typePtr.ptr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value, i64 0, i32 3, !dbg !10352
  %typePtr.i = load %ObjType*, %ObjType** %typePtr.ptr.i, align 8, !dbg !10352
  %0 = icmp ne %ObjType* %typePtr.i, null, !dbg !10353
  %1 = icmp eq %ObjType* %tclDoubleType.i, %typePtr.i, !dbg !10353
  %2 = and i1 %0, %1, !dbg !10353
  br i1 %2, label %yes, label %checkEmptyOK, !dbg !10354

checkEmptyOK:                                     ; preds = %enter
  br i1 %emptyOK, label %checkEmpty, label %checkDouble, !dbg !10355

checkEmpty:                                       ; preds = %checkEmptyOK
  %bytes.ptr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value, i64 0, i32 1, !dbg !10356
  %bytes.i = load i8*, i8** %bytes.ptr.i, align 8, !dbg !10356
  %3 = icmp eq i8* %bytes.i, null, !dbg !10358
  br i1 %3, label %generate.i, label %tcl.impl.strempty.exit, !dbg !10358

generate.i:                                       ; preds = %checkEmpty
  %bytes1.i = tail call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %value) #5, !dbg !10359
  br label %tcl.impl.strempty.exit, !dbg !10360

tcl.impl.strempty.exit:                           ; preds = %checkEmpty, %generate.i
  %bytes2.i = phi i8* [ %bytes.i, %checkEmpty ], [ %bytes1.i, %generate.i ]
  %4 = load i8, i8* %bytes2.i, align 1, !dbg !10361
  %5 = icmp eq i8 %4, 0, !dbg !10361
  br i1 %5, label %yes, label %checkDouble, !dbg !10362

checkDouble:                                      ; preds = %tcl.impl.strempty.exit, %checkEmptyOK
  %6 = bitcast double* %dblPtr.i to i8*, !dbg !10363
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6), !dbg !10363
  %code.i = call i32 @Tcl_GetDoubleFromObj(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %value, double* noalias nocapture nonnull %dblPtr.i) #5, !dbg !10363
  %7 = icmp eq i32 %code.i, 0, !dbg !10364
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6), !dbg !10365
  ret i1 %7, !dbg !10366

yes:                                              ; preds = %tcl.impl.strempty.exit, %enter
  ret i1 true, !dbg !10367
}

; Function Attrs: alwaysinline nounwind
define hidden i1 @tcl.isInteger(%Tcl_Obj* nocapture nonnull %value, i1 %emptyOK) local_unnamed_addr #6 !dbg !10368 {
enter:
  %intPtr.i = alloca i64, align 8, !dbg !10372
  %tclIntType.i = load %ObjType*, %ObjType** @tclIntType, align 8, !dbg !10374, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %tclWideIntType.i = load %ObjType*, %ObjType** @tclWideIntType, align 8, !dbg !10376, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %typePtr.ptr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value, i64 0, i32 3, !dbg !10377
  %typePtr.i = load %ObjType*, %ObjType** %typePtr.ptr.i, align 8, !dbg !10377
  %0 = icmp ne %ObjType* %typePtr.i, null, !dbg !10378
  %1 = icmp eq %ObjType* %tclIntType.i, %typePtr.i, !dbg !10378
  %2 = icmp eq %ObjType* %tclWideIntType.i, %typePtr.i, !dbg !10378
  %3 = or i1 %1, %2, !dbg !10378
  %4 = and i1 %0, %3, !dbg !10378
  br i1 %4, label %yes, label %checkEmptyOK, !dbg !10379

checkEmptyOK:                                     ; preds = %enter
  br i1 %emptyOK, label %checkEmpty, label %checkInt, !dbg !10380

checkEmpty:                                       ; preds = %checkEmptyOK
  %bytes.ptr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value, i64 0, i32 1, !dbg !10381
  %bytes.i = load i8*, i8** %bytes.ptr.i, align 8, !dbg !10381
  %5 = icmp eq i8* %bytes.i, null, !dbg !10383
  br i1 %5, label %generate.i, label %tcl.impl.strempty.exit, !dbg !10383

generate.i:                                       ; preds = %checkEmpty
  %bytes1.i = tail call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %value) #5, !dbg !10384
  br label %tcl.impl.strempty.exit, !dbg !10385

tcl.impl.strempty.exit:                           ; preds = %checkEmpty, %generate.i
  %bytes2.i = phi i8* [ %bytes.i, %checkEmpty ], [ %bytes1.i, %generate.i ]
  %6 = load i8, i8* %bytes2.i, align 1, !dbg !10386
  %7 = icmp eq i8 %6, 0, !dbg !10386
  br i1 %7, label %yes, label %checkInt, !dbg !10387

checkInt:                                         ; preds = %tcl.impl.strempty.exit, %checkEmptyOK
  %8 = bitcast i64* %intPtr.i to i8*, !dbg !10388
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8), !dbg !10388
  %code.i = call i32 @Tcl_GetWideIntFromObj(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %value, i64* noalias nocapture nonnull %intPtr.i) #5, !dbg !10388
  %9 = icmp eq i32 %code.i, 0, !dbg !10389
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8), !dbg !10390
  ret i1 %9, !dbg !10391

yes:                                              ; preds = %tcl.impl.strempty.exit, %enter
  ret i1 true, !dbg !10392
}

; Function Attrs: alwaysinline nounwind
define hidden i1 @tcl.isZeroOneBoolean(%Tcl_Obj* nocapture nonnull %value, i1 %emptyOK) local_unnamed_addr #6 !dbg !10393 {
enter:
  %boolPtr.i = alloca i32, align 4, !dbg !10397
  %intPtr.i3 = alloca i64, align 8, !dbg !10399
  %intPtr.i = alloca i64, align 8, !dbg !10401
  %tclIntType.i = load %ObjType*, %ObjType** @tclIntType, align 8, !dbg !10403, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %tclWideIntType.i = load %ObjType*, %ObjType** @tclWideIntType, align 8, !dbg !10405, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %typePtr.ptr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value, i64 0, i32 3, !dbg !10406
  %typePtr.i = load %ObjType*, %ObjType** %typePtr.ptr.i, align 8, !dbg !10406
  %0 = icmp ne %ObjType* %typePtr.i, null, !dbg !10407
  %1 = icmp eq %ObjType* %tclIntType.i, %typePtr.i, !dbg !10407
  %2 = icmp eq %ObjType* %tclWideIntType.i, %typePtr.i, !dbg !10407
  %3 = or i1 %1, %2, !dbg !10407
  %4 = and i1 %0, %3, !dbg !10407
  br i1 %4, label %checkZeroOne, label %checkEmptyOK, !dbg !10408

checkZeroOne:                                     ; preds = %tryGetInt, %enter
  %5 = bitcast i64* %intPtr.i3 to i8*, !dbg !10409
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5), !dbg !10409
  %code.i4 = call i32 @Tcl_GetWideIntFromObj(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %value, i64* noalias nocapture nonnull %intPtr.i3) #5, !dbg !10409
  %6 = icmp eq i32 %code.i4, 0, !dbg !10410
  %int.i5 = load i64, i64* %intPtr.i3, align 8, !dbg !10411
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5), !dbg !10412
  %switch = icmp ult i64 %int.i5, 2, !dbg !10413
  %or.cond = and i1 %6, %switch, !dbg !10414
  br i1 %or.cond, label %yes, label %no, !dbg !10414

checkEmptyOK:                                     ; preds = %enter
  br i1 %emptyOK, label %checkEmpty, label %tryGetBoolean, !dbg !10415

checkEmpty:                                       ; preds = %checkEmptyOK
  %bytes.ptr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value, i64 0, i32 1, !dbg !10416
  %bytes.i = load i8*, i8** %bytes.ptr.i, align 8, !dbg !10416
  %7 = icmp eq i8* %bytes.i, null, !dbg !10418
  br i1 %7, label %generate.i, label %tcl.impl.strempty.exit, !dbg !10418

generate.i:                                       ; preds = %checkEmpty
  %bytes1.i = tail call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %value) #5, !dbg !10419
  br label %tcl.impl.strempty.exit, !dbg !10420

tcl.impl.strempty.exit:                           ; preds = %checkEmpty, %generate.i
  %bytes2.i = phi i8* [ %bytes.i, %checkEmpty ], [ %bytes1.i, %generate.i ]
  %8 = load i8, i8* %bytes2.i, align 1, !dbg !10421
  %9 = icmp eq i8 %8, 0, !dbg !10421
  br i1 %9, label %yes, label %tryGetBoolean, !dbg !10422

tryGetBoolean:                                    ; preds = %tcl.impl.strempty.exit, %checkEmptyOK
  %10 = bitcast i32* %boolPtr.i to i8*, !dbg !10423
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10), !dbg !10423
  %str.i = tail call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %value) #5, !dbg !10423
  %code.i7 = call i32 @Tcl_GetBooleanFromObj(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %value, i32* noalias nocapture nonnull %boolPtr.i) #5, !dbg !10424
  %11 = icmp eq i32 %code.i7, 0, !dbg !10425
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10), !dbg !10426
  br i1 %11, label %yes, label %tryGetInt, !dbg !10427

tryGetInt:                                        ; preds = %tryGetBoolean
  %12 = bitcast i64* %intPtr.i to i8*, !dbg !10428
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12), !dbg !10428
  %code.i = call i32 @Tcl_GetWideIntFromObj(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %value, i64* noalias nocapture nonnull %intPtr.i) #5, !dbg !10428
  %13 = icmp eq i32 %code.i, 0, !dbg !10429
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12), !dbg !10430
  br i1 %13, label %no, label %checkZeroOne, !dbg !10431

yes:                                              ; preds = %checkZeroOne, %no, %tryGetBoolean, %tcl.impl.strempty.exit
  %merge = phi i1 [ true, %tryGetBoolean ], [ true, %tcl.impl.strempty.exit ], [ false, %no ], [ true, %checkZeroOne ]
  ret i1 %merge, !dbg !10432

no:                                               ; preds = %tryGetInt, %checkZeroOne
  br label %yes
}

; Function Attrs: alwaysinline nounwind
define hidden %NUMERIC @tcl.extractNumeric(%Tcl_Obj* nocapture nonnull %value) local_unnamed_addr #6 !dbg !10433 {
enter:
  %dblPtr.i = alloca double, align 8, !dbg !10438
  %intPtr.i = alloca i64, align 8, !dbg !10440
  %typePtr.ptr = getelementptr %Tcl_Obj, %Tcl_Obj* %value, i64 0, i32 3, !dbg !10442
  %0 = bitcast double* %dblPtr.i to i8*, !dbg !10443
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0), !dbg !10443
  %code.i2 = call i32 @Tcl_GetDoubleFromObj(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %value, double* noalias nocapture nonnull %dblPtr.i) #5, !dbg !10443
  %dbl.i = load double, double* %dblPtr.i, align 8, !dbg !10444
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0), !dbg !10445
  %tclDoubleType.i = load %ObjType*, %ObjType** @tclDoubleType, align 8, !dbg !10446, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %typePtr.i4 = load %ObjType*, %ObjType** %typePtr.ptr, align 8, !dbg !10448
  %1 = icmp ne %ObjType* %typePtr.i4, null, !dbg !10449
  %2 = icmp eq %ObjType* %tclDoubleType.i, %typePtr.i4, !dbg !10449
  %3 = and i1 %1, %2, !dbg !10449
  br i1 %3, label %returnDouble, label %extractInt, !dbg !10450

returnDouble:                                     ; preds = %enter
  %4 = insertvalue %NUMERIC { i1 true, %INT undef, double undef }, double %dbl.i, 2, !dbg !10451
  ret %NUMERIC %4, !dbg !10451

extractInt:                                       ; preds = %enter
  %5 = bitcast i64* %intPtr.i to i8*, !dbg !10452
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5), !dbg !10452
  %code.i = call i32 @Tcl_GetWideIntFromObj(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %value, i64* noalias nocapture nonnull %intPtr.i) #5, !dbg !10452
  %int.i = load i64, i64* %intPtr.i, align 8, !dbg !10453
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5), !dbg !10454
  %6 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %int.i, 2, !dbg !10455
  %7 = insertvalue %NUMERIC { i1 false, %INT undef, double undef }, %INT %6, 1, !dbg !10455
  ret %NUMERIC %7, !dbg !10455
}

; Function Attrs: alwaysinline nounwind
define hidden %NUMERIC_BOOLEAN @tcl.extractNumericOrBoolean(%Tcl_Obj* nocapture nonnull %value) local_unnamed_addr #6 !dbg !10456 {
enter:
  %dblPtr.i8 = alloca double, align 8, !dbg !10461
  %boolPtr.i = alloca i32, align 4, !dbg !10463
  %intPtr.i = alloca i64, align 8, !dbg !10465
  %dblPtr.i = alloca double, align 8, !dbg !10467
  %typePtr.ptr = getelementptr %Tcl_Obj, %Tcl_Obj* %value, i64 0, i32 3, !dbg !10469
  %tclIntType.i = load %ObjType*, %ObjType** @tclIntType, align 8, !dbg !10470
  %tclWideIntType.i = load %ObjType*, %ObjType** @tclWideIntType, align 8, !dbg !10470
  %tclDoubleType.i = load %ObjType*, %ObjType** @tclDoubleType, align 8, !dbg !10472
  %0 = bitcast i32* %boolPtr.i to i8*, !dbg !10474
  %1 = bitcast double* %dblPtr.i to i8*, !dbg !10475
  br label %testType, !dbg !10476

testType:                                         ; preds = %getDouble, %enter
  %typePtr = load %ObjType*, %ObjType** %typePtr.ptr, align 8, !dbg !10477
  %2 = icmp eq %ObjType* %typePtr, null, !dbg !10478
  br i1 %2, label %testIsBoolean, label %testIsInt, !dbg !10478

testIsInt:                                        ; preds = %testType
  %3 = icmp eq %ObjType* %tclIntType.i, %typePtr, !dbg !10479
  %4 = icmp eq %ObjType* %tclWideIntType.i, %typePtr, !dbg !10479
  %5 = or i1 %3, %4, !dbg !10479
  br i1 %5, label %returnInt, label %testIsDouble, !dbg !10480

returnInt:                                        ; preds = %testIsInt
  %6 = bitcast i64* %intPtr.i to i8*, !dbg !10481
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6), !dbg !10481
  %code.i4 = call i32 @Tcl_GetWideIntFromObj(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %value, i64* noalias nocapture nonnull %intPtr.i) #5, !dbg !10481
  %int.i = load i64, i64* %intPtr.i, align 8, !dbg !10482
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6), !dbg !10483
  %7 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %int.i, 2, !dbg !10484
  %8 = insertvalue %NUMERIC_BOOLEAN { i3 0, %INT undef, double undef, i1 undef }, %INT %7, 1, !dbg !10484
  ret %NUMERIC_BOOLEAN %8, !dbg !10484

testIsDouble:                                     ; preds = %testIsInt
  %9 = icmp eq %ObjType* %tclDoubleType.i, %typePtr, !dbg !10485
  br i1 %9, label %returnDouble, label %testIsBoolean, !dbg !10486

returnDouble:                                     ; preds = %testIsDouble
  %10 = bitcast double* %dblPtr.i8 to i8*, !dbg !10487
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10), !dbg !10487
  %code.i9 = call i32 @Tcl_GetDoubleFromObj(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %value, double* noalias nocapture nonnull %dblPtr.i8) #5, !dbg !10487
  %dbl.i10 = load double, double* %dblPtr.i8, align 8, !dbg !10488
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10), !dbg !10489
  %11 = insertvalue %NUMERIC_BOOLEAN { i3 1, %INT undef, double undef, i1 undef }, double %dbl.i10, 2, !dbg !10490
  ret %NUMERIC_BOOLEAN %11, !dbg !10490

testIsBoolean:                                    ; preds = %testType, %testIsDouble
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0), !dbg !10491
  %str.i = tail call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %value) #5, !dbg !10491
  %code.i7 = call i32 @Tcl_GetBooleanFromObj(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %value, i32* noalias nocapture nonnull %boolPtr.i) #5, !dbg !10492
  %12 = icmp eq i32 %code.i7, 0, !dbg !10493
  %bool.i = load i32, i32* %boolPtr.i, align 4, !dbg !10494
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0), !dbg !10495
  br i1 %12, label %returnBoolean, label %getDouble, !dbg !10496

returnBoolean:                                    ; preds = %testIsBoolean
  %13 = icmp ne i32 %bool.i, 0, !dbg !10494
  %14 = insertvalue %NUMERIC_BOOLEAN { i3 2, %INT undef, double undef, i1 undef }, i1 %13, 3, !dbg !10497
  ret %NUMERIC_BOOLEAN %14, !dbg !10497

getDouble:                                        ; preds = %testIsBoolean
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1), !dbg !10498
  %code.i = call i32 @Tcl_GetDoubleFromObj(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %value, double* noalias nocapture nonnull %dblPtr.i) #5, !dbg !10498
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1), !dbg !10499
  br label %testType, !dbg !10500
}

; Function Attrs: alwaysinline nounwind
define hidden double @tcl.extractDouble(%Tcl_Obj* nocapture nonnull %value) local_unnamed_addr #6 !dbg !10501 {
enter:
  %dblPtr.i = alloca double, align 8, !dbg !10506
  %0 = bitcast double* %dblPtr.i to i8*, !dbg !10508
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0), !dbg !10508
  %code.i = call i32 @Tcl_GetDoubleFromObj(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %value, double* noalias nocapture nonnull %dblPtr.i) #5, !dbg !10508
  %dbl.i = load double, double* %dblPtr.i, align 8, !dbg !10509
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0), !dbg !10510
  ret double %dbl.i, !dbg !10511
}

; Function Attrs: alwaysinline nounwind
define hidden %INT @tcl.extractInteger(%Tcl_Obj* nocapture nonnull %value) local_unnamed_addr #6 !dbg !10512 {
enter:
  %intPtr.i = alloca i64, align 8, !dbg !10515
  %0 = bitcast i64* %intPtr.i to i8*, !dbg !10517
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0), !dbg !10517
  %code.i = call i32 @Tcl_GetWideIntFromObj(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %value, i64* noalias nocapture nonnull %intPtr.i) #5, !dbg !10517
  %int.i = load i64, i64* %intPtr.i, align 8, !dbg !10518
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0), !dbg !10519
  %1 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %int.i, 2, !dbg !10520
  ret %INT %1, !dbg !10520
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden i1 @tcl.isTrue.numeric(%NUMERIC %value) local_unnamed_addr #0 !dbg !10521 {
enter:
  %0 = extractvalue %NUMERIC %value, 0, !dbg !10524
  br i1 %0, label %doDouble, label %doInteger, !dbg !10524

doInteger:                                        ; preds = %enter
  %1 = extractvalue %NUMERIC %value, 1, !dbg !10525
  %2 = extractvalue %INT %1, 0, !dbg !10526
  %3 = extractvalue %INT %1, 1, !dbg !10526
  %4 = sext i32 %3 to i64, !dbg !10526
  %5 = extractvalue %INT %1, 2, !dbg !10526
  %x.64210.i = select i1 %2, i64 %5, i64 %4, !dbg !10526
  %z.bit1.i = icmp ne i64 %x.64210.i, 0, !dbg !10528
  ret i1 %z.bit1.i, !dbg !10525

doDouble:                                         ; preds = %enter
  %6 = extractvalue %NUMERIC %value, 2, !dbg !10529
  %7 = fcmp one double %6, 0.000000e+00, !dbg !10529
  ret i1 %7, !dbg !10529
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define hidden i1 @tcl.isTrue.numericOrBoolean(%NUMERIC_BOOLEAN %value) local_unnamed_addr #0 !dbg !10530 {
enter:
  %0 = extractvalue %NUMERIC_BOOLEAN %value, 0, !dbg !10533
  switch i3 %0, label %doBoolean [
    i3 0, label %doInteger
    i3 1, label %doDouble
  ], !dbg !10533

doBoolean:                                        ; preds = %enter
  %1 = extractvalue %NUMERIC_BOOLEAN %value, 3, !dbg !10534
  ret i1 %1, !dbg !10534

doInteger:                                        ; preds = %enter
  %2 = extractvalue %NUMERIC_BOOLEAN %value, 1, !dbg !10535
  %3 = extractvalue %INT %2, 0, !dbg !10536
  %4 = extractvalue %INT %2, 1, !dbg !10536
  %5 = sext i32 %4 to i64, !dbg !10536
  %6 = extractvalue %INT %2, 2, !dbg !10536
  %x.64210.i = select i1 %3, i64 %6, i64 %5, !dbg !10536
  %z.bit1.i = icmp ne i64 %x.64210.i, 0, !dbg !10538
  ret i1 %z.bit1.i, !dbg !10535

doDouble:                                         ; preds = %enter
  %7 = extractvalue %NUMERIC_BOOLEAN %value, 2, !dbg !10539
  %8 = fcmp one double %7, 0.000000e+00, !dbg !10539
  ret i1 %8, !dbg !10539
}

; Function Attrs: alwaysinline nounwind
define hidden i32 @tcl.cmp.strstr(%Tcl_Obj* nonnull %value1Ptr, %Tcl_Obj* nonnull %value2Ptr) local_unnamed_addr #6 !dbg !10540 {
enter:
  %dblPtr.i.i18 = alloca double, align 8, !dbg !10544
  %intPtr.i.i19 = alloca i64, align 8, !dbg !10547
  %dblPtr.i.i14 = alloca double, align 8, !dbg !10549
  %intPtr.i.i = alloca i64, align 8, !dbg !10552
  %lengthPtr.i20.i = alloca i32, align 4, !dbg !10554
  %lengthPtr.i.i = alloca i32, align 4, !dbg !10557
  %dblPtr.i.i2 = alloca double, align 8, !dbg !10559
  %dblPtr.i.i = alloca double, align 8, !dbg !10562
  %typePtr.ptr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value1Ptr, i64 0, i32 3, !dbg !10565
  %typePtr.i = load %ObjType*, %ObjType** %typePtr.ptr.i, align 8, !dbg !10565
  %0 = icmp eq %ObjType* %typePtr.i, null, !dbg !10565
  br i1 %0, label %tcl.isNumeric.exit, label %checkDoubleTypes.i, !dbg !10565

checkDoubleTypes.i:                               ; preds = %enter
  %tclDoubleType.i.i = load %ObjType*, %ObjType** @tclDoubleType, align 8, !dbg !10566, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %1 = icmp eq %ObjType* %tclDoubleType.i.i, %typePtr.i, !dbg !10568
  br i1 %1, label %test, label %checkIntTypes.i, !dbg !10569

checkIntTypes.i:                                  ; preds = %checkDoubleTypes.i
  %tclIntType.i.i = load %ObjType*, %ObjType** @tclIntType, align 8, !dbg !10570, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %tclWideIntType.i.i = load %ObjType*, %ObjType** @tclWideIntType, align 8, !dbg !10572, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %2 = icmp eq %ObjType* %tclIntType.i.i, %typePtr.i, !dbg !10573
  %3 = icmp eq %ObjType* %tclWideIntType.i.i, %typePtr.i, !dbg !10573
  %4 = or i1 %2, %3, !dbg !10573
  br i1 %4, label %test, label %tcl.isNumeric.exit, !dbg !10574

tcl.isNumeric.exit:                               ; preds = %enter, %checkIntTypes.i
  %5 = bitcast double* %dblPtr.i.i to i8*, !dbg !10575
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #5, !dbg !10575
  %code.i.i = call i32 @Tcl_GetDoubleFromObj(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %value1Ptr, double* noalias nocapture nonnull %dblPtr.i.i) #5, !dbg !10575
  %6 = icmp eq i32 %code.i.i, 0, !dbg !10576
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #5, !dbg !10577
  br i1 %6, label %test, label %string.comparison, !dbg !10578

test:                                             ; preds = %checkDoubleTypes.i, %checkIntTypes.i, %tcl.isNumeric.exit
  %typePtr.ptr.i3 = getelementptr %Tcl_Obj, %Tcl_Obj* %value2Ptr, i64 0, i32 3, !dbg !10579
  %typePtr.i4 = load %ObjType*, %ObjType** %typePtr.ptr.i3, align 8, !dbg !10579
  %7 = icmp eq %ObjType* %typePtr.i4, null, !dbg !10579
  br i1 %7, label %tcl.isNumeric.exit13, label %checkDoubleTypes.i6, !dbg !10579

checkDoubleTypes.i6:                              ; preds = %test
  %tclDoubleType.i.i5 = load %ObjType*, %ObjType** @tclDoubleType, align 8, !dbg !10580, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %8 = icmp eq %ObjType* %tclDoubleType.i.i5, %typePtr.i4, !dbg !10582
  br i1 %8, label %numeric.comparison, label %checkIntTypes.i9, !dbg !10583

checkIntTypes.i9:                                 ; preds = %checkDoubleTypes.i6
  %tclIntType.i.i7 = load %ObjType*, %ObjType** @tclIntType, align 8, !dbg !10584, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %tclWideIntType.i.i8 = load %ObjType*, %ObjType** @tclWideIntType, align 8, !dbg !10586, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %9 = icmp eq %ObjType* %tclIntType.i.i7, %typePtr.i4, !dbg !10587
  %10 = icmp eq %ObjType* %tclWideIntType.i.i8, %typePtr.i4, !dbg !10587
  %11 = or i1 %9, %10, !dbg !10587
  br i1 %11, label %numeric.comparison, label %tcl.isNumeric.exit13, !dbg !10588

tcl.isNumeric.exit13:                             ; preds = %test, %checkIntTypes.i9
  %12 = bitcast double* %dblPtr.i.i2 to i8*, !dbg !10589
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #5, !dbg !10589
  %code.i.i11 = call i32 @Tcl_GetDoubleFromObj(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %value2Ptr, double* noalias nocapture nonnull %dblPtr.i.i2) #5, !dbg !10589
  %13 = icmp eq i32 %code.i.i11, 0, !dbg !10590
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #5, !dbg !10591
  br i1 %13, label %tcl.isNumeric.exit13.numeric.comparison_crit_edge, label %string.comparison, !dbg !10592

tcl.isNumeric.exit13.numeric.comparison_crit_edge: ; preds = %tcl.isNumeric.exit13
  %tclDoubleType.i.i16.pre = load %ObjType*, %ObjType** @tclDoubleType, align 8, !dbg !10593, !invariant.load !3
  br label %numeric.comparison, !dbg !10592

string.comparison:                                ; preds = %tcl.isNumeric.exit13, %tcl.isNumeric.exit
  %14 = icmp eq %Tcl_Obj* %value1Ptr, %value2Ptr, !dbg !10595
  br i1 %14, label %tcl.strcmp.exit, label %nexttest.i, !dbg !10595

nexttest.i:                                       ; preds = %string.comparison
  %tclByteArrayType.i.i = load %ObjType*, %ObjType** @tclByteArrayType, align 8, !dbg !10596, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %typePtr.i.i = load %ObjType*, %ObjType** %typePtr.ptr.i, align 8, !dbg !10598
  %15 = icmp eq %ObjType* %tclByteArrayType.i.i, %typePtr.i.i, !dbg !10599
  br i1 %15, label %puretest.i.i, label %nexttest2.i, !dbg !10599

puretest.i.i:                                     ; preds = %nexttest.i
  %bytes.ptr.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value1Ptr, i64 0, i32 1, !dbg !10600
  %bytes.i.i = load i8*, i8** %bytes.ptr.i.i, align 8, !dbg !10600
  %16 = icmp eq i8* %bytes.i.i, null, !dbg !10600
  br i1 %16, label %testBA2.i, label %nexttest2.i, !dbg !10600

testBA2.i:                                        ; preds = %puretest.i.i
  %typePtr.ptr.i12.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value2Ptr, i64 0, i32 3, !dbg !10601
  %typePtr.i13.i = load %ObjType*, %ObjType** %typePtr.ptr.i12.i, align 8, !dbg !10601
  %17 = icmp eq %ObjType* %tclByteArrayType.i.i, %typePtr.i13.i, !dbg !10603
  br i1 %17, label %puretest.i16.i, label %nexttest2.i, !dbg !10603

puretest.i16.i:                                   ; preds = %testBA2.i
  %bytes.ptr.i14.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value2Ptr, i64 0, i32 1, !dbg !10604
  %bytes.i15.i = load i8*, i8** %bytes.ptr.i14.i, align 8, !dbg !10604
  %18 = icmp eq i8* %bytes.i15.i, null, !dbg !10604
  br i1 %18, label %byteArrays.i, label %nexttest2.i, !dbg !10604

nexttest2.i:                                      ; preds = %puretest.i16.i, %testBA2.i, %puretest.i.i, %nexttest.i
  %tclStringType.i.i = load %ObjType*, %ObjType** @tclStringType, align 8, !dbg !10605, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %19 = icmp eq %ObjType* %typePtr.i.i, %tclStringType.i.i, !dbg !10607
  %typePtr.ptr.i27.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value2Ptr, i64 0, i32 3, !dbg !10608
  %typePtr.i28.i = load %ObjType*, %ObjType** %typePtr.ptr.i27.i, align 8, !dbg !10608
  %20 = icmp eq %ObjType* %typePtr.i28.i, %tclStringType.i.i, !dbg !10610
  %21 = and i1 %19, %20, !dbg !10611
  br i1 %21, label %unicode.i, label %UTF8.i, !dbg !10611

byteArrays.i:                                     ; preds = %puretest.i16.i
  %22 = bitcast i32* %lengthPtr.i20.i to i8*, !dbg !10612
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %22) #5, !dbg !10612
  %bytes.i21.i = call nonnull i8* @Tcl_GetByteArrayFromObj(%Tcl_Obj* noalias nocapture nonnull %value1Ptr, i32* noalias nocapture nonnull %lengthPtr.i20.i) #5, !dbg !10612
  %length.i22.i = load i32, i32* %lengthPtr.i20.i, align 4, !dbg !10613
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %22) #5, !dbg !10614
  %23 = bitcast i32* %lengthPtr.i.i to i8*, !dbg !10615
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %23) #5, !dbg !10615
  %bytes.i10.i = call nonnull i8* @Tcl_GetByteArrayFromObj(%Tcl_Obj* noalias nocapture nonnull %value2Ptr, i32* noalias nocapture nonnull %lengthPtr.i.i) #5, !dbg !10615
  %length.i.i = load i32, i32* %lengthPtr.i.i, align 4, !dbg !10616
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %23) #5, !dbg !10617
  %24 = sub i32 %length.i22.i, %length.i.i, !dbg !10618
  %25 = icmp slt i32 %length.i22.i, %length.i.i, !dbg !10619
  %min.i = select i1 %25, i32 %length.i22.i, i32 %length.i.i, !dbg !10619
  %cmp.i = tail call i32 @memcmp(i8* nonnull %bytes.i21.i, i8* nonnull %bytes.i10.i, i32 %min.i) #5, !dbg !10619
  br label %result.i, !dbg !10620

unicode.i:                                        ; preds = %nexttest2.i
  %length.i = tail call i32 @Tcl_GetCharLength(%Tcl_Obj* nocapture nonnull %value1Ptr) #5, !dbg !10621
  %length1.i = tail call i32 @Tcl_GetCharLength(%Tcl_Obj* nocapture nonnull %value2Ptr) #5, !dbg !10622
  %26 = sub i32 %length.i, %length1.i, !dbg !10623
  %ustr.i = tail call nonnull i16* @Tcl_GetUnicode(%Tcl_Obj* nocapture nonnull %value1Ptr) #5, !dbg !10624
  %ustr2.i = tail call nonnull i16* @Tcl_GetUnicode(%Tcl_Obj* nocapture nonnull %value2Ptr) #5, !dbg !10624
  %27 = icmp slt i32 %length.i, %length1.i, !dbg !10624
  %min3.i = select i1 %27, i32 %length.i, i32 %length1.i, !dbg !10624
  %cmp4.i = tail call i32 @Tcl_UniCharNcmp(i16* nocapture nonnull readonly %ustr.i, i16* nocapture nonnull readonly %ustr2.i, i32 %min3.i) #5, !dbg !10624
  br label %result.i, !dbg !10625

UTF8.i:                                           ; preds = %nexttest2.i
  %str.i = tail call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %value1Ptr) #5, !dbg !10626
  %str5.i = tail call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %value2Ptr) #5, !dbg !10627
  %length6.i = tail call i32 @Tcl_GetCharLength(%Tcl_Obj* nocapture nonnull %value1Ptr) #5, !dbg !10628
  %length7.i = tail call i32 @Tcl_GetCharLength(%Tcl_Obj* nocapture nonnull %value2Ptr) #5, !dbg !10629
  %28 = sub i32 %length6.i, %length7.i, !dbg !10630
  %29 = icmp slt i32 %length6.i, %length7.i, !dbg !10631
  %min8.i = select i1 %29, i32 %length6.i, i32 %length7.i, !dbg !10631
  %cmp9.i = tail call i32 @TclpUtfNcmp2(i8* nocapture nonnull %str.i, i8* nocapture nonnull %str5.i, i32 %min8.i) #5, !dbg !10631
  br label %result.i, !dbg !10632

result.i:                                         ; preds = %UTF8.i, %unicode.i, %byteArrays.i
  %30 = phi i32 [ %cmp.i, %byteArrays.i ], [ %cmp4.i, %unicode.i ], [ %cmp9.i, %UTF8.i ]
  %31 = phi i32 [ %24, %byteArrays.i ], [ %26, %unicode.i ], [ %28, %UTF8.i ]
  %32 = icmp eq i32 %30, 0, !dbg !10633
  %33 = select i1 %32, i32 %31, i32 %30, !dbg !10633
  br label %tcl.strcmp.exit, !dbg !10633

tcl.strcmp.exit:                                  ; preds = %tcl.lt.numeric.exit, %tcl.gt.numeric.exit, %doubles.i, %op.32bit.i.i, %string.comparison, %result.i
  %34 = phi i32 [ %33, %result.i ], [ 0, %string.comparison ], [ -1, %tcl.lt.numeric.exit ], [ %., %tcl.gt.numeric.exit ], [ -1, %doubles.i ], [ -1, %op.32bit.i.i ]
  ret i32 %34, !dbg !10634

numeric.comparison:                               ; preds = %tcl.isNumeric.exit13.numeric.comparison_crit_edge, %checkDoubleTypes.i6, %checkIntTypes.i9
  %tclDoubleType.i.i16 = phi %ObjType* [ %tclDoubleType.i.i16.pre, %tcl.isNumeric.exit13.numeric.comparison_crit_edge ], [ %typePtr.i4, %checkDoubleTypes.i6 ], [ %tclDoubleType.i.i5, %checkIntTypes.i9 ], !dbg !10593
  %35 = bitcast double* %dblPtr.i.i14 to i8*, !dbg !10635
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #5, !dbg !10635
  %code.i2.i = call i32 @Tcl_GetDoubleFromObj(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %value1Ptr, double* noalias nocapture nonnull %dblPtr.i.i14) #5, !dbg !10635
  %dbl.i.i = load double, double* %dblPtr.i.i14, align 8, !dbg !10636
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #5, !dbg !10637
  %typePtr.i4.i = load %ObjType*, %ObjType** %typePtr.ptr.i, align 8, !dbg !10638
  %36 = icmp ne %ObjType* %typePtr.i4.i, null, !dbg !10639
  %37 = icmp eq %ObjType* %tclDoubleType.i.i16, %typePtr.i4.i, !dbg !10639
  %38 = and i1 %36, %37, !dbg !10639
  br i1 %38, label %returnDouble.i, label %extractInt.i, !dbg !10640

returnDouble.i:                                   ; preds = %numeric.comparison
  %39 = insertvalue %NUMERIC { i1 true, %INT undef, double undef }, double %dbl.i.i, 2, !dbg !10641
  br label %tcl.extractNumeric.exit, !dbg !10641

extractInt.i:                                     ; preds = %numeric.comparison
  %40 = bitcast i64* %intPtr.i.i to i8*, !dbg !10642
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #5, !dbg !10642
  %code.i.i17 = call i32 @Tcl_GetWideIntFromObj(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %value1Ptr, i64* noalias nocapture nonnull %intPtr.i.i) #5, !dbg !10642
  %int.i.i = load i64, i64* %intPtr.i.i, align 8, !dbg !10643
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #5, !dbg !10644
  %41 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %int.i.i, 2, !dbg !10645
  %42 = insertvalue %NUMERIC { i1 false, %INT undef, double undef }, %INT %41, 1, !dbg !10645
  br label %tcl.extractNumeric.exit, !dbg !10645

tcl.extractNumeric.exit:                          ; preds = %extractInt.i, %returnDouble.i
  %43 = phi %NUMERIC [ %39, %returnDouble.i ], [ %42, %extractInt.i ]
  %44 = bitcast double* %dblPtr.i.i18 to i8*, !dbg !10646
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %44) #5, !dbg !10646
  %code.i2.i21 = call i32 @Tcl_GetDoubleFromObj(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %value2Ptr, double* noalias nocapture nonnull %dblPtr.i.i18) #5, !dbg !10646
  %dbl.i.i22 = load double, double* %dblPtr.i.i18, align 8, !dbg !10647
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %44) #5, !dbg !10648
  %typePtr.i4.i24 = load %ObjType*, %ObjType** %typePtr.ptr.i3, align 8, !dbg !10649
  %45 = icmp ne %ObjType* %typePtr.i4.i24, null, !dbg !10651
  %46 = icmp eq %ObjType* %tclDoubleType.i.i16, %typePtr.i4.i24, !dbg !10651
  %47 = and i1 %45, %46, !dbg !10651
  br i1 %47, label %returnDouble.i25, label %extractInt.i28, !dbg !10652

returnDouble.i25:                                 ; preds = %tcl.extractNumeric.exit
  %48 = insertvalue %NUMERIC { i1 true, %INT undef, double undef }, double %dbl.i.i22, 2, !dbg !10653
  br label %tcl.extractNumeric.exit29, !dbg !10653

extractInt.i28:                                   ; preds = %tcl.extractNumeric.exit
  %49 = bitcast i64* %intPtr.i.i19 to i8*, !dbg !10654
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %49) #5, !dbg !10654
  %code.i.i26 = call i32 @Tcl_GetWideIntFromObj(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %value2Ptr, i64* noalias nocapture nonnull %intPtr.i.i19) #5, !dbg !10654
  %int.i.i27 = load i64, i64* %intPtr.i.i19, align 8, !dbg !10655
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %49) #5, !dbg !10656
  %50 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %int.i.i27, 2, !dbg !10657
  %51 = insertvalue %NUMERIC { i1 false, %INT undef, double undef }, %INT %50, 1, !dbg !10657
  br label %tcl.extractNumeric.exit29, !dbg !10657

tcl.extractNumeric.exit29:                        ; preds = %extractInt.i28, %returnDouble.i25
  %52 = phi %NUMERIC [ %48, %returnDouble.i25 ], [ %51, %extractInt.i28 ]
  %53 = extractvalue %NUMERIC %43, 0, !dbg !10658
  %54 = extractvalue %NUMERIC %52, 0, !dbg !10658
  %.demorgan.i = or i1 %53, %54, !dbg !10658
  %55 = extractvalue %NUMERIC %43, 1, !dbg !10660
  br i1 %.demorgan.i, label %doubles.i, label %ints.i, !dbg !10658

ints.i:                                           ; preds = %tcl.extractNumeric.exit29
  %56 = extractvalue %NUMERIC %52, 1, !dbg !10661
  %57 = extractvalue %INT %55, 0, !dbg !10662
  br i1 %57, label %tcl.int.64.exit.i.i, label %check2.i.i, !dbg !10662

check2.i.i:                                       ; preds = %ints.i
  %58 = extractvalue %INT %56, 0, !dbg !10664
  %59 = extractvalue %INT %55, 1, !dbg !10665
  br i1 %58, label %tcl.int.64.exit.thread.i.i, label %op.32bit.i.i, !dbg !10664

op.32bit.i.i:                                     ; preds = %check2.i.i
  %y.32.i.i = extractvalue %INT %56, 1, !dbg !10666
  %z.bit.i.i = icmp slt i32 %59, %y.32.i.i, !dbg !10667
  br i1 %z.bit.i.i, label %tcl.strcmp.exit, label %check2.i.i32, !dbg !10668

tcl.int.64.exit.thread.i.i:                       ; preds = %check2.i.i
  %60 = sext i32 %59 to i64, !dbg !10669
  %61 = extractvalue %INT %56, 2, !dbg !10671
  br label %66, !dbg !10671

tcl.int.64.exit.i.i:                              ; preds = %ints.i
  %62 = extractvalue %INT %55, 2, !dbg !10673
  %.pre.i.i = extractvalue %INT %56, 0, !dbg !10671
  %63 = extractvalue %INT %56, 1, !dbg !10671
  %64 = sext i32 %63 to i64, !dbg !10671
  %65 = extractvalue %INT %56, 2, !dbg !10671
  br i1 %.pre.i.i, label %66, label %tcl.lt.numeric.exit, !dbg !10671

66:                                               ; preds = %tcl.int.64.exit.i.i, %tcl.int.64.exit.thread.i.i
  %67 = phi i64 [ %61, %tcl.int.64.exit.thread.i.i ], [ %65, %tcl.int.64.exit.i.i ]
  %x.64210.i.i = phi i64 [ %60, %tcl.int.64.exit.thread.i.i ], [ %62, %tcl.int.64.exit.i.i ]
  br label %tcl.lt.numeric.exit, !dbg !10671

doubles.i:                                        ; preds = %tcl.extractNumeric.exit29
  %68 = extractvalue %INT %55, 0, !dbg !10674
  %69 = extractvalue %INT %55, 1, !dbg !10674
  %70 = sext i32 %69 to i64, !dbg !10674
  %71 = extractvalue %INT %55, 2, !dbg !10674
  %72 = select i1 %68, i64 %71, i64 %70, !dbg !10674
  %73 = sitofp i64 %72 to double, !dbg !10676
  %74 = extractvalue %NUMERIC %43, 2, !dbg !10676
  %left1.i = select i1 %53, double %74, double %73, !dbg !10676
  %75 = extractvalue %NUMERIC %52, 1, !dbg !10677
  %76 = extractvalue %INT %75, 0, !dbg !10678
  %77 = extractvalue %INT %75, 1, !dbg !10678
  %78 = sext i32 %77 to i64, !dbg !10678
  %79 = extractvalue %INT %75, 2, !dbg !10678
  %80 = select i1 %76, i64 %79, i64 %78, !dbg !10678
  %81 = sitofp i64 %80 to double, !dbg !10677
  %82 = extractvalue %NUMERIC %52, 2, !dbg !10677
  %right2.i = select i1 %54, double %82, double %81, !dbg !10677
  %83 = fcmp olt double %left1.i, %right2.i, !dbg !10680
  br i1 %83, label %tcl.strcmp.exit, label %doubles.i44, !dbg !10668

tcl.lt.numeric.exit:                              ; preds = %tcl.int.64.exit.i.i, %66
  %x.6429.i.i = phi i64 [ %x.64210.i.i, %66 ], [ %62, %tcl.int.64.exit.i.i ]
  %84 = phi i64 [ %67, %66 ], [ %64, %tcl.int.64.exit.i.i ]
  %z.bit1.i.i = icmp slt i64 %x.6429.i.i, %84, !dbg !10681
  br i1 %z.bit1.i.i, label %tcl.strcmp.exit, label %ints.i31, !dbg !10668

ints.i31:                                         ; preds = %tcl.lt.numeric.exit
  br i1 %57, label %tcl.int.64.exit.i.i38, label %check2.i.i32, !dbg !10682

check2.i.i32:                                     ; preds = %op.32bit.i.i, %ints.i31
  %85 = extractvalue %INT %56, 0, !dbg !10685
  %86 = extractvalue %INT %55, 1, !dbg !10686
  br i1 %85, label %tcl.int.64.exit.thread.i.i36, label %op.32bit.i.i35, !dbg !10685

op.32bit.i.i35:                                   ; preds = %check2.i.i32
  %y.32.i.i33 = extractvalue %INT %56, 1, !dbg !10687
  %z.bit.i.i34 = icmp sgt i32 %86, %y.32.i.i33, !dbg !10688
  br label %tcl.gt.numeric.exit, !dbg !10688

tcl.int.64.exit.thread.i.i36:                     ; preds = %check2.i.i32
  %87 = sext i32 %86 to i64, !dbg !10689
  %88 = extractvalue %INT %56, 2, !dbg !10691
  br label %93, !dbg !10691

tcl.int.64.exit.i.i38:                            ; preds = %ints.i31
  %89 = extractvalue %INT %55, 2, !dbg !10693
  %.pre.i.i37 = extractvalue %INT %56, 0, !dbg !10691
  %90 = extractvalue %INT %56, 1, !dbg !10691
  %91 = sext i32 %90 to i64, !dbg !10691
  %92 = extractvalue %INT %56, 2, !dbg !10691
  br i1 %.pre.i.i37, label %93, label %95, !dbg !10691

93:                                               ; preds = %tcl.int.64.exit.i.i38, %tcl.int.64.exit.thread.i.i36
  %94 = phi i64 [ %88, %tcl.int.64.exit.thread.i.i36 ], [ %92, %tcl.int.64.exit.i.i38 ]
  %x.64210.i.i39 = phi i64 [ %87, %tcl.int.64.exit.thread.i.i36 ], [ %89, %tcl.int.64.exit.i.i38 ]
  br label %95, !dbg !10691

95:                                               ; preds = %93, %tcl.int.64.exit.i.i38
  %x.6429.i.i40 = phi i64 [ %x.64210.i.i39, %93 ], [ %89, %tcl.int.64.exit.i.i38 ]
  %96 = phi i64 [ %94, %93 ], [ %91, %tcl.int.64.exit.i.i38 ]
  %z.bit1.i.i41 = icmp sgt i64 %x.6429.i.i40, %96, !dbg !10694
  br label %tcl.gt.numeric.exit, !dbg !10694

doubles.i44:                                      ; preds = %doubles.i
  %97 = fcmp ogt double %left1.i, %right2.i, !dbg !10695
  br label %tcl.gt.numeric.exit, !dbg !10695

tcl.gt.numeric.exit:                              ; preds = %op.32bit.i.i35, %95, %doubles.i44
  %98 = phi i1 [ %97, %doubles.i44 ], [ %z.bit.i.i34, %op.32bit.i.i35 ], [ %z.bit1.i.i41, %95 ]
  %. = zext i1 %98 to i32
  br label %tcl.strcmp.exit
}

; Function Attrs: alwaysinline nounwind
define hidden i32 @tcl.cmp.strnum(%Tcl_Obj* nonnull %value1Ptr, %NUMERIC %value2Ptr) local_unnamed_addr #6 !dbg !10696 {
enter:
  %dblPtr.i.i7 = alloca double, align 8, !dbg !10702
  %intPtr.i.i = alloca i64, align 8, !dbg !10705
  %lengthPtr.i20.i = alloca i32, align 4, !dbg !10707
  %lengthPtr.i.i = alloca i32, align 4, !dbg !10710
  %dblPtr.i.i = alloca double, align 8, !dbg !10712
  %typePtr.ptr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value1Ptr, i64 0, i32 3, !dbg !10715
  %typePtr.i = load %ObjType*, %ObjType** %typePtr.ptr.i, align 8, !dbg !10715
  %0 = icmp eq %ObjType* %typePtr.i, null, !dbg !10715
  br i1 %0, label %tcl.isNumeric.exit, label %checkDoubleTypes.i, !dbg !10715

checkDoubleTypes.i:                               ; preds = %enter
  %tclDoubleType.i.i = load %ObjType*, %ObjType** @tclDoubleType, align 8, !dbg !10716, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %1 = icmp eq %ObjType* %tclDoubleType.i.i, %typePtr.i, !dbg !10718
  br i1 %1, label %numeric.comparison, label %checkIntTypes.i, !dbg !10719

checkIntTypes.i:                                  ; preds = %checkDoubleTypes.i
  %tclIntType.i.i = load %ObjType*, %ObjType** @tclIntType, align 8, !dbg !10720, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %tclWideIntType.i.i = load %ObjType*, %ObjType** @tclWideIntType, align 8, !dbg !10722, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %2 = icmp eq %ObjType* %tclIntType.i.i, %typePtr.i, !dbg !10723
  %3 = icmp eq %ObjType* %tclWideIntType.i.i, %typePtr.i, !dbg !10723
  %4 = or i1 %2, %3, !dbg !10723
  br i1 %4, label %numeric.comparison, label %tcl.isNumeric.exit, !dbg !10724

tcl.isNumeric.exit:                               ; preds = %enter, %checkIntTypes.i
  %5 = bitcast double* %dblPtr.i.i to i8*, !dbg !10725
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #5, !dbg !10725
  %code.i.i = call i32 @Tcl_GetDoubleFromObj(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %value1Ptr, double* noalias nocapture nonnull %dblPtr.i.i) #5, !dbg !10725
  %6 = icmp eq i32 %code.i.i, 0, !dbg !10726
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #5, !dbg !10727
  br i1 %6, label %tcl.isNumeric.exit.numeric.comparison_crit_edge, label %string.comparison, !dbg !10728

tcl.isNumeric.exit.numeric.comparison_crit_edge:  ; preds = %tcl.isNumeric.exit
  %tclDoubleType.i.i9.pre = load %ObjType*, %ObjType** @tclDoubleType, align 8, !dbg !10729, !invariant.load !3
  br label %numeric.comparison, !dbg !10728

string.comparison:                                ; preds = %tcl.isNumeric.exit
  %7 = extractvalue %NUMERIC %value2Ptr, 0, !dbg !10731
  br i1 %7, label %op.double.i, label %op.int.i, !dbg !10731

op.int.i:                                         ; preds = %string.comparison
  %8 = extractvalue %NUMERIC %value2Ptr, 1, !dbg !10733
  %9 = extractvalue %INT %8, 0, !dbg !10734
  br i1 %9, label %op.64bit.i.i, label %op.32bit.i.i, !dbg !10734

op.32bit.i.i:                                     ; preds = %op.int.i
  %10 = extractvalue %INT %8, 1, !dbg !10736
  %objPtr.i.i = tail call noalias nonnull %Tcl_Obj* @Tcl_NewIntObj(i32 %10) #5, !dbg !10736
  %typePtr.ptr.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr.i.i, i64 0, i32 3, !dbg !10737
  %typePtr.i.i = load %ObjType*, %ObjType** %typePtr.ptr.i.i, align 8, !dbg !10737, !nonnull !3
  %tclWideIntType.i.i2 = load %ObjType*, %ObjType** @tclWideIntType, align 8, !dbg !10738, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %11 = icmp eq %ObjType* %typePtr.i.i, %tclWideIntType.i.i2, !dbg !10738
  %tclIntType.i.i3 = load %ObjType*, %ObjType** @tclIntType, align 8, !dbg !10738, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %12 = icmp eq %ObjType* %typePtr.i.i, %tclIntType.i.i3, !dbg !10738
  %13 = or i1 %11, %12, !dbg !10738
  br label %tcl.stringify.numeric.exit, !dbg !10739

op.64bit.i.i:                                     ; preds = %op.int.i
  %14 = extractvalue %INT %8, 2, !dbg !10740
  %objPtr1.i.i = tail call noalias nonnull %Tcl_Obj* @Tcl_NewWideIntObj(i64 %14) #5, !dbg !10740
  %typePtr.ptr2.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr1.i.i, i64 0, i32 3, !dbg !10741
  %typePtr3.i.i = load %ObjType*, %ObjType** %typePtr.ptr2.i.i, align 8, !dbg !10741, !nonnull !3
  %tclWideIntType4.i.i = load %ObjType*, %ObjType** @tclWideIntType, align 8, !dbg !10742, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %15 = icmp eq %ObjType* %typePtr3.i.i, %tclWideIntType4.i.i, !dbg !10742
  %tclIntType5.i.i = load %ObjType*, %ObjType** @tclIntType, align 8, !dbg !10742, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %16 = icmp eq %ObjType* %typePtr3.i.i, %tclIntType5.i.i, !dbg !10742
  %17 = or i1 %15, %16, !dbg !10742
  br label %tcl.stringify.numeric.exit, !dbg !10743

op.double.i:                                      ; preds = %string.comparison
  %18 = extractvalue %NUMERIC %value2Ptr, 2, !dbg !10744
  %objPtr.i1.i = tail call noalias nonnull %Tcl_Obj* @Tcl_NewDoubleObj(double %18) #5, !dbg !10745
  %typePtr.ptr.i4.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr.i1.i, i64 0, i32 3, !dbg !10747
  %typePtr.i5.i = load %ObjType*, %ObjType** %typePtr.ptr.i4.i, align 8, !dbg !10747, !nonnull !3
  %tclDoubleType.i.i4 = load %ObjType*, %ObjType** @tclDoubleType, align 8, !dbg !10748, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %19 = icmp eq %ObjType* %typePtr.i5.i, %tclDoubleType.i.i4, !dbg !10748
  br label %tcl.stringify.numeric.exit, !dbg !10744

tcl.stringify.numeric.exit:                       ; preds = %op.32bit.i.i, %op.64bit.i.i, %op.double.i
  %.sink = phi i1 [ %13, %op.32bit.i.i ], [ %17, %op.64bit.i.i ], [ %19, %op.double.i ]
  %typePtr.i28.i = phi %ObjType* [ %typePtr.i.i, %op.32bit.i.i ], [ %typePtr3.i.i, %op.64bit.i.i ], [ %typePtr.i5.i, %op.double.i ]
  %20 = phi %Tcl_Obj* [ %objPtr.i.i, %op.32bit.i.i ], [ %objPtr1.i.i, %op.64bit.i.i ], [ %objPtr.i1.i, %op.double.i ]
  tail call void @llvm.assume(i1 %.sink) #5, !dbg !10749
  %21 = icmp eq %Tcl_Obj* %20, %value1Ptr, !dbg !10750
  br i1 %21, label %freeObject.i, label %nexttest.i, !dbg !10750

nexttest.i:                                       ; preds = %tcl.stringify.numeric.exit
  %tclByteArrayType.i.i = load %ObjType*, %ObjType** @tclByteArrayType, align 8, !dbg !10751, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %typePtr.i.i6 = load %ObjType*, %ObjType** %typePtr.ptr.i, align 8, !dbg !10753
  %22 = icmp eq %ObjType* %tclByteArrayType.i.i, %typePtr.i.i6, !dbg !10754
  br i1 %22, label %puretest.i.i, label %nexttest2.i, !dbg !10754

puretest.i.i:                                     ; preds = %nexttest.i
  %bytes.ptr.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value1Ptr, i64 0, i32 1, !dbg !10755
  %bytes.i.i = load i8*, i8** %bytes.ptr.i.i, align 8, !dbg !10755
  %23 = icmp eq i8* %bytes.i.i, null, !dbg !10755
  %24 = icmp eq %ObjType* %tclByteArrayType.i.i, %typePtr.i28.i, !dbg !10756
  %or.cond = and i1 %23, %24, !dbg !10755
  br i1 %or.cond, label %puretest.i16.i, label %nexttest2.i, !dbg !10755

puretest.i16.i:                                   ; preds = %puretest.i.i
  %bytes.ptr.i14.i = getelementptr %Tcl_Obj, %Tcl_Obj* %20, i64 0, i32 1, !dbg !10758
  %bytes.i15.i = load i8*, i8** %bytes.ptr.i14.i, align 8, !dbg !10758
  %25 = icmp eq i8* %bytes.i15.i, null, !dbg !10758
  br i1 %25, label %byteArrays.i, label %nexttest2.i, !dbg !10758

nexttest2.i:                                      ; preds = %puretest.i16.i, %puretest.i.i, %nexttest.i
  %tclStringType.i.i = load %ObjType*, %ObjType** @tclStringType, align 8, !dbg !10759, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %26 = icmp eq %ObjType* %typePtr.i.i6, %tclStringType.i.i, !dbg !10761
  %27 = icmp eq %ObjType* %typePtr.i28.i, %tclStringType.i.i, !dbg !10762
  %28 = and i1 %26, %27, !dbg !10764
  br i1 %28, label %unicode.i, label %UTF8.i, !dbg !10764

byteArrays.i:                                     ; preds = %puretest.i16.i
  %29 = bitcast i32* %lengthPtr.i20.i to i8*, !dbg !10765
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %29) #5, !dbg !10765
  %bytes.i21.i = call nonnull i8* @Tcl_GetByteArrayFromObj(%Tcl_Obj* noalias nocapture nonnull %value1Ptr, i32* noalias nocapture nonnull %lengthPtr.i20.i) #5, !dbg !10765
  %length.i22.i = load i32, i32* %lengthPtr.i20.i, align 4, !dbg !10766
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %29) #5, !dbg !10767
  %30 = bitcast i32* %lengthPtr.i.i to i8*, !dbg !10768
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %30) #5, !dbg !10768
  %bytes.i10.i = call nonnull i8* @Tcl_GetByteArrayFromObj(%Tcl_Obj* noalias nocapture nonnull %20, i32* noalias nocapture nonnull %lengthPtr.i.i) #5, !dbg !10768
  %length.i.i = load i32, i32* %lengthPtr.i.i, align 4, !dbg !10769
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %30) #5, !dbg !10770
  %31 = sub i32 %length.i22.i, %length.i.i, !dbg !10771
  %32 = icmp slt i32 %length.i22.i, %length.i.i, !dbg !10772
  %min.i = select i1 %32, i32 %length.i22.i, i32 %length.i.i, !dbg !10772
  %cmp.i = tail call i32 @memcmp(i8* nonnull %bytes.i21.i, i8* nonnull %bytes.i10.i, i32 %min.i) #5, !dbg !10772
  br label %tcl.strcmp.exit, !dbg !10773

unicode.i:                                        ; preds = %nexttest2.i
  %length.i = tail call i32 @Tcl_GetCharLength(%Tcl_Obj* nocapture nonnull %value1Ptr) #5, !dbg !10774
  %length1.i = tail call i32 @Tcl_GetCharLength(%Tcl_Obj* nocapture nonnull %20) #5, !dbg !10775
  %33 = sub i32 %length.i, %length1.i, !dbg !10776
  %ustr.i = tail call nonnull i16* @Tcl_GetUnicode(%Tcl_Obj* nocapture nonnull %value1Ptr) #5, !dbg !10777
  %ustr2.i = tail call nonnull i16* @Tcl_GetUnicode(%Tcl_Obj* nocapture nonnull %20) #5, !dbg !10777
  %34 = icmp slt i32 %length.i, %length1.i, !dbg !10777
  %min3.i = select i1 %34, i32 %length.i, i32 %length1.i, !dbg !10777
  %cmp4.i = tail call i32 @Tcl_UniCharNcmp(i16* nocapture nonnull readonly %ustr.i, i16* nocapture nonnull readonly %ustr2.i, i32 %min3.i) #5, !dbg !10777
  br label %tcl.strcmp.exit, !dbg !10778

UTF8.i:                                           ; preds = %nexttest2.i
  %str.i = tail call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %value1Ptr) #5, !dbg !10779
  %str5.i = tail call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %20) #5, !dbg !10780
  %length6.i = tail call i32 @Tcl_GetCharLength(%Tcl_Obj* nocapture nonnull %value1Ptr) #5, !dbg !10781
  %length7.i = tail call i32 @Tcl_GetCharLength(%Tcl_Obj* nocapture nonnull %20) #5, !dbg !10782
  %35 = sub i32 %length6.i, %length7.i, !dbg !10783
  %36 = icmp slt i32 %length6.i, %length7.i, !dbg !10784
  %min8.i = select i1 %36, i32 %length6.i, i32 %length7.i, !dbg !10784
  %cmp9.i = tail call i32 @TclpUtfNcmp2(i8* nocapture nonnull %str.i, i8* nocapture nonnull %str5.i, i32 %min8.i) #5, !dbg !10784
  br label %tcl.strcmp.exit, !dbg !10785

tcl.strcmp.exit:                                  ; preds = %byteArrays.i, %unicode.i, %UTF8.i
  %37 = phi i32 [ %cmp.i, %byteArrays.i ], [ %cmp4.i, %unicode.i ], [ %cmp9.i, %UTF8.i ]
  %38 = phi i32 [ %31, %byteArrays.i ], [ %33, %unicode.i ], [ %35, %UTF8.i ]
  %39 = icmp eq i32 %37, 0, !dbg !10786
  %40 = select i1 %39, i32 %38, i32 %37, !dbg !10786
  %refCount.i.phi.trans.insert = getelementptr %Tcl_Obj, %Tcl_Obj* %20, i64 0, i32 0, !dbg !10787
  %refCount1.i.pre = load i32, i32* %refCount.i.phi.trans.insert, align 4, !dbg !10789
  %41 = icmp slt i32 %refCount1.i.pre, 2, !dbg !10790
  br i1 %41, label %freeObject.i, label %leave.i, !dbg !10790

freeObject.i:                                     ; preds = %tcl.stringify.numeric.exit, %tcl.strcmp.exit
  %42 = phi i32 [ %40, %tcl.strcmp.exit ], [ 0, %tcl.stringify.numeric.exit ]
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %20) #5, !dbg !10791
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %20) #5, !dbg !10792
  br label %Tcl_DecrRefCount.exit, !dbg !10793

leave.i:                                          ; preds = %tcl.strcmp.exit
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %20, i64 0, i32 0, !dbg !10794
  %43 = add nsw i32 %refCount1.i.pre, -1, !dbg !10789
  store i32 %43, i32* %refCount.i, align 4, !dbg !10795
  br label %Tcl_DecrRefCount.exit, !dbg !10796

Tcl_DecrRefCount.exit:                            ; preds = %tcl.lt.numeric.exit, %tcl.gt.numeric.exit, %doubles.i, %op.32bit.i.i11, %leave.i, %freeObject.i
  %merge27 = phi i32 [ %40, %leave.i ], [ %42, %freeObject.i ], [ -1, %tcl.lt.numeric.exit ], [ %., %tcl.gt.numeric.exit ], [ -1, %doubles.i ], [ -1, %op.32bit.i.i11 ]
  ret i32 %merge27, !dbg !10797

numeric.comparison:                               ; preds = %tcl.isNumeric.exit.numeric.comparison_crit_edge, %checkDoubleTypes.i, %checkIntTypes.i
  %tclDoubleType.i.i9 = phi %ObjType* [ %tclDoubleType.i.i9.pre, %tcl.isNumeric.exit.numeric.comparison_crit_edge ], [ %typePtr.i, %checkDoubleTypes.i ], [ %tclDoubleType.i.i, %checkIntTypes.i ], !dbg !10729
  %44 = bitcast double* %dblPtr.i.i7 to i8*, !dbg !10798
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %44) #5, !dbg !10798
  %code.i2.i = call i32 @Tcl_GetDoubleFromObj(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %value1Ptr, double* noalias nocapture nonnull %dblPtr.i.i7) #5, !dbg !10798
  %dbl.i.i = load double, double* %dblPtr.i.i7, align 8, !dbg !10799
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %44) #5, !dbg !10800
  %typePtr.i4.i = load %ObjType*, %ObjType** %typePtr.ptr.i, align 8, !dbg !10801
  %45 = icmp ne %ObjType* %typePtr.i4.i, null, !dbg !10802
  %46 = icmp eq %ObjType* %tclDoubleType.i.i9, %typePtr.i4.i, !dbg !10802
  %47 = and i1 %45, %46, !dbg !10802
  br i1 %47, label %returnDouble.i, label %extractInt.i, !dbg !10803

returnDouble.i:                                   ; preds = %numeric.comparison
  %48 = insertvalue %NUMERIC { i1 true, %INT undef, double undef }, double %dbl.i.i, 2, !dbg !10804
  br label %tcl.extractNumeric.exit, !dbg !10804

extractInt.i:                                     ; preds = %numeric.comparison
  %49 = bitcast i64* %intPtr.i.i to i8*, !dbg !10805
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %49) #5, !dbg !10805
  %code.i.i10 = call i32 @Tcl_GetWideIntFromObj(%Interp* noalias nocapture null, %Tcl_Obj* noalias nocapture nonnull %value1Ptr, i64* noalias nocapture nonnull %intPtr.i.i) #5, !dbg !10805
  %int.i.i = load i64, i64* %intPtr.i.i, align 8, !dbg !10806
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %49) #5, !dbg !10807
  %50 = insertvalue %INT { i1 true, i32 undef, i64 undef }, i64 %int.i.i, 2, !dbg !10808
  %51 = insertvalue %NUMERIC { i1 false, %INT undef, double undef }, %INT %50, 1, !dbg !10808
  br label %tcl.extractNumeric.exit, !dbg !10808

tcl.extractNumeric.exit:                          ; preds = %extractInt.i, %returnDouble.i
  %52 = phi %NUMERIC [ %48, %returnDouble.i ], [ %51, %extractInt.i ]
  %53 = extractvalue %NUMERIC %52, 0, !dbg !10809
  %54 = extractvalue %NUMERIC %value2Ptr, 0, !dbg !10809
  %.demorgan.i = or i1 %54, %53, !dbg !10809
  %55 = extractvalue %NUMERIC %52, 1, !dbg !10811
  br i1 %.demorgan.i, label %doubles.i, label %ints.i, !dbg !10809

ints.i:                                           ; preds = %tcl.extractNumeric.exit
  %56 = extractvalue %NUMERIC %value2Ptr, 1, !dbg !10812
  %57 = extractvalue %INT %55, 0, !dbg !10813
  br i1 %57, label %tcl.int.64.exit.i.i, label %check2.i.i, !dbg !10813

check2.i.i:                                       ; preds = %ints.i
  %58 = extractvalue %INT %56, 0, !dbg !10815
  %59 = extractvalue %INT %55, 1, !dbg !10816
  br i1 %58, label %tcl.int.64.exit.thread.i.i, label %op.32bit.i.i11, !dbg !10815

op.32bit.i.i11:                                   ; preds = %check2.i.i
  %y.32.i.i = extractvalue %INT %56, 1, !dbg !10817
  %z.bit.i.i = icmp slt i32 %59, %y.32.i.i, !dbg !10818
  br i1 %z.bit.i.i, label %Tcl_DecrRefCount.exit, label %check2.i.i14, !dbg !10819

tcl.int.64.exit.thread.i.i:                       ; preds = %check2.i.i
  %60 = sext i32 %59 to i64, !dbg !10820
  %61 = extractvalue %INT %56, 2, !dbg !10822
  br label %66, !dbg !10822

tcl.int.64.exit.i.i:                              ; preds = %ints.i
  %62 = extractvalue %INT %55, 2, !dbg !10824
  %.pre.i.i = extractvalue %INT %56, 0, !dbg !10822
  %63 = extractvalue %INT %56, 1, !dbg !10822
  %64 = sext i32 %63 to i64, !dbg !10822
  %65 = extractvalue %INT %56, 2, !dbg !10822
  br i1 %.pre.i.i, label %66, label %tcl.lt.numeric.exit, !dbg !10822

66:                                               ; preds = %tcl.int.64.exit.i.i, %tcl.int.64.exit.thread.i.i
  %67 = phi i64 [ %61, %tcl.int.64.exit.thread.i.i ], [ %65, %tcl.int.64.exit.i.i ]
  %x.64210.i.i = phi i64 [ %60, %tcl.int.64.exit.thread.i.i ], [ %62, %tcl.int.64.exit.i.i ]
  br label %tcl.lt.numeric.exit, !dbg !10822

doubles.i:                                        ; preds = %tcl.extractNumeric.exit
  %68 = extractvalue %INT %55, 0, !dbg !10825
  %69 = extractvalue %INT %55, 1, !dbg !10825
  %70 = sext i32 %69 to i64, !dbg !10825
  %71 = extractvalue %INT %55, 2, !dbg !10825
  %72 = select i1 %68, i64 %71, i64 %70, !dbg !10825
  %73 = sitofp i64 %72 to double, !dbg !10827
  %74 = extractvalue %NUMERIC %52, 2, !dbg !10827
  %left1.i = select i1 %53, double %74, double %73, !dbg !10827
  %75 = extractvalue %NUMERIC %value2Ptr, 1, !dbg !10828
  %76 = extractvalue %INT %75, 0, !dbg !10829
  %77 = extractvalue %INT %75, 1, !dbg !10829
  %78 = sext i32 %77 to i64, !dbg !10829
  %79 = extractvalue %INT %75, 2, !dbg !10829
  %80 = select i1 %76, i64 %79, i64 %78, !dbg !10829
  %81 = sitofp i64 %80 to double, !dbg !10828
  %82 = extractvalue %NUMERIC %value2Ptr, 2, !dbg !10828
  %right2.i = select i1 %54, double %82, double %81, !dbg !10828
  %83 = fcmp olt double %left1.i, %right2.i, !dbg !10831
  br i1 %83, label %Tcl_DecrRefCount.exit, label %doubles.i26, !dbg !10819

tcl.lt.numeric.exit:                              ; preds = %tcl.int.64.exit.i.i, %66
  %x.6429.i.i = phi i64 [ %x.64210.i.i, %66 ], [ %62, %tcl.int.64.exit.i.i ]
  %84 = phi i64 [ %67, %66 ], [ %64, %tcl.int.64.exit.i.i ]
  %z.bit1.i.i = icmp slt i64 %x.6429.i.i, %84, !dbg !10832
  br i1 %z.bit1.i.i, label %Tcl_DecrRefCount.exit, label %ints.i13, !dbg !10819

ints.i13:                                         ; preds = %tcl.lt.numeric.exit
  br i1 %57, label %tcl.int.64.exit.i.i20, label %check2.i.i14, !dbg !10833

check2.i.i14:                                     ; preds = %op.32bit.i.i11, %ints.i13
  %85 = extractvalue %INT %56, 0, !dbg !10836
  %86 = extractvalue %INT %55, 1, !dbg !10837
  br i1 %85, label %tcl.int.64.exit.thread.i.i18, label %op.32bit.i.i17, !dbg !10836

op.32bit.i.i17:                                   ; preds = %check2.i.i14
  %y.32.i.i15 = extractvalue %INT %56, 1, !dbg !10838
  %z.bit.i.i16 = icmp sgt i32 %86, %y.32.i.i15, !dbg !10839
  br label %tcl.gt.numeric.exit, !dbg !10839

tcl.int.64.exit.thread.i.i18:                     ; preds = %check2.i.i14
  %87 = sext i32 %86 to i64, !dbg !10840
  %88 = extractvalue %INT %56, 2, !dbg !10842
  br label %93, !dbg !10842

tcl.int.64.exit.i.i20:                            ; preds = %ints.i13
  %89 = extractvalue %INT %55, 2, !dbg !10844
  %.pre.i.i19 = extractvalue %INT %56, 0, !dbg !10842
  %90 = extractvalue %INT %56, 1, !dbg !10842
  %91 = sext i32 %90 to i64, !dbg !10842
  %92 = extractvalue %INT %56, 2, !dbg !10842
  br i1 %.pre.i.i19, label %93, label %95, !dbg !10842

93:                                               ; preds = %tcl.int.64.exit.i.i20, %tcl.int.64.exit.thread.i.i18
  %94 = phi i64 [ %88, %tcl.int.64.exit.thread.i.i18 ], [ %92, %tcl.int.64.exit.i.i20 ]
  %x.64210.i.i21 = phi i64 [ %87, %tcl.int.64.exit.thread.i.i18 ], [ %89, %tcl.int.64.exit.i.i20 ]
  br label %95, !dbg !10842

95:                                               ; preds = %93, %tcl.int.64.exit.i.i20
  %x.6429.i.i22 = phi i64 [ %x.64210.i.i21, %93 ], [ %89, %tcl.int.64.exit.i.i20 ]
  %96 = phi i64 [ %94, %93 ], [ %91, %tcl.int.64.exit.i.i20 ]
  %z.bit1.i.i23 = icmp sgt i64 %x.6429.i.i22, %96, !dbg !10845
  br label %tcl.gt.numeric.exit, !dbg !10845

doubles.i26:                                      ; preds = %doubles.i
  %97 = fcmp ogt double %left1.i, %right2.i, !dbg !10846
  br label %tcl.gt.numeric.exit, !dbg !10846

tcl.gt.numeric.exit:                              ; preds = %op.32bit.i.i17, %95, %doubles.i26
  %98 = phi i1 [ %97, %doubles.i26 ], [ %z.bit.i.i16, %op.32bit.i.i17 ], [ %z.bit1.i.i23, %95 ]
  %. = zext i1 %98 to i32
  br label %Tcl_DecrRefCount.exit
}

; Function Attrs: alwaysinline nounwind
define hidden noalias nonnull %Tcl_Obj* @tcl.resolveCmd(%Tcl_Obj* nocapture nonnull readonly %cmdName) local_unnamed_addr #6 !dbg !10847 {
enter:
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !10850, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %objPtr = tail call noalias nonnull %Tcl_Obj* @Tcl_NewObj(), !dbg !10851
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !10852
  %cmdPtr = tail call %Command* @Tcl_GetCommandFromObj(%Interp* nocapture nonnull %interp, %Tcl_Obj* nocapture nonnull readonly %cmdName), !dbg !10854
  %0 = icmp eq %Command* %cmdPtr, null, !dbg !10855
  br i1 %0, label %notResolved, label %resolved, !dbg !10855

resolved:                                         ; preds = %enter
  tail call void @Tcl_GetCommandFullName(%Interp* nocapture nonnull %interp, %Command* nocapture nonnull %cmdPtr, %Tcl_Obj* nocapture nonnull %objPtr), !dbg !10856
  %refCount1.i.i.pre = load i32, i32* %refCount.i, align 4, !dbg !10857
  %phitmp = add i32 %refCount1.i.i.pre, 1, !dbg !10860
  br label %notResolved, !dbg !10860

notResolved:                                      ; preds = %enter, %resolved
  %refCount1.i.i = phi i32 [ 1, %enter ], [ %phitmp, %resolved ]
  store i32 %refCount1.i.i, i32* %refCount.i, align 4, !dbg !10857
  ret %Tcl_Obj* %objPtr, !dbg !10861
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, %Tcl_Obj* } @tcl.originCmd(%Tcl_Obj* nocapture nonnull %cmdName, i32* noalias nocapture nonnull %ecvar) local_unnamed_addr #6 !dbg !10862 {
enter:
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !10866, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %objPtr = tail call noalias nonnull %Tcl_Obj* @Tcl_NewObj(), !dbg !10867
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !10868
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !10870
  %0 = icmp eq i32 %refCount1.i, 0, !dbg !10870
  tail call void @llvm.assume(i1 %0) #5, !dbg !10870
  %cmdPtr = tail call %Command* @Tcl_GetCommandFromObj(%Interp* nocapture nonnull %interp, %Tcl_Obj* nocapture nonnull readonly %cmdName), !dbg !10871
  %1 = icmp eq %Command* %cmdPtr, null, !dbg !10872
  br i1 %1, label %notResolved, label %resolved, !dbg !10872

resolved:                                         ; preds = %enter
  %origCmdPtr = tail call %Command* @TclGetOriginalCommand(%Command* nocapture nonnull %cmdPtr), !dbg !10873
  %2 = icmp eq %Command* %origCmdPtr, null, !dbg !10874
  %cmdPtr.origCmdPtr = select i1 %2, %Command* %cmdPtr, %Command* %origCmdPtr, !dbg !10875
  tail call void @Tcl_GetCommandFullName(%Interp* nocapture nonnull %interp, %Command* nocapture nonnull %cmdPtr.origCmdPtr, %Tcl_Obj* nocapture nonnull %objPtr), !dbg !10876
  %refCount1.i.i6 = load i32, i32* %refCount.i, align 4, !dbg !10877
  %3 = add nsw i32 %refCount1.i.i6, 1, !dbg !10877
  store i32 %3, i32* %refCount.i, align 4, !dbg !10877
  %4 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %objPtr, 1, !dbg !10880
  ret { i32, %Tcl_Obj* } %4, !dbg !10880

notResolved:                                      ; preds = %enter
  %refCount1.i.i = load i32, i32* %refCount.i, align 4, !dbg !10881
  %5 = icmp slt i32 %refCount1.i.i, 2, !dbg !10884
  br i1 %5, label %freeObject.i.i, label %leave.i.i, !dbg !10884

freeObject.i.i:                                   ; preds = %notResolved
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %objPtr) #5, !dbg !10885
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %objPtr) #5, !dbg !10886
  br label %tcl.dropReference.exit, !dbg !10887

leave.i.i:                                        ; preds = %notResolved
  %6 = add nsw i32 %refCount1.i.i, -1, !dbg !10881
  store i32 %6, i32* %refCount.i, align 4, !dbg !10888
  br label %tcl.dropReference.exit, !dbg !10889

tcl.dropReference.exit:                           ; preds = %freeObject.i.i, %leave.i.i
  %str = tail call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %cmdName), !dbg !10890
  %objPtr1 = tail call noalias nonnull %Tcl_Obj* (i8*, ...) @Tcl_ObjPrintf(i8* nocapture nonnull readonly getelementptr inbounds ([26 x i8], [26 x i8]* @string.constant.33, i64 0, i64 0), i8* nocapture nonnull %str), !dbg !10890
  %refCount.i3 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr1, i64 0, i32 0, !dbg !10891
  %refCount1.i4 = load i32, i32* %refCount.i3, align 4, !dbg !10893
  %7 = icmp eq i32 %refCount1.i4, 0, !dbg !10893
  tail call void @llvm.assume(i1 %7) #5, !dbg !10893
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %objPtr1), !dbg !10890
  %str2 = tail call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %cmdName), !dbg !10894
  tail call void (%Interp*, ...) @Tcl_SetErrorCode(%Interp* nocapture nonnull %interp, i8* nocapture getelementptr inbounds ([4 x i8], [4 x i8]* @string.constant.44, i64 0, i64 0), i8* nocapture getelementptr inbounds ([7 x i8], [7 x i8]* @string.constant.45, i64 0, i64 0), i8* nocapture getelementptr inbounds ([8 x i8], [8 x i8]* @string.constant.36, i64 0, i64 0), i8* nocapture nonnull %str2, i8* nocapture null), !dbg !10894
  store i32 1, i32* %ecvar, align 4, !dbg !10895
  ret { i32, %Tcl_Obj* } { i32 1, %Tcl_Obj* undef }, !dbg !10896
}

; Function Attrs: alwaysinline nounwind
define hidden void @tcl.callframe.init(%CallFrame* nonnull %frame, i32 %length, i32 %objc, %Tcl_Obj** nonnull %objv, %Proc* nonnull %proc, %LocalCache* nonnull %localCache, %Var* nonnull %locals) local_unnamed_addr #6 !dbg !10897 {
enter:
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !10910, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCount = getelementptr %Proc, %Proc* %proc, i64 0, i32 1, !dbg !10911
  %refCount1 = load i32, i32* %refCount, align 4, !dbg !10912
  %0 = add i32 %refCount1, 1, !dbg !10912
  store i32 %0, i32* %refCount, align 4, !dbg !10912
  %cmdPtr.ptr = getelementptr %Proc, %Proc* %proc, i64 0, i32 2, !dbg !10913
  %cmdPtr = load %Command*, %Command** %cmdPtr.ptr, align 8, !dbg !10913
  %nsPtr.ptr = getelementptr %Command, %Command* %cmdPtr, i64 0, i32 1, !dbg !10913
  %nsPtr = load %Namespace*, %Namespace** %nsPtr.ptr, align 8, !dbg !10913
  %code = tail call i32 @Tcl_PushCallFrame(%Interp* nocapture nonnull %interp, %CallFrame* nonnull %frame, %Namespace* nonnull %nsPtr, i32 1), !dbg !10914
  %1 = shl i32 %length, 4, !dbg !10915
  %frame.objc = getelementptr %CallFrame, %CallFrame* %frame, i64 0, i32 2, !dbg !10916
  store i32 %objc, i32* %frame.objc, align 4, !dbg !10916
  %frame.objv = getelementptr %CallFrame, %CallFrame* %frame, i64 0, i32 3, !dbg !10917
  store %Tcl_Obj** %objv, %Tcl_Obj*** %frame.objv, align 8, !dbg !10917
  %frame.procPtr = getelementptr %CallFrame, %CallFrame* %frame, i64 0, i32 7, !dbg !10918
  store %Proc* %proc, %Proc** %frame.procPtr, align 8, !dbg !10918
  %frame.varTablePtr = getelementptr %CallFrame, %CallFrame* %frame, i64 0, i32 8, !dbg !10919
  store %VarHashTable* null, %VarHashTable** %frame.varTablePtr, align 8, !dbg !10919
  %frame.numCompiledLocals = getelementptr %CallFrame, %CallFrame* %frame, i64 0, i32 9, !dbg !10920
  store i32 %length, i32* %frame.numCompiledLocals, align 4, !dbg !10920
  %frame.compiledLocals = getelementptr %CallFrame, %CallFrame* %frame, i64 0, i32 10, !dbg !10921
  store %Var* %locals, %Var** %frame.compiledLocals, align 8, !dbg !10921
  %frame.localCachePtr = getelementptr %CallFrame, %CallFrame* %frame, i64 0, i32 12, !dbg !10922
  store %LocalCache* %localCache, %LocalCache** %frame.localCachePtr, align 8, !dbg !10922
  %refCount4 = getelementptr %LocalCache, %LocalCache* %localCache, i64 0, i32 0, !dbg !10923
  %refCount45 = load i32, i32* %refCount4, align 4, !dbg !10924
  %2 = add i32 %refCount45, 1, !dbg !10924
  store i32 %2, i32* %refCount4, align 4, !dbg !10924
  %3 = bitcast %Var* %locals to i8*, !dbg !10925
  tail call void @llvm.memset.p0i8.i32(i8* nonnull align 1 %3, i8 0, i32 %1, i1 false), !dbg !10925
  ret void, !dbg !10926
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly, i8, i32, i1 immarg) #11

; Function Attrs: alwaysinline nofree norecurse nounwind
define hidden %Var* @tcl.callframe.makevar(%CallFrame* nocapture nonnull readonly %frame, i32 %index, i32 %flags) local_unnamed_addr #10 !dbg !10927 {
enter:
  %compiledLocals.ptr = getelementptr %CallFrame, %CallFrame* %frame, i64 0, i32 10, !dbg !10934
  %compiledLocals = load %Var*, %Var** %compiledLocals.ptr, align 8, !dbg !10934
  %0 = sext i32 %index to i64, !dbg !10935
  %1 = getelementptr %Var, %Var* %compiledLocals, i64 %0, !dbg !10935
  %.flags = getelementptr %Var, %Var* %1, i64 0, i32 0, !dbg !10936
  store i32 %flags, i32* %.flags, align 4, !dbg !10936
  %.value = getelementptr %Var, %Var* %compiledLocals, i64 %0, i32 1, !dbg !10937
  store %Tcl_Obj* null, %Tcl_Obj** %.value, align 8, !dbg !10937
  ret %Var* %1, !dbg !10938
}

; Function Attrs: alwaysinline nounwind
define hidden void @tcl.callframe.clear(%CallFrame* nocapture nonnull readonly %frame) local_unnamed_addr #6 !dbg !10939 {
enter:
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !10944, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  tail call void @Tcl_PopCallFrame(%Interp* nonnull %interp), !dbg !10945
  %procPtr.ptr = getelementptr %CallFrame, %CallFrame* %frame, i64 0, i32 7, !dbg !10946
  %procPtr = load %Proc*, %Proc** %procPtr.ptr, align 8, !dbg !10946
  %refCount = getelementptr %Proc, %Proc* %procPtr, i64 0, i32 1, !dbg !10947
  %refCount1 = load i32, i32* %refCount, align 4, !dbg !10948
  %0 = add i32 %refCount1, -1, !dbg !10948
  store i32 %0, i32* %refCount, align 4, !dbg !10948
  ret void, !dbg !10949
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, %Tcl_Obj* } @tcl.callframe.getarglist(%CallFrame* nonnull readonly %frame, %INT %level) local_unnamed_addr #6 !dbg !10950 {
enter:
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !10956, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %0 = extractvalue %INT %level, 0, !dbg !10957
  %1 = extractvalue %INT %level, 1, !dbg !10957
  %2 = zext i32 %1 to i64, !dbg !10957
  %3 = extractvalue %INT %level, 2, !dbg !10957
  %4 = select i1 %0, i64 %3, i64 %2, !dbg !10957
  %level1 = trunc i64 %4 to i32, !dbg !10959
  %5 = icmp eq i32 %level1, 0, !dbg !10960
  br i1 %5, label %found, label %search, !dbg !10960

search:                                           ; preds = %enter
  %rootFramePtr.ptr = getelementptr %Interp, %Interp* %interp, i64 0, i32 15, !dbg !10961
  %rootFramePtr = load %CallFrame*, %CallFrame** %rootFramePtr.ptr, align 8, !dbg !10961
  %6 = icmp slt i32 %level1, 0, !dbg !10962
  %level.ptr = getelementptr %CallFrame, %CallFrame* %frame, i64 0, i32 6, !dbg !10963
  %level2 = load i32, i32* %level.ptr, align 4, !dbg !10963
  %7 = select i1 %6, i32 %level2, i32 0, !dbg !10962
  %.0.ph = add i32 %7, %level1, !dbg !10962
  %8 = icmp ne i32 %level2, %.0.ph, !dbg !10964
  %9 = icmp ne %CallFrame* %rootFramePtr, %frame, !dbg !10964
  %10 = and i1 %9, %8, !dbg !10964
  br i1 %10, label %nextFrame, label %checkFound, !dbg !10964

nextFrame:                                        ; preds = %search, %nextFrame
  %.0817 = phi %CallFrame* [ %callerVarPtr, %nextFrame ], [ %frame, %search ]
  %callerVarPtr.ptr = getelementptr %CallFrame, %CallFrame* %.0817, i64 0, i32 5, !dbg !10965
  %callerVarPtr = load %CallFrame*, %CallFrame** %callerVarPtr.ptr, align 8, !dbg !10965
  %level.ptr3 = getelementptr %CallFrame, %CallFrame* %callerVarPtr, i64 0, i32 6, !dbg !10964
  %level4 = load i32, i32* %level.ptr3, align 4, !dbg !10964
  %11 = icmp ne i32 %level4, %.0.ph, !dbg !10964
  %12 = icmp ne %CallFrame* %callerVarPtr, %rootFramePtr, !dbg !10964
  %13 = and i1 %12, %11, !dbg !10964
  br i1 %13, label %nextFrame, label %checkFound, !dbg !10964

checkFound:                                       ; preds = %nextFrame, %search
  %.08.lcssa = phi %CallFrame* [ %frame, %search ], [ %callerVarPtr, %nextFrame ], !dbg !10963
  %14 = icmp eq %CallFrame* %.08.lcssa, %rootFramePtr, !dbg !10966
  br i1 %14, label %failed, label %found, !dbg !10966

found:                                            ; preds = %checkFound, %enter
  %frame5 = phi %CallFrame* [ %frame, %enter ], [ %.08.lcssa, %checkFound ]
  %objc.ptr = getelementptr %CallFrame, %CallFrame* %frame5, i64 0, i32 2, !dbg !10967
  %objc = load i32, i32* %objc.ptr, align 4, !dbg !10967
  %objv.ptr = getelementptr %CallFrame, %CallFrame* %frame5, i64 0, i32 3, !dbg !10967
  %objv = load %Tcl_Obj**, %Tcl_Obj*** %objv.ptr, align 8, !dbg !10967
  %objPtr = tail call noalias nonnull %Tcl_Obj* @Tcl_NewListObj(i32 %objc, %Tcl_Obj** nocapture readonly %objv), !dbg !10967
  %refCount.i9 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !10968
  %refCount1.i10 = load i32, i32* %refCount.i9, align 4, !dbg !10970
  %15 = icmp eq i32 %refCount1.i10, 0, !dbg !10970
  tail call void @llvm.assume(i1 %15) #5, !dbg !10970
  store i32 1, i32* %refCount.i9, align 4, !dbg !10971
  %16 = insertvalue { i32, %Tcl_Obj* } { i32 0, %Tcl_Obj* undef }, %Tcl_Obj* %objPtr, 1, !dbg !10974
  ret { i32, %Tcl_Obj* } %16, !dbg !10974

failed:                                           ; preds = %checkFound
  %objPtr6 = tail call noalias nonnull %Tcl_Obj* @Tcl_NewIntObj(i32 %level1), !dbg !10975
  %refCount.i13 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr6, i64 0, i32 0, !dbg !10976
  %refCount1.i14 = load i32, i32* %refCount.i13, align 4, !dbg !10978
  %17 = icmp eq i32 %refCount1.i14, 0, !dbg !10978
  tail call void @llvm.assume(i1 %17) #5, !dbg !10978
  %str = tail call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %objPtr6), !dbg !10979
  %objPtr7 = tail call noalias nonnull %Tcl_Obj* (i8*, ...) @Tcl_ObjPrintf(i8* nocapture nonnull readonly getelementptr inbounds ([15 x i8], [15 x i8]* @string.constant.43, i64 0, i64 0), i8* nocapture nonnull %str), !dbg !10980
  %refCount.i11 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr7, i64 0, i32 0, !dbg !10981
  %refCount1.i12 = load i32, i32* %refCount.i11, align 4, !dbg !10983
  %18 = icmp eq i32 %refCount1.i12, 0, !dbg !10983
  tail call void @llvm.assume(i1 %18) #5, !dbg !10983
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %objPtr7), !dbg !10980
  tail call void (%Interp*, ...) @Tcl_SetErrorCode(%Interp* nocapture nonnull %interp, i8* nocapture getelementptr inbounds ([4 x i8], [4 x i8]* @string.constant.44, i64 0, i64 0), i8* nocapture getelementptr inbounds ([7 x i8], [7 x i8]* @string.constant.45, i64 0, i64 0), i8* nocapture getelementptr inbounds ([12 x i8], [12 x i8]* @string.constant.40, i64 0, i64 0), i8* nocapture nonnull %str, i8* nocapture null), !dbg !10984
  %refCount1.i = load i32, i32* %refCount.i13, align 4, !dbg !10985
  %19 = icmp slt i32 %refCount1.i, 2, !dbg !10987
  br i1 %19, label %freeObject.i, label %leave.i, !dbg !10987

freeObject.i:                                     ; preds = %failed
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %objPtr6) #5, !dbg !10988
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %objPtr6) #5, !dbg !10989
  br label %Tcl_DecrRefCount.exit, !dbg !10990

leave.i:                                          ; preds = %failed
  %20 = add nsw i32 %refCount1.i, -1, !dbg !10985
  store i32 %20, i32* %refCount.i13, align 4, !dbg !10991
  br label %Tcl_DecrRefCount.exit, !dbg !10992

Tcl_DecrRefCount.exit:                            ; preds = %leave.i, %freeObject.i
  ret { i32, %Tcl_Obj* } { i32 1, %Tcl_Obj* undef }, !dbg !10993
}

; Function Attrs: alwaysinline norecurse nounwind readonly
define hidden %INT @tcl.callframe.depth(%CallFrame* nocapture nonnull readonly %frame) local_unnamed_addr #15 !dbg !10994 {
enter:
  %level.ptr = getelementptr %CallFrame, %CallFrame* %frame, i64 0, i32 6, !dbg !10999
  %level = load i32, i32* %level.ptr, align 4, !dbg !10999
  %0 = insertvalue %INT { i1 false, i32 undef, i64 undef }, i32 %level, 1, !dbg !10999
  ret %INT %0, !dbg !10999
}

; Function Attrs: alwaysinline nounwind
define hidden void @tcl.callframe.store.string(%Var* nocapture nonnull %var, %Tcl_Obj* nocapture nonnull %varName, { i1, %Tcl_Obj* } %value) local_unnamed_addr #6 !dbg !11000 {
enter:
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !11007, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %flags.ptr.i.i1.i = getelementptr %Var, %Var* %var, i64 0, i32 0, !dbg !11008
  %flags.i.i2.i = load i32, i32* %flags.ptr.i.i1.i, align 4, !dbg !11008
  %0 = and i32 %flags.i.i2.i, 2, !dbg !11012
  %1 = icmp eq i32 %0, 0, !dbg !11012
  br i1 %1, label %var.followLinks.exit, label %follow.i, !dbg !11013

follow.i:                                         ; preds = %enter, %follow.i
  %.03.i = phi %Var* [ %value1.i.i, %follow.i ], [ %var, %enter ]
  %value.ptr.i.i = getelementptr %Var, %Var* %.03.i, i64 0, i32 1, !dbg !11014
  %2 = bitcast %Tcl_Obj** %value.ptr.i.i to %Var**, !dbg !11014
  %value1.i.i = load %Var*, %Var** %2, align 8, !dbg !11014
  %flags.ptr.i.i.i = getelementptr %Var, %Var* %value1.i.i, i64 0, i32 0, !dbg !11008
  %flags.i.i.i = load i32, i32* %flags.ptr.i.i.i, align 4, !dbg !11008
  %3 = and i32 %flags.i.i.i, 2, !dbg !11012
  %4 = icmp eq i32 %3, 0, !dbg !11012
  br i1 %4, label %var.followLinks.exit, label %follow.i, !dbg !11013

var.followLinks.exit:                             ; preds = %follow.i, %enter
  %flags1.i.i = phi i32 [ %flags.i.i2.i, %enter ], [ %flags.i.i.i, %follow.i ]
  %.0.lcssa.i = phi %Var* [ %var, %enter ], [ %value1.i.i, %follow.i ], !dbg !11016
  %5 = extractvalue { i1, %Tcl_Obj* } %value, 0, !dbg !11017
  br i1 %5, label %doUnset, label %doSet, !dbg !11017

doSet:                                            ; preds = %var.followLinks.exit
  %6 = extractvalue { i1, %Tcl_Obj* } %value, 1, !dbg !11018
  %7 = icmp eq i32 %flags1.i.i, 0, !dbg !11019
  br i1 %7, label %set.fast.i, label %set.slow.i, !dbg !11022

set.fast.i:                                       ; preds = %doSet
  %refCount.i.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %6, i64 0, i32 0, !dbg !11023
  %refCount1.i.i.i.i = load i32, i32* %refCount.i.i.i.i, align 4, !dbg !11027, !noalias !11028
  %8 = add nsw i32 %refCount1.i.i.i.i, 1, !dbg !11027
  store i32 %8, i32* %refCount.i.i.i.i, align 4, !dbg !11027, !noalias !11028
  %value.ptr.i.i.i = getelementptr %Var, %Var* %.0.lcssa.i, i64 0, i32 1, !dbg !11033
  %value.i.i.i = load %Tcl_Obj*, %Tcl_Obj** %value.ptr.i.i.i, align 8, !dbg !11033, !alias.scope !11035, !noalias !11036
  store %Tcl_Obj* %6, %Tcl_Obj** %value.ptr.i.i.i, align 8, !dbg !11037, !alias.scope !11035, !noalias !11036
  %9 = icmp eq %Tcl_Obj* %value.i.i.i, null, !dbg !11039
  br i1 %9, label %tcl.write.var.ptr.exit, label %set.fast.drop.old.i.i, !dbg !11039

set.fast.drop.old.i.i:                            ; preds = %set.fast.i
  %refCount.i.i1.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value.i.i.i, i64 0, i32 0, !dbg !11040
  %refCount1.i.i2.i.i = load i32, i32* %refCount.i.i1.i.i, align 4, !dbg !11043, !noalias !11044
  %10 = icmp slt i32 %refCount1.i.i2.i.i, 2, !dbg !11045
  br i1 %10, label %freeObject.i.i.i.i, label %leave.i.i.i.i, !dbg !11045

freeObject.i.i.i.i:                               ; preds = %set.fast.drop.old.i.i
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %value.i.i.i) #5, !dbg !11046, !noalias !11044
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %value.i.i.i) #5, !dbg !11047, !noalias !11044
  br label %tcl.write.var.ptr.exit, !dbg !11048

leave.i.i.i.i:                                    ; preds = %set.fast.drop.old.i.i
  %11 = add nsw i32 %refCount1.i.i2.i.i, -1, !dbg !11043
  store i32 %11, i32* %refCount.i.i1.i.i, align 4, !dbg !11049, !noalias !11044
  br label %tcl.write.var.ptr.exit, !dbg !11050

set.slow.i:                                       ; preds = %doSet
  %objPtr.i = tail call %Tcl_Obj* @TclPtrSetVar(%Interp* noalias nocapture nonnull %interp, %Var* noalias nocapture nonnull %.0.lcssa.i, %Var* noalias nocapture null, %Tcl_Obj* nocapture nonnull %varName, %Tcl_Obj* null, %Tcl_Obj* nonnull %6, i32 0) #5, !dbg !11051
  br label %tcl.write.var.ptr.exit, !dbg !11051

tcl.write.var.ptr.exit:                           ; preds = %unset.slow.i, %leave.i.i.i, %freeObject.i.i.i, %set.fast.i, %freeObject.i.i.i.i, %leave.i.i.i.i, %set.slow.i
  ret void, !dbg !11052

doUnset:                                          ; preds = %var.followLinks.exit
  %12 = icmp eq i32 %flags1.i.i, 0, !dbg !11053
  br i1 %12, label %unset.fast.i, label %unset.slow.i, !dbg !11056

unset.fast.i:                                     ; preds = %doUnset
  %value.ptr.i.i1 = getelementptr %Var, %Var* %.0.lcssa.i, i64 0, i32 1, !dbg !11057
  %value.i.i = load %Tcl_Obj*, %Tcl_Obj** %value.ptr.i.i1, align 8, !dbg !11057, !alias.scope !11059, !noalias !11062
  %13 = icmp eq %Tcl_Obj* %value.i.i, null, !dbg !11065
  br i1 %13, label %unset.slow.i, label %unset.fast.done.i, !dbg !11065

unset.fast.done.i:                                ; preds = %unset.fast.i
  store %Tcl_Obj* null, %Tcl_Obj** %value.ptr.i.i1, align 8, !dbg !11066, !alias.scope !11059, !noalias !11062
  %refCount.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value.i.i, i64 0, i32 0, !dbg !11068
  %refCount1.i.i.i = load i32, i32* %refCount.i.i.i, align 4, !dbg !11071, !noalias !11072
  %14 = icmp slt i32 %refCount1.i.i.i, 2, !dbg !11073
  br i1 %14, label %freeObject.i.i.i, label %leave.i.i.i, !dbg !11073

freeObject.i.i.i:                                 ; preds = %unset.fast.done.i
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %value.i.i) #5, !dbg !11074, !noalias !11072
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %value.i.i) #5, !dbg !11075, !noalias !11072
  br label %tcl.write.var.ptr.exit, !dbg !11076

leave.i.i.i:                                      ; preds = %unset.fast.done.i
  %15 = add nsw i32 %refCount1.i.i.i, -1, !dbg !11071
  store i32 %15, i32* %refCount.i.i.i, align 4, !dbg !11077, !noalias !11072
  br label %tcl.write.var.ptr.exit, !dbg !11078

unset.slow.i:                                     ; preds = %unset.fast.i, %doUnset
  %code.i = tail call i32 @TclPtrUnsetVar(%Interp* noalias nocapture nonnull %interp, %Var* noalias nocapture nonnull %.0.lcssa.i, %Var* noalias nocapture null, %Tcl_Obj* nocapture nonnull %varName, %Tcl_Obj* nocapture null, i32 0) #5, !dbg !11079
  br label %tcl.write.var.ptr.exit, !dbg !11079
}

; Function Attrs: alwaysinline nounwind
define hidden void @tcl.callframe.store.numeric(%Var* nocapture nonnull %var, %Tcl_Obj* nocapture nonnull %varName, { i1, %NUMERIC } %value) local_unnamed_addr #6 !dbg !11080 {
enter:
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !11089, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %flags.ptr.i.i1.i = getelementptr %Var, %Var* %var, i64 0, i32 0, !dbg !11090
  %flags.i.i2.i = load i32, i32* %flags.ptr.i.i1.i, align 4, !dbg !11090
  %0 = and i32 %flags.i.i2.i, 2, !dbg !11094
  %1 = icmp eq i32 %0, 0, !dbg !11094
  br i1 %1, label %var.followLinks.exit, label %follow.i, !dbg !11095

follow.i:                                         ; preds = %enter, %follow.i
  %.03.i = phi %Var* [ %value1.i.i, %follow.i ], [ %var, %enter ]
  %value.ptr.i.i = getelementptr %Var, %Var* %.03.i, i64 0, i32 1, !dbg !11096
  %2 = bitcast %Tcl_Obj** %value.ptr.i.i to %Var**, !dbg !11096
  %value1.i.i = load %Var*, %Var** %2, align 8, !dbg !11096
  %flags.ptr.i.i.i = getelementptr %Var, %Var* %value1.i.i, i64 0, i32 0, !dbg !11090
  %flags.i.i.i = load i32, i32* %flags.ptr.i.i.i, align 4, !dbg !11090
  %3 = and i32 %flags.i.i.i, 2, !dbg !11094
  %4 = icmp eq i32 %3, 0, !dbg !11094
  br i1 %4, label %var.followLinks.exit, label %follow.i, !dbg !11095

var.followLinks.exit:                             ; preds = %follow.i, %enter
  %flags1.i.i = phi i32 [ %flags.i.i2.i, %enter ], [ %flags.i.i.i, %follow.i ]
  %.0.lcssa.i = phi %Var* [ %var, %enter ], [ %value1.i.i, %follow.i ], !dbg !11098
  %5 = extractvalue { i1, %NUMERIC } %value, 0, !dbg !11099
  br i1 %5, label %doUnset, label %doSet, !dbg !11099

doSet:                                            ; preds = %var.followLinks.exit
  %6 = extractvalue { i1, %NUMERIC } %value, 1, !dbg !11100
  %7 = icmp eq i32 %flags1.i.i, 0, !dbg !11101
  br i1 %7, label %set.checkExists.i, label %set.slow.i, !dbg !11104

set.checkExists.i:                                ; preds = %doSet
  %value.ptr.i.i4 = getelementptr %Var, %Var* %.0.lcssa.i, i64 0, i32 1, !dbg !11105
  %value.i.i5 = load %Tcl_Obj*, %Tcl_Obj** %value.ptr.i.i4, align 8, !dbg !11105, !alias.scope !11107, !noalias !11110
  %8 = icmp eq %Tcl_Obj* %value.i.i5, null, !dbg !11113
  br i1 %8, label %set.slow.i, label %set.checkShared.i, !dbg !11113

set.checkShared.i:                                ; preds = %set.checkExists.i
  %refCountPtr.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value.i.i5, i64 0, i32 0, !dbg !11114
  %refCount.i.i2.i = load i32, i32* %refCountPtr.i.i.i, align 4, !dbg !11114, !noalias !11117
  %shared.i.i = icmp sgt i32 %refCount.i.i2.i, 1, !dbg !11118
  br i1 %shared.i.i, label %unshare.i, label %set.fast.i, !dbg !11119

unshare.i:                                        ; preds = %set.checkShared.i
  %objPtr.i = tail call noalias nonnull %Tcl_Obj* @Tcl_DuplicateObj(%Tcl_Obj* nocapture nonnull readonly %value.i.i5) #5, !dbg !11120, !noalias !11117
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr.i, i64 0, i32 0, !dbg !11121
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !11123, !noalias !11124
  %9 = icmp eq i32 %refCount1.i.i, 0, !dbg !11123
  tail call void @llvm.assume(i1 %9) #5, !dbg !11123, !noalias !11117
  store %Tcl_Obj* %objPtr.i, %Tcl_Obj** %value.ptr.i.i4, align 8, !dbg !11125, !alias.scope !11107, !noalias !11110
  store i32 1, i32* %refCount.i.i, align 4, !dbg !11127, !noalias !11124
  br label %set.fast.i, !dbg !11130

set.fast.i:                                       ; preds = %unshare.i, %set.checkShared.i
  %10 = phi %Tcl_Obj* [ %value.i.i5, %set.checkShared.i ], [ %objPtr.i, %unshare.i ]
  %11 = extractvalue %NUMERIC %6, 0, !dbg !11131
  br i1 %11, label %set.fast.double.replace.i, label %set.fast.int.i, !dbg !11131

set.fast.int.i:                                   ; preds = %set.fast.i
  %12 = extractvalue %NUMERIC %6, 1, !dbg !11132
  %13 = extractvalue %INT %12, 0, !dbg !11133
  br i1 %13, label %set.fast.int64.replace.i, label %set.fast.int32.replace.i, !dbg !11133

set.fast.int32.replace.i:                         ; preds = %set.fast.int.i
  %14 = extractvalue %INT %12, 1, !dbg !11134
  tail call void @Tcl_SetIntObj(%Tcl_Obj* nocapture nonnull %10, i32 %14) #5, !dbg !11134, !noalias !11117
  br label %tcl.write.var.ptr.numeric.exit, !dbg !11135

set.fast.int64.replace.i:                         ; preds = %set.fast.int.i
  %15 = extractvalue %INT %12, 2, !dbg !11136
  tail call void @Tcl_SetWideIntObj(%Tcl_Obj* nocapture nonnull %10, i64 %15) #5, !dbg !11136, !noalias !11117
  br label %tcl.write.var.ptr.numeric.exit, !dbg !11137

set.fast.double.replace.i:                        ; preds = %set.fast.i
  %16 = extractvalue %NUMERIC %6, 2, !dbg !11138
  tail call void @Tcl_SetDoubleObj(%Tcl_Obj* nocapture nonnull %10, double %16) #5, !dbg !11139, !noalias !11117
  br label %tcl.write.var.ptr.numeric.exit, !dbg !11140

set.slow.i:                                       ; preds = %set.checkExists.i, %doSet
  %17 = extractvalue %NUMERIC %6, 0, !dbg !11141
  br i1 %17, label %op.double.i.i, label %op.int.i.i, !dbg !11141

op.int.i.i:                                       ; preds = %set.slow.i
  %18 = extractvalue %NUMERIC %6, 1, !dbg !11143
  %19 = extractvalue %INT %18, 0, !dbg !11144
  br i1 %19, label %op.64bit.i.i.i, label %op.32bit.i.i.i, !dbg !11144

op.32bit.i.i.i:                                   ; preds = %op.int.i.i
  %20 = extractvalue %INT %18, 1, !dbg !11146
  %objPtr.i.i.i = tail call noalias nonnull %Tcl_Obj* @Tcl_NewIntObj(i32 %20) #5, !dbg !11146, !noalias !11117
  %typePtr.ptr.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr.i.i.i, i64 0, i32 3, !dbg !11147
  %typePtr.i.i.i = load %ObjType*, %ObjType** %typePtr.ptr.i.i.i, align 8, !dbg !11147, !noalias !11124, !nonnull !3
  %tclWideIntType.i.i.i = load %ObjType*, %ObjType** @tclWideIntType, align 8, !dbg !11148, !invariant.load !3, !noalias !11117, !nonnull !3, !dereferenceable !1051
  %21 = icmp eq %ObjType* %typePtr.i.i.i, %tclWideIntType.i.i.i, !dbg !11148
  %tclIntType.i.i.i = load %ObjType*, %ObjType** @tclIntType, align 8, !dbg !11148, !invariant.load !3, !noalias !11117, !nonnull !3, !dereferenceable !1051
  %22 = icmp eq %ObjType* %typePtr.i.i.i, %tclIntType.i.i.i, !dbg !11148
  %23 = or i1 %21, %22, !dbg !11148
  br label %tcl.stringify.numeric.exit.i, !dbg !11149

op.64bit.i.i.i:                                   ; preds = %op.int.i.i
  %24 = extractvalue %INT %18, 2, !dbg !11150
  %objPtr1.i.i.i = tail call noalias nonnull %Tcl_Obj* @Tcl_NewWideIntObj(i64 %24) #5, !dbg !11150, !noalias !11117
  %typePtr.ptr2.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr1.i.i.i, i64 0, i32 3, !dbg !11151
  %typePtr3.i.i.i = load %ObjType*, %ObjType** %typePtr.ptr2.i.i.i, align 8, !dbg !11151, !noalias !11124, !nonnull !3
  %tclWideIntType4.i.i.i = load %ObjType*, %ObjType** @tclWideIntType, align 8, !dbg !11152, !invariant.load !3, !noalias !11117, !nonnull !3, !dereferenceable !1051
  %25 = icmp eq %ObjType* %typePtr3.i.i.i, %tclWideIntType4.i.i.i, !dbg !11152
  %tclIntType5.i.i.i = load %ObjType*, %ObjType** @tclIntType, align 8, !dbg !11152, !invariant.load !3, !noalias !11117, !nonnull !3, !dereferenceable !1051
  %26 = icmp eq %ObjType* %typePtr3.i.i.i, %tclIntType5.i.i.i, !dbg !11152
  %27 = or i1 %25, %26, !dbg !11152
  br label %tcl.stringify.numeric.exit.i, !dbg !11153

op.double.i.i:                                    ; preds = %set.slow.i
  %28 = extractvalue %NUMERIC %6, 2, !dbg !11154
  %objPtr.i1.i.i = tail call noalias nonnull %Tcl_Obj* @Tcl_NewDoubleObj(double %28) #5, !dbg !11155, !noalias !11117
  %typePtr.ptr.i4.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr.i1.i.i, i64 0, i32 3, !dbg !11157
  %typePtr.i5.i.i = load %ObjType*, %ObjType** %typePtr.ptr.i4.i.i, align 8, !dbg !11157, !noalias !11124, !nonnull !3
  %tclDoubleType.i.i.i = load %ObjType*, %ObjType** @tclDoubleType, align 8, !dbg !11158, !invariant.load !3, !noalias !11117, !nonnull !3, !dereferenceable !1051
  %29 = icmp eq %ObjType* %typePtr.i5.i.i, %tclDoubleType.i.i.i, !dbg !11158
  br label %tcl.stringify.numeric.exit.i, !dbg !11154

tcl.stringify.numeric.exit.i:                     ; preds = %op.double.i.i, %op.64bit.i.i.i, %op.32bit.i.i.i
  %.sink = phi i1 [ %29, %op.double.i.i ], [ %27, %op.64bit.i.i.i ], [ %23, %op.32bit.i.i.i ]
  %30 = phi %Tcl_Obj* [ %objPtr.i1.i.i, %op.double.i.i ], [ %objPtr1.i.i.i, %op.64bit.i.i.i ], [ %objPtr.i.i.i, %op.32bit.i.i.i ]
  tail call void @llvm.assume(i1 %.sink) #5, !dbg !11159, !noalias !11117
  %refCount.i.i3.i = getelementptr %Tcl_Obj, %Tcl_Obj* %30, i64 0, i32 0, !dbg !11160
  store i32 1, i32* %refCount.i.i3.i, align 4, !dbg !11163, !noalias !11124
  br i1 %7, label %set.fast.i.i, label %set.slow.i.i, !dbg !11164

set.fast.i.i:                                     ; preds = %tcl.stringify.numeric.exit.i
  store i32 2, i32* %refCount.i.i3.i, align 4, !dbg !11166, !noalias !11170
  %value.ptr.i.i.i.i = getelementptr %Var, %Var* %.0.lcssa.i, i64 0, i32 1, !dbg !11175
  %value.i.i.i.i = load %Tcl_Obj*, %Tcl_Obj** %value.ptr.i.i.i.i, align 8, !dbg !11175, !alias.scope !11177, !noalias !11178
  store %Tcl_Obj* %30, %Tcl_Obj** %value.ptr.i.i.i.i, align 8, !dbg !11179, !alias.scope !11177, !noalias !11178
  %31 = icmp eq %Tcl_Obj* %value.i.i.i.i, null, !dbg !11181
  br i1 %31, label %leave.i.i.i7, label %set.fast.drop.old.i.i.i, !dbg !11181

set.fast.drop.old.i.i.i:                          ; preds = %set.fast.i.i
  %refCount.i.i1.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value.i.i.i.i, i64 0, i32 0, !dbg !11182
  %refCount1.i.i2.i.i.i = load i32, i32* %refCount.i.i1.i.i.i, align 4, !dbg !11185, !noalias !11186
  %32 = icmp slt i32 %refCount1.i.i2.i.i.i, 2, !dbg !11187
  br i1 %32, label %freeObject.i.i.i.i.i, label %leave.i.i.i.i.i, !dbg !11187

freeObject.i.i.i.i.i:                             ; preds = %set.fast.drop.old.i.i.i
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %value.i.i.i.i) #5, !dbg !11188, !noalias !11186
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %value.i.i.i.i) #5, !dbg !11189, !noalias !11186
  br label %tcl.write.var.ptr.exit.i, !dbg !11190

leave.i.i.i.i.i:                                  ; preds = %set.fast.drop.old.i.i.i
  %33 = add nsw i32 %refCount1.i.i2.i.i.i, -1, !dbg !11185
  store i32 %33, i32* %refCount.i.i1.i.i.i, align 4, !dbg !11191, !noalias !11186
  br label %tcl.write.var.ptr.exit.i, !dbg !11192

set.slow.i.i:                                     ; preds = %tcl.stringify.numeric.exit.i
  %objPtr.i.i = tail call %Tcl_Obj* @TclPtrSetVar(%Interp* noalias nocapture nonnull %interp, %Var* noalias nocapture nonnull %.0.lcssa.i, %Var* noalias nocapture null, %Tcl_Obj* nocapture nonnull %varName, %Tcl_Obj* null, %Tcl_Obj* nonnull %30, i32 0) #5, !dbg !11193
  br label %tcl.write.var.ptr.exit.i, !dbg !11193

tcl.write.var.ptr.exit.i:                         ; preds = %set.slow.i.i, %leave.i.i.i.i.i, %freeObject.i.i.i.i.i
  %refCount1.i.i.pr.i = load i32, i32* %refCount.i.i3.i, align 4, !dbg !11194, !noalias !11124
  %34 = icmp slt i32 %refCount1.i.i.pr.i, 2, !dbg !11197
  br i1 %34, label %freeObject.i.i.i6, label %leave.i.i.i7, !dbg !11197

freeObject.i.i.i6:                                ; preds = %tcl.write.var.ptr.exit.i
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %30) #5, !dbg !11198, !noalias !11117
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %30) #5, !dbg !11199, !noalias !11124
  br label %tcl.write.var.ptr.numeric.exit, !dbg !11200

leave.i.i.i7:                                     ; preds = %tcl.write.var.ptr.exit.i, %set.fast.i.i
  %refCount1.i.i10.i = phi i32 [ %refCount1.i.i.pr.i, %tcl.write.var.ptr.exit.i ], [ 2, %set.fast.i.i ]
  %35 = add nsw i32 %refCount1.i.i10.i, -1, !dbg !11194
  store i32 %35, i32* %refCount.i.i3.i, align 4, !dbg !11201, !noalias !11124
  br label %tcl.write.var.ptr.numeric.exit, !dbg !11202

tcl.write.var.ptr.numeric.exit:                   ; preds = %unset.slow.i, %leave.i.i.i, %freeObject.i.i.i, %freeObject.i.i.i6, %leave.i.i.i7, %set.fast.double.replace.i, %set.fast.int64.replace.i, %set.fast.int32.replace.i
  ret void, !dbg !11203

doUnset:                                          ; preds = %var.followLinks.exit
  %36 = icmp eq i32 %flags1.i.i, 0, !dbg !11204
  br i1 %36, label %unset.fast.i, label %unset.slow.i, !dbg !11207

unset.fast.i:                                     ; preds = %doUnset
  %value.ptr.i.i1 = getelementptr %Var, %Var* %.0.lcssa.i, i64 0, i32 1, !dbg !11208
  %value.i.i = load %Tcl_Obj*, %Tcl_Obj** %value.ptr.i.i1, align 8, !dbg !11208, !alias.scope !11210, !noalias !11213
  %37 = icmp eq %Tcl_Obj* %value.i.i, null, !dbg !11216
  br i1 %37, label %unset.slow.i, label %unset.fast.done.i, !dbg !11216

unset.fast.done.i:                                ; preds = %unset.fast.i
  store %Tcl_Obj* null, %Tcl_Obj** %value.ptr.i.i1, align 8, !dbg !11217, !alias.scope !11210, !noalias !11213
  %refCount.i.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value.i.i, i64 0, i32 0, !dbg !11219
  %refCount1.i.i.i = load i32, i32* %refCount.i.i.i, align 4, !dbg !11222, !noalias !11223
  %38 = icmp slt i32 %refCount1.i.i.i, 2, !dbg !11224
  br i1 %38, label %freeObject.i.i.i, label %leave.i.i.i, !dbg !11224

freeObject.i.i.i:                                 ; preds = %unset.fast.done.i
  tail call void @TclFreeObj(%Tcl_Obj* nonnull %value.i.i) #5, !dbg !11225, !noalias !11223
  tail call void @llvm.lifetime.end.p0s_Tcl_Objs(i64 -1, %Tcl_Obj* nonnull %value.i.i) #5, !dbg !11226, !noalias !11223
  br label %tcl.write.var.ptr.numeric.exit, !dbg !11227

leave.i.i.i:                                      ; preds = %unset.fast.done.i
  %39 = add nsw i32 %refCount1.i.i.i, -1, !dbg !11222
  store i32 %39, i32* %refCount.i.i.i, align 4, !dbg !11228, !noalias !11223
  br label %tcl.write.var.ptr.numeric.exit, !dbg !11229

unset.slow.i:                                     ; preds = %unset.fast.i, %doUnset
  %code.i = tail call i32 @TclPtrUnsetVar(%Interp* noalias nocapture nonnull %interp, %Var* noalias nocapture nonnull %.0.lcssa.i, %Var* noalias nocapture null, %Tcl_Obj* nocapture nonnull %varName, %Tcl_Obj* nocapture null, i32 0) #5, !dbg !11230
  br label %tcl.write.var.ptr.numeric.exit, !dbg !11230
}

; Function Attrs: alwaysinline nounwind
define hidden { i1, %ARRAYSTRING } @tcl.callframe.load(%Var* nocapture nonnull %var, %Tcl_Obj* nocapture nonnull %varName) local_unnamed_addr #6 !dbg !11231 {
enter:
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !11237, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %flags.ptr.i.i1.i = getelementptr %Var, %Var* %var, i64 0, i32 0, !dbg !11238
  %flags.i.i2.i = load i32, i32* %flags.ptr.i.i1.i, align 4, !dbg !11238
  %0 = and i32 %flags.i.i2.i, 2, !dbg !11242
  %1 = icmp eq i32 %0, 0, !dbg !11242
  br i1 %1, label %var.followLinks.exit, label %follow.i, !dbg !11243

follow.i:                                         ; preds = %enter, %follow.i
  %.03.i = phi %Var* [ %value1.i.i, %follow.i ], [ %var, %enter ]
  %value.ptr.i.i = getelementptr %Var, %Var* %.03.i, i64 0, i32 1, !dbg !11244
  %2 = bitcast %Tcl_Obj** %value.ptr.i.i to %Var**, !dbg !11244
  %value1.i.i = load %Var*, %Var** %2, align 8, !dbg !11244
  %flags.ptr.i.i.i = getelementptr %Var, %Var* %value1.i.i, i64 0, i32 0, !dbg !11238
  %flags.i.i.i = load i32, i32* %flags.ptr.i.i.i, align 4, !dbg !11238
  %3 = and i32 %flags.i.i.i, 2, !dbg !11242
  %4 = icmp eq i32 %3, 0, !dbg !11242
  br i1 %4, label %var.followLinks.exit, label %follow.i, !dbg !11243

var.followLinks.exit:                             ; preds = %follow.i, %enter
  %flags.i.i = phi i32 [ %flags.i.i2.i, %enter ], [ %flags.i.i.i, %follow.i ]
  %.0.lcssa.i = phi %Var* [ %var, %enter ], [ %value1.i.i, %follow.i ], !dbg !11246
  %value.ptr.i.i3 = getelementptr %Var, %Var* %.0.lcssa.i, i64 0, i32 1, !dbg !11247
  %value.i.i4 = load %Tcl_Obj*, %Tcl_Obj** %value.ptr.i.i3, align 8, !dbg !11247
  %5 = icmp eq %Tcl_Obj* %value.i.i4, null, !dbg !11250
  br i1 %5, label %noValue, label %array.or.string, !dbg !11251

array.or.string:                                  ; preds = %var.followLinks.exit
  %6 = and i32 %flags.i.i, 1, !dbg !11252
  %7 = icmp eq i32 %6, 0, !dbg !11252
  br i1 %7, label %scalar, label %array, !dbg !11255

scalar:                                           ; preds = %array.or.string
  %8 = icmp eq i32 %flags.i.i, 0, !dbg !11256
  br i1 %8, label %gotValue, label %tcl.read.var.ptr.exit, !dbg !11259

tcl.read.var.ptr.exit:                            ; preds = %scalar
  %objPtr.i = tail call %Tcl_Obj* @TclPtrGetVar(%Interp* noalias nocapture nonnull %interp, %Var* noalias nocapture nonnull %.0.lcssa.i, %Var* noalias nocapture null, %Tcl_Obj* nocapture nonnull %varName, %Tcl_Obj* nocapture null, i32 512) #5, !dbg !11260
  %9 = icmp eq %Tcl_Obj* %objPtr.i, null, !dbg !11261
  br i1 %9, label %noValue, label %gotValue, !dbg !11261

gotValue:                                         ; preds = %scalar, %tcl.read.var.ptr.exit
  %10 = phi %Tcl_Obj* [ %objPtr.i, %tcl.read.var.ptr.exit ], [ %value.i.i4, %scalar ]
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %10, i64 0, i32 0, !dbg !11262
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !11265
  %11 = add nsw i32 %refCount1.i.i, 1, !dbg !11265
  store i32 %11, i32* %refCount.i.i, align 4, !dbg !11265
  %12 = insertvalue %ARRAYSTRING { i1 true, %ARRAYIMPL* undef, %Tcl_Obj* undef }, %Tcl_Obj* %10, 2, !dbg !11266
  %13 = insertvalue { i1, %ARRAYSTRING } { i1 false, %ARRAYSTRING undef }, %ARRAYSTRING %12, 1, !dbg !11266
  ret { i1, %ARRAYSTRING } %13, !dbg !11266

noValue:                                          ; preds = %var.followLinks.exit, %tcl.read.var.ptr.exit
  ret { i1, %ARRAYSTRING } { i1 true, %ARRAYSTRING undef }, !dbg !11267

array:                                            ; preds = %array.or.string
  %ptr = tail call noalias nonnull i8* @Tcl_Alloc(i32 16), !dbg !11268
  tail call void @llvm.lifetime.start.p0i8(i64 -1, i8* nonnull %ptr), !dbg !11268
  %ptr1 = bitcast i8* %ptr to %ARRAYIMPL*, !dbg !11268
  %ptr1.ref = bitcast i8* %ptr to i32*, !dbg !11269
  store i32 0, i32* %ptr1.ref, align 4, !dbg !11269
  %ptr1.provenance = getelementptr i8, i8* %ptr, i64 4, !dbg !11270
  %14 = bitcast i8* %ptr1.provenance to i1*, !dbg !11270
  store i1 true, i1* %14, align 1, !dbg !11270
  %15 = bitcast %Tcl_Obj** %value.ptr.i.i3 to %VarHashTable**, !dbg !11271
  %value1.i = load %VarHashTable*, %VarHashTable** %15, align 8, !dbg !11271
  %ptr1.ary = getelementptr i8, i8* %ptr, i64 8, !dbg !11273
  %16 = bitcast i8* %ptr1.ary to %VarHashTable**, !dbg !11273
  store %VarHashTable* %value1.i, %VarHashTable** %16, align 8, !dbg !11273
  store i32 1, i32* %ptr1.ref, align 4, !dbg !11274
  %17 = insertvalue %ARRAYSTRING { i1 false, %ARRAYIMPL* undef, %Tcl_Obj* undef }, %ARRAYIMPL* %ptr1, 1, !dbg !11276
  %18 = insertvalue { i1, %ARRAYSTRING } { i1 false, %ARRAYSTRING undef }, %ARRAYSTRING %17, 1, !dbg !11277
  ret { i1, %ARRAYSTRING } %18, !dbg !11277
}

; Function Attrs: alwaysinline nounwind
define hidden { i32, i1 } @tcl.callframe.bindvar(%CallFrame* nocapture nonnull readnone %frame, %Var* %otherVar, %Var* nonnull %localVar, %Tcl_Obj* nocapture nonnull %localName, i32* nocapture nonnull %errorCode) local_unnamed_addr #6 !dbg !11278 {
enter:
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !11287, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %0 = icmp eq %Var* %otherVar, null, !dbg !11288
  br i1 %0, label %error, label %bind, !dbg !11288

bind:                                             ; preds = %enter
  %1 = icmp eq %Var* %otherVar, %localVar, !dbg !11289
  br i1 %1, label %complex, label %check2, !dbg !11289

check2:                                           ; preds = %bind
  %flags.ptr.i.i = getelementptr %Var, %Var* %localVar, i64 0, i32 0, !dbg !11290
  %flags.i.i = load i32, i32* %flags.ptr.i.i, align 4, !dbg !11290
  %2 = and i32 %flags.i.i, 2160, !dbg !11293
  %3 = icmp eq i32 %2, 0, !dbg !11293
  br i1 %3, label %check3, label %complex, !dbg !11294

check3:                                           ; preds = %check2
  %value.ptr.i.i11 = getelementptr %Var, %Var* %localVar, i64 0, i32 1, !dbg !11295
  %value.i.i12 = load %Tcl_Obj*, %Tcl_Obj** %value.ptr.i.i11, align 8, !dbg !11295
  %4 = icmp ne %Tcl_Obj* %value.i.i12, null, !dbg !11298
  %5 = xor i1 %4, true, !dbg !11299
  %6 = and i32 %flags.i.i, 2, !dbg !11300
  %7 = icmp ne i32 %6, 0, !dbg !11300
  %8 = or i1 %7, %5, !dbg !11299
  %9 = bitcast %Tcl_Obj* %value.i.i12 to %Var*, !dbg !11299
  br i1 %8, label %check4, label %complex, !dbg !11299

check4:                                           ; preds = %check3
  %10 = bitcast %Tcl_Obj** %value.ptr.i.i11 to %Var**, !dbg !11303
  br i1 %4, label %link.existing, label %link, !dbg !11304

link.existing:                                    ; preds = %check4
  %11 = icmp eq %Var* %9, %otherVar, !dbg !11305
  br i1 %11, label %done, label %check.unlink.existing, !dbg !11305

check.unlink.existing:                            ; preds = %link.existing
  %flags.ptr.i.i5 = getelementptr inbounds %Tcl_Obj, %Tcl_Obj* %value.i.i12, i64 0, i32 0, !dbg !11306
  %flags.i.i6 = load i32, i32* %flags.ptr.i.i5, align 4, !dbg !11306
  %12 = and i32 %flags.i.i6, 4, !dbg !11309
  %13 = icmp eq i32 %12, 0, !dbg !11309
  br i1 %13, label %link, label %unlink.existing, !dbg !11310

unlink.existing:                                  ; preds = %check.unlink.existing
  %14 = getelementptr inbounds %Tcl_Obj, %Tcl_Obj* %value.i.i12, i64 0, i32 2, !dbg !11311
  %15 = load i32, i32* %14, align 4, !dbg !11313
  %16 = add i32 %15, -1, !dbg !11313
  store i32 %16, i32* %14, align 4, !dbg !11313
  %value.ptr.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %value.i.i12, i64 0, i32 1, !dbg !11314
  %17 = bitcast i8** %value.ptr.i.i to %Tcl_Obj**, !dbg !11314
  %value.i.i4 = load %Tcl_Obj*, %Tcl_Obj** %17, align 8, !dbg !11314
  %18 = icmp eq %Tcl_Obj* %value.i.i4, null, !dbg !11317
  br i1 %18, label %cleanup.old.link, label %link, !dbg !11318

cleanup.old.link:                                 ; preds = %unlink.existing
  tail call void @TclCleanupVar(%Var* noalias nocapture nonnull %9, %Var* noalias nocapture null), !dbg !11319
  br label %link, !dbg !11320

link:                                             ; preds = %check4, %unlink.existing, %check.unlink.existing, %cleanup.old.link
  %flags1.i.i = load i32, i32* %flags.ptr.i.i, align 4, !dbg !11321
  %19 = or i32 %flags1.i.i, 2, !dbg !11321
  store i32 %19, i32* %flags.ptr.i.i, align 4, !dbg !11321
  store %Var* %otherVar, %Var** %10, align 8, !dbg !11324
  %flags.ptr.i.i1 = getelementptr %Var, %Var* %otherVar, i64 0, i32 0, !dbg !11326
  %flags.i.i2 = load i32, i32* %flags.ptr.i.i1, align 4, !dbg !11326
  %20 = and i32 %flags.i.i2, 4, !dbg !11329
  %21 = icmp eq i32 %20, 0, !dbg !11329
  br i1 %21, label %done, label %link.addRef, !dbg !11330

link.addRef:                                      ; preds = %link
  %22 = getelementptr inbounds %Var, %Var* %otherVar, i64 1, i32 0, !dbg !11331
  %23 = load i32, i32* %22, align 4, !dbg !11333
  %24 = add i32 %23, 1, !dbg !11333
  store i32 %24, i32* %22, align 4, !dbg !11333
  br label %done, !dbg !11334

complex:                                          ; preds = %check2, %check3, %bind
  %str = tail call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %localName), !dbg !11335
  %code = tail call i32 @TclPtrMakeUpvar(%Interp* noalias nocapture nonnull %interp, %Var* noalias nonnull %otherVar, i8* noalias nonnull readonly %str, i32 0, i32 -1), !dbg !11336
  %25 = icmp eq i32 %code, 0, !dbg !11337
  br i1 %25, label %done, label %error, !dbg !11337

done:                                             ; preds = %link, %complex, %link.addRef, %link.existing
  ret { i32, i1 } { i32 0, i1 undef }, !dbg !11338

error:                                            ; preds = %complex, %enter
  store i32 1, i32* %errorCode, align 4, !dbg !11339
  ret { i32, i1 } { i32 1, i1 undef }, !dbg !11340
}

; Function Attrs: alwaysinline nounwind
define hidden %Var* @tcl.callframe.lookup.varns(%CallFrame* nocapture nonnull readnone %frame, %Tcl_Obj* nocapture nonnull %nsName, %Tcl_Obj* nonnull %varName) local_unnamed_addr #6 !dbg !11341 {
enter:
  %nsPtr = alloca %Namespace*, align 8, !dbg !11348
  %arrayPtr = alloca %Var*, align 8, !dbg !11349
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !11350, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %code = call i32 @TclGetNamespaceFromObj(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %nsName, %Namespace** noalias nocapture nonnull %nsPtr), !dbg !11351
  %0 = icmp eq i32 %code, 0, !dbg !11351
  br i1 %0, label %gotNamespace, label %gotError, !dbg !11351

gotNamespace:                                     ; preds = %enter
  %varFramePtr.ptr = getelementptr %Interp, %Interp* %interp, i64 0, i32 12, !dbg !11352
  %varFramePtr = load %CallFrame*, %CallFrame** %varFramePtr.ptr, align 8, !dbg !11352
  %nsPtr1 = getelementptr %CallFrame, %CallFrame* %varFramePtr, i64 0, i32 0, !dbg !11352
  %savedNsPtr = load %Namespace*, %Namespace** %nsPtr1, align 8, !dbg !11353
  %nsPtr2 = load %Namespace*, %Namespace** %nsPtr, align 8, !dbg !11354, !nonnull !3
  store %Namespace* %nsPtr2, %Namespace** %nsPtr1, align 8, !dbg !11355
  %varPtr = call %Var* @TclObjLookupVar(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %varName, i8* noalias nocapture readonly null, i32 262658, i8* noalias nocapture nonnull readonly getelementptr inbounds ([7 x i8], [7 x i8]* @string.constant.47, i64 0, i64 0), i32 1, i32 1, %Var** noalias nocapture nonnull %arrayPtr), !dbg !11356
  store %Namespace* %savedNsPtr, %Namespace** %nsPtr1, align 8, !dbg !11357
  %1 = icmp eq %Var* %varPtr, null, !dbg !11358
  br i1 %1, label %gotError, label %gotVar, !dbg !11358

gotVar:                                           ; preds = %gotError, %gotNamespace
  %merge = phi %Var* [ %varPtr, %gotNamespace ], [ null, %gotError ]
  ret %Var* %merge, !dbg !11359

gotError:                                         ; preds = %gotNamespace, %enter
  br label %gotVar
}

; Function Attrs: alwaysinline nounwind
define hidden %Var* @tcl.callframe.lookup.var(%CallFrame* nocapture nonnull readnone %frame, %Tcl_Obj* nonnull %varName) local_unnamed_addr #6 !dbg !11360 {
enter:
  %arrayPtr = alloca %Var*, align 8, !dbg !11366
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !11367, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %varPtr = call %Var* @TclObjLookupVar(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %varName, i8* noalias nocapture readonly null, i32 514, i8* noalias nocapture nonnull readonly getelementptr inbounds ([7 x i8], [7 x i8]* @string.constant.47, i64 0, i64 0), i32 1, i32 1, %Var** noalias nocapture nonnull %arrayPtr), !dbg !11368
  %0 = icmp eq %Var* %varPtr, null, !dbg !11369
  br i1 %0, label %var.setNamespaceVar.exit, label %l1.i, !dbg !11369

l1.i:                                             ; preds = %enter
  %flags.ptr.i.i = getelementptr %Var, %Var* %varPtr, i64 0, i32 0, !dbg !11370
  %flags.i.i = load i32, i32* %flags.ptr.i.i, align 4, !dbg !11370
  %1 = and i32 %flags.i.i, 128, !dbg !11373
  %2 = icmp eq i32 %1, 0, !dbg !11373
  br i1 %2, label %l2.i, label %var.setNamespaceVar.exit, !dbg !11374

l2.i:                                             ; preds = %l1.i
  %3 = or i32 %flags.i.i, 128, !dbg !11375
  store i32 %3, i32* %flags.ptr.i.i, align 4, !dbg !11375
  %4 = and i32 %flags.i.i, 4, !dbg !11377
  %5 = icmp eq i32 %4, 0, !dbg !11377
  br i1 %5, label %var.setNamespaceVar.exit, label %l3.i, !dbg !11380

l3.i:                                             ; preds = %l2.i
  %6 = getelementptr inbounds %Var, %Var* %varPtr, i64 1, i32 0, !dbg !11381
  %7 = load i32, i32* %6, align 4, !dbg !11383
  %8 = add i32 %7, 1, !dbg !11383
  store i32 %8, i32* %6, align 4, !dbg !11383
  br label %var.setNamespaceVar.exit, !dbg !11384

var.setNamespaceVar.exit:                         ; preds = %enter, %l1.i, %l2.i, %l3.i
  ret %Var* %varPtr, !dbg !11385
}

; Function Attrs: alwaysinline nounwind
define hidden %CallFrame* @tcl.get.level.frame(%Tcl_Obj* nocapture nonnull %level) local_unnamed_addr #6 !dbg !11386 {
enter:
  %framePtrPtr = alloca %CallFrame*, align 8, !dbg !11391
  %interp = load %Interp*, %Interp** @tclInterp, align 8, !dbg !11392, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %code = call i32 @TclObjGetFrame(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nocapture nonnull %level, %CallFrame** noalias nocapture nonnull %framePtrPtr), !dbg !11393
  %0 = icmp eq i32 %code, 1, !dbg !11394
  %1 = tail call i1 @llvm.expect.i1(i1 %0, i1 true), !dbg !11394
  br i1 %1, label %ok, label %check.for.weird.level, !dbg !11394

ok:                                               ; preds = %enter
  %framePtr = load %CallFrame*, %CallFrame** %framePtrPtr, align 8, !dbg !11395, !nonnull !3
  ret %CallFrame* %framePtr, !dbg !11396

check.for.weird.level:                            ; preds = %enter
  %2 = icmp eq i32 %code, 0, !dbg !11397
  br i1 %2, label %weird.level, label %error, !dbg !11397

weird.level:                                      ; preds = %check.for.weird.level
  %str = tail call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %level), !dbg !11398
  %objPtr = tail call noalias nonnull %Tcl_Obj* (i8*, ...) @Tcl_ObjPrintf(i8* nocapture nonnull readonly getelementptr inbounds ([15 x i8], [15 x i8]* @string.constant.43, i64 0, i64 0), i8* nocapture nonnull %str), !dbg !11399
  %refCount.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr, i64 0, i32 0, !dbg !11400
  %refCount1.i = load i32, i32* %refCount.i, align 4, !dbg !11402
  %3 = icmp eq i32 %refCount1.i, 0, !dbg !11402
  tail call void @llvm.assume(i1 %3) #5, !dbg !11402
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %objPtr), !dbg !11399
  tail call void (%Interp*, ...) @Tcl_SetErrorCode(%Interp* nocapture nonnull %interp, i8* nocapture getelementptr inbounds ([4 x i8], [4 x i8]* @string.constant.44, i64 0, i64 0), i8* nocapture getelementptr inbounds ([7 x i8], [7 x i8]* @string.constant.45, i64 0, i64 0), i8* nocapture getelementptr inbounds ([6 x i8], [6 x i8]* @string.constant.46, i64 0, i64 0), i8* nocapture nonnull %str, i8* nocapture null), !dbg !11403
  br label %error, !dbg !11404

error:                                            ; preds = %weird.level, %check.for.weird.level
  ret %CallFrame* null, !dbg !11405
}

; Function Attrs: alwaysinline nounwind
define hidden %Var* @tcl.callframe.lookup.upvar(%CallFrame* nocapture nonnull readnone %frame, %Tcl_Obj* nocapture nonnull %level, %Tcl_Obj* nonnull %varName) local_unnamed_addr #6 !dbg !11406 {
enter:
  %framePtrPtr.i = alloca %CallFrame*, align 8, !dbg !11411
  %arrayPtr = alloca %Var*, align 8, !dbg !11413
  %0 = bitcast %CallFrame** %framePtrPtr.i to i8*, !dbg !11414
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0), !dbg !11414
  %interp.i = load %Interp*, %Interp** @tclInterp, align 8, !dbg !11414, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %code.i = call i32 @TclObjGetFrame(%Interp* noalias nocapture nonnull %interp.i, %Tcl_Obj* noalias nocapture nonnull %level, %CallFrame** noalias nocapture nonnull %framePtrPtr.i) #5, !dbg !11415
  %1 = icmp eq i32 %code.i, 1, !dbg !11416
  %2 = tail call i1 @llvm.expect.i1(i1 %1, i1 true) #5, !dbg !11416
  br i1 %2, label %lookup, label %check.for.weird.level.i, !dbg !11416

check.for.weird.level.i:                          ; preds = %enter
  %3 = icmp eq i32 %code.i, 0, !dbg !11417
  br i1 %3, label %weird.level.i, label %tcl.get.level.frame.exit.thread, !dbg !11417

weird.level.i:                                    ; preds = %check.for.weird.level.i
  %str.i = tail call nonnull i8* @Tcl_GetString(%Tcl_Obj* nocapture nonnull %level) #5, !dbg !11418
  %objPtr.i = tail call noalias nonnull %Tcl_Obj* (i8*, ...) @Tcl_ObjPrintf(i8* nocapture nonnull readonly getelementptr inbounds ([15 x i8], [15 x i8]* @string.constant.43, i64 0, i64 0), i8* nocapture nonnull %str.i) #5, !dbg !11419
  %refCount.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr.i, i64 0, i32 0, !dbg !11420
  %refCount1.i.i = load i32, i32* %refCount.i.i, align 4, !dbg !11422
  %4 = icmp eq i32 %refCount1.i.i, 0, !dbg !11422
  tail call void @llvm.assume(i1 %4) #5, !dbg !11422
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp.i, %Tcl_Obj* noalias nonnull %objPtr.i) #5, !dbg !11419
  tail call void (%Interp*, ...) @Tcl_SetErrorCode(%Interp* nocapture nonnull %interp.i, i8* nocapture getelementptr inbounds ([4 x i8], [4 x i8]* @string.constant.44, i64 0, i64 0), i8* nocapture getelementptr inbounds ([7 x i8], [7 x i8]* @string.constant.45, i64 0, i64 0), i8* nocapture getelementptr inbounds ([6 x i8], [6 x i8]* @string.constant.46, i64 0, i64 0), i8* nocapture nonnull %str.i, i8* nocapture null) #5, !dbg !11423
  br label %tcl.get.level.frame.exit.thread, !dbg !11424

tcl.get.level.frame.exit.thread:                  ; preds = %check.for.weird.level.i, %weird.level.i
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0), !dbg !11425
  br label %error, !dbg !11426

lookup:                                           ; preds = %enter
  %framePtr.i = load %CallFrame*, %CallFrame** %framePtrPtr.i, align 8, !dbg !11427, !nonnull !3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0), !dbg !11428
  %varFramePtr = getelementptr %Interp, %Interp* %interp.i, i64 0, i32 12, !dbg !11429
  %savedFramePtr = load %CallFrame*, %CallFrame** %varFramePtr, align 8, !dbg !11430
  store %CallFrame* %framePtr.i, %CallFrame** %varFramePtr, align 8, !dbg !11431
  %varPtr = call %Var* @TclObjLookupVar(%Interp* noalias nocapture nonnull %interp.i, %Tcl_Obj* noalias nonnull %varName, i8* noalias nocapture readonly null, i32 512, i8* noalias nocapture nonnull readonly getelementptr inbounds ([7 x i8], [7 x i8]* @string.constant.47, i64 0, i64 0), i32 1, i32 1, %Var** noalias nocapture nonnull %arrayPtr), !dbg !11432
  store %CallFrame* %savedFramePtr, %CallFrame** %varFramePtr, align 8, !dbg !11433
  %5 = icmp eq %Var* %varPtr, null, !dbg !11434
  br i1 %5, label %error, label %gotVar, !dbg !11434

gotVar:                                           ; preds = %error, %lookup
  %merge = phi %Var* [ %varPtr, %lookup ], [ null, %error ]
  ret %Var* %merge, !dbg !11435

error:                                            ; preds = %tcl.get.level.frame.exit.thread, %lookup
  br label %gotVar
}

; Function Attrs: nounwind
define hidden nonnull %Tcl_Obj* @"tcl ::main {}"() local_unnamed_addr #5 !dbg !11436 {
enter:
  %str.14 = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.14, align 8, !dbg !11437, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i = getelementptr %Tcl_Obj, %Tcl_Obj* %str.14, i64 0, i32 0, !dbg !11438
  %refCount.i = load i32, i32* %refCountPtr.i, align 4, !dbg !11438
  %0 = icmp sgt i32 %refCount.i, 1, !dbg !11437
  tail call void @llvm.assume(i1 %0), !dbg !11437
  %1 = add nuw nsw i32 %refCount.i, 1, !dbg !11440
  store i32 %1, i32* %refCountPtr.i, align 4, !dbg !11440
  ret %Tcl_Obj* %str.14, !dbg !11437
}

; Function Attrs: nounwind
define hidden i32 @"cmd.thunk::main"(i8* nocapture readnone %clientData, %Interp* nocapture %interp, i32 %argc, %Tcl_Obj** nocapture readonly %argv) #5 !dbg !11443 {
enter:
  %0 = icmp eq i32 %argc, 1, !dbg !11453
  br i1 %0, label %blk1, label %error.wrongNumArgs, !dbg !11453

error.wrongNumArgs:                               ; preds = %enter
  tail call void @Tcl_WrongNumArgs(%Interp* noalias nocapture nonnull %interp, i32 1, %Tcl_Obj** noalias nocapture readonly %argv, i8* noalias nocapture readonly getelementptr inbounds ([1 x i8], [1 x i8]* @wrongargs_, i64 0, i64 0)), !dbg !11453
  ret i32 1, !dbg !11453

blk1:                                             ; preds = %enter
  %str.14.i = load %Tcl_Obj*, %Tcl_Obj** @obj.constant.14, align 8, !dbg !11454, !invariant.load !3, !nonnull !3, !dereferenceable !1051
  %refCountPtr.i.i = getelementptr %Tcl_Obj, %Tcl_Obj* %str.14.i, i64 0, i32 0, !dbg !11456
  %refCount.i.i = load i32, i32* %refCountPtr.i.i, align 4, !dbg !11456
  %1 = icmp sgt i32 %refCount.i.i, 1, !dbg !11454
  tail call void @llvm.assume(i1 %1) #5, !dbg !11454
  %2 = add nuw nsw i32 %refCount.i.i, 1, !dbg !11458
  store i32 %2, i32* %refCountPtr.i.i, align 4, !dbg !11458
  %objPtr.i = tail call noalias nonnull %Tcl_Obj* @Tcl_NewObj() #5, !dbg !11461
  %refCount.i.i2 = getelementptr %Tcl_Obj, %Tcl_Obj* %objPtr.i, i64 0, i32 0, !dbg !11463
  %refCount1.i.i = load i32, i32* %refCount.i.i2, align 4, !dbg !11465
  %3 = icmp eq i32 %refCount1.i.i, 0, !dbg !11465
  tail call void @llvm.assume(i1 %3) #5, !dbg !11465
  tail call void @Tcl_SetObjResult(%Interp* noalias nocapture nonnull %interp, %Tcl_Obj* noalias nonnull %objPtr.i) #5, !dbg !11461
  ret i32 0, !dbg !11466
}

attributes #0 = { alwaysinline norecurse nounwind readnone }
attributes #1 = { alwaysinline nounwind readnone }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { nounwind readnone }
attributes #4 = { nofree nounwind readnone }
attributes #5 = { nounwind }
attributes #6 = { alwaysinline nounwind }
attributes #7 = { cold nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { nounwind readonly }
attributes #10 = { alwaysinline nofree norecurse nounwind }
attributes #11 = { argmemonly nounwind }
attributes #12 = { alwaysinline }
attributes #13 = { noinline nounwind }
attributes #14 = { noinline nounwind readonly }
attributes #15 = { alwaysinline norecurse nounwind readonly }
attributes #16 = { alwaysinline nounwind readonly }
attributes #17 = { nofree nounwind readonly }
attributes #18 = { alwaysinline nofree norecurse nounwind writeonly }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: 32768, file: !2, producer: "tclquadcode 0.1/llvmtcl 3.9.2/Tcl 8.6.11", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !3)
!2 = !DIFile(filename: "null", directory: "/dev")
!3 = !{}
!4 = distinct !DISubprogram(name: "tcl.int.32", scope: !6, file: !5, type: !7, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !16)
!5 = !DIFile(filename: "mathlib.tcl", directory: "/opt/tclquadcode/codegen")
!6 = !DINamespace(name: "tcl.support", scope: null)
!7 = !DISubroutineType(types: !8)
!8 = !{!9, !10}
!9 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!10 = !DICompositeType(tag: DW_TAG_structure_type, name: "INT", scope: !12, file: !11, line: 1521, size: 24, elements: !13)
!11 = !DIFile(filename: "struct.tcl", directory: "/opt/tclquadcode/codegen")
!12 = !DINamespace(name: "types", scope: !6)
!13 = !{!14, !9, !15}
!14 = !DIBasicType(name: "bool", size: 1, encoding: DW_ATE_boolean)
!15 = !DIBasicType(name: "int64", size: 64, encoding: DW_ATE_signed)
!16 = !{!17}
!17 = !DILocalVariable(name: "x", arg: 1, scope: !4, file: !2, type: !10)
!18 = !DILocation(line: 371, scope: !4)
!19 = !DILocation(line: 373, scope: !4)
!20 = !DILocation(line: 375, scope: !4)
!21 = distinct !DISubprogram(name: "tcl.int.64", scope: !6, file: !5, type: !22, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !24)
!22 = !DISubroutineType(types: !23)
!23 = !{!15, !10}
!24 = !{!25}
!25 = !DILocalVariable(name: "x", arg: 1, scope: !21, file: !2, type: !10)
!26 = !DILocation(line: 392, scope: !21)
!27 = !DILocation(line: 394, scope: !21)
!28 = !DILocation(line: 396, scope: !21)
!29 = distinct !DISubprogram(name: "tcl.shl", scope: !6, file: !5, type: !30, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !32)
!30 = !DISubroutineType(types: !31)
!31 = !{!10, !10, !10}
!32 = !{!33, !34}
!33 = !DILocalVariable(name: "x", arg: 1, scope: !29, file: !2, type: !10)
!34 = !DILocalVariable(name: "y", arg: 2, scope: !29, file: !2, type: !10)
!35 = !DILocation(line: 413, scope: !29)
!36 = !DILocation(line: 415, scope: !29)
!37 = !DILocation(line: 0, scope: !29)
!38 = !DILocation(line: 418, scope: !29)
!39 = !DILocation(line: 421, scope: !29)
!40 = !{i32 0, i32 33}
!41 = !DILocation(line: 422, scope: !29)
!42 = !DILocation(line: 424, scope: !29)
!43 = !DILocation(line: 394, scope: !21, inlinedAt: !44)
!44 = distinct !DILocation(line: 426, scope: !29)
!45 = !DILocation(line: 396, scope: !21, inlinedAt: !44)
!46 = !DILocation(line: 392, scope: !21, inlinedAt: !47)
!47 = distinct !DILocation(line: 427, scope: !29)
!48 = !DILocation(line: 428, scope: !29)
!49 = distinct !DISubprogram(name: "tcl.div.32", scope: !6, file: !5, type: !50, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !52)
!50 = !DISubroutineType(types: !51)
!51 = !{!9, !9, !9}
!52 = !{!53, !54}
!53 = !DILocalVariable(name: "x", arg: 1, scope: !49, file: !2, type: !9)
!54 = !DILocalVariable(name: "y", arg: 2, scope: !49, file: !2, type: !9)
!55 = !DILocation(line: 448, scope: !49)
!56 = !DILocation(line: 449, scope: !49)
!57 = !DILocation(line: 451, scope: !49)
!58 = !DILocation(line: 453, scope: !49)
!59 = !DILocation(line: 455, scope: !49)
!60 = !DILocation(line: 457, scope: !49)
!61 = !DILocation(line: 459, scope: !49)
!62 = distinct !DISubprogram(name: "tcl.div.64", scope: !6, file: !5, type: !63, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !65)
!63 = !DISubroutineType(types: !64)
!64 = !{!15, !15, !15}
!65 = !{!66, !67}
!66 = !DILocalVariable(name: "x", arg: 1, scope: !62, file: !2, type: !15)
!67 = !DILocalVariable(name: "y", arg: 2, scope: !62, file: !2, type: !15)
!68 = !DILocation(line: 448, scope: !62)
!69 = !DILocation(line: 449, scope: !62)
!70 = !DILocation(line: 451, scope: !62)
!71 = !DILocation(line: 453, scope: !62)
!72 = !DILocation(line: 455, scope: !62)
!73 = !DILocation(line: 457, scope: !62)
!74 = !DILocation(line: 459, scope: !62)
!75 = distinct !DISubprogram(name: "tcl.add", scope: !6, file: !5, type: !30, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !76)
!76 = !{!77, !78}
!77 = !DILocalVariable(name: "x", arg: 1, scope: !75, file: !2, type: !10)
!78 = !DILocalVariable(name: "y", arg: 2, scope: !75, file: !2, type: !10)
!79 = !DILocation(line: 67, scope: !75)
!80 = !DILocation(line: 69, scope: !75)
!81 = !DILocation(line: 0, scope: !75)
!82 = !DILocation(line: 72, scope: !75)
!83 = !DILocation(line: 73, scope: !75)
!84 = !DILocation(line: 75, scope: !75)
!85 = !DILocation(line: 77, scope: !75)
!86 = !DILocation(line: 78, scope: !75)
!87 = !DILocation(line: 79, scope: !75)
!88 = !DILocation(line: 81, scope: !75)
!89 = !DILocation(line: 394, scope: !21, inlinedAt: !90)
!90 = distinct !DILocation(line: 83, scope: !75)
!91 = !DILocation(line: 392, scope: !21, inlinedAt: !92)
!92 = distinct !DILocation(line: 84, scope: !75)
!93 = !DILocation(line: 396, scope: !21, inlinedAt: !90)
!94 = !DILocation(line: 85, scope: !75)
!95 = distinct !DISubprogram(name: "tcl.sub", scope: !6, file: !5, type: !30, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !96)
!96 = !{!97, !98}
!97 = !DILocalVariable(name: "x", arg: 1, scope: !95, file: !2, type: !10)
!98 = !DILocalVariable(name: "y", arg: 2, scope: !95, file: !2, type: !10)
!99 = !DILocation(line: 67, scope: !95)
!100 = !DILocation(line: 69, scope: !95)
!101 = !DILocation(line: 0, scope: !95)
!102 = !DILocation(line: 72, scope: !95)
!103 = !DILocation(line: 73, scope: !95)
!104 = !DILocation(line: 75, scope: !95)
!105 = !DILocation(line: 77, scope: !95)
!106 = !DILocation(line: 78, scope: !95)
!107 = !DILocation(line: 79, scope: !95)
!108 = !DILocation(line: 81, scope: !95)
!109 = !DILocation(line: 394, scope: !21, inlinedAt: !110)
!110 = distinct !DILocation(line: 83, scope: !95)
!111 = !DILocation(line: 392, scope: !21, inlinedAt: !112)
!112 = distinct !DILocation(line: 84, scope: !95)
!113 = !DILocation(line: 396, scope: !21, inlinedAt: !110)
!114 = !DILocation(line: 85, scope: !95)
!115 = distinct !DISubprogram(name: "tcl.mul", scope: !6, file: !5, type: !30, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !116)
!116 = !{!117, !118}
!117 = !DILocalVariable(name: "x", arg: 1, scope: !115, file: !2, type: !10)
!118 = !DILocalVariable(name: "y", arg: 2, scope: !115, file: !2, type: !10)
!119 = !DILocation(line: 67, scope: !115)
!120 = !DILocation(line: 69, scope: !115)
!121 = !DILocation(line: 0, scope: !115)
!122 = !DILocation(line: 72, scope: !115)
!123 = !DILocation(line: 73, scope: !115)
!124 = !DILocation(line: 75, scope: !115)
!125 = !DILocation(line: 77, scope: !115)
!126 = !DILocation(line: 78, scope: !115)
!127 = !DILocation(line: 79, scope: !115)
!128 = !DILocation(line: 81, scope: !115)
!129 = !DILocation(line: 394, scope: !21, inlinedAt: !130)
!130 = distinct !DILocation(line: 83, scope: !115)
!131 = !DILocation(line: 392, scope: !21, inlinedAt: !132)
!132 = distinct !DILocation(line: 84, scope: !115)
!133 = !DILocation(line: 396, scope: !21, inlinedAt: !130)
!134 = !DILocation(line: 85, scope: !115)
!135 = distinct !DISubprogram(name: "tcl.and", scope: !6, file: !5, type: !30, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !136)
!136 = !{!137, !138}
!137 = !DILocalVariable(name: "x", arg: 1, scope: !135, file: !2, type: !10)
!138 = !DILocalVariable(name: "y", arg: 2, scope: !135, file: !2, type: !10)
!139 = !DILocation(line: 116, scope: !135)
!140 = !DILocation(line: 118, scope: !135)
!141 = !DILocation(line: 0, scope: !135)
!142 = !DILocation(line: 121, scope: !135)
!143 = !DILocation(line: 122, scope: !135)
!144 = !DILocation(line: 125, scope: !135)
!145 = !DILocation(line: 394, scope: !21, inlinedAt: !146)
!146 = distinct !DILocation(line: 127, scope: !135)
!147 = !DILocation(line: 392, scope: !21, inlinedAt: !148)
!148 = distinct !DILocation(line: 128, scope: !135)
!149 = !DILocation(line: 396, scope: !21, inlinedAt: !146)
!150 = !DILocation(line: 129, scope: !135)
!151 = !DILocation(line: 132, scope: !135)
!152 = distinct !DISubprogram(name: "tcl.or", scope: !6, file: !5, type: !30, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !153)
!153 = !{!154, !155}
!154 = !DILocalVariable(name: "x", arg: 1, scope: !152, file: !2, type: !10)
!155 = !DILocalVariable(name: "y", arg: 2, scope: !152, file: !2, type: !10)
!156 = !DILocation(line: 116, scope: !152)
!157 = !DILocation(line: 118, scope: !152)
!158 = !DILocation(line: 0, scope: !152)
!159 = !DILocation(line: 121, scope: !152)
!160 = !DILocation(line: 122, scope: !152)
!161 = !DILocation(line: 125, scope: !152)
!162 = !DILocation(line: 394, scope: !21, inlinedAt: !163)
!163 = distinct !DILocation(line: 127, scope: !152)
!164 = !DILocation(line: 392, scope: !21, inlinedAt: !165)
!165 = distinct !DILocation(line: 128, scope: !152)
!166 = !DILocation(line: 396, scope: !21, inlinedAt: !163)
!167 = !DILocation(line: 129, scope: !152)
!168 = !DILocation(line: 132, scope: !152)
!169 = distinct !DISubprogram(name: "tcl.xor", scope: !6, file: !5, type: !30, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !170)
!170 = !{!171, !172}
!171 = !DILocalVariable(name: "x", arg: 1, scope: !169, file: !2, type: !10)
!172 = !DILocalVariable(name: "y", arg: 2, scope: !169, file: !2, type: !10)
!173 = !DILocation(line: 116, scope: !169)
!174 = !DILocation(line: 118, scope: !169)
!175 = !DILocation(line: 0, scope: !169)
!176 = !DILocation(line: 121, scope: !169)
!177 = !DILocation(line: 122, scope: !169)
!178 = !DILocation(line: 125, scope: !169)
!179 = !DILocation(line: 394, scope: !21, inlinedAt: !180)
!180 = distinct !DILocation(line: 127, scope: !169)
!181 = !DILocation(line: 392, scope: !21, inlinedAt: !182)
!182 = distinct !DILocation(line: 128, scope: !169)
!183 = !DILocation(line: 396, scope: !21, inlinedAt: !180)
!184 = !DILocation(line: 129, scope: !169)
!185 = !DILocation(line: 132, scope: !169)
!186 = distinct !DISubprogram(name: "tcl.shr", scope: !6, file: !5, type: !30, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !187)
!187 = !{!188, !189}
!188 = !DILocalVariable(name: "x", arg: 1, scope: !186, file: !2, type: !10)
!189 = !DILocalVariable(name: "y", arg: 2, scope: !186, file: !2, type: !10)
!190 = !DILocation(line: 116, scope: !186)
!191 = !DILocation(line: 118, scope: !186)
!192 = !DILocation(line: 0, scope: !186)
!193 = !DILocation(line: 121, scope: !186)
!194 = !DILocation(line: 122, scope: !186)
!195 = !DILocation(line: 125, scope: !186)
!196 = !DILocation(line: 394, scope: !21, inlinedAt: !197)
!197 = distinct !DILocation(line: 127, scope: !186)
!198 = !DILocation(line: 392, scope: !21, inlinedAt: !199)
!199 = distinct !DILocation(line: 128, scope: !186)
!200 = !DILocation(line: 396, scope: !21, inlinedAt: !197)
!201 = !DILocation(line: 129, scope: !186)
!202 = !DILocation(line: 132, scope: !186)
!203 = distinct !DISubprogram(name: "tcl.eq", scope: !6, file: !5, type: !204, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !206)
!204 = !DISubroutineType(types: !205)
!205 = !{!14, !10, !10}
!206 = !{!207, !208}
!207 = !DILocalVariable(name: "x", arg: 1, scope: !203, file: !2, type: !10)
!208 = !DILocalVariable(name: "y", arg: 2, scope: !203, file: !2, type: !10)
!209 = !DILocation(line: 156, scope: !203)
!210 = !DILocation(line: 158, scope: !203)
!211 = !DILocation(line: 0, scope: !203)
!212 = !DILocation(line: 161, scope: !203)
!213 = !DILocation(line: 162, scope: !203)
!214 = !DILocation(line: 394, scope: !21, inlinedAt: !215)
!215 = distinct !DILocation(line: 164, scope: !203)
!216 = !DILocation(line: 392, scope: !21, inlinedAt: !217)
!217 = distinct !DILocation(line: 165, scope: !203)
!218 = !DILocation(line: 396, scope: !21, inlinedAt: !215)
!219 = !DILocation(line: 166, scope: !203)
!220 = distinct !DISubprogram(name: "tcl.ne", scope: !6, file: !5, type: !204, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !221)
!221 = !{!222, !223}
!222 = !DILocalVariable(name: "x", arg: 1, scope: !220, file: !2, type: !10)
!223 = !DILocalVariable(name: "y", arg: 2, scope: !220, file: !2, type: !10)
!224 = !DILocation(line: 156, scope: !220)
!225 = !DILocation(line: 158, scope: !220)
!226 = !DILocation(line: 0, scope: !220)
!227 = !DILocation(line: 161, scope: !220)
!228 = !DILocation(line: 162, scope: !220)
!229 = !DILocation(line: 394, scope: !21, inlinedAt: !230)
!230 = distinct !DILocation(line: 164, scope: !220)
!231 = !DILocation(line: 392, scope: !21, inlinedAt: !232)
!232 = distinct !DILocation(line: 165, scope: !220)
!233 = !DILocation(line: 396, scope: !21, inlinedAt: !230)
!234 = !DILocation(line: 166, scope: !220)
!235 = distinct !DISubprogram(name: "tcl.gt", scope: !6, file: !5, type: !204, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !236)
!236 = !{!237, !238}
!237 = !DILocalVariable(name: "x", arg: 1, scope: !235, file: !2, type: !10)
!238 = !DILocalVariable(name: "y", arg: 2, scope: !235, file: !2, type: !10)
!239 = !DILocation(line: 156, scope: !235)
!240 = !DILocation(line: 158, scope: !235)
!241 = !DILocation(line: 0, scope: !235)
!242 = !DILocation(line: 161, scope: !235)
!243 = !DILocation(line: 162, scope: !235)
!244 = !DILocation(line: 394, scope: !21, inlinedAt: !245)
!245 = distinct !DILocation(line: 164, scope: !235)
!246 = !DILocation(line: 392, scope: !21, inlinedAt: !247)
!247 = distinct !DILocation(line: 165, scope: !235)
!248 = !DILocation(line: 396, scope: !21, inlinedAt: !245)
!249 = !DILocation(line: 166, scope: !235)
!250 = distinct !DISubprogram(name: "tcl.ge", scope: !6, file: !5, type: !204, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !251)
!251 = !{!252, !253}
!252 = !DILocalVariable(name: "x", arg: 1, scope: !250, file: !2, type: !10)
!253 = !DILocalVariable(name: "y", arg: 2, scope: !250, file: !2, type: !10)
!254 = !DILocation(line: 156, scope: !250)
!255 = !DILocation(line: 158, scope: !250)
!256 = !DILocation(line: 0, scope: !250)
!257 = !DILocation(line: 161, scope: !250)
!258 = !DILocation(line: 162, scope: !250)
!259 = !DILocation(line: 394, scope: !21, inlinedAt: !260)
!260 = distinct !DILocation(line: 164, scope: !250)
!261 = !DILocation(line: 392, scope: !21, inlinedAt: !262)
!262 = distinct !DILocation(line: 165, scope: !250)
!263 = !DILocation(line: 396, scope: !21, inlinedAt: !260)
!264 = !DILocation(line: 166, scope: !250)
!265 = distinct !DISubprogram(name: "tcl.lt", scope: !6, file: !5, type: !204, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !266)
!266 = !{!267, !268}
!267 = !DILocalVariable(name: "x", arg: 1, scope: !265, file: !2, type: !10)
!268 = !DILocalVariable(name: "y", arg: 2, scope: !265, file: !2, type: !10)
!269 = !DILocation(line: 156, scope: !265)
!270 = !DILocation(line: 158, scope: !265)
!271 = !DILocation(line: 0, scope: !265)
!272 = !DILocation(line: 161, scope: !265)
!273 = !DILocation(line: 162, scope: !265)
!274 = !DILocation(line: 394, scope: !21, inlinedAt: !275)
!275 = distinct !DILocation(line: 164, scope: !265)
!276 = !DILocation(line: 392, scope: !21, inlinedAt: !277)
!277 = distinct !DILocation(line: 165, scope: !265)
!278 = !DILocation(line: 396, scope: !21, inlinedAt: !275)
!279 = !DILocation(line: 166, scope: !265)
!280 = distinct !DISubprogram(name: "tcl.le", scope: !6, file: !5, type: !204, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !281)
!281 = !{!282, !283}
!282 = !DILocalVariable(name: "x", arg: 1, scope: !280, file: !2, type: !10)
!283 = !DILocalVariable(name: "y", arg: 2, scope: !280, file: !2, type: !10)
!284 = !DILocation(line: 156, scope: !280)
!285 = !DILocation(line: 158, scope: !280)
!286 = !DILocation(line: 0, scope: !280)
!287 = !DILocation(line: 161, scope: !280)
!288 = !DILocation(line: 162, scope: !280)
!289 = !DILocation(line: 394, scope: !21, inlinedAt: !290)
!290 = distinct !DILocation(line: 164, scope: !280)
!291 = !DILocation(line: 392, scope: !21, inlinedAt: !292)
!292 = distinct !DILocation(line: 165, scope: !280)
!293 = !DILocation(line: 396, scope: !21, inlinedAt: !290)
!294 = !DILocation(line: 166, scope: !280)
!295 = distinct !DISubprogram(name: "tcl.not", scope: !6, file: !5, type: !296, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !298)
!296 = !DISubroutineType(types: !297)
!297 = !{!10, !10}
!298 = !{!299}
!299 = !DILocalVariable(name: "x", arg: 1, scope: !295, file: !2, type: !10)
!300 = !DILocation(line: 254, scope: !295)
!301 = !DILocation(line: 256, scope: !295)
!302 = !DILocation(line: 258, scope: !295)
!303 = distinct !DISubprogram(name: "tcl.neg", scope: !6, file: !5, type: !296, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !304)
!304 = !{!305}
!305 = !DILocalVariable(name: "x", arg: 1, scope: !303, file: !2, type: !10)
!306 = !DILocation(line: 254, scope: !303)
!307 = !DILocation(line: 256, scope: !303)
!308 = !DILocation(line: 258, scope: !303)
!309 = distinct !DISubprogram(name: "tcl.land", scope: !6, file: !5, type: !204, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !310)
!310 = !{!311, !312}
!311 = !DILocalVariable(name: "x", arg: 1, scope: !309, file: !2, type: !10)
!312 = !DILocalVariable(name: "y", arg: 2, scope: !309, file: !2, type: !10)
!313 = !DILocation(line: 392, scope: !21, inlinedAt: !314)
!314 = distinct !DILocation(line: 291, scope: !309)
!315 = !DILocation(line: 392, scope: !21, inlinedAt: !316)
!316 = distinct !DILocation(line: 292, scope: !309)
!317 = !DILocation(line: 293, scope: !309)
!318 = distinct !DISubprogram(name: "tcl.land.double", scope: !6, file: !5, type: !319, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !322)
!319 = !DISubroutineType(types: !320)
!320 = !{!14, !321, !321}
!321 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!322 = !{!323, !324}
!323 = !DILocalVariable(name: "x", arg: 1, scope: !318, file: !2, type: !321)
!324 = !DILocalVariable(name: "y", arg: 2, scope: !318, file: !2, type: !321)
!325 = !DILocation(line: 307, scope: !318)
!326 = distinct !DISubprogram(name: "tcl.lor", scope: !6, file: !5, type: !204, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !327)
!327 = !{!328, !329}
!328 = !DILocalVariable(name: "x", arg: 1, scope: !326, file: !2, type: !10)
!329 = !DILocalVariable(name: "y", arg: 2, scope: !326, file: !2, type: !10)
!330 = !DILocation(line: 392, scope: !21, inlinedAt: !331)
!331 = distinct !DILocation(line: 322, scope: !326)
!332 = !DILocation(line: 392, scope: !21, inlinedAt: !333)
!333 = distinct !DILocation(line: 323, scope: !326)
!334 = !DILocation(line: 324, scope: !326)
!335 = distinct !DISubprogram(name: "tcl.lor.double", scope: !6, file: !5, type: !319, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !336)
!336 = !{!337, !338}
!337 = !DILocalVariable(name: "x", arg: 1, scope: !335, file: !2, type: !321)
!338 = !DILocalVariable(name: "y", arg: 2, scope: !335, file: !2, type: !321)
!339 = !DILocation(line: 338, scope: !335)
!340 = distinct !DISubprogram(name: "tcl.add.numeric", scope: !6, file: !5, type: !341, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !345)
!341 = !DISubroutineType(types: !342)
!342 = !{!343, !343, !343}
!343 = !DICompositeType(tag: DW_TAG_structure_type, name: "NUMERIC", scope: !12, file: !11, line: 1526, size: 40, elements: !344)
!344 = !{!14, !10, !321}
!345 = !{!346, !347}
!346 = !DILocalVariable(name: "left", arg: 1, scope: !340, file: !2, type: !343)
!347 = !DILocalVariable(name: "right", arg: 2, scope: !340, file: !2, type: !343)
!348 = !DILocation(line: 189, scope: !340)
!349 = !DILocation(line: 0, scope: !340)
!350 = !DILocation(line: 191, scope: !340)
!351 = !DILocation(line: 67, scope: !75, inlinedAt: !352)
!352 = distinct !DILocation(line: 191, scope: !340)
!353 = !DILocation(line: 69, scope: !75, inlinedAt: !352)
!354 = !DILocation(line: 0, scope: !75, inlinedAt: !352)
!355 = !DILocation(line: 72, scope: !75, inlinedAt: !352)
!356 = !DILocation(line: 73, scope: !75, inlinedAt: !352)
!357 = !DILocation(line: 75, scope: !75, inlinedAt: !352)
!358 = !DILocation(line: 77, scope: !75, inlinedAt: !352)
!359 = !DILocation(line: 78, scope: !75, inlinedAt: !352)
!360 = !DILocation(line: 79, scope: !75, inlinedAt: !352)
!361 = !DILocation(line: 81, scope: !75, inlinedAt: !352)
!362 = !DILocation(line: 394, scope: !21, inlinedAt: !363)
!363 = distinct !DILocation(line: 83, scope: !75, inlinedAt: !352)
!364 = !DILocation(line: 392, scope: !21, inlinedAt: !365)
!365 = distinct !DILocation(line: 84, scope: !75, inlinedAt: !352)
!366 = !DILocation(line: 396, scope: !21, inlinedAt: !363)
!367 = !DILocation(line: 85, scope: !75, inlinedAt: !352)
!368 = !DILocation(line: 392, scope: !21, inlinedAt: !369)
!369 = distinct !DILocation(line: 193, scope: !340)
!370 = !DILocation(line: 193, scope: !340)
!371 = !DILocation(line: 194, scope: !340)
!372 = !DILocation(line: 392, scope: !21, inlinedAt: !373)
!373 = distinct !DILocation(line: 194, scope: !340)
!374 = !DILocation(line: 195, scope: !340)
!375 = distinct !DISubprogram(name: "tcl.sub.numeric", scope: !6, file: !5, type: !341, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !376)
!376 = !{!377, !378}
!377 = !DILocalVariable(name: "left", arg: 1, scope: !375, file: !2, type: !343)
!378 = !DILocalVariable(name: "right", arg: 2, scope: !375, file: !2, type: !343)
!379 = !DILocation(line: 189, scope: !375)
!380 = !DILocation(line: 0, scope: !375)
!381 = !DILocation(line: 191, scope: !375)
!382 = !DILocation(line: 67, scope: !95, inlinedAt: !383)
!383 = distinct !DILocation(line: 191, scope: !375)
!384 = !DILocation(line: 69, scope: !95, inlinedAt: !383)
!385 = !DILocation(line: 0, scope: !95, inlinedAt: !383)
!386 = !DILocation(line: 72, scope: !95, inlinedAt: !383)
!387 = !DILocation(line: 73, scope: !95, inlinedAt: !383)
!388 = !DILocation(line: 75, scope: !95, inlinedAt: !383)
!389 = !DILocation(line: 77, scope: !95, inlinedAt: !383)
!390 = !DILocation(line: 78, scope: !95, inlinedAt: !383)
!391 = !DILocation(line: 79, scope: !95, inlinedAt: !383)
!392 = !DILocation(line: 81, scope: !95, inlinedAt: !383)
!393 = !DILocation(line: 394, scope: !21, inlinedAt: !394)
!394 = distinct !DILocation(line: 83, scope: !95, inlinedAt: !383)
!395 = !DILocation(line: 392, scope: !21, inlinedAt: !396)
!396 = distinct !DILocation(line: 84, scope: !95, inlinedAt: !383)
!397 = !DILocation(line: 396, scope: !21, inlinedAt: !394)
!398 = !DILocation(line: 85, scope: !95, inlinedAt: !383)
!399 = !DILocation(line: 392, scope: !21, inlinedAt: !400)
!400 = distinct !DILocation(line: 193, scope: !375)
!401 = !DILocation(line: 193, scope: !375)
!402 = !DILocation(line: 194, scope: !375)
!403 = !DILocation(line: 392, scope: !21, inlinedAt: !404)
!404 = distinct !DILocation(line: 194, scope: !375)
!405 = !DILocation(line: 195, scope: !375)
!406 = distinct !DISubprogram(name: "tcl.mult.numeric", scope: !6, file: !5, type: !341, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !407)
!407 = !{!408, !409}
!408 = !DILocalVariable(name: "left", arg: 1, scope: !406, file: !2, type: !343)
!409 = !DILocalVariable(name: "right", arg: 2, scope: !406, file: !2, type: !343)
!410 = !DILocation(line: 189, scope: !406)
!411 = !DILocation(line: 0, scope: !406)
!412 = !DILocation(line: 191, scope: !406)
!413 = !DILocation(line: 67, scope: !115, inlinedAt: !414)
!414 = distinct !DILocation(line: 191, scope: !406)
!415 = !DILocation(line: 69, scope: !115, inlinedAt: !414)
!416 = !DILocation(line: 0, scope: !115, inlinedAt: !414)
!417 = !DILocation(line: 72, scope: !115, inlinedAt: !414)
!418 = !DILocation(line: 73, scope: !115, inlinedAt: !414)
!419 = !DILocation(line: 75, scope: !115, inlinedAt: !414)
!420 = !DILocation(line: 77, scope: !115, inlinedAt: !414)
!421 = !DILocation(line: 78, scope: !115, inlinedAt: !414)
!422 = !DILocation(line: 79, scope: !115, inlinedAt: !414)
!423 = !DILocation(line: 81, scope: !115, inlinedAt: !414)
!424 = !DILocation(line: 394, scope: !21, inlinedAt: !425)
!425 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !414)
!426 = !DILocation(line: 392, scope: !21, inlinedAt: !427)
!427 = distinct !DILocation(line: 84, scope: !115, inlinedAt: !414)
!428 = !DILocation(line: 396, scope: !21, inlinedAt: !425)
!429 = !DILocation(line: 85, scope: !115, inlinedAt: !414)
!430 = !DILocation(line: 392, scope: !21, inlinedAt: !431)
!431 = distinct !DILocation(line: 193, scope: !406)
!432 = !DILocation(line: 193, scope: !406)
!433 = !DILocation(line: 194, scope: !406)
!434 = !DILocation(line: 392, scope: !21, inlinedAt: !435)
!435 = distinct !DILocation(line: 194, scope: !406)
!436 = !DILocation(line: 195, scope: !406)
!437 = distinct !DISubprogram(name: "tcl.eq.numeric", scope: !6, file: !5, type: !438, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !440)
!438 = !DISubroutineType(types: !439)
!439 = !{!14, !343, !343}
!440 = !{!441, !442}
!441 = !DILocalVariable(name: "left", arg: 1, scope: !437, file: !2, type: !343)
!442 = !DILocalVariable(name: "right", arg: 2, scope: !437, file: !2, type: !343)
!443 = !DILocation(line: 222, scope: !437)
!444 = !DILocation(line: 0, scope: !437)
!445 = !DILocation(line: 224, scope: !437)
!446 = !DILocation(line: 156, scope: !203, inlinedAt: !447)
!447 = distinct !DILocation(line: 224, scope: !437)
!448 = !DILocation(line: 158, scope: !203, inlinedAt: !447)
!449 = !DILocation(line: 0, scope: !203, inlinedAt: !447)
!450 = !DILocation(line: 161, scope: !203, inlinedAt: !447)
!451 = !DILocation(line: 162, scope: !203, inlinedAt: !447)
!452 = !DILocation(line: 394, scope: !21, inlinedAt: !453)
!453 = distinct !DILocation(line: 164, scope: !203, inlinedAt: !447)
!454 = !DILocation(line: 392, scope: !21, inlinedAt: !455)
!455 = distinct !DILocation(line: 165, scope: !203, inlinedAt: !447)
!456 = !DILocation(line: 396, scope: !21, inlinedAt: !453)
!457 = !DILocation(line: 166, scope: !203, inlinedAt: !447)
!458 = !DILocation(line: 392, scope: !21, inlinedAt: !459)
!459 = distinct !DILocation(line: 226, scope: !437)
!460 = !DILocation(line: 226, scope: !437)
!461 = !DILocation(line: 227, scope: !437)
!462 = !DILocation(line: 392, scope: !21, inlinedAt: !463)
!463 = distinct !DILocation(line: 227, scope: !437)
!464 = !DILocation(line: 228, scope: !437)
!465 = distinct !DISubprogram(name: "tcl.ne.numeric", scope: !6, file: !5, type: !438, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !466)
!466 = !{!467, !468}
!467 = !DILocalVariable(name: "left", arg: 1, scope: !465, file: !2, type: !343)
!468 = !DILocalVariable(name: "right", arg: 2, scope: !465, file: !2, type: !343)
!469 = !DILocation(line: 222, scope: !465)
!470 = !DILocation(line: 0, scope: !465)
!471 = !DILocation(line: 224, scope: !465)
!472 = !DILocation(line: 156, scope: !220, inlinedAt: !473)
!473 = distinct !DILocation(line: 224, scope: !465)
!474 = !DILocation(line: 158, scope: !220, inlinedAt: !473)
!475 = !DILocation(line: 0, scope: !220, inlinedAt: !473)
!476 = !DILocation(line: 161, scope: !220, inlinedAt: !473)
!477 = !DILocation(line: 162, scope: !220, inlinedAt: !473)
!478 = !DILocation(line: 394, scope: !21, inlinedAt: !479)
!479 = distinct !DILocation(line: 164, scope: !220, inlinedAt: !473)
!480 = !DILocation(line: 392, scope: !21, inlinedAt: !481)
!481 = distinct !DILocation(line: 165, scope: !220, inlinedAt: !473)
!482 = !DILocation(line: 396, scope: !21, inlinedAt: !479)
!483 = !DILocation(line: 166, scope: !220, inlinedAt: !473)
!484 = !DILocation(line: 392, scope: !21, inlinedAt: !485)
!485 = distinct !DILocation(line: 226, scope: !465)
!486 = !DILocation(line: 226, scope: !465)
!487 = !DILocation(line: 227, scope: !465)
!488 = !DILocation(line: 392, scope: !21, inlinedAt: !489)
!489 = distinct !DILocation(line: 227, scope: !465)
!490 = !DILocation(line: 228, scope: !465)
!491 = distinct !DISubprogram(name: "tcl.lt.numeric", scope: !6, file: !5, type: !438, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !492)
!492 = !{!493, !494}
!493 = !DILocalVariable(name: "left", arg: 1, scope: !491, file: !2, type: !343)
!494 = !DILocalVariable(name: "right", arg: 2, scope: !491, file: !2, type: !343)
!495 = !DILocation(line: 222, scope: !491)
!496 = !DILocation(line: 0, scope: !491)
!497 = !DILocation(line: 224, scope: !491)
!498 = !DILocation(line: 156, scope: !265, inlinedAt: !499)
!499 = distinct !DILocation(line: 224, scope: !491)
!500 = !DILocation(line: 158, scope: !265, inlinedAt: !499)
!501 = !DILocation(line: 0, scope: !265, inlinedAt: !499)
!502 = !DILocation(line: 161, scope: !265, inlinedAt: !499)
!503 = !DILocation(line: 162, scope: !265, inlinedAt: !499)
!504 = !DILocation(line: 394, scope: !21, inlinedAt: !505)
!505 = distinct !DILocation(line: 164, scope: !265, inlinedAt: !499)
!506 = !DILocation(line: 392, scope: !21, inlinedAt: !507)
!507 = distinct !DILocation(line: 165, scope: !265, inlinedAt: !499)
!508 = !DILocation(line: 396, scope: !21, inlinedAt: !505)
!509 = !DILocation(line: 166, scope: !265, inlinedAt: !499)
!510 = !DILocation(line: 392, scope: !21, inlinedAt: !511)
!511 = distinct !DILocation(line: 226, scope: !491)
!512 = !DILocation(line: 226, scope: !491)
!513 = !DILocation(line: 227, scope: !491)
!514 = !DILocation(line: 392, scope: !21, inlinedAt: !515)
!515 = distinct !DILocation(line: 227, scope: !491)
!516 = !DILocation(line: 228, scope: !491)
!517 = distinct !DISubprogram(name: "tcl.le.numeric", scope: !6, file: !5, type: !438, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !518)
!518 = !{!519, !520}
!519 = !DILocalVariable(name: "left", arg: 1, scope: !517, file: !2, type: !343)
!520 = !DILocalVariable(name: "right", arg: 2, scope: !517, file: !2, type: !343)
!521 = !DILocation(line: 222, scope: !517)
!522 = !DILocation(line: 0, scope: !517)
!523 = !DILocation(line: 224, scope: !517)
!524 = !DILocation(line: 156, scope: !280, inlinedAt: !525)
!525 = distinct !DILocation(line: 224, scope: !517)
!526 = !DILocation(line: 158, scope: !280, inlinedAt: !525)
!527 = !DILocation(line: 0, scope: !280, inlinedAt: !525)
!528 = !DILocation(line: 161, scope: !280, inlinedAt: !525)
!529 = !DILocation(line: 162, scope: !280, inlinedAt: !525)
!530 = !DILocation(line: 394, scope: !21, inlinedAt: !531)
!531 = distinct !DILocation(line: 164, scope: !280, inlinedAt: !525)
!532 = !DILocation(line: 392, scope: !21, inlinedAt: !533)
!533 = distinct !DILocation(line: 165, scope: !280, inlinedAt: !525)
!534 = !DILocation(line: 396, scope: !21, inlinedAt: !531)
!535 = !DILocation(line: 166, scope: !280, inlinedAt: !525)
!536 = !DILocation(line: 392, scope: !21, inlinedAt: !537)
!537 = distinct !DILocation(line: 226, scope: !517)
!538 = !DILocation(line: 226, scope: !517)
!539 = !DILocation(line: 227, scope: !517)
!540 = !DILocation(line: 392, scope: !21, inlinedAt: !541)
!541 = distinct !DILocation(line: 227, scope: !517)
!542 = !DILocation(line: 228, scope: !517)
!543 = distinct !DISubprogram(name: "tcl.gt.numeric", scope: !6, file: !5, type: !438, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !544)
!544 = !{!545, !546}
!545 = !DILocalVariable(name: "left", arg: 1, scope: !543, file: !2, type: !343)
!546 = !DILocalVariable(name: "right", arg: 2, scope: !543, file: !2, type: !343)
!547 = !DILocation(line: 222, scope: !543)
!548 = !DILocation(line: 0, scope: !543)
!549 = !DILocation(line: 224, scope: !543)
!550 = !DILocation(line: 156, scope: !235, inlinedAt: !551)
!551 = distinct !DILocation(line: 224, scope: !543)
!552 = !DILocation(line: 158, scope: !235, inlinedAt: !551)
!553 = !DILocation(line: 0, scope: !235, inlinedAt: !551)
!554 = !DILocation(line: 161, scope: !235, inlinedAt: !551)
!555 = !DILocation(line: 162, scope: !235, inlinedAt: !551)
!556 = !DILocation(line: 394, scope: !21, inlinedAt: !557)
!557 = distinct !DILocation(line: 164, scope: !235, inlinedAt: !551)
!558 = !DILocation(line: 392, scope: !21, inlinedAt: !559)
!559 = distinct !DILocation(line: 165, scope: !235, inlinedAt: !551)
!560 = !DILocation(line: 396, scope: !21, inlinedAt: !557)
!561 = !DILocation(line: 166, scope: !235, inlinedAt: !551)
!562 = !DILocation(line: 392, scope: !21, inlinedAt: !563)
!563 = distinct !DILocation(line: 226, scope: !543)
!564 = !DILocation(line: 226, scope: !543)
!565 = !DILocation(line: 227, scope: !543)
!566 = !DILocation(line: 392, scope: !21, inlinedAt: !567)
!567 = distinct !DILocation(line: 227, scope: !543)
!568 = !DILocation(line: 228, scope: !543)
!569 = distinct !DISubprogram(name: "tcl.ge.numeric", scope: !6, file: !5, type: !438, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !570)
!570 = !{!571, !572}
!571 = !DILocalVariable(name: "left", arg: 1, scope: !569, file: !2, type: !343)
!572 = !DILocalVariable(name: "right", arg: 2, scope: !569, file: !2, type: !343)
!573 = !DILocation(line: 222, scope: !569)
!574 = !DILocation(line: 0, scope: !569)
!575 = !DILocation(line: 224, scope: !569)
!576 = !DILocation(line: 156, scope: !250, inlinedAt: !577)
!577 = distinct !DILocation(line: 224, scope: !569)
!578 = !DILocation(line: 158, scope: !250, inlinedAt: !577)
!579 = !DILocation(line: 0, scope: !250, inlinedAt: !577)
!580 = !DILocation(line: 161, scope: !250, inlinedAt: !577)
!581 = !DILocation(line: 162, scope: !250, inlinedAt: !577)
!582 = !DILocation(line: 394, scope: !21, inlinedAt: !583)
!583 = distinct !DILocation(line: 164, scope: !250, inlinedAt: !577)
!584 = !DILocation(line: 392, scope: !21, inlinedAt: !585)
!585 = distinct !DILocation(line: 165, scope: !250, inlinedAt: !577)
!586 = !DILocation(line: 396, scope: !21, inlinedAt: !583)
!587 = !DILocation(line: 166, scope: !250, inlinedAt: !577)
!588 = !DILocation(line: 392, scope: !21, inlinedAt: !589)
!589 = distinct !DILocation(line: 226, scope: !569)
!590 = !DILocation(line: 226, scope: !569)
!591 = !DILocation(line: 227, scope: !569)
!592 = !DILocation(line: 392, scope: !21, inlinedAt: !593)
!593 = distinct !DILocation(line: 227, scope: !569)
!594 = !DILocation(line: 228, scope: !569)
!595 = distinct !DISubprogram(name: "tcl.land.numeric", scope: !6, file: !5, type: !438, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !596)
!596 = !{!597, !598}
!597 = !DILocalVariable(name: "left", arg: 1, scope: !595, file: !2, type: !343)
!598 = !DILocalVariable(name: "right", arg: 2, scope: !595, file: !2, type: !343)
!599 = !DILocation(line: 222, scope: !595)
!600 = !DILocation(line: 0, scope: !595)
!601 = !DILocation(line: 224, scope: !595)
!602 = !DILocation(line: 392, scope: !21, inlinedAt: !603)
!603 = distinct !DILocation(line: 291, scope: !309, inlinedAt: !604)
!604 = distinct !DILocation(line: 224, scope: !595)
!605 = !DILocation(line: 392, scope: !21, inlinedAt: !606)
!606 = distinct !DILocation(line: 292, scope: !309, inlinedAt: !604)
!607 = !DILocation(line: 293, scope: !309, inlinedAt: !604)
!608 = !DILocation(line: 392, scope: !21, inlinedAt: !609)
!609 = distinct !DILocation(line: 226, scope: !595)
!610 = !DILocation(line: 226, scope: !595)
!611 = !DILocation(line: 227, scope: !595)
!612 = !DILocation(line: 392, scope: !21, inlinedAt: !613)
!613 = distinct !DILocation(line: 227, scope: !595)
!614 = !DILocation(line: 307, scope: !318, inlinedAt: !615)
!615 = distinct !DILocation(line: 228, scope: !595)
!616 = !DILocation(line: 228, scope: !595)
!617 = distinct !DISubprogram(name: "tcl.lor.numeric", scope: !6, file: !5, type: !438, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !618)
!618 = !{!619, !620}
!619 = !DILocalVariable(name: "left", arg: 1, scope: !617, file: !2, type: !343)
!620 = !DILocalVariable(name: "right", arg: 2, scope: !617, file: !2, type: !343)
!621 = !DILocation(line: 222, scope: !617)
!622 = !DILocation(line: 0, scope: !617)
!623 = !DILocation(line: 224, scope: !617)
!624 = !DILocation(line: 392, scope: !21, inlinedAt: !625)
!625 = distinct !DILocation(line: 322, scope: !326, inlinedAt: !626)
!626 = distinct !DILocation(line: 224, scope: !617)
!627 = !DILocation(line: 392, scope: !21, inlinedAt: !628)
!628 = distinct !DILocation(line: 323, scope: !326, inlinedAt: !626)
!629 = !DILocation(line: 324, scope: !326, inlinedAt: !626)
!630 = !DILocation(line: 392, scope: !21, inlinedAt: !631)
!631 = distinct !DILocation(line: 226, scope: !617)
!632 = !DILocation(line: 226, scope: !617)
!633 = !DILocation(line: 227, scope: !617)
!634 = !DILocation(line: 392, scope: !21, inlinedAt: !635)
!635 = distinct !DILocation(line: 227, scope: !617)
!636 = !DILocation(line: 338, scope: !335, inlinedAt: !637)
!637 = distinct !DILocation(line: 228, scope: !617)
!638 = !DILocation(line: 228, scope: !617)
!639 = distinct !DISubprogram(name: "tcl.not.numeric", scope: !6, file: !5, type: !640, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !642)
!640 = !DISubroutineType(types: !641)
!641 = !{!14, !343}
!642 = !{!643}
!643 = !DILocalVariable(name: "value", arg: 1, scope: !639, file: !2, type: !343)
!644 = !DILocation(line: 661, scope: !639)
!645 = !DILocation(line: 663, scope: !639)
!646 = !DILocation(line: 156, scope: !203, inlinedAt: !647)
!647 = distinct !DILocation(line: 663, scope: !639)
!648 = !DILocation(line: 166, scope: !203, inlinedAt: !647)
!649 = !DILocation(line: 665, scope: !639)
!650 = distinct !DISubprogram(name: "tcl.not.numericOrBoolean", scope: !6, file: !5, type: !651, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !658)
!651 = !DISubroutineType(types: !652)
!652 = !{!14, !653}
!653 = !DICompositeType(tag: DW_TAG_structure_type, name: "NUMERIC_BOOLEAN", scope: !12, file: !11, line: 1531, size: 48, elements: !654)
!654 = !{!655, !10, !321, !14}
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "ClientData", scope: !12, file: !11, line: 690, baseType: !656)
!656 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !657, size: 64)
!657 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "void")
!658 = !{!659}
!659 = !DILocalVariable(name: "value", arg: 1, scope: !650, file: !2, type: !653)
!660 = !DILocation(line: 680, scope: !650)
!661 = !DILocation(line: 682, scope: !650)
!662 = !DILocation(line: 156, scope: !203, inlinedAt: !663)
!663 = distinct !DILocation(line: 682, scope: !650)
!664 = !DILocation(line: 166, scope: !203, inlinedAt: !663)
!665 = !DILocation(line: 684, scope: !650)
!666 = !DILocation(line: 686, scope: !650)
!667 = distinct !DISubprogram(name: "tcl.neg.numeric", scope: !6, file: !5, type: !668, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !670)
!668 = !DISubroutineType(types: !669)
!669 = !{!343, !343}
!670 = !{!671}
!671 = !DILocalVariable(name: "value", arg: 1, scope: !667, file: !2, type: !343)
!672 = !DILocation(line: 702, scope: !667)
!673 = !DILocation(line: 704, scope: !667)
!674 = !DILocation(line: 254, scope: !303, inlinedAt: !675)
!675 = distinct !DILocation(line: 705, scope: !667)
!676 = !DILocation(line: 256, scope: !303, inlinedAt: !675)
!677 = !DILocation(line: 258, scope: !303, inlinedAt: !675)
!678 = !DILocation(line: 705, scope: !667)
!679 = !DILocation(line: 707, scope: !667)
!680 = !DILocation(line: 708, scope: !667)
!681 = distinct !DISubprogram(name: "::tcl::mathfunc::bool", linkageName: "tcl ::tcl::mathfunc::bool 252", scope: !683, file: !682, type: !640, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !684)
!682 = !DIFile(filename: "tclapi.tcl", directory: "/opt/tclquadcode/codegen")
!683 = !DINamespace(name: "main", scope: null)
!684 = !{!685}
!685 = !DILocalVariable(name: "x", arg: 1, scope: !681, file: !682, type: !343)
!686 = !DILocation(line: 2464, scope: !681)
!687 = !DILocation(line: 156, scope: !220, inlinedAt: !688)
!688 = distinct !DILocation(line: 2464, scope: !681)
!689 = !DILocation(line: 166, scope: !220, inlinedAt: !688)
!690 = distinct !DISubprogram(name: "::tcl::mathfunc::bool", linkageName: "tcl ::tcl::mathfunc::bool 128", scope: !683, file: !682, type: !691, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !693)
!691 = !DISubroutineType(types: !692)
!692 = !{!14, !321}
!693 = !{!694}
!694 = !DILocalVariable(name: "x", arg: 1, scope: !690, file: !682, type: !321)
!695 = !DILocation(line: 2470, scope: !690)
!696 = distinct !DISubprogram(name: "::tcl::mathfunc::bool", linkageName: "tcl ::tcl::mathfunc::bool 12", scope: !683, file: !682, type: !697, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !699)
!697 = !DISubroutineType(types: !698)
!698 = !{!14, !14}
!699 = !{!700}
!700 = !DILocalVariable(name: "x", arg: 1, scope: !696, file: !682, type: !14)
!701 = !DILocation(line: 2473, scope: !696)
!702 = distinct !DISubprogram(name: "::tcl::mathfunc::double", linkageName: "tcl ::tcl::mathfunc::double 252", scope: !683, file: !682, type: !703, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !705)
!703 = !DISubroutineType(types: !704)
!704 = !{!321, !343}
!705 = !{!706}
!706 = !DILocalVariable(name: "x", arg: 1, scope: !702, file: !682, type: !343)
!707 = !DILocation(line: 2477, scope: !702)
!708 = !DILocation(line: 392, scope: !21, inlinedAt: !709)
!709 = distinct !DILocation(line: 2477, scope: !702)
!710 = distinct !DISubprogram(name: "::tcl::mathfunc::double", linkageName: "tcl ::tcl::mathfunc::double 60", scope: !683, file: !682, type: !711, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !713)
!711 = !DISubroutineType(types: !712)
!712 = !{!321, !10}
!713 = !{!714}
!714 = !DILocalVariable(name: "x", arg: 1, scope: !710, file: !682, type: !10)
!715 = !DILocation(line: 392, scope: !21, inlinedAt: !716)
!716 = distinct !DILocation(line: 2483, scope: !710)
!717 = !DILocation(line: 2483, scope: !710)
!718 = distinct !DISubprogram(name: "::tcl::mathfunc::double", linkageName: "tcl ::tcl::mathfunc::double 128", scope: !683, file: !682, type: !719, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !721)
!719 = !DISubroutineType(types: !720)
!720 = !{!321, !321}
!721 = !{!722}
!722 = !DILocalVariable(name: "x", arg: 1, scope: !718, file: !682, type: !321)
!723 = !DILocation(line: 2486, scope: !718)
!724 = distinct !DISubprogram(name: "::tcl::mathfunc::entier", linkageName: "tcl ::tcl::mathfunc::entier 252", scope: !683, file: !682, type: !725, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !727)
!725 = !DISubroutineType(types: !726)
!726 = !{!10, !343}
!727 = !{!728}
!728 = !DILocalVariable(name: "x", arg: 1, scope: !724, file: !682, type: !343)
!729 = !DILocation(line: 2490, scope: !724)
!730 = distinct !DISubprogram(name: "::tcl::mathfunc::entier", linkageName: "tcl ::tcl::mathfunc::entier 60", scope: !683, file: !682, type: !296, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !731)
!731 = !{!732}
!732 = !DILocalVariable(name: "x", arg: 1, scope: !730, file: !682, type: !10)
!733 = !DILocation(line: 2494, scope: !730)
!734 = distinct !DISubprogram(name: "::tcl::mathfunc::entier", linkageName: "tcl ::tcl::mathfunc::entier 128", scope: !683, file: !682, type: !735, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !737)
!735 = !DISubroutineType(types: !736)
!736 = !{!10, !321}
!737 = !{!738}
!738 = !DILocalVariable(name: "x", arg: 1, scope: !734, file: !682, type: !321)
!739 = !DILocation(line: 2497, scope: !734)
!740 = distinct !DISubprogram(name: "::tcl::mathfunc::int", linkageName: "tcl ::tcl::mathfunc::int 252", scope: !683, file: !682, type: !725, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !741)
!741 = !{!742}
!742 = !DILocalVariable(name: "x", arg: 1, scope: !740, file: !682, type: !343)
!743 = !DILocation(line: 2501, scope: !740)
!744 = !DILocation(line: 2506, scope: !740)
!745 = distinct !DISubprogram(name: "::tcl::mathfunc::int", linkageName: "tcl ::tcl::mathfunc::int 60", scope: !683, file: !682, type: !296, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !746)
!746 = !{!747}
!747 = !DILocalVariable(name: "x", arg: 1, scope: !745, file: !682, type: !10)
!748 = !DILocation(line: 2516, scope: !745)
!749 = distinct !DISubprogram(name: "::tcl::mathfunc::int", linkageName: "tcl ::tcl::mathfunc::int 128", scope: !683, file: !682, type: !735, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !750)
!750 = !{!751}
!751 = !DILocalVariable(name: "x", arg: 1, scope: !749, file: !682, type: !321)
!752 = !DILocation(line: 2521, scope: !749)
!753 = distinct !DISubprogram(name: "::tcl::mathfunc::wide", linkageName: "tcl ::tcl::mathfunc::wide 252", scope: !683, file: !682, type: !725, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !754)
!754 = !{!755}
!755 = !DILocalVariable(name: "x", arg: 1, scope: !753, file: !682, type: !343)
!756 = !DILocation(line: 2525, scope: !753)
!757 = distinct !DISubprogram(name: "::tcl::mathfunc::wide", linkageName: "tcl ::tcl::mathfunc::wide 128", scope: !683, file: !682, type: !735, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !758)
!758 = !{!759}
!759 = !DILocalVariable(name: "x", arg: 1, scope: !757, file: !682, type: !321)
!760 = !DILocation(line: 2529, scope: !757)
!761 = distinct !DISubprogram(name: "::tcl::mathfunc::wide", linkageName: "tcl ::tcl::mathfunc::wide 60", scope: !683, file: !682, type: !296, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !762)
!762 = !{!763}
!763 = !DILocalVariable(name: "x", arg: 1, scope: !761, file: !682, type: !10)
!764 = !DILocation(line: 2532, scope: !761)
!765 = distinct !DISubprogram(name: "::tcl::mathfunc::abs", linkageName: "tcl ::tcl::mathfunc::abs 252", scope: !683, file: !682, type: !668, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !766)
!766 = !{!767}
!767 = !DILocalVariable(name: "x", arg: 1, scope: !765, file: !682, type: !343)
!768 = !DILocation(line: 222, scope: !491, inlinedAt: !769)
!769 = distinct !DILocation(line: 2538, scope: !765)
!770 = !DILocation(line: 0, scope: !491, inlinedAt: !769)
!771 = !DILocation(line: 166, scope: !265, inlinedAt: !772)
!772 = distinct !DILocation(line: 224, scope: !491, inlinedAt: !769)
!773 = !DILocation(line: 2541, scope: !765)
!774 = !DILocation(line: 226, scope: !491, inlinedAt: !769)
!775 = !DILocation(line: 228, scope: !491, inlinedAt: !769)
!776 = !DILocation(line: 2542, scope: !765)
!777 = !DILocation(line: 254, scope: !303, inlinedAt: !778)
!778 = distinct !DILocation(line: 705, scope: !667, inlinedAt: !779)
!779 = distinct !DILocation(line: 2545, scope: !765)
!780 = !DILocation(line: 705, scope: !667, inlinedAt: !779)
!781 = !DILocation(line: 708, scope: !667, inlinedAt: !779)
!782 = distinct !DISubprogram(name: "::tcl::mathfunc::acos", linkageName: "tcl ::tcl::mathfunc::acos 128", scope: !683, file: !682, type: !719, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !783)
!783 = !{!784}
!784 = !DILocalVariable(name: "x", arg: 1, scope: !782, file: !682, type: !321)
!785 = !DILocation(line: 2555, scope: !782)
!786 = distinct !DISubprogram(name: "::tcl::mathfunc::asin", linkageName: "tcl ::tcl::mathfunc::asin 128", scope: !683, file: !682, type: !719, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !787)
!787 = !{!788}
!788 = !DILocalVariable(name: "x", arg: 1, scope: !786, file: !682, type: !321)
!789 = !DILocation(line: 2555, scope: !786)
!790 = distinct !DISubprogram(name: "::tcl::mathfunc::atan", linkageName: "tcl ::tcl::mathfunc::atan 128", scope: !683, file: !682, type: !719, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !791)
!791 = !{!792}
!792 = !DILocalVariable(name: "x", arg: 1, scope: !790, file: !682, type: !321)
!793 = !DILocation(line: 2555, scope: !790)
!794 = distinct !DISubprogram(name: "::tcl::mathfunc::cosh", linkageName: "tcl ::tcl::mathfunc::cosh 128", scope: !683, file: !682, type: !719, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !795)
!795 = !{!796}
!796 = !DILocalVariable(name: "x", arg: 1, scope: !794, file: !682, type: !321)
!797 = !DILocation(line: 2555, scope: !794)
!798 = distinct !DISubprogram(name: "::tcl::mathfunc::sinh", linkageName: "tcl ::tcl::mathfunc::sinh 128", scope: !683, file: !682, type: !719, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !799)
!799 = !{!800}
!800 = !DILocalVariable(name: "x", arg: 1, scope: !798, file: !682, type: !321)
!801 = !DILocation(line: 2555, scope: !798)
!802 = distinct !DISubprogram(name: "::tcl::mathfunc::tan", linkageName: "tcl ::tcl::mathfunc::tan 128", scope: !683, file: !682, type: !719, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !803)
!803 = !{!804}
!804 = !DILocalVariable(name: "x", arg: 1, scope: !802, file: !682, type: !321)
!805 = !DILocation(line: 2555, scope: !802)
!806 = distinct !DISubprogram(name: "::tcl::mathfunc::tanh", linkageName: "tcl ::tcl::mathfunc::tanh 128", scope: !683, file: !682, type: !719, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !807)
!807 = !{!808}
!808 = !DILocalVariable(name: "x", arg: 1, scope: !806, file: !682, type: !321)
!809 = !DILocation(line: 2555, scope: !806)
!810 = distinct !DISubprogram(name: "::tcl::mathfunc::ceil", linkageName: "tcl ::tcl::mathfunc::ceil 128", scope: !683, file: !682, type: !719, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !811)
!811 = !{!812}
!812 = !DILocalVariable(name: "x", arg: 1, scope: !810, file: !682, type: !321)
!813 = !DILocation(line: 2561, scope: !810)
!814 = distinct !DISubprogram(name: "::tcl::mathfunc::cos", linkageName: "tcl ::tcl::mathfunc::cos 128", scope: !683, file: !682, type: !719, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !815)
!815 = !{!816}
!816 = !DILocalVariable(name: "x", arg: 1, scope: !814, file: !682, type: !321)
!817 = !DILocation(line: 2561, scope: !814)
!818 = distinct !DISubprogram(name: "::tcl::mathfunc::exp", linkageName: "tcl ::tcl::mathfunc::exp 128", scope: !683, file: !682, type: !719, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !819)
!819 = !{!820}
!820 = !DILocalVariable(name: "x", arg: 1, scope: !818, file: !682, type: !321)
!821 = !DILocation(line: 2561, scope: !818)
!822 = distinct !DISubprogram(name: "::tcl::mathfunc::floor", linkageName: "tcl ::tcl::mathfunc::floor 128", scope: !683, file: !682, type: !719, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !823)
!823 = !{!824}
!824 = !DILocalVariable(name: "x", arg: 1, scope: !822, file: !682, type: !321)
!825 = !DILocation(line: 2561, scope: !822)
!826 = distinct !DISubprogram(name: "::tcl::mathfunc::log", linkageName: "tcl ::tcl::mathfunc::log 128", scope: !683, file: !682, type: !719, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !827)
!827 = !{!828}
!828 = !DILocalVariable(name: "x", arg: 1, scope: !826, file: !682, type: !321)
!829 = !DILocation(line: 2561, scope: !826)
!830 = distinct !DISubprogram(name: "::tcl::mathfunc::log10", linkageName: "tcl ::tcl::mathfunc::log10 128", scope: !683, file: !682, type: !719, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !831)
!831 = !{!832}
!832 = !DILocalVariable(name: "x", arg: 1, scope: !830, file: !682, type: !321)
!833 = !DILocation(line: 2561, scope: !830)
!834 = distinct !DISubprogram(name: "::tcl::mathfunc::sin", linkageName: "tcl ::tcl::mathfunc::sin 128", scope: !683, file: !682, type: !719, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !835)
!835 = !{!836}
!836 = !DILocalVariable(name: "x", arg: 1, scope: !834, file: !682, type: !321)
!837 = !DILocation(line: 2561, scope: !834)
!838 = distinct !DISubprogram(name: "::tcl::mathfunc::sqrt", linkageName: "tcl ::tcl::mathfunc::sqrt 128", scope: !683, file: !682, type: !719, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !839)
!839 = !{!840}
!840 = !DILocalVariable(name: "x", arg: 1, scope: !838, file: !682, type: !321)
!841 = !DILocation(line: 2561, scope: !838)
!842 = distinct !DISubprogram(name: "::tcl::mathfunc::atan2", linkageName: "tcl ::tcl::mathfunc::atan2 {128 128}", scope: !683, file: !682, type: !843, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !845)
!843 = !DISubroutineType(types: !844)
!844 = !{!321, !321, !321}
!845 = !{!846, !847}
!846 = !DILocalVariable(name: "y", arg: 1, scope: !842, file: !682, type: !321)
!847 = !DILocalVariable(name: "x", arg: 2, scope: !842, file: !682, type: !321)
!848 = !DILocation(line: 2568, scope: !842)
!849 = distinct !DISubprogram(name: "::tcl::mathfunc::hypot", linkageName: "tcl ::tcl::mathfunc::hypot {128 128}", scope: !683, file: !682, type: !843, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !850)
!850 = !{!851, !852}
!851 = !DILocalVariable(name: "y", arg: 1, scope: !849, file: !682, type: !321)
!852 = !DILocalVariable(name: "x", arg: 2, scope: !849, file: !682, type: !321)
!853 = !DILocation(line: 2568, scope: !849)
!854 = distinct !DISubprogram(name: "::tcl::mathfunc::pow", linkageName: "tcl ::tcl::mathfunc::pow {128 128}", scope: !683, file: !682, type: !843, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !855)
!855 = !{!856, !857}
!856 = !DILocalVariable(name: "y", arg: 1, scope: !854, file: !682, type: !321)
!857 = !DILocalVariable(name: "x", arg: 2, scope: !854, file: !682, type: !321)
!858 = !DILocation(line: 2568, scope: !854)
!859 = distinct !DISubprogram(name: "::tcl::mathfunc::round", linkageName: "tcl ::tcl::mathfunc::round 128", scope: !683, file: !682, type: !735, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !860)
!860 = !{!861}
!861 = !DILocalVariable(name: "x", arg: 1, scope: !859, file: !682, type: !321)
!862 = !DILocation(line: 2574, scope: !859)
!863 = distinct !DISubprogram(name: "Global_Init", scope: !864, file: !2, type: !865, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !991)
!864 = !DINamespace(name: "tcl.library", scope: null)
!865 = !DISubroutineType(types: !866)
!866 = !{!9, !867}
!867 = !DIDerivedType(tag: DW_TAG_typedef, name: "Interp*", scope: !12, file: !11, line: 1508, baseType: !868)
!868 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !869, size: 64)
!869 = !DICompositeType(tag: DW_TAG_structure_type, name: "Interp", scope: !12, file: !11, line: 1090, size: 1368, elements: !870)
!870 = !{!655, !655, !9, !871, !889, !892, !912, !655, !895, !9, !9, !913, !913, !941, !9, !913, !892, !655, !9, !9, !895, !655, !9, !9, !9, !947, !9, !917, !956, !904, !9, !15, !928, !912, !655, !904, !958, !904, !961, !928, !928, !9, !904, !904, !904, !904, !904, !9, !963, !971, !904, !973, !973, !9, !912, !912, !912, !912, !979, !9, !895, !895, !983, !655, !976, !655, !985, !989, !904, !904, !904, !904, !904, !904, !9}
!871 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !872, size: 64)
!872 = !DICompositeType(tag: DW_TAG_structure_type, name: "TclStubs", scope: !12, file: !11, line: 786, size: 5064, elements: !873)
!873 = !{!9, !874, !886}
!874 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !875, size: 64)
!875 = !DICompositeType(tag: DW_TAG_structure_type, name: "TclStubHooks", scope: !12, file: !11, line: 771, size: 24, elements: !876)
!876 = !{!655, !877, !655}
!877 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !878, size: 64)
!878 = !DICompositeType(tag: DW_TAG_structure_type, name: "TclIntStubs", scope: !12, file: !11, line: 766, size: 2032, elements: !879)
!879 = !{!9, !655, !880}
!880 = !DICompositeType(tag: DW_TAG_array_type, baseType: !881, size: 2016, align: 16128, elements: !884)
!881 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !882, size: 64)
!882 = !DISubroutineType(types: !883)
!883 = !{!9, !9}
!884 = !{!885}
!885 = !DISubrange(count: 252)
!886 = !DICompositeType(tag: DW_TAG_array_type, baseType: !881, size: 5048, align: 40384, elements: !887)
!887 = !{!888}
!888 = !DISubrange(count: 631)
!889 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !890, size: 64)
!890 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !891, size: 64)
!891 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed)
!892 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !893, size: 64)
!893 = !DICompositeType(tag: DW_TAG_structure_type, name: "Namespace", scope: !12, file: !11, line: 928, size: 472, elements: !894)
!894 = !{!655, !655, !655, !655, !655, !895, !15, !655, !9, !9, !9, !895, !900, !889, !9, !9, !9, !9, !655, !655, !655, !9, !902, !904, !9, !655, !655, !655}
!895 = !DICompositeType(tag: DW_TAG_structure_type, name: "HashTable", scope: !12, file: !11, line: 820, size: 88, elements: !896)
!896 = !{!655, !655, !9, !9, !9, !9, !9, !9, !655, !655, !897}
!897 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !898, size: 64)
!898 = !DICompositeType(tag: DW_TAG_structure_type, name: "HashKeyType", scope: !12, file: !11, line: 812, size: 48, elements: !899)
!899 = !{!9, !9, !655, !655, !655, !655}
!900 = !DICompositeType(tag: DW_TAG_structure_type, name: "VarHashTable", scope: !12, file: !11, line: 861, size: 96, elements: !901)
!901 = !{!895, !655}
!902 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !903, size: 64)
!903 = !DICompositeType(tag: DW_TAG_structure_type, name: "Ensemble", scope: !12, file: !11, line: 717, elements: !3)
!904 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !905, size: 64)
!905 = !DICompositeType(tag: DW_TAG_structure_type, name: "Tcl_Obj", scope: !12, file: !11, line: 751, size: 48, elements: !906)
!906 = !{!9, !655, !9, !907, !910}
!907 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !908, size: 64)
!908 = !DICompositeType(tag: DW_TAG_structure_type, name: "ObjType", scope: !12, file: !11, line: 740, size: 40, elements: !909)
!909 = !{!655, !655, !655, !655, !655}
!910 = !DICompositeType(tag: DW_TAG_structure_type, name: "InternalRepresentation", scope: !12, file: !11, line: 747, size: 16, elements: !911)
!911 = !{!655, !655}
!912 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !895, size: 64)
!913 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !914, size: 64)
!914 = !DICompositeType(tag: DW_TAG_structure_type, name: "CallFrame", scope: !12, file: !11, line: 1009, size: 112, elements: !915)
!915 = !{!892, !9, !9, !916, !655, !655, !9, !917, !931, !9, !932, !655, !935, !904}
!916 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !904, size: 64)
!917 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !918, size: 64)
!918 = !DICompositeType(tag: DW_TAG_structure_type, name: "Proc", scope: !12, file: !11, line: 985, size: 64, elements: !919)
!919 = !{!655, !9, !920, !904, !9, !9, !655, !655}
!920 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !921, size: 64)
!921 = !DICompositeType(tag: DW_TAG_structure_type, name: "Command", scope: !12, file: !11, line: 968, size: 120, elements: !922)
!922 = !{!923, !892, !9, !9, !655, !655, !655, !655, !655, !655, !655, !9, !926, !928, !655}
!923 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !924, size: 64)
!924 = !DICompositeType(tag: DW_TAG_structure_type, name: "HashEntry", scope: !12, file: !11, line: 833, size: 40, elements: !925)
!925 = !{!655, !912, !655, !655, !655}
!926 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !927, size: 64)
!927 = !DICompositeType(tag: DW_TAG_structure_type, name: "ImportRef", scope: !12, file: !11, line: 964, size: 16, elements: !911)
!928 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !929, size: 64)
!929 = !DICompositeType(tag: DW_TAG_structure_type, name: "Trace", scope: !12, file: !11, line: 882, size: 48, elements: !930)
!930 = !{!9, !655, !655, !655, !9, !655}
!931 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !900, size: 64)
!932 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !933, size: 64)
!933 = !DICompositeType(tag: DW_TAG_structure_type, name: "Var", scope: !12, file: !11, line: 865, size: 16, elements: !934)
!934 = !{!9, !904}
!935 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !936, size: 64)
!936 = !DICompositeType(tag: DW_TAG_structure_type, name: "LocalCache", scope: !12, file: !11, line: 1004, size: 24, elements: !937)
!937 = !{!9, !9, !938}
!938 = !DICompositeType(tag: DW_TAG_array_type, baseType: !904, size: 8, align: 64, elements: !939)
!939 = !{!940}
!940 = !DISubrange(count: 1)
!941 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !942, size: 64)
!942 = !DICompositeType(tag: DW_TAG_structure_type, name: "ActiveVarTrace", scope: !12, file: !11, line: 901, size: 24, elements: !943)
!943 = !{!932, !655, !944}
!944 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !945, size: 64)
!945 = !DICompositeType(tag: DW_TAG_structure_type, name: "VarTrace", scope: !12, file: !11, line: 895, size: 32, elements: !946)
!946 = !{!655, !655, !9, !655}
!947 = !DICompositeType(tag: DW_TAG_structure_type, name: "LiteralTable", scope: !12, file: !11, line: 851, size: 72, elements: !948)
!948 = !{!949, !953, !9, !9, !9, !9}
!949 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !950, size: 64)
!950 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !951, size: 64)
!951 = !DICompositeType(tag: DW_TAG_structure_type, name: "LiteralEntry", scope: !12, file: !11, line: 845, size: 32, elements: !952)
!952 = !{!655, !904, !9, !655}
!953 = !DICompositeType(tag: DW_TAG_array_type, baseType: !950, size: 32, align: 256, elements: !954)
!954 = !{!955}
!955 = !DISubrange(count: 4)
!956 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !957, size: 64)
!957 = !DICompositeType(tag: DW_TAG_structure_type, name: "ResolverScheme", scope: !12, file: !11, line: 912, size: 40, elements: !909)
!958 = !DICompositeType(tag: DW_TAG_array_type, baseType: !891, size: 201, align: 1664, elements: !959)
!959 = !{!960}
!960 = !DISubrange(count: 201)
!961 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !962, size: 64)
!962 = !DICompositeType(tag: DW_TAG_structure_type, name: "ThreadId", scope: !12, file: !11, line: 728, elements: !3)
!963 = !DICompositeType(tag: DW_TAG_structure_type, name: "LimitInfo", scope: !12, file: !11, line: 1071, size: 176, elements: !964)
!964 = !{!9, !9, !9, !9, !965, !9, !967, !965, !9, !969, !895}
!965 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !966, size: 64)
!966 = !DICompositeType(tag: DW_TAG_structure_type, name: "LimitHandler", scope: !12, file: !11, line: 720, elements: !3)
!967 = !DICompositeType(tag: DW_TAG_structure_type, name: "Time", scope: !12, file: !11, line: 805, size: 16, elements: !968)
!968 = !{!15, !15}
!969 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !970, size: 64)
!970 = !DICompositeType(tag: DW_TAG_structure_type, name: "TimerToken", scope: !12, file: !11, line: 729, elements: !3)
!971 = !DICompositeType(tag: DW_TAG_structure_type, name: "EnsembleInfo", scope: !12, file: !11, line: 1084, size: 24, elements: !972)
!972 = !{!916, !9, !9}
!973 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !974, size: 64)
!974 = !DICompositeType(tag: DW_TAG_structure_type, name: "CmdFrame", scope: !12, file: !11, line: 1030, size: 96, elements: !975)
!975 = !{!9, !9, !976, !9, !913, !655, !978, !904, !655, !9, !655}
!976 = !DIDerivedType(tag: DW_TAG_typedef, name: "int*", scope: !12, file: !11, line: 696, baseType: !977)
!977 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64)
!978 = !DICompositeType(tag: DW_TAG_structure_type, name: "CmdFrameLocation", scope: !12, file: !11, line: 1026, size: 16, elements: !911)
!979 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !980, size: 64)
!980 = !DICompositeType(tag: DW_TAG_structure_type, name: "ContLineLoc", scope: !12, file: !11, line: 1051, size: 16, elements: !981)
!981 = !{!9, !982}
!982 = !DICompositeType(tag: DW_TAG_array_type, baseType: !9, size: 4, align: 64, elements: !939)
!983 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !984, size: 64)
!984 = !DICompositeType(tag: DW_TAG_structure_type, name: "AllocCache", scope: !12, file: !11, line: 711, elements: !3)
!985 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !986, size: 64)
!986 = !DICompositeType(tag: DW_TAG_structure_type, name: "NRECallback", scope: !12, file: !11, line: 1066, size: 48, elements: !987)
!987 = !{!655, !988, !655}
!988 = !DICompositeType(tag: DW_TAG_array_type, baseType: !890, size: 32, align: 256, elements: !954)
!989 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !990, size: 64)
!990 = !DICompositeType(tag: DW_TAG_structure_type, name: "AsyncHandler", scope: !12, file: !11, line: 712, elements: !3)
!991 = !{!992}
!992 = !DILocalVariable(name: "interp", arg: 1, scope: !863, file: !2, type: !867)
!993 = !DILocation(line: 3, scope: !863)
!994 = !DILocation(line: 385, scope: !995, inlinedAt: !1001)
!995 = distinct !DISubprogram(name: "AssertZeroRefCount", scope: !864, file: !682, type: !996, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !999)
!996 = !DISubroutineType(types: !997)
!997 = !{!657, !998}
!998 = !DIDerivedType(tag: DW_TAG_typedef, name: "Tcl_Obj*", scope: !12, file: !11, line: 1505, baseType: !904)
!999 = !{!1000}
!1000 = !DILocalVariable(name: "objPtr", arg: 1, scope: !995, file: !2, type: !998)
!1001 = distinct !DILocation(line: 3, scope: !863)
!1002 = !DILocation(line: 386, scope: !995, inlinedAt: !1001)
!1003 = !DILocation(line: 39, scope: !1004, inlinedAt: !1008)
!1004 = distinct !DISubprogram(name: "Tcl_IncrRefCount", scope: !864, file: !1005, type: !996, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1006)
!1005 = !DIFile(filename: "macros.tcl", directory: "/opt/tclquadcode/codegen")
!1006 = !{!1007}
!1007 = !DILocalVariable(name: "objPtr", arg: 1, scope: !1004, file: !2, type: !998)
!1008 = distinct !DILocation(line: 3, scope: !863)
!1009 = !DILocation(line: 4, scope: !863)
!1010 = !DILocation(line: 5, scope: !863)
!1011 = !DILocation(line: 6, scope: !863)
!1012 = !DILocation(line: 383, scope: !995)
!1013 = !DILocation(line: 385, scope: !995)
!1014 = !DILocation(line: 386, scope: !995)
!1015 = !DILocation(line: 392, scope: !995)
!1016 = !DILocation(line: 394, scope: !995)
!1017 = !DILocation(line: 38, scope: !1004)
!1018 = !DILocation(line: 39, scope: !1004)
!1019 = !DILocation(line: 40, scope: !1004)
!1020 = distinct !DISubprogram(name: "Tcl_DecrRefCount", scope: !864, file: !1005, type: !996, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1021)
!1021 = !{!1022}
!1022 = !DILocalVariable(name: "objPtr", arg: 1, scope: !1020, file: !2, type: !998)
!1023 = !DILocation(line: 71, scope: !1020)
!1024 = !DILocation(line: 72, scope: !1020)
!1025 = !DILocation(line: 73, scope: !1020)
!1026 = !DILocation(line: 75, scope: !1020)
!1027 = !DILocation(line: 76, scope: !1020)
!1028 = !DILocation(line: 77, scope: !1020)
!1029 = !DILocation(line: 79, scope: !1020)
!1030 = !DILocation(line: 80, scope: !1020)
!1031 = distinct !DISubprogram(name: "TclFreeIntRep", scope: !864, file: !1005, type: !996, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1032)
!1032 = !{!1033}
!1033 = !DILocalVariable(name: "objPtr", arg: 1, scope: !1031, file: !2, type: !998)
!1034 = !DILocation(line: 109, scope: !1031)
!1035 = !DILocation(line: 110, scope: !1031)
!1036 = !DILocation(line: 111, scope: !1031)
!1037 = !DILocation(line: 113, scope: !1031)
!1038 = !DILocation(line: 114, scope: !1031)
!1039 = !DILocation(line: 116, scope: !1031)
!1040 = !DILocation(line: 117, scope: !1031)
!1041 = !DILocation(line: 119, scope: !1031)
!1042 = !DILocation(line: 120, scope: !1031)
!1043 = !DILocation(line: 122, scope: !1031)
!1044 = distinct !DISubprogram(name: "TclInvalidateStringRep", scope: !864, file: !1005, type: !996, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1045)
!1045 = !{!1046}
!1046 = !DILocalVariable(name: "objPtr", arg: 1, scope: !1044, file: !2, type: !998)
!1047 = !DILocation(line: 152, scope: !1044)
!1048 = !DILocation(line: 158, scope: !1044)
!1049 = !DILocation(line: 154, scope: !1044)
!1050 = !DILocation(line: 156, scope: !1044)
!1051 = !{i64 8}
!1052 = !DILocation(line: 159, scope: !1044)
!1053 = !DILocation(line: 160, scope: !1044)
!1054 = !DILocation(line: 167, scope: !1044)
!1055 = !DILocation(line: 169, scope: !1044)
!1056 = !DILocation(line: 170, scope: !1044)
!1057 = !DILocation(line: 172, scope: !1044)
!1058 = distinct !DISubprogram(name: "tcl.obj.constant", scope: !864, file: !1005, type: !1059, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1063)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!998, !1061, !655, !9}
!1061 = !DIDerivedType(tag: DW_TAG_typedef, name: "Tcl_Obj**", scope: !12, file: !11, line: 1506, baseType: !1062)
!1062 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !998, size: 64)
!1063 = !{!1064, !1065, !1066}
!1064 = !DILocalVariable(name: "varPtr", arg: 1, scope: !1058, file: !2, type: !1061)
!1065 = !DILocalVariable(name: "stringPtr", arg: 2, scope: !1058, file: !2, type: !655)
!1066 = !DILocalVariable(name: "length", arg: 3, scope: !1058, file: !2, type: !9)
!1067 = !DILocation(line: 512, scope: !1058)
!1068 = !DILocation(line: 513, scope: !1058)
!1069 = !DILocation(line: 515, scope: !1058)
!1070 = !DILocation(line: 517, scope: !1058)
!1071 = !DILocation(line: 385, scope: !995, inlinedAt: !1072)
!1072 = distinct !DILocation(line: 517, scope: !1058)
!1073 = !DILocation(line: 386, scope: !995, inlinedAt: !1072)
!1074 = !DILocation(line: 39, scope: !1004, inlinedAt: !1075)
!1075 = distinct !DILocation(line: 519, scope: !1058)
!1076 = !DILocation(line: 521, scope: !1058)
!1077 = !DILocation(line: 522, scope: !1058)
!1078 = distinct !DISubprogram(name: "bootstrap.JumpTable.constant", scope: !864, file: !1005, type: !1079, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1082)
!1079 = !DISubroutineType(types: !1080)
!1080 = !{!657, !1081, !998}
!1081 = !DIDerivedType(tag: DW_TAG_typedef, name: "HashTable*", scope: !12, file: !11, line: 1509, baseType: !912)
!1082 = !{!1083, !1084}
!1083 = !DILocalVariable(name: "hashPtr", arg: 1, scope: !1078, file: !2, type: !1081)
!1084 = !DILocalVariable(name: "objPtr", arg: 2, scope: !1078, file: !2, type: !998)
!1085 = !DILocation(line: 591, scope: !1078)
!1086 = !DILocation(line: 592, scope: !1078)
!1087 = !DILocation(line: 593, scope: !1078)
!1088 = !DILocation(line: 594, scope: !1078)
!1089 = !DILocation(line: 595, scope: !1078)
!1090 = !DILocation(line: 596, scope: !1078)
!1091 = !DILocation(line: 597, scope: !1078)
!1092 = !DILocation(line: 598, scope: !1078)
!1093 = !DILocation(line: 0, scope: !1078)
!1094 = !DILocation(line: 607, scope: !1078)
!1095 = !DILocation(line: 600, scope: !1078)
!1096 = !DILocation(line: 601, scope: !1078)
!1097 = !DILocation(line: 602, scope: !1078)
!1098 = !DILocation(line: 603, scope: !1078)
!1099 = !DILocation(line: 604, scope: !1078)
!1100 = !DILocation(line: 605, scope: !1078)
!1101 = !DILocation(line: 606, scope: !1078)
!1102 = !DILocation(line: 610, scope: !1078)
!1103 = !DILocation(line: 611, scope: !1078)
!1104 = distinct !DISubprogram(name: "writeline", scope: !864, file: !1005, type: !1105, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1107)
!1105 = !DISubroutineType(types: !1106)
!1106 = !{!657, !655, !9}
!1107 = !{!1108, !1109}
!1108 = !DILocalVariable(name: "string", arg: 1, scope: !1104, file: !2, type: !655)
!1109 = !DILocalVariable(name: "length", arg: 2, scope: !1104, file: !2, type: !9)
!1110 = !DILocation(line: 666, scope: !1104)
!1111 = !DILocation(line: 675, scope: !1104)
!1112 = distinct !DISubprogram(name: "writeint", scope: !864, file: !1005, type: !1113, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1115)
!1113 = !DISubroutineType(types: !1114)
!1114 = !{!657, !9}
!1115 = !{!1116}
!1116 = !DILocalVariable(name: "n", arg: 1, scope: !1112, file: !2, type: !9)
!1117 = !DILocation(line: 733, scope: !1112)
!1118 = !DILocation(line: 385, scope: !995, inlinedAt: !1119)
!1119 = distinct !DILocation(line: 733, scope: !1112)
!1120 = !DILocation(line: 386, scope: !995, inlinedAt: !1119)
!1121 = !DILocation(line: 734, scope: !1112)
!1122 = !DILocation(line: 735, scope: !1112)
!1123 = !DILocation(line: 72, scope: !1020, inlinedAt: !1124)
!1124 = distinct !DILocation(line: 736, scope: !1112)
!1125 = !DILocation(line: 73, scope: !1020, inlinedAt: !1124)
!1126 = !DILocation(line: 75, scope: !1020, inlinedAt: !1124)
!1127 = !DILocation(line: 76, scope: !1020, inlinedAt: !1124)
!1128 = !DILocation(line: 77, scope: !1020, inlinedAt: !1124)
!1129 = !DILocation(line: 79, scope: !1020, inlinedAt: !1124)
!1130 = !DILocation(line: 80, scope: !1020, inlinedAt: !1124)
!1131 = !DILocation(line: 737, scope: !1112)
!1132 = !DILocation(line: 738, scope: !1112)
!1133 = distinct !DISubprogram(name: "writeptr", scope: !864, file: !1005, type: !1134, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1136)
!1134 = !DISubroutineType(types: !1135)
!1135 = !{!657, !655}
!1136 = !{!1137}
!1137 = !DILocalVariable(name: "n", arg: 1, scope: !1133, file: !2, type: !655)
!1138 = !DILocation(line: 803, scope: !1133)
!1139 = !DILocation(line: 804, scope: !1133)
!1140 = !DILocation(line: 385, scope: !995, inlinedAt: !1141)
!1141 = distinct !DILocation(line: 804, scope: !1133)
!1142 = !DILocation(line: 386, scope: !995, inlinedAt: !1141)
!1143 = !DILocation(line: 805, scope: !1133)
!1144 = !DILocation(line: 806, scope: !1133)
!1145 = !DILocation(line: 72, scope: !1020, inlinedAt: !1146)
!1146 = distinct !DILocation(line: 807, scope: !1133)
!1147 = !DILocation(line: 73, scope: !1020, inlinedAt: !1146)
!1148 = !DILocation(line: 75, scope: !1020, inlinedAt: !1146)
!1149 = !DILocation(line: 76, scope: !1020, inlinedAt: !1146)
!1150 = !DILocation(line: 77, scope: !1020, inlinedAt: !1146)
!1151 = !DILocation(line: 79, scope: !1020, inlinedAt: !1146)
!1152 = !DILocation(line: 80, scope: !1020, inlinedAt: !1146)
!1153 = !DILocation(line: 808, scope: !1133)
!1154 = !DILocation(line: 809, scope: !1133)
!1155 = distinct !DISubprogram(name: "stork", scope: !864, file: !1005, type: !996, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1156)
!1156 = !{!1157}
!1157 = !DILocalVariable(name: "obj", arg: 1, scope: !1155, file: !2, type: !998)
!1158 = !DILocation(line: 859, scope: !1155)
!1159 = !DILocation(line: 861, scope: !1155)
!1160 = !DILocation(line: 863, scope: !1155)
!1161 = !DILocation(line: 864, scope: !1155)
!1162 = distinct !DISubprogram(name: "thunk.result.ZEROONE", scope: !864, file: !682, type: !1163, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1165)
!1163 = !DISubroutineType(types: !1164)
!1164 = !{!657, !867, !14}
!1165 = !{!1166, !1167}
!1166 = !DILocalVariable(name: "interp", arg: 1, scope: !1162, file: !2, type: !867)
!1167 = !DILocalVariable(name: "result", arg: 2, scope: !1162, file: !2, type: !14)
!1168 = !DILocation(line: 2611, scope: !1162)
!1169 = !DILocation(line: 385, scope: !995, inlinedAt: !1170)
!1170 = distinct !DILocation(line: 2611, scope: !1162)
!1171 = !DILocation(line: 386, scope: !995, inlinedAt: !1170)
!1172 = !DILocation(line: 2612, scope: !1162)
!1173 = distinct !DISubprogram(name: "thunk.result.INT BOOLEAN", scope: !864, file: !682, type: !1174, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1176)
!1174 = !DISubroutineType(types: !1175)
!1175 = !{!657, !867, !10}
!1176 = !{!1177, !1178}
!1177 = !DILocalVariable(name: "interp", arg: 1, scope: !1173, file: !2, type: !867)
!1178 = !DILocalVariable(name: "result", arg: 2, scope: !1173, file: !2, type: !10)
!1179 = !DILocation(line: 371, scope: !4, inlinedAt: !1180)
!1180 = distinct !DILocation(line: 2626, scope: !1173)
!1181 = !DILocation(line: 2626, scope: !1173)
!1182 = !DILocation(line: 385, scope: !995, inlinedAt: !1183)
!1183 = distinct !DILocation(line: 2626, scope: !1173)
!1184 = !DILocation(line: 386, scope: !995, inlinedAt: !1183)
!1185 = !DILocation(line: 2627, scope: !1173)
!1186 = distinct !DISubprogram(name: "thunk.result.INT", scope: !864, file: !682, type: !1174, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1187)
!1187 = !{!1188, !1189}
!1188 = !DILocalVariable(name: "interp", arg: 1, scope: !1186, file: !2, type: !867)
!1189 = !DILocalVariable(name: "result", arg: 2, scope: !1186, file: !2, type: !10)
!1190 = !DILocation(line: 2642, scope: !1186)
!1191 = !DILocation(line: 2644, scope: !1186)
!1192 = !DILocation(line: 2645, scope: !1186)
!1193 = !DILocation(line: 2647, scope: !1186)
!1194 = !DILocation(line: 2648, scope: !1186)
!1195 = !DILocation(line: 0, scope: !1186)
!1196 = !DILocation(line: 2651, scope: !1186)
!1197 = !DILocation(line: 2652, scope: !1186)
!1198 = distinct !DISubprogram(name: "thunk.result.DOUBLE", scope: !864, file: !682, type: !1199, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1201)
!1199 = !DISubroutineType(types: !1200)
!1200 = !{!657, !867, !321}
!1201 = !{!1202, !1203}
!1202 = !DILocalVariable(name: "interp", arg: 1, scope: !1198, file: !2, type: !867)
!1203 = !DILocalVariable(name: "result", arg: 2, scope: !1198, file: !2, type: !321)
!1204 = !DILocation(line: 2665, scope: !1198)
!1205 = !DILocation(line: 385, scope: !995, inlinedAt: !1206)
!1206 = distinct !DILocation(line: 2665, scope: !1198)
!1207 = !DILocation(line: 386, scope: !995, inlinedAt: !1206)
!1208 = !DILocation(line: 2666, scope: !1198)
!1209 = distinct !DISubprogram(name: "thunk.result.NUMERIC", scope: !864, file: !682, type: !1210, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1212)
!1210 = !DISubroutineType(types: !1211)
!1211 = !{!657, !867, !343}
!1212 = !{!1213, !1214}
!1213 = !DILocalVariable(name: "interp", arg: 1, scope: !1209, file: !2, type: !867)
!1214 = !DILocalVariable(name: "result", arg: 2, scope: !1209, file: !2, type: !343)
!1215 = !DILocation(line: 2679, scope: !1209)
!1216 = !DILocation(line: 2681, scope: !1209)
!1217 = !DILocation(line: 2665, scope: !1198, inlinedAt: !1218)
!1218 = distinct !DILocation(line: 2682, scope: !1209)
!1219 = !DILocation(line: 385, scope: !995, inlinedAt: !1220)
!1220 = distinct !DILocation(line: 2665, scope: !1198, inlinedAt: !1218)
!1221 = !DILocation(line: 386, scope: !995, inlinedAt: !1220)
!1222 = !DILocation(line: 2683, scope: !1209)
!1223 = !DILocation(line: 2685, scope: !1209)
!1224 = !DILocation(line: 2642, scope: !1186, inlinedAt: !1225)
!1225 = distinct !DILocation(line: 2686, scope: !1209)
!1226 = !DILocation(line: 2644, scope: !1186, inlinedAt: !1225)
!1227 = !DILocation(line: 2645, scope: !1186, inlinedAt: !1225)
!1228 = !DILocation(line: 2647, scope: !1186, inlinedAt: !1225)
!1229 = !DILocation(line: 2648, scope: !1186, inlinedAt: !1225)
!1230 = !DILocation(line: 0, scope: !1186, inlinedAt: !1225)
!1231 = !DILocation(line: 2651, scope: !1186, inlinedAt: !1225)
!1232 = !DILocation(line: 2687, scope: !1209)
!1233 = distinct !DISubprogram(name: "thunk.result.STRING", scope: !864, file: !682, type: !1234, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1236)
!1234 = !DISubroutineType(types: !1235)
!1235 = !{!657, !867, !998}
!1236 = !{!1237, !1238}
!1237 = !DILocalVariable(name: "interp", arg: 1, scope: !1233, file: !2, type: !867)
!1238 = !DILocalVariable(name: "result", arg: 2, scope: !1233, file: !2, type: !998)
!1239 = !DILocation(line: 2700, scope: !1233)
!1240 = !DILocation(line: 71, scope: !1020, inlinedAt: !1241)
!1241 = distinct !DILocation(line: 2701, scope: !1233)
!1242 = !DILocation(line: 72, scope: !1020, inlinedAt: !1241)
!1243 = !DILocation(line: 73, scope: !1020, inlinedAt: !1241)
!1244 = !DILocation(line: 75, scope: !1020, inlinedAt: !1241)
!1245 = !DILocation(line: 76, scope: !1020, inlinedAt: !1241)
!1246 = !DILocation(line: 77, scope: !1020, inlinedAt: !1241)
!1247 = !DILocation(line: 79, scope: !1020, inlinedAt: !1241)
!1248 = !DILocation(line: 80, scope: !1020, inlinedAt: !1241)
!1249 = !DILocation(line: 2702, scope: !1233)
!1250 = distinct !DISubprogram(name: "thunk.result.EMPTY", scope: !864, file: !682, type: !1234, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1251)
!1251 = !{!1252, !1253}
!1252 = !DILocalVariable(name: "interp", arg: 1, scope: !1250, file: !2, type: !867)
!1253 = !DILocalVariable(name: "result", arg: 2, scope: !1250, file: !2, type: !998)
!1254 = !DILocation(line: 2717, scope: !1250)
!1255 = !DILocation(line: 385, scope: !995, inlinedAt: !1256)
!1256 = distinct !DILocation(line: 2717, scope: !1250)
!1257 = !DILocation(line: 386, scope: !995, inlinedAt: !1256)
!1258 = !DILocation(line: 2718, scope: !1250)
!1259 = distinct !DISubprogram(name: "thunk.arg.default", scope: !864, file: !682, type: !1260, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1262)
!1260 = !DISubroutineType(types: !1261)
!1261 = !{!998, !9, !9, !1061, !998}
!1262 = !{!1263, !1264, !1265, !1266}
!1263 = !DILocalVariable(name: "index", arg: 1, scope: !1259, file: !2, type: !9)
!1264 = !DILocalVariable(name: "argc", arg: 2, scope: !1259, file: !2, type: !9)
!1265 = !DILocalVariable(name: "argv", arg: 3, scope: !1259, file: !2, type: !1061)
!1266 = !DILocalVariable(name: "default", arg: 4, scope: !1259, file: !2, type: !998)
!1267 = !DILocation(line: 2732, scope: !1259)
!1268 = !DILocation(line: 2734, scope: !1259)
!1269 = !DILocation(line: 2736, scope: !1259)
!1270 = !DILocation(line: 2737, scope: !1259)
!1271 = !DILocation(line: 2738, scope: !1259)
!1272 = distinct !DISubprogram(name: "tcl.print.string", scope: !864, file: !1273, type: !1274, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1276)
!1273 = !DIFile(filename: "stdlib.tcl", directory: "/opt/tclquadcode/codegen")
!1274 = !DISubroutineType(types: !1275)
!1275 = !{!657, !9, !998}
!1276 = !{!1277, !1278}
!1277 = !DILocalVariable(name: "chanID", arg: 1, scope: !1272, file: !2, type: !9)
!1278 = !DILocalVariable(name: "str", arg: 2, scope: !1272, file: !2, type: !998)
!1279 = !DILocation(line: 3891, scope: !1272)
!1280 = !DILocation(line: 3892, scope: !1272)
!1281 = !DILocation(line: 71, scope: !1020, inlinedAt: !1282)
!1282 = distinct !DILocation(line: 3893, scope: !1272)
!1283 = !DILocation(line: 72, scope: !1020, inlinedAt: !1282)
!1284 = !DILocation(line: 73, scope: !1020, inlinedAt: !1282)
!1285 = !DILocation(line: 75, scope: !1020, inlinedAt: !1282)
!1286 = !DILocation(line: 76, scope: !1020, inlinedAt: !1282)
!1287 = !DILocation(line: 77, scope: !1020, inlinedAt: !1282)
!1288 = !DILocation(line: 79, scope: !1020, inlinedAt: !1282)
!1289 = !DILocation(line: 80, scope: !1020, inlinedAt: !1282)
!1290 = !DILocation(line: 3894, scope: !1272)
!1291 = distinct !DISubprogram(name: "tcl.stringify.double", scope: !864, file: !5, type: !1292, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1294)
!1292 = !DISubroutineType(types: !1293)
!1293 = !{!998, !321}
!1294 = !{!1295}
!1295 = !DILocalVariable(name: "value", arg: 1, scope: !1291, file: !2, type: !321)
!1296 = !DILocation(line: 1174, scope: !1291)
!1297 = !DILocation(line: 385, scope: !995, inlinedAt: !1298)
!1298 = distinct !DILocation(line: 1174, scope: !1291)
!1299 = !DILocation(line: 386, scope: !995, inlinedAt: !1298)
!1300 = !DILocation(line: 1175, scope: !1291)
!1301 = !DILocation(line: 1176, scope: !1291)
!1302 = !DILocation(line: 1177, scope: !1291)
!1303 = distinct !DISubprogram(name: "tcl.stringify.int", scope: !864, file: !5, type: !1304, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1306)
!1304 = !DISubroutineType(types: !1305)
!1305 = !{!998, !10}
!1306 = !{!1307}
!1307 = !DILocalVariable(name: "value", arg: 1, scope: !1303, file: !2, type: !10)
!1308 = !DILocation(line: 1189, scope: !1303)
!1309 = !DILocation(line: 1191, scope: !1303)
!1310 = !DILocation(line: 385, scope: !995, inlinedAt: !1311)
!1311 = distinct !DILocation(line: 1191, scope: !1303)
!1312 = !DILocation(line: 386, scope: !995, inlinedAt: !1311)
!1313 = !DILocation(line: 1192, scope: !1303)
!1314 = !DILocation(line: 1193, scope: !1303)
!1315 = !DILocation(line: 1194, scope: !1303)
!1316 = !DILocation(line: 1196, scope: !1303)
!1317 = !DILocation(line: 385, scope: !995, inlinedAt: !1318)
!1318 = distinct !DILocation(line: 1196, scope: !1303)
!1319 = !DILocation(line: 386, scope: !995, inlinedAt: !1318)
!1320 = !DILocation(line: 1197, scope: !1303)
!1321 = !DILocation(line: 1198, scope: !1303)
!1322 = !DILocation(line: 1199, scope: !1303)
!1323 = distinct !DISubprogram(name: "tcl.stringify.numeric", scope: !864, file: !5, type: !1324, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1326)
!1324 = !DISubroutineType(types: !1325)
!1325 = !{!998, !343}
!1326 = !{!1327}
!1327 = !DILocalVariable(name: "value", arg: 1, scope: !1323, file: !2, type: !343)
!1328 = !DILocation(line: 1215, scope: !1323)
!1329 = !DILocation(line: 1217, scope: !1323)
!1330 = !DILocation(line: 1189, scope: !1303, inlinedAt: !1331)
!1331 = distinct !DILocation(line: 1217, scope: !1323)
!1332 = !DILocation(line: 1191, scope: !1303, inlinedAt: !1331)
!1333 = !DILocation(line: 1194, scope: !1303, inlinedAt: !1331)
!1334 = !DILocation(line: 1196, scope: !1303, inlinedAt: !1331)
!1335 = !DILocation(line: 1199, scope: !1303, inlinedAt: !1331)
!1336 = !DILocation(line: 0, scope: !1303, inlinedAt: !1331)
!1337 = !DILocation(line: 1219, scope: !1323)
!1338 = !DILocation(line: 1174, scope: !1291, inlinedAt: !1339)
!1339 = distinct !DILocation(line: 1219, scope: !1323)
!1340 = !DILocation(line: 385, scope: !995, inlinedAt: !1341)
!1341 = distinct !DILocation(line: 1174, scope: !1291, inlinedAt: !1339)
!1342 = !DILocation(line: 386, scope: !995, inlinedAt: !1341)
!1343 = !DILocation(line: 1175, scope: !1291, inlinedAt: !1339)
!1344 = !DILocation(line: 1176, scope: !1291, inlinedAt: !1339)
!1345 = distinct !DISubprogram(name: "tcl.refCount", scope: !864, file: !1273, type: !1346, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1348)
!1346 = !DISubroutineType(types: !1347)
!1347 = !{!9, !998}
!1348 = !{!1349}
!1349 = !DILocalVariable(name: "objPtr", arg: 1, scope: !1345, file: !2, type: !998)
!1350 = !DILocation(line: 116, scope: !1345)
!1351 = distinct !DISubprogram(name: "tcl.shared", scope: !864, file: !1273, type: !1352, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1354)
!1352 = !DISubroutineType(types: !1353)
!1353 = !{!14, !998}
!1354 = !{!1355}
!1355 = !DILocalVariable(name: "objPtr", arg: 1, scope: !1351, file: !2, type: !998)
!1356 = !DILocation(line: 116, scope: !1345, inlinedAt: !1357)
!1357 = distinct !DILocation(line: 138, scope: !1351)
!1358 = !DILocation(line: 138, scope: !1351)
!1359 = distinct !DISubprogram(name: "tcl.addReference", scope: !864, file: !1273, type: !996, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1360)
!1360 = !{!1361}
!1361 = !DILocalVariable(name: "objPtr", arg: 1, scope: !1359, file: !2, type: !998)
!1362 = !DILocation(line: 38, scope: !1004, inlinedAt: !1363)
!1363 = distinct !DILocation(line: 154, scope: !1359)
!1364 = !DILocation(line: 39, scope: !1004, inlinedAt: !1363)
!1365 = !DILocation(line: 155, scope: !1359)
!1366 = distinct !DISubprogram(name: "tcl.dropReference", scope: !864, file: !1273, type: !996, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1367)
!1367 = !{!1368}
!1368 = !DILocalVariable(name: "objPtr", arg: 1, scope: !1366, file: !2, type: !998)
!1369 = !DILocation(line: 71, scope: !1020, inlinedAt: !1370)
!1370 = distinct !DILocation(line: 169, scope: !1366)
!1371 = !DILocation(line: 72, scope: !1020, inlinedAt: !1370)
!1372 = !DILocation(line: 73, scope: !1020, inlinedAt: !1370)
!1373 = !DILocation(line: 75, scope: !1020, inlinedAt: !1370)
!1374 = !DILocation(line: 76, scope: !1020, inlinedAt: !1370)
!1375 = !DILocation(line: 77, scope: !1020, inlinedAt: !1370)
!1376 = !DILocation(line: 79, scope: !1020, inlinedAt: !1370)
!1377 = !DILocation(line: 80, scope: !1020, inlinedAt: !1370)
!1378 = !DILocation(line: 170, scope: !1366)
!1379 = distinct !DISubprogram(name: "tcl.addFailReference", scope: !864, file: !1273, type: !1380, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1385)
!1380 = !DISubroutineType(types: !1381)
!1381 = !{!657, !1382}
!1382 = !DICompositeType(tag: DW_TAG_structure_type, name: "STRING?", scope: !12, file: !11, line: 1588, size: 16, elements: !1383)
!1383 = !{!14, !1384}
!1384 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRING", scope: !12, file: !11, line: 1563, baseType: !998)
!1385 = !{!1386}
!1386 = !DILocalVariable(name: "maybeObjPtr", arg: 1, scope: !1379, file: !2, type: !1382)
!1387 = !DILocation(line: 183, scope: !1379)
!1388 = !DILocation(line: 185, scope: !1379)
!1389 = !DILocation(line: 38, scope: !1004, inlinedAt: !1390)
!1390 = distinct !DILocation(line: 186, scope: !1379)
!1391 = !DILocation(line: 39, scope: !1004, inlinedAt: !1390)
!1392 = !DILocation(line: 187, scope: !1379)
!1393 = !DILocation(line: 189, scope: !1379)
!1394 = distinct !DISubprogram(name: "tcl.dropFailReference", scope: !864, file: !1273, type: !1380, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1395)
!1395 = !{!1396}
!1396 = !DILocalVariable(name: "maybeObjPtr", arg: 1, scope: !1394, file: !2, type: !1382)
!1397 = !DILocation(line: 202, scope: !1394)
!1398 = !DILocation(line: 204, scope: !1394)
!1399 = !DILocation(line: 71, scope: !1020, inlinedAt: !1400)
!1400 = distinct !DILocation(line: 205, scope: !1394)
!1401 = !DILocation(line: 72, scope: !1020, inlinedAt: !1400)
!1402 = !DILocation(line: 73, scope: !1020, inlinedAt: !1400)
!1403 = !DILocation(line: 75, scope: !1020, inlinedAt: !1400)
!1404 = !DILocation(line: 76, scope: !1020, inlinedAt: !1400)
!1405 = !DILocation(line: 77, scope: !1020, inlinedAt: !1400)
!1406 = !DILocation(line: 79, scope: !1020, inlinedAt: !1400)
!1407 = !DILocation(line: 80, scope: !1020, inlinedAt: !1400)
!1408 = !DILocation(line: 206, scope: !1394)
!1409 = distinct !DISubprogram(name: "tcl.maybeAddReference", scope: !864, file: !1273, type: !1410, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1412)
!1410 = !DISubroutineType(types: !1411)
!1411 = !{!657, !14, !998}
!1412 = !{!1413, !1414}
!1413 = !DILocalVariable(name: "maybe", arg: 1, scope: !1409, file: !2, type: !14)
!1414 = !DILocalVariable(name: "value", arg: 2, scope: !1409, file: !2, type: !998)
!1415 = !DILocation(line: 221, scope: !1409)
!1416 = !DILocation(line: 38, scope: !1004, inlinedAt: !1417)
!1417 = distinct !DILocation(line: 223, scope: !1409)
!1418 = !DILocation(line: 39, scope: !1004, inlinedAt: !1417)
!1419 = !DILocation(line: 224, scope: !1409)
!1420 = !DILocation(line: 226, scope: !1409)
!1421 = distinct !DISubprogram(name: "tcl.maybeDropReference", scope: !864, file: !1273, type: !1410, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1422)
!1422 = !{!1423, !1424}
!1423 = !DILocalVariable(name: "maybe", arg: 1, scope: !1421, file: !2, type: !14)
!1424 = !DILocalVariable(name: "value", arg: 2, scope: !1421, file: !2, type: !998)
!1425 = !DILocation(line: 242, scope: !1421)
!1426 = !DILocation(line: 71, scope: !1020, inlinedAt: !1427)
!1427 = distinct !DILocation(line: 244, scope: !1421)
!1428 = !DILocation(line: 72, scope: !1020, inlinedAt: !1427)
!1429 = !DILocation(line: 73, scope: !1020, inlinedAt: !1427)
!1430 = !DILocation(line: 75, scope: !1020, inlinedAt: !1427)
!1431 = !DILocation(line: 76, scope: !1020, inlinedAt: !1427)
!1432 = !DILocation(line: 77, scope: !1020, inlinedAt: !1427)
!1433 = !DILocation(line: 79, scope: !1020, inlinedAt: !1427)
!1434 = !DILocation(line: 80, scope: !1020, inlinedAt: !1427)
!1435 = !DILocation(line: 245, scope: !1421)
!1436 = distinct !DISubprogram(name: "tcl.addNExistReference", scope: !864, file: !1273, type: !1437, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1441)
!1437 = !DISubroutineType(types: !1438)
!1438 = !{!657, !1439}
!1439 = !DICompositeType(tag: DW_TAG_structure_type, name: "STRING!", scope: !12, file: !11, line: 1586, size: 16, elements: !1440)
!1440 = !{!9, !1384}
!1441 = !{!1442}
!1442 = !DILocalVariable(name: "maybeObjPtr", arg: 1, scope: !1436, file: !2, type: !1439)
!1443 = !DILocation(line: 263, scope: !1436)
!1444 = !DILocation(line: 265, scope: !1436)
!1445 = !DILocation(line: 38, scope: !1004, inlinedAt: !1446)
!1446 = distinct !DILocation(line: 266, scope: !1436)
!1447 = !DILocation(line: 39, scope: !1004, inlinedAt: !1446)
!1448 = !DILocation(line: 267, scope: !1436)
!1449 = !DILocation(line: 269, scope: !1436)
!1450 = distinct !DISubprogram(name: "tcl.dropNExistReference", scope: !864, file: !1273, type: !1437, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1451)
!1451 = !{!1452}
!1452 = !DILocalVariable(name: "maybeObjPtr", arg: 1, scope: !1450, file: !2, type: !1439)
!1453 = !DILocation(line: 282, scope: !1450)
!1454 = !DILocation(line: 284, scope: !1450)
!1455 = !DILocation(line: 71, scope: !1020, inlinedAt: !1456)
!1456 = distinct !DILocation(line: 285, scope: !1450)
!1457 = !DILocation(line: 72, scope: !1020, inlinedAt: !1456)
!1458 = !DILocation(line: 73, scope: !1020, inlinedAt: !1456)
!1459 = !DILocation(line: 75, scope: !1020, inlinedAt: !1456)
!1460 = !DILocation(line: 76, scope: !1020, inlinedAt: !1456)
!1461 = !DILocation(line: 77, scope: !1020, inlinedAt: !1456)
!1462 = !DILocation(line: 79, scope: !1020, inlinedAt: !1456)
!1463 = !DILocation(line: 80, scope: !1020, inlinedAt: !1456)
!1464 = !DILocation(line: 286, scope: !1450)
!1465 = distinct !DISubprogram(name: "tcl.dropFailNExistReference", scope: !864, file: !1273, type: !1466, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1470)
!1466 = !DISubroutineType(types: !1467)
!1467 = !{!657, !1468}
!1468 = !DICompositeType(tag: DW_TAG_structure_type, name: "STRING!?", scope: !12, file: !11, line: 1594, size: 24, elements: !1469)
!1469 = !{!14, !1439}
!1470 = !{!1471}
!1471 = !DILocalVariable(name: "maybeObjPtr", arg: 1, scope: !1465, file: !2, type: !1468)
!1472 = !DILocation(line: 301, scope: !1465)
!1473 = !DILocation(line: 303, scope: !1465)
!1474 = !DILocation(line: 282, scope: !1450, inlinedAt: !1475)
!1475 = distinct !DILocation(line: 303, scope: !1465)
!1476 = !DILocation(line: 284, scope: !1450, inlinedAt: !1475)
!1477 = !DILocation(line: 71, scope: !1020, inlinedAt: !1478)
!1478 = distinct !DILocation(line: 285, scope: !1450, inlinedAt: !1475)
!1479 = !DILocation(line: 72, scope: !1020, inlinedAt: !1478)
!1480 = !DILocation(line: 73, scope: !1020, inlinedAt: !1478)
!1481 = !DILocation(line: 75, scope: !1020, inlinedAt: !1478)
!1482 = !DILocation(line: 76, scope: !1020, inlinedAt: !1478)
!1483 = !DILocation(line: 77, scope: !1020, inlinedAt: !1478)
!1484 = !DILocation(line: 79, scope: !1020, inlinedAt: !1478)
!1485 = !DILocation(line: 80, scope: !1020, inlinedAt: !1478)
!1486 = !DILocation(line: 304, scope: !1465)
!1487 = distinct !DISubprogram(name: "tcl.dropReference.failImpureInt", scope: !864, file: !1273, type: !1488, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1493)
!1488 = !DISubroutineType(types: !1489)
!1489 = !{!657, !1490}
!1490 = !DICompositeType(tag: DW_TAG_structure_type, name: "<INT>?", scope: !12, file: !11, line: 1592, size: 40, elements: !1491)
!1491 = !{!14, !1492}
!1492 = !DICompositeType(tag: DW_TAG_structure_type, name: "INT!", scope: !12, file: !11, line: 1586, size: 32, elements: !8)
!1493 = !{!1494}
!1494 = !DILocalVariable(name: "value", arg: 1, scope: !1487, file: !2, type: !1490)
!1495 = !DILocation(line: 319, scope: !1487)
!1496 = !DILocation(line: 321, scope: !1487)
!1497 = !DILocation(line: 71, scope: !1020, inlinedAt: !1498)
!1498 = distinct !DILocation(line: 322, scope: !1487)
!1499 = !DILocation(line: 72, scope: !1020, inlinedAt: !1498)
!1500 = !DILocation(line: 73, scope: !1020, inlinedAt: !1498)
!1501 = !DILocation(line: 75, scope: !1020, inlinedAt: !1498)
!1502 = !DILocation(line: 76, scope: !1020, inlinedAt: !1498)
!1503 = !DILocation(line: 77, scope: !1020, inlinedAt: !1498)
!1504 = !DILocation(line: 79, scope: !1020, inlinedAt: !1498)
!1505 = !DILocation(line: 80, scope: !1020, inlinedAt: !1498)
!1506 = !DILocation(line: 323, scope: !1487)
!1507 = distinct !DISubprogram(name: "tcl.dropReference.failImpureDouble", scope: !864, file: !1273, type: !1508, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1515)
!1508 = !DISubroutineType(types: !1509)
!1509 = !{!657, !1510}
!1510 = !DICompositeType(tag: DW_TAG_structure_type, name: "<DOUBLE>?", scope: !12, file: !11, line: 1592, size: 24, elements: !1511)
!1511 = !{!14, !1512}
!1512 = !DICompositeType(tag: DW_TAG_structure_type, name: "DOUBLE!", scope: !12, file: !11, line: 1586, size: 16, elements: !1513)
!1513 = !{!9, !1514}
!1514 = !DIDerivedType(tag: DW_TAG_typedef, name: "DOUBLE", scope: !12, file: !11, line: 1562, baseType: !321)
!1515 = !{!1516}
!1516 = !DILocalVariable(name: "value", arg: 1, scope: !1507, file: !2, type: !1510)
!1517 = !DILocation(line: 338, scope: !1507)
!1518 = !DILocation(line: 340, scope: !1507)
!1519 = !DILocation(line: 71, scope: !1020, inlinedAt: !1520)
!1520 = distinct !DILocation(line: 341, scope: !1507)
!1521 = !DILocation(line: 72, scope: !1020, inlinedAt: !1520)
!1522 = !DILocation(line: 73, scope: !1020, inlinedAt: !1520)
!1523 = !DILocation(line: 75, scope: !1020, inlinedAt: !1520)
!1524 = !DILocation(line: 76, scope: !1020, inlinedAt: !1520)
!1525 = !DILocation(line: 77, scope: !1020, inlinedAt: !1520)
!1526 = !DILocation(line: 79, scope: !1020, inlinedAt: !1520)
!1527 = !DILocation(line: 80, scope: !1020, inlinedAt: !1520)
!1528 = !DILocation(line: 342, scope: !1507)
!1529 = distinct !DISubprogram(name: "tcl.dropReference.failImpureZeroOneBoolean", scope: !864, file: !1273, type: !1530, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1537)
!1530 = !DISubroutineType(types: !1531)
!1531 = !{!657, !1532}
!1532 = !DICompositeType(tag: DW_TAG_structure_type, name: "<ZEROONE>?", scope: !12, file: !11, line: 1592, size: 24, elements: !1533)
!1533 = !{!14, !1534}
!1534 = !DICompositeType(tag: DW_TAG_structure_type, name: "ZEROONE!", scope: !12, file: !11, line: 1586, size: 16, elements: !1535)
!1535 = !{!9, !1536}
!1536 = !DIDerivedType(tag: DW_TAG_typedef, name: "ZEROONE", scope: !12, file: !11, line: 1561, baseType: !14)
!1537 = !{!1538}
!1538 = !DILocalVariable(name: "value", arg: 1, scope: !1529, file: !2, type: !1532)
!1539 = !DILocation(line: 357, scope: !1529)
!1540 = !DILocation(line: 359, scope: !1529)
!1541 = !DILocation(line: 71, scope: !1020, inlinedAt: !1542)
!1542 = distinct !DILocation(line: 360, scope: !1529)
!1543 = !DILocation(line: 72, scope: !1020, inlinedAt: !1542)
!1544 = !DILocation(line: 73, scope: !1020, inlinedAt: !1542)
!1545 = !DILocation(line: 75, scope: !1020, inlinedAt: !1542)
!1546 = !DILocation(line: 76, scope: !1020, inlinedAt: !1542)
!1547 = !DILocation(line: 77, scope: !1020, inlinedAt: !1542)
!1548 = !DILocation(line: 79, scope: !1020, inlinedAt: !1542)
!1549 = !DILocation(line: 80, scope: !1020, inlinedAt: !1542)
!1550 = !DILocation(line: 361, scope: !1529)
!1551 = distinct !DISubprogram(name: "tcl.unshare", scope: !864, file: !1273, type: !1552, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1554)
!1552 = !DISubroutineType(types: !1553)
!1553 = !{!998, !998}
!1554 = !{!1555}
!1555 = !DILocalVariable(name: "objPtr", arg: 1, scope: !1551, file: !2, type: !998)
!1556 = !DILocation(line: 116, scope: !1345, inlinedAt: !1557)
!1557 = distinct !DILocation(line: 378, scope: !1551)
!1558 = !DILocation(line: 378, scope: !1551)
!1559 = !DILocation(line: 39, scope: !1004, inlinedAt: !1560)
!1560 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !1561)
!1561 = distinct !DILocation(line: 381, scope: !1551)
!1562 = !DILocation(line: 382, scope: !1551)
!1563 = !DILocation(line: 384, scope: !1551)
!1564 = !DILocation(line: 386, scope: !1551)
!1565 = !DILocation(line: 385, scope: !995, inlinedAt: !1566)
!1566 = distinct !DILocation(line: 386, scope: !1551)
!1567 = !DILocation(line: 386, scope: !995, inlinedAt: !1566)
!1568 = !DILocation(line: 39, scope: !1004, inlinedAt: !1569)
!1569 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !1570)
!1570 = distinct !DILocation(line: 387, scope: !1551)
!1571 = !DILocation(line: 72, scope: !1020, inlinedAt: !1572)
!1572 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !1573)
!1573 = distinct !DILocation(line: 388, scope: !1551)
!1574 = !DILocation(line: 73, scope: !1020, inlinedAt: !1572)
!1575 = !DILocation(line: 75, scope: !1020, inlinedAt: !1572)
!1576 = !DILocation(line: 76, scope: !1020, inlinedAt: !1572)
!1577 = !DILocation(line: 77, scope: !1020, inlinedAt: !1572)
!1578 = !DILocation(line: 79, scope: !1020, inlinedAt: !1572)
!1579 = !DILocation(line: 80, scope: !1020, inlinedAt: !1572)
!1580 = distinct !DISubprogram(name: "tcl.unshare.copy", scope: !864, file: !1273, type: !1552, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1581)
!1581 = !{!1582}
!1582 = !DILocalVariable(name: "objPtr", arg: 1, scope: !1580, file: !2, type: !998)
!1583 = !DILocation(line: 404, scope: !1580)
!1584 = !DILocation(line: 385, scope: !995, inlinedAt: !1585)
!1585 = distinct !DILocation(line: 404, scope: !1580)
!1586 = !DILocation(line: 386, scope: !995, inlinedAt: !1585)
!1587 = !DILocation(line: 39, scope: !1004, inlinedAt: !1588)
!1588 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !1589)
!1589 = distinct !DILocation(line: 405, scope: !1580)
!1590 = !DILocation(line: 406, scope: !1580)
!1591 = distinct !DISubprogram(name: "tcl.vector.clear", scope: !864, file: !1273, type: !1592, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1594)
!1592 = !DISubroutineType(types: !1593)
!1593 = !{!657, !9, !1061}
!1594 = !{!1595, !1596}
!1595 = !DILocalVariable(name: "objc", arg: 1, scope: !1591, file: !2, type: !9)
!1596 = !DILocalVariable(name: "objv", arg: 2, scope: !1591, file: !2, type: !1061)
!1597 = !DILocation(line: 431, scope: !1591)
!1598 = distinct !DISubprogram(name: "writeref", scope: !864, file: !1273, type: !1599, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1601)
!1599 = !DISubroutineType(types: !1600)
!1600 = !{!657, !9, !998, !655}
!1601 = !{!1602, !1603, !1604}
!1602 = !DILocalVariable(name: "pr", arg: 1, scope: !1598, file: !2, type: !9)
!1603 = !DILocalVariable(name: "val", arg: 2, scope: !1598, file: !2, type: !998)
!1604 = !DILocalVariable(name: "prefix", arg: 3, scope: !1598, file: !2, type: !655)
!1605 = !DILocation(line: 469, scope: !1598)
!1606 = !DILocation(line: 470, scope: !1598)
!1607 = !DILocation(line: 472, scope: !1598)
!1608 = !DILocation(line: 385, scope: !995, inlinedAt: !1609)
!1609 = distinct !DILocation(line: 472, scope: !1598)
!1610 = !DILocation(line: 386, scope: !995, inlinedAt: !1609)
!1611 = !DILocation(line: 473, scope: !1598)
!1612 = !DILocation(line: 72, scope: !1020, inlinedAt: !1613)
!1613 = distinct !DILocation(line: 474, scope: !1598)
!1614 = !DILocation(line: 73, scope: !1020, inlinedAt: !1613)
!1615 = !DILocation(line: 75, scope: !1020, inlinedAt: !1613)
!1616 = !DILocation(line: 76, scope: !1020, inlinedAt: !1613)
!1617 = !DILocation(line: 77, scope: !1020, inlinedAt: !1613)
!1618 = !DILocation(line: 79, scope: !1020, inlinedAt: !1613)
!1619 = !DILocation(line: 80, scope: !1020, inlinedAt: !1613)
!1620 = !DILocation(line: 477, scope: !1598)
!1621 = !DILocation(line: 481, scope: !1598)
!1622 = !DILocation(line: 385, scope: !995, inlinedAt: !1623)
!1623 = distinct !DILocation(line: 481, scope: !1598)
!1624 = !DILocation(line: 386, scope: !995, inlinedAt: !1623)
!1625 = !DILocation(line: 482, scope: !1598)
!1626 = !DILocation(line: 72, scope: !1020, inlinedAt: !1627)
!1627 = distinct !DILocation(line: 483, scope: !1598)
!1628 = !DILocation(line: 73, scope: !1020, inlinedAt: !1627)
!1629 = !DILocation(line: 75, scope: !1020, inlinedAt: !1627)
!1630 = !DILocation(line: 76, scope: !1020, inlinedAt: !1627)
!1631 = !DILocation(line: 77, scope: !1020, inlinedAt: !1627)
!1632 = !DILocation(line: 79, scope: !1020, inlinedAt: !1627)
!1633 = !DILocation(line: 80, scope: !1020, inlinedAt: !1627)
!1634 = !DILocation(line: 116, scope: !1345, inlinedAt: !1635)
!1635 = distinct !DILocation(line: 484, scope: !1598)
!1636 = !DILocation(line: 485, scope: !1598)
!1637 = !DILocation(line: 385, scope: !995, inlinedAt: !1638)
!1638 = distinct !DILocation(line: 485, scope: !1598)
!1639 = !DILocation(line: 386, scope: !995, inlinedAt: !1638)
!1640 = !DILocation(line: 486, scope: !1598)
!1641 = !DILocation(line: 72, scope: !1020, inlinedAt: !1642)
!1642 = distinct !DILocation(line: 487, scope: !1598)
!1643 = !DILocation(line: 73, scope: !1020, inlinedAt: !1642)
!1644 = !DILocation(line: 75, scope: !1020, inlinedAt: !1642)
!1645 = !DILocation(line: 76, scope: !1020, inlinedAt: !1642)
!1646 = !DILocation(line: 77, scope: !1020, inlinedAt: !1642)
!1647 = !DILocation(line: 79, scope: !1020, inlinedAt: !1642)
!1648 = !DILocation(line: 80, scope: !1020, inlinedAt: !1642)
!1649 = !DILocation(line: 488, scope: !1598)
!1650 = !DILocation(line: 490, scope: !1598)
!1651 = !DILocation(line: 385, scope: !995, inlinedAt: !1652)
!1652 = distinct !DILocation(line: 490, scope: !1598)
!1653 = !DILocation(line: 386, scope: !995, inlinedAt: !1652)
!1654 = !DILocation(line: 491, scope: !1598)
!1655 = !DILocation(line: 72, scope: !1020, inlinedAt: !1656)
!1656 = distinct !DILocation(line: 492, scope: !1598)
!1657 = !DILocation(line: 73, scope: !1020, inlinedAt: !1656)
!1658 = !DILocation(line: 75, scope: !1020, inlinedAt: !1656)
!1659 = !DILocation(line: 76, scope: !1020, inlinedAt: !1656)
!1660 = !DILocation(line: 77, scope: !1020, inlinedAt: !1656)
!1661 = !DILocation(line: 79, scope: !1020, inlinedAt: !1656)
!1662 = !DILocation(line: 80, scope: !1020, inlinedAt: !1656)
!1663 = distinct !DISubprogram(name: "writeref?", scope: !864, file: !1273, type: !1664, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1666)
!1664 = !DISubroutineType(types: !1665)
!1665 = !{!657, !9, !1382, !655}
!1666 = !{!1667, !1668, !1669}
!1667 = !DILocalVariable(name: "pr", arg: 1, scope: !1663, file: !2, type: !9)
!1668 = !DILocalVariable(name: "val", arg: 2, scope: !1663, file: !2, type: !1382)
!1669 = !DILocalVariable(name: "prefix", arg: 3, scope: !1663, file: !2, type: !655)
!1670 = !DILocation(line: 502, scope: !1663)
!1671 = !DILocation(line: 504, scope: !1663)
!1672 = !DILocation(line: 505, scope: !1663)
!1673 = !DILocation(line: 507, scope: !1663)
!1674 = distinct !DISubprogram(name: "writearef", scope: !864, file: !1273, type: !1675, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1682)
!1675 = !DISubroutineType(types: !1676)
!1676 = !{!657, !9, !1677, !655}
!1677 = !DIDerivedType(tag: DW_TAG_typedef, name: "ARRAY", scope: !12, file: !11, line: 1564, baseType: !1678)
!1678 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1679, size: 64)
!1679 = !DICompositeType(tag: DW_TAG_structure_type, name: "ARRAYIMPL", scope: !12, file: !11, line: 1549, size: 24, elements: !1680)
!1680 = !{!9, !14, !1681}
!1681 = !DIDerivedType(tag: DW_TAG_typedef, name: "VarHashTable*", scope: !12, file: !11, line: 1512, baseType: !931)
!1682 = !{!1683, !1684, !1685}
!1683 = !DILocalVariable(name: "pr", arg: 1, scope: !1674, file: !2, type: !9)
!1684 = !DILocalVariable(name: "val", arg: 2, scope: !1674, file: !2, type: !1677)
!1685 = !DILocalVariable(name: "prefix", arg: 3, scope: !1674, file: !2, type: !655)
!1686 = !DILocation(line: 513, scope: !1674)
!1687 = !DILocation(line: 514, scope: !1674)
!1688 = !DILocation(line: 516, scope: !1674)
!1689 = !DILocation(line: 385, scope: !995, inlinedAt: !1690)
!1690 = distinct !DILocation(line: 516, scope: !1674)
!1691 = !DILocation(line: 386, scope: !995, inlinedAt: !1690)
!1692 = !DILocation(line: 517, scope: !1674)
!1693 = !DILocation(line: 72, scope: !1020, inlinedAt: !1694)
!1694 = distinct !DILocation(line: 518, scope: !1674)
!1695 = !DILocation(line: 73, scope: !1020, inlinedAt: !1694)
!1696 = !DILocation(line: 75, scope: !1020, inlinedAt: !1694)
!1697 = !DILocation(line: 76, scope: !1020, inlinedAt: !1694)
!1698 = !DILocation(line: 77, scope: !1020, inlinedAt: !1694)
!1699 = !DILocation(line: 79, scope: !1020, inlinedAt: !1694)
!1700 = !DILocation(line: 80, scope: !1020, inlinedAt: !1694)
!1701 = !DILocation(line: 523, scope: !1674)
!1702 = !DILocation(line: 385, scope: !995, inlinedAt: !1703)
!1703 = distinct !DILocation(line: 523, scope: !1674)
!1704 = !DILocation(line: 386, scope: !995, inlinedAt: !1703)
!1705 = !DILocation(line: 524, scope: !1674)
!1706 = !DILocation(line: 72, scope: !1020, inlinedAt: !1707)
!1707 = distinct !DILocation(line: 525, scope: !1674)
!1708 = !DILocation(line: 73, scope: !1020, inlinedAt: !1707)
!1709 = !DILocation(line: 75, scope: !1020, inlinedAt: !1707)
!1710 = !DILocation(line: 76, scope: !1020, inlinedAt: !1707)
!1711 = !DILocation(line: 77, scope: !1020, inlinedAt: !1707)
!1712 = !DILocation(line: 79, scope: !1020, inlinedAt: !1707)
!1713 = !DILocation(line: 80, scope: !1020, inlinedAt: !1707)
!1714 = !DILocation(line: 526, scope: !1674)
!1715 = !DILocation(line: 527, scope: !1674)
!1716 = !DILocation(line: 385, scope: !995, inlinedAt: !1717)
!1717 = distinct !DILocation(line: 527, scope: !1674)
!1718 = !DILocation(line: 386, scope: !995, inlinedAt: !1717)
!1719 = !DILocation(line: 528, scope: !1674)
!1720 = !DILocation(line: 72, scope: !1020, inlinedAt: !1721)
!1721 = distinct !DILocation(line: 529, scope: !1674)
!1722 = !DILocation(line: 73, scope: !1020, inlinedAt: !1721)
!1723 = !DILocation(line: 75, scope: !1020, inlinedAt: !1721)
!1724 = !DILocation(line: 76, scope: !1020, inlinedAt: !1721)
!1725 = !DILocation(line: 77, scope: !1020, inlinedAt: !1721)
!1726 = !DILocation(line: 79, scope: !1020, inlinedAt: !1721)
!1727 = !DILocation(line: 80, scope: !1020, inlinedAt: !1721)
!1728 = !DILocation(line: 530, scope: !1674)
!1729 = distinct !DISubprogram(name: "tcl.strlen", scope: !864, file: !1273, type: !1730, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1732)
!1730 = !DISubroutineType(types: !1731)
!1731 = !{!10, !998}
!1732 = !{!1733}
!1733 = !DILocalVariable(name: "objPtr", arg: 1, scope: !1729, file: !2, type: !998)
!1734 = !DILocation(line: 683, scope: !1729)
!1735 = !DILocation(line: 684, scope: !1729)
!1736 = !DILocation(line: 685, scope: !1729)
!1737 = !DILocation(line: 686, scope: !1729)
!1738 = !DILocation(line: 687, scope: !1729)
!1739 = !DILocation(line: 688, scope: !1729)
!1740 = distinct !DISubprogram(name: "tcl.isPureByteArray", scope: !864, file: !1273, type: !1352, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1741)
!1741 = !{!1742}
!1742 = !DILocalVariable(name: "objPtr", arg: 1, scope: !1740, file: !2, type: !998)
!1743 = !DILocation(line: 703, scope: !1740)
!1744 = !DILocation(line: 704, scope: !1740)
!1745 = !DILocation(line: 705, scope: !1740)
!1746 = !DILocation(line: 707, scope: !1740)
!1747 = !DILocation(line: 709, scope: !1740)
!1748 = distinct !DISubprogram(name: "tcl.isUnicodeString", scope: !864, file: !1273, type: !1352, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1749)
!1749 = !{!1750}
!1750 = !DILocalVariable(name: "objPtr", arg: 1, scope: !1748, file: !2, type: !998)
!1751 = !DILocation(line: 730, scope: !1748)
!1752 = !DILocation(line: 731, scope: !1748)
!1753 = !DILocation(line: 732, scope: !1748)
!1754 = distinct !DISubprogram(name: "tcl.impl.getBoolean", scope: !864, file: !1273, type: !1755, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1757)
!1755 = !DISubroutineType(types: !1756)
!1756 = !{!1534, !998}
!1757 = !{!1758}
!1758 = !DILocalVariable(name: "valueObj", arg: 1, scope: !1754, file: !2, type: !998)
!1759 = !DILocation(line: 747, scope: !1754)
!1760 = !DILocation(line: 748, scope: !1754)
!1761 = !DILocation(line: 749, scope: !1754)
!1762 = !DILocation(line: 751, scope: !1754)
!1763 = !DILocation(line: 752, scope: !1754)
!1764 = !DILocation(line: 753, scope: !1754)
!1765 = distinct !DISubprogram(name: "tcl.impl.getDouble", scope: !864, file: !1273, type: !1766, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1768)
!1766 = !DISubroutineType(types: !1767)
!1767 = !{!1512, !998}
!1768 = !{!1769}
!1769 = !DILocalVariable(name: "valueObj", arg: 1, scope: !1765, file: !2, type: !998)
!1770 = !DILocation(line: 777, scope: !1765)
!1771 = !DILocation(line: 778, scope: !1765)
!1772 = !DILocation(line: 780, scope: !1765)
!1773 = !DILocation(line: 781, scope: !1765)
!1774 = !DILocation(line: 782, scope: !1765)
!1775 = distinct !DISubprogram(name: "tcl.impl.getWide", scope: !864, file: !1273, type: !1776, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1780)
!1776 = !DISubroutineType(types: !1777)
!1777 = !{!1778, !998}
!1778 = !DICompositeType(tag: DW_TAG_structure_type, name: "int64!", scope: !12, file: !11, line: 1586, size: 16, elements: !1779)
!1779 = !{!9, !15}
!1780 = !{!1781}
!1781 = !DILocalVariable(name: "valueObj", arg: 1, scope: !1775, file: !2, type: !998)
!1782 = !DILocation(line: 801, scope: !1775)
!1783 = !DILocation(line: 802, scope: !1775)
!1784 = !DILocation(line: 804, scope: !1775)
!1785 = !DILocation(line: 805, scope: !1775)
!1786 = !DILocation(line: 806, scope: !1775)
!1787 = distinct !DISubprogram(name: "tcl.impl.getString", scope: !864, file: !1273, type: !1788, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1792)
!1788 = !DISubroutineType(types: !1789)
!1789 = !{!1790, !998}
!1790 = !DICompositeType(tag: DW_TAG_structure_type, scope: !12, file: !11, line: 1601, size: 16, elements: !1791)
!1791 = !{!9, !655}
!1792 = !{!1793}
!1793 = !DILocalVariable(name: "stringObj", arg: 1, scope: !1787, file: !2, type: !998)
!1794 = !DILocation(line: 828, scope: !1787)
!1795 = !DILocation(line: 829, scope: !1787)
!1796 = !DILocation(line: 831, scope: !1787)
!1797 = !DILocation(line: 832, scope: !1787)
!1798 = !DILocation(line: 833, scope: !1787)
!1799 = distinct !DISubprogram(name: "tcl.impl.getUnicode", scope: !864, file: !1273, type: !1800, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1807)
!1800 = !DISubroutineType(types: !1801)
!1801 = !{!1802, !998}
!1802 = !DICompositeType(tag: DW_TAG_structure_type, scope: !12, file: !11, line: 1597, size: 16, elements: !1803)
!1803 = !{!9, !1804}
!1804 = !DIDerivedType(tag: DW_TAG_typedef, name: "Tcl_UniString", scope: !12, file: !11, line: 694, baseType: !1805)
!1805 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1806, size: 64)
!1806 = !DIBasicType(name: "Tcl_UniChar", size: 16, encoding: DW_ATE_signed)
!1807 = !{!1808}
!1808 = !DILocalVariable(name: "stringObj", arg: 1, scope: !1799, file: !2, type: !998)
!1809 = !DILocation(line: 854, scope: !1799)
!1810 = !DILocation(line: 855, scope: !1799)
!1811 = !DILocation(line: 857, scope: !1799)
!1812 = !DILocation(line: 858, scope: !1799)
!1813 = !DILocation(line: 859, scope: !1799)
!1814 = distinct !DISubprogram(name: "tcl.impl.getBytes", scope: !864, file: !1273, type: !1788, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1815)
!1815 = !{!1816}
!1816 = !DILocalVariable(name: "stringObj", arg: 1, scope: !1814, file: !2, type: !998)
!1817 = !DILocation(line: 880, scope: !1814)
!1818 = !DILocation(line: 881, scope: !1814)
!1819 = !DILocation(line: 883, scope: !1814)
!1820 = !DILocation(line: 884, scope: !1814)
!1821 = !DILocation(line: 885, scope: !1814)
!1822 = distinct !DISubprogram(name: "tcl.strfind.fwd", scope: !864, file: !1273, type: !1823, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1825)
!1823 = !DISubroutineType(types: !1824)
!1824 = !{!10, !998, !998}
!1825 = !{!1826, !1827}
!1826 = !DILocalVariable(name: "needlePtr", arg: 1, scope: !1822, file: !2, type: !998)
!1827 = !DILocalVariable(name: "haystackPtr", arg: 2, scope: !1822, file: !2, type: !998)
!1828 = !DILocation(line: 854, scope: !1799, inlinedAt: !1829)
!1829 = distinct !DILocation(line: 904, scope: !1822)
!1830 = !DILocation(line: 854, scope: !1799, inlinedAt: !1831)
!1831 = distinct !DILocation(line: 903, scope: !1822)
!1832 = !DILocation(line: 855, scope: !1799, inlinedAt: !1831)
!1833 = !DILocation(line: 857, scope: !1799, inlinedAt: !1831)
!1834 = !DILocation(line: 859, scope: !1799, inlinedAt: !1831)
!1835 = !DILocation(line: 855, scope: !1799, inlinedAt: !1829)
!1836 = !DILocation(line: 857, scope: !1799, inlinedAt: !1829)
!1837 = !DILocation(line: 859, scope: !1799, inlinedAt: !1829)
!1838 = !DILocation(line: 905, scope: !1822)
!1839 = !DILocation(line: 907, scope: !1822)
!1840 = !DILocation(line: 909, scope: !1822)
!1841 = !DILocation(line: 910, scope: !1822)
!1842 = !DILocation(line: 914, scope: !1822)
!1843 = !DILocation(line: 0, scope: !1822)
!1844 = !DILocation(line: 916, scope: !1822)
!1845 = !DILocation(line: 920, scope: !1822)
!1846 = !DILocation(line: 922, scope: !1822)
!1847 = !DILocation(line: 923, scope: !1822)
!1848 = !DILocation(line: 925, scope: !1822)
!1849 = !DILocation(line: 927, scope: !1822)
!1850 = distinct !DISubprogram(name: "tcl.strfind.rev", scope: !864, file: !1273, type: !1823, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1851)
!1851 = !{!1852, !1853}
!1852 = !DILocalVariable(name: "needlePtr", arg: 1, scope: !1850, file: !2, type: !998)
!1853 = !DILocalVariable(name: "haystackPtr", arg: 2, scope: !1850, file: !2, type: !998)
!1854 = !DILocation(line: 854, scope: !1799, inlinedAt: !1855)
!1855 = distinct !DILocation(line: 948, scope: !1850)
!1856 = !DILocation(line: 854, scope: !1799, inlinedAt: !1857)
!1857 = distinct !DILocation(line: 947, scope: !1850)
!1858 = !DILocation(line: 855, scope: !1799, inlinedAt: !1857)
!1859 = !DILocation(line: 857, scope: !1799, inlinedAt: !1857)
!1860 = !DILocation(line: 859, scope: !1799, inlinedAt: !1857)
!1861 = !DILocation(line: 855, scope: !1799, inlinedAt: !1855)
!1862 = !DILocation(line: 857, scope: !1799, inlinedAt: !1855)
!1863 = !DILocation(line: 859, scope: !1799, inlinedAt: !1855)
!1864 = !DILocation(line: 949, scope: !1850)
!1865 = !DILocation(line: 951, scope: !1850)
!1866 = !DILocation(line: 953, scope: !1850)
!1867 = !DILocation(line: 954, scope: !1850)
!1868 = !DILocation(line: 957, scope: !1850)
!1869 = !DILocation(line: 0, scope: !1850)
!1870 = !DILocation(line: 959, scope: !1850)
!1871 = !DILocation(line: 963, scope: !1850)
!1872 = !DILocation(line: 965, scope: !1850)
!1873 = !DILocation(line: 966, scope: !1850)
!1874 = !DILocation(line: 968, scope: !1850)
!1875 = !DILocation(line: 970, scope: !1850)
!1876 = distinct !DISubprogram(name: "tcl.impl.trimleft", scope: !864, file: !1273, type: !1877, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1879)
!1877 = !DISubroutineType(types: !1878)
!1878 = !{!9, !655, !9, !655, !9}
!1879 = !{!1880, !1881, !1882, !1883}
!1880 = !DILocalVariable(name: "bytes", arg: 1, scope: !1876, file: !2, type: !655)
!1881 = !DILocalVariable(name: "numBytes", arg: 2, scope: !1876, file: !2, type: !9)
!1882 = !DILocalVariable(name: "trim", arg: 3, scope: !1876, file: !2, type: !655)
!1883 = !DILocalVariable(name: "numTrim", arg: 4, scope: !1876, file: !2, type: !9)
!1884 = !DILocation(line: 991, scope: !1876)
!1885 = !DILocation(line: 992, scope: !1876)
!1886 = !DILocation(line: 994, scope: !1876)
!1887 = !DILocation(line: 996, scope: !1876)
!1888 = !DILocation(line: 1001, scope: !1876)
!1889 = !DILocation(line: 1003, scope: !1876)
!1890 = !DILocation(line: 1004, scope: !1876)
!1891 = !DILocation(line: 1009, scope: !1876)
!1892 = !DILocation(line: 1011, scope: !1876)
!1893 = !DILocation(line: 1012, scope: !1876)
!1894 = !DILocation(line: 1014, scope: !1876)
!1895 = !DILocation(line: 1015, scope: !1876)
!1896 = !DILocation(line: 1016, scope: !1876)
!1897 = !DILocation(line: 1020, scope: !1876)
!1898 = !DILocation(line: 1022, scope: !1876)
!1899 = !DILocation(line: 1023, scope: !1876)
!1900 = !DILocation(line: 1024, scope: !1876)
!1901 = !DILocation(line: 1027, scope: !1876)
!1902 = distinct !DISubprogram(name: "tcl.impl.trimright", scope: !864, file: !1273, type: !1877, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1903)
!1903 = !{!1904, !1905, !1906, !1907}
!1904 = !DILocalVariable(name: "bytes", arg: 1, scope: !1902, file: !2, type: !655)
!1905 = !DILocalVariable(name: "numBytes", arg: 2, scope: !1902, file: !2, type: !9)
!1906 = !DILocalVariable(name: "trim", arg: 3, scope: !1902, file: !2, type: !655)
!1907 = !DILocalVariable(name: "numTrim", arg: 4, scope: !1902, file: !2, type: !9)
!1908 = !DILocation(line: 1048, scope: !1902)
!1909 = !DILocation(line: 1050, scope: !1902)
!1910 = !DILocation(line: 1052, scope: !1902)
!1911 = !DILocation(line: 1049, scope: !1902)
!1912 = !DILocation(line: 1064, scope: !1902)
!1913 = !DILocation(line: 1054, scope: !1902)
!1914 = !DILocation(line: 1059, scope: !1902)
!1915 = !DILocation(line: 1061, scope: !1902)
!1916 = !DILocation(line: 1063, scope: !1902)
!1917 = !DILocation(line: 1069, scope: !1902)
!1918 = !DILocation(line: 1071, scope: !1902)
!1919 = !DILocation(line: 1072, scope: !1902)
!1920 = !DILocation(line: 1074, scope: !1902)
!1921 = !DILocation(line: 1076, scope: !1902)
!1922 = !DILocation(line: 1077, scope: !1902)
!1923 = !DILocation(line: 1078, scope: !1902)
!1924 = !DILocation(line: 1082, scope: !1902)
!1925 = !DILocation(line: 1085, scope: !1902)
!1926 = !DILocation(line: 1086, scope: !1902)
!1927 = !DILocation(line: 1089, scope: !1902)
!1928 = distinct !DISubprogram(name: "tcl.impl.isAscii", scope: !864, file: !1273, type: !1929, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1931)
!1929 = !DISubroutineType(types: !1930)
!1930 = !{!14, !1806}
!1931 = !{!1932}
!1932 = !DILocalVariable(name: "ch", arg: 1, scope: !1928, file: !2, type: !1806)
!1933 = !DILocation(line: 1107, scope: !1928)
!1934 = distinct !DISubprogram(name: "tcl.impl.isXdigit", scope: !864, file: !1273, type: !1929, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1935)
!1935 = !{!1936}
!1936 = !DILocalVariable(name: "ch", arg: 1, scope: !1934, file: !2, type: !1806)
!1937 = !DILocation(line: 1123, scope: !1934)
!1938 = !DILocation(line: 1125, scope: !1934)
!1939 = distinct !DISubprogram(name: "tcl.strclass", scope: !864, file: !1273, type: !1940, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !1942)
!1940 = !DISubroutineType(types: !1941)
!1941 = !{!14, !998, !9}
!1942 = !{!1943, !1944}
!1943 = !DILocalVariable(name: "objPtr", arg: 1, scope: !1939, file: !2, type: !998)
!1944 = !DILocalVariable(name: "class", arg: 2, scope: !1939, file: !2, type: !9)
!1945 = !DILocation(line: 854, scope: !1799, inlinedAt: !1946)
!1946 = distinct !DILocation(line: 1147, scope: !1939)
!1947 = !DILocation(line: 855, scope: !1799, inlinedAt: !1946)
!1948 = !DILocation(line: 857, scope: !1799, inlinedAt: !1946)
!1949 = !DILocation(line: 859, scope: !1799, inlinedAt: !1946)
!1950 = !DILocation(line: 1148, scope: !1939)
!1951 = !DILocation(line: 1150, scope: !1939)
!1952 = !DILocation(line: 1151, scope: !1939)
!1953 = !DILocation(line: 1155, scope: !1939)
!1954 = !DILocation(line: 1157, scope: !1939)
!1955 = !DILocation(line: 1158, scope: !1939)
!1956 = !DILocation(line: 1161, scope: !1939)
!1957 = !DILocation(line: 1163, scope: !1939)
!1958 = !DILocation(line: 1164, scope: !1939)
!1959 = !DILocation(line: 1167, scope: !1939)
!1960 = !DILocation(line: 1107, scope: !1928, inlinedAt: !1961)
!1961 = distinct !DILocation(line: 1167, scope: !1939)
!1962 = !DILocation(line: 1169, scope: !1939)
!1963 = !DILocation(line: 1170, scope: !1939)
!1964 = !DILocation(line: 1173, scope: !1939)
!1965 = !DILocation(line: 1175, scope: !1939)
!1966 = !DILocation(line: 1176, scope: !1939)
!1967 = !DILocation(line: 1179, scope: !1939)
!1968 = !DILocation(line: 1181, scope: !1939)
!1969 = !DILocation(line: 1182, scope: !1939)
!1970 = !DILocation(line: 1185, scope: !1939)
!1971 = !DILocation(line: 1187, scope: !1939)
!1972 = !DILocation(line: 1188, scope: !1939)
!1973 = !DILocation(line: 1191, scope: !1939)
!1974 = !DILocation(line: 1193, scope: !1939)
!1975 = !DILocation(line: 1194, scope: !1939)
!1976 = !DILocation(line: 1197, scope: !1939)
!1977 = !DILocation(line: 1199, scope: !1939)
!1978 = !DILocation(line: 1200, scope: !1939)
!1979 = !DILocation(line: 1203, scope: !1939)
!1980 = !DILocation(line: 1205, scope: !1939)
!1981 = !DILocation(line: 1206, scope: !1939)
!1982 = !DILocation(line: 1209, scope: !1939)
!1983 = !DILocation(line: 1211, scope: !1939)
!1984 = !DILocation(line: 1212, scope: !1939)
!1985 = !DILocation(line: 1215, scope: !1939)
!1986 = !DILocation(line: 1217, scope: !1939)
!1987 = !DILocation(line: 1218, scope: !1939)
!1988 = !DILocation(line: 1221, scope: !1939)
!1989 = !DILocation(line: 1223, scope: !1939)
!1990 = !DILocation(line: 1224, scope: !1939)
!1991 = !DILocation(line: 1227, scope: !1939)
!1992 = !DILocation(line: 1123, scope: !1934, inlinedAt: !1993)
!1993 = distinct !DILocation(line: 1227, scope: !1939)
!1994 = !DILocation(line: 1229, scope: !1939)
!1995 = !DILocation(line: 1230, scope: !1939)
!1996 = !DILocation(line: 1232, scope: !1939)
!1997 = distinct !DISubprogram(name: "tcl.impl.getIndex", scope: !864, file: !1273, type: !1998, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !2001)
!1998 = !DISubroutineType(types: !1999)
!1999 = !{!2000, !867, !998, !9}
!2000 = !DICompositeType(tag: DW_TAG_structure_type, name: "int32!", scope: !12, file: !11, line: 1586, size: 16, elements: !883)
!2001 = !{!2002, !2003, !2004}
!2002 = !DILocalVariable(name: "interp", arg: 1, scope: !1997, file: !2, type: !867)
!2003 = !DILocalVariable(name: "objPtr", arg: 2, scope: !1997, file: !2, type: !998)
!2004 = !DILocalVariable(name: "end", arg: 3, scope: !1997, file: !2, type: !9)
!2005 = !DILocation(line: 1279, scope: !1997)
!2006 = !DILocation(line: 1281, scope: !1997)
!2007 = !DILocation(line: 1283, scope: !1997)
!2008 = !DILocation(line: 1285, scope: !1997)
!2009 = !DILocation(line: 1287, scope: !1997)
!2010 = !DILocation(line: 1288, scope: !1997)
!2011 = !DILocation(line: 1289, scope: !1997)
!2012 = distinct !DISubprogram(name: "tcl.setFromAny", scope: !864, file: !1273, type: !2013, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !2016)
!2013 = !DISubroutineType(types: !2014)
!2014 = !{!9, !2015, !867, !998}
!2015 = !DIDerivedType(tag: DW_TAG_typedef, name: "ObjType*", scope: !12, file: !11, line: 1504, baseType: !907)
!2016 = !{!2017, !2018, !2019}
!2017 = !DILocalVariable(name: "typePtr", arg: 1, scope: !2012, file: !2, type: !2015)
!2018 = !DILocalVariable(name: "interp", arg: 2, scope: !2012, file: !2, type: !867)
!2019 = !DILocalVariable(name: "objPtr", arg: 3, scope: !2012, file: !2, type: !998)
!2020 = !DILocation(line: 1327, scope: !2012)
!2021 = !DILocation(line: 1328, scope: !2012)
!2022 = !DILocation(line: 1332, scope: !2012)
!2023 = distinct !DISubprogram(name: "obj.dedup", scope: !864, file: !1273, type: !2024, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !2028)
!2024 = !DISubroutineType(types: !2025)
!2025 = !{!2026, !998}
!2026 = !DICompositeType(tag: DW_TAG_structure_type, scope: !12, file: !11, line: 1605, size: 16, elements: !2027)
!2027 = !{!998, !14}
!2028 = !{!2029}
!2029 = !DILocalVariable(name: "obj", arg: 1, scope: !2023, file: !2, type: !998)
!2030 = !DILocation(line: 116, scope: !1345, inlinedAt: !2031)
!2031 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !2032)
!2032 = distinct !DILocation(line: 1351, scope: !2023)
!2033 = !DILocation(line: 138, scope: !1351, inlinedAt: !2032)
!2034 = !DILocation(line: 1353, scope: !2023)
!2035 = !DILocation(line: 1354, scope: !2023)
!2036 = !DILocation(line: 1356, scope: !2023)
!2037 = !DILocation(line: 385, scope: !995, inlinedAt: !2038)
!2038 = distinct !DILocation(line: 1356, scope: !2023)
!2039 = !DILocation(line: 386, scope: !995, inlinedAt: !2038)
!2040 = !DILocation(line: 1358, scope: !2023)
!2041 = !DILocation(line: 1360, scope: !2023)
!2042 = distinct !DISubprogram(name: "obj.cleanup", scope: !864, file: !1273, type: !2043, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !2045)
!2043 = !DISubroutineType(types: !2044)
!2044 = !{!657, !2026}
!2045 = !{!2046}
!2046 = !DILocalVariable(name: "objdupe", arg: 1, scope: !2042, file: !2, type: !2026)
!2047 = !DILocation(line: 1372, scope: !2042)
!2048 = !DILocation(line: 1374, scope: !2042)
!2049 = !DILocation(line: 71, scope: !1020, inlinedAt: !2050)
!2050 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !2051)
!2051 = distinct !DILocation(line: 1374, scope: !2042)
!2052 = !DILocation(line: 72, scope: !1020, inlinedAt: !2050)
!2053 = !DILocation(line: 73, scope: !1020, inlinedAt: !2050)
!2054 = !DILocation(line: 75, scope: !1020, inlinedAt: !2050)
!2055 = !DILocation(line: 76, scope: !1020, inlinedAt: !2050)
!2056 = !DILocation(line: 77, scope: !1020, inlinedAt: !2050)
!2057 = !DILocation(line: 79, scope: !1020, inlinedAt: !2050)
!2058 = !DILocation(line: 80, scope: !1020, inlinedAt: !2050)
!2059 = !DILocation(line: 1375, scope: !2042)
!2060 = distinct !DISubprogram(name: "tcl.append.string", scope: !864, file: !1273, type: !2061, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !2063)
!2061 = !DISubroutineType(types: !2062)
!2062 = !{!657, !998, !998}
!2063 = !{!2064, !2065}
!2064 = !DILocalVariable(name: "bufferObjPtr", arg: 1, scope: !2060, file: !2, type: !998)
!2065 = !DILocalVariable(name: "valueObjPtr", arg: 2, scope: !2060, file: !2, type: !998)
!2066 = !DILocation(line: 1394, scope: !2060)
!2067 = !DILocation(line: 1395, scope: !2060)
!2068 = !DILocation(line: 1396, scope: !2060)
!2069 = !DILocation(line: 1397, scope: !2060)
!2070 = !DILocation(line: 1398, scope: !2060)
!2071 = !DILocation(line: 1399, scope: !2060)
!2072 = !DILocation(line: 1400, scope: !2060)
!2073 = !DILocation(line: 1401, scope: !2060)
!2074 = !DILocation(line: 1402, scope: !2060)
!2075 = !DILocation(line: 1403, scope: !2060)
!2076 = !DILocation(line: 1404, scope: !2060)
!2077 = distinct !DISubprogram(name: "tcl.stridx", scope: !864, file: !1273, type: !2078, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !2080)
!2078 = !DISubroutineType(types: !2079)
!2079 = !{!998, !998, !10}
!2080 = !{!2081, !2082}
!2081 = !DILocalVariable(name: "objPtr", arg: 1, scope: !2077, file: !2, type: !998)
!2082 = !DILocalVariable(name: "indexInt", arg: 2, scope: !2077, file: !2, type: !10)
!2083 = !DILocation(line: 1421, scope: !2077)
!2084 = !DILocation(line: 392, scope: !21, inlinedAt: !2085)
!2085 = distinct !DILocation(line: 1422, scope: !2077)
!2086 = !DILocation(line: 1422, scope: !2077)
!2087 = !DILocation(line: 1423, scope: !2077)
!2088 = !DILocation(line: 1425, scope: !2077)
!2089 = !DILocation(line: 1426, scope: !2077)
!2090 = !DILocation(line: 1428, scope: !2077)
!2091 = !DILocation(line: 1429, scope: !2077)
!2092 = !DILocation(line: 703, scope: !1740, inlinedAt: !2093)
!2093 = distinct !DILocation(line: 1431, scope: !2077)
!2094 = !DILocation(line: 704, scope: !1740, inlinedAt: !2093)
!2095 = !DILocation(line: 705, scope: !1740, inlinedAt: !2093)
!2096 = !DILocation(line: 0, scope: !2077)
!2097 = !DILocation(line: 707, scope: !1740, inlinedAt: !2093)
!2098 = !DILocation(line: 1433, scope: !2077)
!2099 = !DILocation(line: 1435, scope: !2077)
!2100 = !DILocation(line: 1437, scope: !2077)
!2101 = !DILocation(line: 1438, scope: !2077)
!2102 = !DILocation(line: 1439, scope: !2077)
!2103 = !DILocation(line: 1440, scope: !2077)
!2104 = !DILocation(line: 1443, scope: !2077)
!2105 = !DILocation(line: 1444, scope: !2077)
!2106 = !DILocation(line: 1445, scope: !2077)
!2107 = !DILocation(line: 1447, scope: !2077)
!2108 = !DILocation(line: 1448, scope: !2077)
!2109 = !DILocation(line: 1449, scope: !2077)
!2110 = !DILocation(line: 1450, scope: !2077)
!2111 = !DILocation(line: 38, scope: !1004, inlinedAt: !2112)
!2112 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !2113)
!2113 = distinct !DILocation(line: 1453, scope: !2077)
!2114 = !DILocation(line: 39, scope: !1004, inlinedAt: !2112)
!2115 = !DILocation(line: 1454, scope: !2077)
!2116 = distinct !DISubprogram(name: "tcl.stridx.idx", scope: !864, file: !1273, type: !2117, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !2119)
!2117 = !DISubroutineType(types: !2118)
!2118 = !{!1382, !998, !998, !976}
!2119 = !{!2120, !2121, !2122}
!2120 = !DILocalVariable(name: "objPtr", arg: 1, scope: !2116, file: !2, type: !998)
!2121 = !DILocalVariable(name: "index", arg: 2, scope: !2116, file: !2, type: !998)
!2122 = !DILocalVariable(name: "ecvar", arg: 3, scope: !2116, file: !2, type: !976)
!2123 = !DILocation(line: 1279, scope: !1997, inlinedAt: !2124)
!2124 = distinct !DILocation(line: 1480, scope: !2116)
!2125 = !DILocation(line: 1476, scope: !2116)
!2126 = !DILocation(line: 1477, scope: !2116)
!2127 = !DILocation(line: 1478, scope: !2116)
!2128 = !DILocation(line: 1281, scope: !1997, inlinedAt: !2124)
!2129 = !{!2130}
!2130 = distinct !{!2130, !2131, !"tcl.impl.getIndex: %objPtr"}
!2131 = distinct !{!2131, !"tcl.impl.getIndex"}
!2132 = !{!2133}
!2133 = distinct !{!2133, !2131, !"tcl.impl.getIndex: %interp"}
!2134 = !{!2133, !2130}
!2135 = !DILocation(line: 1283, scope: !1997, inlinedAt: !2124)
!2136 = !DILocation(line: 1285, scope: !1997, inlinedAt: !2124)
!2137 = !DILocation(line: 1479, scope: !2116)
!2138 = !DILocation(line: 1287, scope: !1997, inlinedAt: !2124)
!2139 = !DILocation(line: 1288, scope: !1997, inlinedAt: !2124)
!2140 = !DILocation(line: 1289, scope: !1997, inlinedAt: !2124)
!2141 = !DILocation(line: 0, scope: !1997, inlinedAt: !2124)
!2142 = !DILocation(line: 1480, scope: !2116)
!2143 = !DILocation(line: 1482, scope: !2116)
!2144 = !DILocation(line: 1487, scope: !2116)
!2145 = !DILocation(line: 1484, scope: !2116)
!2146 = !DILocation(line: 1485, scope: !2116)
!2147 = !DILocation(line: 703, scope: !1740, inlinedAt: !2148)
!2148 = distinct !DILocation(line: 1489, scope: !2116)
!2149 = !DILocation(line: 704, scope: !1740, inlinedAt: !2148)
!2150 = !DILocation(line: 705, scope: !1740, inlinedAt: !2148)
!2151 = !DILocation(line: 0, scope: !2116)
!2152 = !DILocation(line: 707, scope: !1740, inlinedAt: !2148)
!2153 = !DILocation(line: 1491, scope: !2116)
!2154 = !DILocation(line: 1493, scope: !2116)
!2155 = !DILocation(line: 1495, scope: !2116)
!2156 = !DILocation(line: 1496, scope: !2116)
!2157 = !DILocation(line: 1497, scope: !2116)
!2158 = !DILocation(line: 1498, scope: !2116)
!2159 = !DILocation(line: 1501, scope: !2116)
!2160 = !DILocation(line: 1502, scope: !2116)
!2161 = !DILocation(line: 1503, scope: !2116)
!2162 = !DILocation(line: 1505, scope: !2116)
!2163 = !DILocation(line: 1506, scope: !2116)
!2164 = !DILocation(line: 1507, scope: !2116)
!2165 = !DILocation(line: 1508, scope: !2116)
!2166 = !DILocation(line: 38, scope: !1004, inlinedAt: !2167)
!2167 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !2168)
!2168 = distinct !DILocation(line: 1511, scope: !2116)
!2169 = !DILocation(line: 39, scope: !1004, inlinedAt: !2167)
!2170 = !DILocation(line: 1512, scope: !2116)
!2171 = !DILocation(line: 1514, scope: !2116)
!2172 = !DILocation(line: 1515, scope: !2116)
!2173 = distinct !DISubprogram(name: "tcl.strrange", scope: !864, file: !1273, type: !2174, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !2176)
!2174 = !DISubroutineType(types: !2175)
!2175 = !{!998, !998, !10, !10}
!2176 = !{!2177, !2178, !2179}
!2177 = !DILocalVariable(name: "objPtr", arg: 1, scope: !2173, file: !2, type: !998)
!2178 = !DILocalVariable(name: "from", arg: 2, scope: !2173, file: !2, type: !10)
!2179 = !DILocalVariable(name: "to", arg: 3, scope: !2173, file: !2, type: !10)
!2180 = !DILocation(line: 392, scope: !21, inlinedAt: !2181)
!2181 = distinct !DILocation(line: 1537, scope: !2173)
!2182 = !DILocation(line: 1537, scope: !2173)
!2183 = !DILocation(line: 1538, scope: !2173)
!2184 = !DILocation(line: 392, scope: !21, inlinedAt: !2185)
!2185 = distinct !DILocation(line: 1539, scope: !2173)
!2186 = !DILocation(line: 1539, scope: !2173)
!2187 = !DILocation(line: 1540, scope: !2173)
!2188 = !DILocation(line: 1542, scope: !2173)
!2189 = !DILocation(line: 1543, scope: !2173)
!2190 = !DILocation(line: 1545, scope: !2173)
!2191 = !DILocation(line: 1546, scope: !2173)
!2192 = !DILocation(line: 38, scope: !1004, inlinedAt: !2193)
!2193 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !2194)
!2194 = distinct !DILocation(line: 1549, scope: !2173)
!2195 = !DILocation(line: 39, scope: !1004, inlinedAt: !2193)
!2196 = !DILocation(line: 1550, scope: !2173)
!2197 = distinct !DISubprogram(name: "tcl.strrange.idx", scope: !864, file: !1273, type: !2198, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !2200)
!2198 = !DISubroutineType(types: !2199)
!2199 = !{!1382, !998, !998, !998, !976}
!2200 = !{!2201, !2202, !2203, !2204}
!2201 = !DILocalVariable(name: "objPtr", arg: 1, scope: !2197, file: !2, type: !998)
!2202 = !DILocalVariable(name: "fromIdx", arg: 2, scope: !2197, file: !2, type: !998)
!2203 = !DILocalVariable(name: "toIdx", arg: 3, scope: !2197, file: !2, type: !998)
!2204 = !DILocalVariable(name: "ecvar", arg: 4, scope: !2197, file: !2, type: !976)
!2205 = !DILocation(line: 1279, scope: !1997, inlinedAt: !2206)
!2206 = distinct !DILocation(line: 1575, scope: !2197)
!2207 = !DILocation(line: 1279, scope: !1997, inlinedAt: !2208)
!2208 = distinct !DILocation(line: 1573, scope: !2197)
!2209 = !DILocation(line: 1570, scope: !2197)
!2210 = !DILocation(line: 1571, scope: !2197)
!2211 = !DILocation(line: 1572, scope: !2197)
!2212 = !DILocation(line: 1281, scope: !1997, inlinedAt: !2208)
!2213 = !{!2214}
!2214 = distinct !{!2214, !2215, !"tcl.impl.getIndex: %objPtr"}
!2215 = distinct !{!2215, !"tcl.impl.getIndex"}
!2216 = !{!2217}
!2217 = distinct !{!2217, !2215, !"tcl.impl.getIndex: %interp"}
!2218 = !{!2217, !2214}
!2219 = !DILocation(line: 1283, scope: !1997, inlinedAt: !2208)
!2220 = !DILocation(line: 1285, scope: !1997, inlinedAt: !2208)
!2221 = !DILocation(line: 1287, scope: !1997, inlinedAt: !2208)
!2222 = !DILocation(line: 1288, scope: !1997, inlinedAt: !2208)
!2223 = !DILocation(line: 1289, scope: !1997, inlinedAt: !2208)
!2224 = !DILocation(line: 0, scope: !1997, inlinedAt: !2208)
!2225 = !DILocation(line: 1573, scope: !2197)
!2226 = !DILocation(line: 1281, scope: !1997, inlinedAt: !2206)
!2227 = !{!2228}
!2228 = distinct !{!2228, !2229, !"tcl.impl.getIndex: %objPtr"}
!2229 = distinct !{!2229, !"tcl.impl.getIndex"}
!2230 = !{!2231}
!2231 = distinct !{!2231, !2229, !"tcl.impl.getIndex: %interp"}
!2232 = !DILocation(line: 1283, scope: !1997, inlinedAt: !2206)
!2233 = !DILocation(line: 1285, scope: !1997, inlinedAt: !2206)
!2234 = !DILocation(line: 1287, scope: !1997, inlinedAt: !2206)
!2235 = !DILocation(line: 1288, scope: !1997, inlinedAt: !2206)
!2236 = !DILocation(line: 1289, scope: !1997, inlinedAt: !2206)
!2237 = !{!2231, !2228}
!2238 = !DILocation(line: 0, scope: !1997, inlinedAt: !2206)
!2239 = !DILocation(line: 1575, scope: !2197)
!2240 = !DILocation(line: 1577, scope: !2197)
!2241 = !DILocation(line: 1578, scope: !2197)
!2242 = !DILocation(line: 1579, scope: !2197)
!2243 = !DILocation(line: 1581, scope: !2197)
!2244 = !DILocation(line: 1582, scope: !2197)
!2245 = !DILocation(line: 1584, scope: !2197)
!2246 = !DILocation(line: 1585, scope: !2197)
!2247 = !DILocation(line: 38, scope: !1004, inlinedAt: !2248)
!2248 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !2249)
!2249 = distinct !DILocation(line: 1588, scope: !2197)
!2250 = !DILocation(line: 39, scope: !1004, inlinedAt: !2248)
!2251 = !DILocation(line: 1589, scope: !2197)
!2252 = !DILocation(line: 1591, scope: !2197)
!2253 = !DILocation(line: 1592, scope: !2197)
!2254 = distinct !DISubprogram(name: "tcl.strreplace", scope: !864, file: !1273, type: !2255, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !2257)
!2255 = !DISubroutineType(types: !2256)
!2256 = !{!998, !998, !10, !10, !998}
!2257 = !{!2258, !2259, !2260, !2261}
!2258 = !DILocalVariable(name: "stringPtr", arg: 1, scope: !2254, file: !2, type: !998)
!2259 = !DILocalVariable(name: "fromInt", arg: 2, scope: !2254, file: !2, type: !10)
!2260 = !DILocalVariable(name: "toInt", arg: 3, scope: !2254, file: !2, type: !10)
!2261 = !DILocalVariable(name: "substringPtr", arg: 4, scope: !2254, file: !2, type: !998)
!2262 = !DILocation(line: 854, scope: !1799, inlinedAt: !2263)
!2263 = distinct !DILocation(line: 1657, scope: !2254)
!2264 = !DILocation(line: 371, scope: !4, inlinedAt: !2265)
!2265 = distinct !DILocation(line: 1613, scope: !2254)
!2266 = !DILocation(line: 1613, scope: !2254)
!2267 = !DILocation(line: 371, scope: !4, inlinedAt: !2268)
!2268 = distinct !DILocation(line: 1614, scope: !2254)
!2269 = !DILocation(line: 683, scope: !1729, inlinedAt: !2270)
!2270 = distinct !DILocation(line: 1615, scope: !2254)
!2271 = !DILocation(line: 684, scope: !1729, inlinedAt: !2270)
!2272 = !DILocation(line: 685, scope: !1729, inlinedAt: !2270)
!2273 = !DILocation(line: 686, scope: !1729, inlinedAt: !2270)
!2274 = !DILocation(line: 687, scope: !1729, inlinedAt: !2270)
!2275 = !DILocation(line: 1616, scope: !2254)
!2276 = !DILocation(line: 1622, scope: !2254)
!2277 = !DILocation(line: 1623, scope: !2254)
!2278 = !DILocation(line: 683, scope: !1729, inlinedAt: !2279)
!2279 = distinct !DILocation(line: 1625, scope: !2254)
!2280 = !DILocation(line: 684, scope: !1729, inlinedAt: !2279)
!2281 = !DILocation(line: 685, scope: !1729, inlinedAt: !2279)
!2282 = !DILocation(line: 686, scope: !1729, inlinedAt: !2279)
!2283 = !DILocation(line: 687, scope: !1729, inlinedAt: !2279)
!2284 = !DILocation(line: 116, scope: !1345, inlinedAt: !2285)
!2285 = distinct !DILocation(line: 1626, scope: !2254)
!2286 = !DILocation(line: 1627, scope: !2254)
!2287 = !DILocation(line: 1629, scope: !2254)
!2288 = !DILocation(line: 1631, scope: !2254)
!2289 = !DILocation(line: 1632, scope: !2254)
!2290 = !DILocation(line: 1634, scope: !2254)
!2291 = !DILocation(line: 1636, scope: !2254)
!2292 = !DILocation(line: 1638, scope: !2254)
!2293 = !DILocation(line: 385, scope: !995, inlinedAt: !2294)
!2294 = distinct !DILocation(line: 1638, scope: !2254)
!2295 = !DILocation(line: 386, scope: !995, inlinedAt: !2294)
!2296 = !DILocation(line: 1639, scope: !2254)
!2297 = !DILocation(line: 703, scope: !1740, inlinedAt: !2298)
!2298 = distinct !DILocation(line: 1642, scope: !2254)
!2299 = !DILocation(line: 704, scope: !1740, inlinedAt: !2298)
!2300 = !DILocation(line: 705, scope: !1740, inlinedAt: !2298)
!2301 = !DILocation(line: 707, scope: !1740, inlinedAt: !2298)
!2302 = !DILocation(line: 704, scope: !1740, inlinedAt: !2303)
!2303 = distinct !DILocation(line: 1642, scope: !2254)
!2304 = !DILocation(line: 705, scope: !1740, inlinedAt: !2303)
!2305 = !DILocation(line: 707, scope: !1740, inlinedAt: !2303)
!2306 = !DILocation(line: 1644, scope: !2254)
!2307 = !DILocation(line: 1645, scope: !2254)
!2308 = !DILocation(line: 1646, scope: !2254)
!2309 = !DILocation(line: 152, scope: !1044, inlinedAt: !2310)
!2310 = distinct !DILocation(line: 1647, scope: !2254)
!2311 = !DILocation(line: 158, scope: !1044, inlinedAt: !2310)
!2312 = !DILocation(line: 154, scope: !1044, inlinedAt: !2310)
!2313 = !DILocation(line: 156, scope: !1044, inlinedAt: !2310)
!2314 = !DILocation(line: 159, scope: !1044, inlinedAt: !2310)
!2315 = !DILocation(line: 160, scope: !1044, inlinedAt: !2310)
!2316 = !DILocation(line: 167, scope: !1044, inlinedAt: !2310)
!2317 = !DILocation(line: 169, scope: !1044, inlinedAt: !2310)
!2318 = !DILocation(line: 170, scope: !1044, inlinedAt: !2310)
!2319 = !DILocation(line: 1650, scope: !2254)
!2320 = !DILocation(line: 1651, scope: !2254)
!2321 = !DILocation(line: 1652, scope: !2254)
!2322 = !DILocation(line: 1653, scope: !2254)
!2323 = !DILocation(line: 152, scope: !1044, inlinedAt: !2324)
!2324 = distinct !DILocation(line: 1654, scope: !2254)
!2325 = !DILocation(line: 158, scope: !1044, inlinedAt: !2324)
!2326 = !DILocation(line: 154, scope: !1044, inlinedAt: !2324)
!2327 = !DILocation(line: 156, scope: !1044, inlinedAt: !2324)
!2328 = !DILocation(line: 159, scope: !1044, inlinedAt: !2324)
!2329 = !DILocation(line: 160, scope: !1044, inlinedAt: !2324)
!2330 = !DILocation(line: 167, scope: !1044, inlinedAt: !2324)
!2331 = !DILocation(line: 169, scope: !1044, inlinedAt: !2324)
!2332 = !DILocation(line: 170, scope: !1044, inlinedAt: !2324)
!2333 = !DILocation(line: 855, scope: !1799, inlinedAt: !2263)
!2334 = !DILocation(line: 857, scope: !1799, inlinedAt: !2263)
!2335 = !DILocation(line: 859, scope: !1799, inlinedAt: !2263)
!2336 = !DILocation(line: 1658, scope: !2254)
!2337 = !DILocation(line: 1660, scope: !2254)
!2338 = !DILocation(line: 1662, scope: !2254)
!2339 = !DILocation(line: 385, scope: !995, inlinedAt: !2340)
!2340 = distinct !DILocation(line: 1662, scope: !2254)
!2341 = !DILocation(line: 386, scope: !995, inlinedAt: !2340)
!2342 = !DILocation(line: 1663, scope: !2254)
!2343 = !DILocation(line: 1665, scope: !2254)
!2344 = !DILocation(line: 385, scope: !995, inlinedAt: !2345)
!2345 = distinct !DILocation(line: 1665, scope: !2254)
!2346 = !DILocation(line: 386, scope: !995, inlinedAt: !2345)
!2347 = !DILocation(line: 1666, scope: !2254)
!2348 = !DILocation(line: 1668, scope: !2254)
!2349 = !DILocation(line: 1669, scope: !2254)
!2350 = !DILocation(line: 1671, scope: !2254)
!2351 = !DILocation(line: 116, scope: !1345, inlinedAt: !2352)
!2352 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !2353)
!2353 = distinct !DILocation(line: 1673, scope: !2254)
!2354 = !DILocation(line: 138, scope: !1351, inlinedAt: !2353)
!2355 = !DILocation(line: 1673, scope: !2254)
!2356 = !DILocation(line: 1675, scope: !2254)
!2357 = !DILocation(line: 385, scope: !995, inlinedAt: !2358)
!2358 = distinct !DILocation(line: 1675, scope: !2254)
!2359 = !DILocation(line: 386, scope: !995, inlinedAt: !2358)
!2360 = !DILocation(line: 1676, scope: !2254)
!2361 = !DILocation(line: 1677, scope: !2254)
!2362 = !DILocation(line: 1679, scope: !2254)
!2363 = !DILocation(line: 385, scope: !995, inlinedAt: !2364)
!2364 = distinct !DILocation(line: 1679, scope: !2254)
!2365 = !DILocation(line: 386, scope: !995, inlinedAt: !2364)
!2366 = !DILocation(line: 1680, scope: !2254)
!2367 = !DILocation(line: 1682, scope: !2254)
!2368 = !DILocation(line: 1686, scope: !2254)
!2369 = !DILocation(line: 1687, scope: !2254)
!2370 = !DILocation(line: 38, scope: !1004, inlinedAt: !2371)
!2371 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !2372)
!2372 = distinct !DILocation(line: 1692, scope: !2254)
!2373 = !DILocation(line: 39, scope: !1004, inlinedAt: !2371)
!2374 = !DILocation(line: 1693, scope: !2254)
!2375 = distinct !DISubprogram(name: "tcl.strreplace.idx", scope: !864, file: !1273, type: !2376, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !2378)
!2376 = !DISubroutineType(types: !2377)
!2377 = !{!1382, !998, !998, !998, !998, !976}
!2378 = !{!2379, !2380, !2381, !2382, !2383}
!2379 = !DILocalVariable(name: "stringPtr", arg: 1, scope: !2375, file: !2, type: !998)
!2380 = !DILocalVariable(name: "fromIdx", arg: 2, scope: !2375, file: !2, type: !998)
!2381 = !DILocalVariable(name: "toIdx", arg: 3, scope: !2375, file: !2, type: !998)
!2382 = !DILocalVariable(name: "substringPtr", arg: 4, scope: !2375, file: !2, type: !998)
!2383 = !DILocalVariable(name: "ecvar", arg: 5, scope: !2375, file: !2, type: !976)
!2384 = !DILocation(line: 854, scope: !1799, inlinedAt: !2385)
!2385 = distinct !DILocation(line: 1657, scope: !2254, inlinedAt: !2386)
!2386 = distinct !DILocation(line: 1743, scope: !2375)
!2387 = !DILocation(line: 1279, scope: !1997, inlinedAt: !2388)
!2388 = distinct !DILocation(line: 1739, scope: !2375)
!2389 = !DILocation(line: 1279, scope: !1997, inlinedAt: !2390)
!2390 = distinct !DILocation(line: 1737, scope: !2375)
!2391 = !DILocation(line: 1735, scope: !2375)
!2392 = !DILocation(line: 1736, scope: !2375)
!2393 = !DILocation(line: 1281, scope: !1997, inlinedAt: !2390)
!2394 = !{!2395}
!2395 = distinct !{!2395, !2396, !"tcl.impl.getIndex: %objPtr"}
!2396 = distinct !{!2396, !"tcl.impl.getIndex"}
!2397 = !{!2398}
!2398 = distinct !{!2398, !2396, !"tcl.impl.getIndex: %interp"}
!2399 = !{!2398, !2395}
!2400 = !DILocation(line: 1283, scope: !1997, inlinedAt: !2390)
!2401 = !DILocation(line: 1285, scope: !1997, inlinedAt: !2390)
!2402 = !DILocation(line: 1287, scope: !1997, inlinedAt: !2390)
!2403 = !DILocation(line: 1288, scope: !1997, inlinedAt: !2390)
!2404 = !DILocation(line: 1289, scope: !1997, inlinedAt: !2390)
!2405 = !DILocation(line: 0, scope: !1997, inlinedAt: !2390)
!2406 = !DILocation(line: 1737, scope: !2375)
!2407 = !DILocation(line: 1281, scope: !1997, inlinedAt: !2388)
!2408 = !{!2409}
!2409 = distinct !{!2409, !2410, !"tcl.impl.getIndex: %objPtr"}
!2410 = distinct !{!2410, !"tcl.impl.getIndex"}
!2411 = !{!2412}
!2412 = distinct !{!2412, !2410, !"tcl.impl.getIndex: %interp"}
!2413 = !DILocation(line: 1283, scope: !1997, inlinedAt: !2388)
!2414 = !DILocation(line: 1285, scope: !1997, inlinedAt: !2388)
!2415 = !DILocation(line: 1287, scope: !1997, inlinedAt: !2388)
!2416 = !DILocation(line: 1288, scope: !1997, inlinedAt: !2388)
!2417 = !DILocation(line: 1289, scope: !1997, inlinedAt: !2388)
!2418 = !{!2412, !2409}
!2419 = !DILocation(line: 0, scope: !1997, inlinedAt: !2388)
!2420 = !DILocation(line: 1739, scope: !2375)
!2421 = !DILocation(line: 1613, scope: !2254, inlinedAt: !2386)
!2422 = !DILocation(line: 683, scope: !1729, inlinedAt: !2423)
!2423 = distinct !DILocation(line: 1615, scope: !2254, inlinedAt: !2386)
!2424 = !DILocation(line: 684, scope: !1729, inlinedAt: !2423)
!2425 = !DILocation(line: 685, scope: !1729, inlinedAt: !2423)
!2426 = !DILocation(line: 686, scope: !1729, inlinedAt: !2423)
!2427 = !DILocation(line: 687, scope: !1729, inlinedAt: !2423)
!2428 = !DILocation(line: 1616, scope: !2254, inlinedAt: !2386)
!2429 = !DILocation(line: 1622, scope: !2254, inlinedAt: !2386)
!2430 = !DILocation(line: 1623, scope: !2254, inlinedAt: !2386)
!2431 = !DILocation(line: 683, scope: !1729, inlinedAt: !2432)
!2432 = distinct !DILocation(line: 1625, scope: !2254, inlinedAt: !2386)
!2433 = !DILocation(line: 684, scope: !1729, inlinedAt: !2432)
!2434 = !DILocation(line: 685, scope: !1729, inlinedAt: !2432)
!2435 = !DILocation(line: 686, scope: !1729, inlinedAt: !2432)
!2436 = !DILocation(line: 687, scope: !1729, inlinedAt: !2432)
!2437 = !DILocation(line: 116, scope: !1345, inlinedAt: !2438)
!2438 = distinct !DILocation(line: 1626, scope: !2254, inlinedAt: !2386)
!2439 = !DILocation(line: 1627, scope: !2254, inlinedAt: !2386)
!2440 = !DILocation(line: 1629, scope: !2254, inlinedAt: !2386)
!2441 = !DILocation(line: 1631, scope: !2254, inlinedAt: !2386)
!2442 = !DILocation(line: 1632, scope: !2254, inlinedAt: !2386)
!2443 = !DILocation(line: 1634, scope: !2254, inlinedAt: !2386)
!2444 = !DILocation(line: 1636, scope: !2254, inlinedAt: !2386)
!2445 = !DILocation(line: 1638, scope: !2254, inlinedAt: !2386)
!2446 = !DILocation(line: 385, scope: !995, inlinedAt: !2447)
!2447 = distinct !DILocation(line: 1638, scope: !2254, inlinedAt: !2386)
!2448 = !DILocation(line: 386, scope: !995, inlinedAt: !2447)
!2449 = !DILocation(line: 1639, scope: !2254, inlinedAt: !2386)
!2450 = !DILocation(line: 703, scope: !1740, inlinedAt: !2451)
!2451 = distinct !DILocation(line: 1642, scope: !2254, inlinedAt: !2386)
!2452 = !DILocation(line: 704, scope: !1740, inlinedAt: !2451)
!2453 = !DILocation(line: 705, scope: !1740, inlinedAt: !2451)
!2454 = !DILocation(line: 707, scope: !1740, inlinedAt: !2451)
!2455 = !DILocation(line: 704, scope: !1740, inlinedAt: !2456)
!2456 = distinct !DILocation(line: 1642, scope: !2254, inlinedAt: !2386)
!2457 = !DILocation(line: 705, scope: !1740, inlinedAt: !2456)
!2458 = !DILocation(line: 707, scope: !1740, inlinedAt: !2456)
!2459 = !DILocation(line: 1644, scope: !2254, inlinedAt: !2386)
!2460 = !DILocation(line: 1645, scope: !2254, inlinedAt: !2386)
!2461 = !DILocation(line: 1646, scope: !2254, inlinedAt: !2386)
!2462 = !DILocation(line: 152, scope: !1044, inlinedAt: !2463)
!2463 = distinct !DILocation(line: 1647, scope: !2254, inlinedAt: !2386)
!2464 = !DILocation(line: 158, scope: !1044, inlinedAt: !2463)
!2465 = !DILocation(line: 154, scope: !1044, inlinedAt: !2463)
!2466 = !DILocation(line: 156, scope: !1044, inlinedAt: !2463)
!2467 = !DILocation(line: 159, scope: !1044, inlinedAt: !2463)
!2468 = !DILocation(line: 160, scope: !1044, inlinedAt: !2463)
!2469 = !DILocation(line: 167, scope: !1044, inlinedAt: !2463)
!2470 = !DILocation(line: 169, scope: !1044, inlinedAt: !2463)
!2471 = !DILocation(line: 170, scope: !1044, inlinedAt: !2463)
!2472 = !DILocation(line: 1650, scope: !2254, inlinedAt: !2386)
!2473 = !DILocation(line: 1651, scope: !2254, inlinedAt: !2386)
!2474 = !DILocation(line: 1652, scope: !2254, inlinedAt: !2386)
!2475 = !DILocation(line: 1653, scope: !2254, inlinedAt: !2386)
!2476 = !DILocation(line: 152, scope: !1044, inlinedAt: !2477)
!2477 = distinct !DILocation(line: 1654, scope: !2254, inlinedAt: !2386)
!2478 = !DILocation(line: 158, scope: !1044, inlinedAt: !2477)
!2479 = !DILocation(line: 154, scope: !1044, inlinedAt: !2477)
!2480 = !DILocation(line: 156, scope: !1044, inlinedAt: !2477)
!2481 = !DILocation(line: 159, scope: !1044, inlinedAt: !2477)
!2482 = !DILocation(line: 160, scope: !1044, inlinedAt: !2477)
!2483 = !DILocation(line: 167, scope: !1044, inlinedAt: !2477)
!2484 = !DILocation(line: 169, scope: !1044, inlinedAt: !2477)
!2485 = !DILocation(line: 170, scope: !1044, inlinedAt: !2477)
!2486 = !DILocation(line: 855, scope: !1799, inlinedAt: !2385)
!2487 = !DILocation(line: 857, scope: !1799, inlinedAt: !2385)
!2488 = !DILocation(line: 859, scope: !1799, inlinedAt: !2385)
!2489 = !DILocation(line: 1658, scope: !2254, inlinedAt: !2386)
!2490 = !DILocation(line: 1660, scope: !2254, inlinedAt: !2386)
!2491 = !DILocation(line: 1662, scope: !2254, inlinedAt: !2386)
!2492 = !DILocation(line: 385, scope: !995, inlinedAt: !2493)
!2493 = distinct !DILocation(line: 1662, scope: !2254, inlinedAt: !2386)
!2494 = !DILocation(line: 386, scope: !995, inlinedAt: !2493)
!2495 = !DILocation(line: 1663, scope: !2254, inlinedAt: !2386)
!2496 = !DILocation(line: 1665, scope: !2254, inlinedAt: !2386)
!2497 = !DILocation(line: 385, scope: !995, inlinedAt: !2498)
!2498 = distinct !DILocation(line: 1665, scope: !2254, inlinedAt: !2386)
!2499 = !DILocation(line: 386, scope: !995, inlinedAt: !2498)
!2500 = !DILocation(line: 1666, scope: !2254, inlinedAt: !2386)
!2501 = !DILocation(line: 1668, scope: !2254, inlinedAt: !2386)
!2502 = !DILocation(line: 1669, scope: !2254, inlinedAt: !2386)
!2503 = !DILocation(line: 1671, scope: !2254, inlinedAt: !2386)
!2504 = !DILocation(line: 116, scope: !1345, inlinedAt: !2505)
!2505 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !2506)
!2506 = distinct !DILocation(line: 1673, scope: !2254, inlinedAt: !2386)
!2507 = !DILocation(line: 138, scope: !1351, inlinedAt: !2506)
!2508 = !DILocation(line: 1673, scope: !2254, inlinedAt: !2386)
!2509 = !DILocation(line: 1675, scope: !2254, inlinedAt: !2386)
!2510 = !DILocation(line: 385, scope: !995, inlinedAt: !2511)
!2511 = distinct !DILocation(line: 1675, scope: !2254, inlinedAt: !2386)
!2512 = !DILocation(line: 386, scope: !995, inlinedAt: !2511)
!2513 = !DILocation(line: 1676, scope: !2254, inlinedAt: !2386)
!2514 = !DILocation(line: 1677, scope: !2254, inlinedAt: !2386)
!2515 = !DILocation(line: 1679, scope: !2254, inlinedAt: !2386)
!2516 = !DILocation(line: 385, scope: !995, inlinedAt: !2517)
!2517 = distinct !DILocation(line: 1679, scope: !2254, inlinedAt: !2386)
!2518 = !DILocation(line: 386, scope: !995, inlinedAt: !2517)
!2519 = !DILocation(line: 1680, scope: !2254, inlinedAt: !2386)
!2520 = !DILocation(line: 1682, scope: !2254, inlinedAt: !2386)
!2521 = !DILocation(line: 1686, scope: !2254, inlinedAt: !2386)
!2522 = !DILocation(line: 1687, scope: !2254, inlinedAt: !2386)
!2523 = !DILocation(line: 38, scope: !1004, inlinedAt: !2524)
!2524 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !2525)
!2525 = distinct !DILocation(line: 1692, scope: !2254, inlinedAt: !2386)
!2526 = !DILocation(line: 39, scope: !1004, inlinedAt: !2524)
!2527 = !DILocation(line: 1744, scope: !2375)
!2528 = !DILocation(line: 1746, scope: !2375)
!2529 = !DILocation(line: 1747, scope: !2375)
!2530 = distinct !DISubprogram(name: "tcl.strmap", scope: !864, file: !1273, type: !2531, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !2533)
!2531 = !DISubroutineType(types: !2532)
!2532 = !{!998, !998, !998, !998}
!2533 = !{!2534, !2535, !2536}
!2534 = !DILocalVariable(name: "sourceObj", arg: 1, scope: !2530, file: !2, type: !998)
!2535 = !DILocalVariable(name: "targetObj", arg: 2, scope: !2530, file: !2, type: !998)
!2536 = !DILocalVariable(name: "stringObj", arg: 3, scope: !2530, file: !2, type: !998)
!2537 = !DILocation(line: 854, scope: !1799, inlinedAt: !2538)
!2538 = distinct !DILocation(line: 1782, scope: !2530)
!2539 = !DILocation(line: 854, scope: !1799, inlinedAt: !2540)
!2540 = distinct !DILocation(line: 1773, scope: !2530)
!2541 = !DILocation(line: 854, scope: !1799, inlinedAt: !2542)
!2542 = distinct !DILocation(line: 1770, scope: !2530)
!2543 = !DILocation(line: 1766, scope: !2530)
!2544 = !DILocation(line: 1768, scope: !2530)
!2545 = !DILocation(line: 855, scope: !1799, inlinedAt: !2542)
!2546 = !DILocation(line: 857, scope: !1799, inlinedAt: !2542)
!2547 = !DILocation(line: 859, scope: !1799, inlinedAt: !2542)
!2548 = !DILocation(line: 1771, scope: !2530)
!2549 = !DILocation(line: 855, scope: !1799, inlinedAt: !2540)
!2550 = !DILocation(line: 857, scope: !1799, inlinedAt: !2540)
!2551 = !DILocation(line: 859, scope: !1799, inlinedAt: !2540)
!2552 = !DILocation(line: 1774, scope: !2530)
!2553 = !DILocation(line: 1776, scope: !2530)
!2554 = !DILocation(line: 1778, scope: !2530)
!2555 = !DILocation(line: 1779, scope: !2530)
!2556 = !DILocation(line: 1780, scope: !2530)
!2557 = !DILocation(line: 855, scope: !1799, inlinedAt: !2538)
!2558 = !DILocation(line: 857, scope: !1799, inlinedAt: !2538)
!2559 = !DILocation(line: 859, scope: !1799, inlinedAt: !2538)
!2560 = !DILocation(line: 1783, scope: !2530)
!2561 = !DILocation(line: 385, scope: !995, inlinedAt: !2562)
!2562 = distinct !DILocation(line: 1783, scope: !2530)
!2563 = !DILocation(line: 386, scope: !995, inlinedAt: !2562)
!2564 = !DILocation(line: 1784, scope: !2530)
!2565 = !DILocation(line: 1785, scope: !2530)
!2566 = !DILocation(line: 1791, scope: !2530)
!2567 = !DILocation(line: 116, scope: !1345, inlinedAt: !2568)
!2568 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !2569)
!2569 = distinct !DILocation(line: 1821, scope: !2530)
!2570 = !DILocation(line: 138, scope: !1351, inlinedAt: !2569)
!2571 = !DILocation(line: 1821, scope: !2530)
!2572 = !DILocation(line: 1822, scope: !2530)
!2573 = !DILocation(line: 0, scope: !2530)
!2574 = !DILocation(line: 1793, scope: !2530)
!2575 = !DILocation(line: 1800, scope: !2530)
!2576 = !DILocation(line: 1804, scope: !2530)
!2577 = !DILocation(line: 1805, scope: !2530)
!2578 = !DILocation(line: 1809, scope: !2530)
!2579 = !DILocation(line: 1810, scope: !2530)
!2580 = !DILocation(line: 1811, scope: !2530)
!2581 = !DILocation(line: 1812, scope: !2530)
!2582 = !DILocation(line: 1818, scope: !2530)
!2583 = !DILocation(line: 1797, scope: !2530)
!2584 = !DILocation(line: 1798, scope: !2530)
!2585 = !DILocation(line: 1824, scope: !2530)
!2586 = !DILocation(line: 116, scope: !1345, inlinedAt: !2587)
!2587 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !2588)
!2588 = distinct !DILocation(line: 1825, scope: !2530)
!2589 = !DILocation(line: 138, scope: !1351, inlinedAt: !2588)
!2590 = !DILocation(line: 1825, scope: !2530)
!2591 = !DILocation(line: 1826, scope: !2530)
!2592 = !DILocation(line: 38, scope: !1004, inlinedAt: !2593)
!2593 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !2594)
!2594 = distinct !DILocation(line: 1830, scope: !2530)
!2595 = !DILocation(line: 39, scope: !1004, inlinedAt: !2593)
!2596 = !DILocation(line: 1831, scope: !2530)
!2597 = distinct !DISubprogram(name: "tcl.strtrim", scope: !864, file: !1273, type: !2598, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !2600)
!2598 = !DISubroutineType(types: !2599)
!2599 = !{!998, !998, !998, !9}
!2600 = !{!2601, !2602, !2603}
!2601 = !DILocalVariable(name: "stringObj", arg: 1, scope: !2597, file: !2, type: !998)
!2602 = !DILocalVariable(name: "trimsetObj", arg: 2, scope: !2597, file: !2, type: !998)
!2603 = !DILocalVariable(name: "which", arg: 3, scope: !2597, file: !2, type: !9)
!2604 = !DILocation(line: 1048, scope: !1902, inlinedAt: !2605)
!2605 = distinct !DILocation(line: 1873, scope: !2597)
!2606 = !DILocation(line: 991, scope: !1876, inlinedAt: !2607)
!2607 = distinct !DILocation(line: 1866, scope: !2597)
!2608 = !DILocation(line: 828, scope: !1787, inlinedAt: !2609)
!2609 = distinct !DILocation(line: 1861, scope: !2597)
!2610 = !DILocation(line: 828, scope: !1787, inlinedAt: !2611)
!2611 = distinct !DILocation(line: 1860, scope: !2597)
!2612 = !DILocation(line: 829, scope: !1787, inlinedAt: !2611)
!2613 = !DILocation(line: 831, scope: !1787, inlinedAt: !2611)
!2614 = !DILocation(line: 833, scope: !1787, inlinedAt: !2611)
!2615 = !DILocation(line: 829, scope: !1787, inlinedAt: !2609)
!2616 = !DILocation(line: 831, scope: !1787, inlinedAt: !2609)
!2617 = !DILocation(line: 833, scope: !1787, inlinedAt: !2609)
!2618 = !DILocation(line: 1862, scope: !2597)
!2619 = !DILocation(line: 1864, scope: !2597)
!2620 = !DILocation(line: 992, scope: !1876, inlinedAt: !2607)
!2621 = !DILocation(line: 1001, scope: !1876, inlinedAt: !2607)
!2622 = !DILocation(line: 1003, scope: !1876, inlinedAt: !2607)
!2623 = !DILocation(line: 1004, scope: !1876, inlinedAt: !2607)
!2624 = !DILocation(line: 1009, scope: !1876, inlinedAt: !2607)
!2625 = !DILocation(line: 1011, scope: !1876, inlinedAt: !2607)
!2626 = !DILocation(line: 1012, scope: !1876, inlinedAt: !2607)
!2627 = !DILocation(line: 1014, scope: !1876, inlinedAt: !2607)
!2628 = !DILocation(line: 1015, scope: !1876, inlinedAt: !2607)
!2629 = !DILocation(line: 1016, scope: !1876, inlinedAt: !2607)
!2630 = !DILocation(line: 1020, scope: !1876, inlinedAt: !2607)
!2631 = !DILocation(line: 1022, scope: !1876, inlinedAt: !2607)
!2632 = !DILocation(line: 1023, scope: !1876, inlinedAt: !2607)
!2633 = !DILocation(line: 1024, scope: !1876, inlinedAt: !2607)
!2634 = !DILocation(line: 1027, scope: !1876, inlinedAt: !2607)
!2635 = !DILocation(line: 1867, scope: !2597)
!2636 = !DILocation(line: 1871, scope: !2597)
!2637 = !DILocation(line: 1050, scope: !1902, inlinedAt: !2605)
!2638 = !DILocation(line: 1049, scope: !1902, inlinedAt: !2605)
!2639 = !DILocation(line: 1064, scope: !1902, inlinedAt: !2605)
!2640 = !DILocation(line: 1059, scope: !1902, inlinedAt: !2605)
!2641 = !DILocation(line: 1061, scope: !1902, inlinedAt: !2605)
!2642 = !DILocation(line: 1063, scope: !1902, inlinedAt: !2605)
!2643 = !DILocation(line: 1069, scope: !1902, inlinedAt: !2605)
!2644 = !DILocation(line: 1071, scope: !1902, inlinedAt: !2605)
!2645 = !DILocation(line: 1072, scope: !1902, inlinedAt: !2605)
!2646 = !DILocation(line: 1074, scope: !1902, inlinedAt: !2605)
!2647 = !DILocation(line: 1076, scope: !1902, inlinedAt: !2605)
!2648 = !DILocation(line: 1077, scope: !1902, inlinedAt: !2605)
!2649 = !DILocation(line: 1078, scope: !1902, inlinedAt: !2605)
!2650 = !DILocation(line: 1082, scope: !1902, inlinedAt: !2605)
!2651 = !DILocation(line: 1085, scope: !1902, inlinedAt: !2605)
!2652 = !DILocation(line: 1086, scope: !1902, inlinedAt: !2605)
!2653 = !DILocation(line: 1089, scope: !1902, inlinedAt: !2605)
!2654 = !DILocation(line: 1874, scope: !2597)
!2655 = !DILocation(line: 1878, scope: !2597)
!2656 = !DILocation(line: 1880, scope: !2597)
!2657 = !DILocation(line: 385, scope: !995, inlinedAt: !2658)
!2658 = distinct !DILocation(line: 1880, scope: !2597)
!2659 = !DILocation(line: 386, scope: !995, inlinedAt: !2658)
!2660 = !DILocation(line: 1881, scope: !2597)
!2661 = !DILocation(line: 38, scope: !1004, inlinedAt: !2662)
!2662 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !2663)
!2663 = distinct !DILocation(line: 1885, scope: !2597)
!2664 = !DILocation(line: 39, scope: !1004, inlinedAt: !2662)
!2665 = !DILocation(line: 1886, scope: !2597)
!2666 = distinct !DISubprogram(name: "tcl.strcase", scope: !864, file: !1273, type: !2667, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !2669)
!2667 = !DISubroutineType(types: !2668)
!2668 = !{!998, !998, !9}
!2669 = !{!2670, !2671}
!2670 = !DILocalVariable(name: "string", arg: 1, scope: !2666, file: !2, type: !998)
!2671 = !DILocalVariable(name: "kind", arg: 2, scope: !2666, file: !2, type: !9)
!2672 = !DILocation(line: 828, scope: !1787, inlinedAt: !2673)
!2673 = distinct !DILocation(line: 1914, scope: !2666)
!2674 = !DILocation(line: 116, scope: !1345, inlinedAt: !2675)
!2675 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !2676)
!2676 = distinct !DILocation(line: 1912, scope: !2666)
!2677 = !DILocation(line: 138, scope: !1351, inlinedAt: !2676)
!2678 = !DILocation(line: 1912, scope: !2666)
!2679 = !DILocation(line: 829, scope: !1787, inlinedAt: !2673)
!2680 = !DILocation(line: 831, scope: !1787, inlinedAt: !2673)
!2681 = !DILocation(line: 833, scope: !1787, inlinedAt: !2673)
!2682 = !DILocation(line: 1915, scope: !2666)
!2683 = !DILocation(line: 385, scope: !995, inlinedAt: !2684)
!2684 = distinct !DILocation(line: 1915, scope: !2666)
!2685 = !DILocation(line: 386, scope: !995, inlinedAt: !2684)
!2686 = !DILocation(line: 1916, scope: !2666)
!2687 = !DILocation(line: 1921, scope: !2666)
!2688 = !DILocation(line: 1922, scope: !2666)
!2689 = !DILocation(line: 1924, scope: !2666)
!2690 = !DILocation(line: 1925, scope: !2666)
!2691 = !DILocation(line: 1927, scope: !2666)
!2692 = !DILocation(line: 1928, scope: !2666)
!2693 = !DILocation(line: 1930, scope: !2666)
!2694 = !DILocation(line: 1931, scope: !2666)
!2695 = !DILocation(line: 1934, scope: !2666)
!2696 = !DILocation(line: 1935, scope: !2666)
!2697 = !DILocation(line: 109, scope: !1031, inlinedAt: !2698)
!2698 = distinct !DILocation(line: 1937, scope: !2666)
!2699 = !DILocation(line: 110, scope: !1031, inlinedAt: !2698)
!2700 = !DILocation(line: 111, scope: !1031, inlinedAt: !2698)
!2701 = !DILocation(line: 113, scope: !1031, inlinedAt: !2698)
!2702 = !DILocation(line: 114, scope: !1031, inlinedAt: !2698)
!2703 = !DILocation(line: 116, scope: !1031, inlinedAt: !2698)
!2704 = !DILocation(line: 117, scope: !1031, inlinedAt: !2698)
!2705 = !DILocation(line: 119, scope: !1031, inlinedAt: !2698)
!2706 = !DILocation(line: 120, scope: !1031, inlinedAt: !2698)
!2707 = !DILocation(line: 38, scope: !1004, inlinedAt: !2708)
!2708 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !2709)
!2709 = distinct !DILocation(line: 1940, scope: !2666)
!2710 = !DILocation(line: 39, scope: !1004, inlinedAt: !2708)
!2711 = !DILocation(line: 1941, scope: !2666)
!2712 = distinct !DISubprogram(name: "tcl.maptoint", scope: !864, file: !1273, type: !2713, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !2715)
!2713 = !DISubroutineType(types: !2714)
!2714 = !{!10, !998, !1081, !9}
!2715 = !{!2716, !2717, !2718}
!2716 = !DILocalVariable(name: "value", arg: 1, scope: !2712, file: !2, type: !998)
!2717 = !DILocalVariable(name: "mapping", arg: 2, scope: !2712, file: !2, type: !1081)
!2718 = !DILocalVariable(name: "notThere", arg: 3, scope: !2712, file: !2, type: !9)
!2719 = !DILocation(line: 1959, scope: !2712)
!2720 = !DILocation(line: 1961, scope: !2712)
!2721 = !DILocation(line: 1963, scope: !2712)
!2722 = !DILocation(line: 1965, scope: !2712)
!2723 = !DILocation(line: 1967, scope: !2712)
!2724 = distinct !DISubprogram(name: "tcl.concatenate", scope: !864, file: !1273, type: !2725, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !2727)
!2725 = !DISubroutineType(types: !2726)
!2726 = !{!998, !9, !1061}
!2727 = !{!2728, !2729}
!2728 = !DILocalVariable(name: "len", arg: 1, scope: !2724, file: !2, type: !9)
!2729 = !DILocalVariable(name: "ary", arg: 2, scope: !2724, file: !2, type: !1061)
!2730 = !DILocation(line: 1983, scope: !2724)
!2731 = !DILocation(line: 385, scope: !995, inlinedAt: !2732)
!2732 = distinct !DILocation(line: 1983, scope: !2724)
!2733 = !DILocation(line: 386, scope: !995, inlinedAt: !2732)
!2734 = !DILocation(line: 39, scope: !1004, inlinedAt: !2735)
!2735 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !2736)
!2736 = distinct !DILocation(line: 1984, scope: !2724)
!2737 = !DILocation(line: 1985, scope: !2724)
!2738 = distinct !DISubprogram(name: "tcl.impl.listDupe", scope: !864, file: !1273, type: !2739, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !2741)
!2739 = !DISubroutineType(types: !2740)
!2740 = !{!998, !867, !998}
!2741 = !{!2742, !2743}
!2742 = !DILocalVariable(name: "interp", arg: 1, scope: !2738, file: !2, type: !867)
!2743 = !DILocalVariable(name: "obj", arg: 2, scope: !2738, file: !2, type: !998)
!2744 = !DILocation(line: 2027, scope: !2738)
!2745 = !DILocation(line: 2028, scope: !2738)
!2746 = !DILocation(line: 2029, scope: !2738)
!2747 = !DILocation(line: 1327, scope: !2012, inlinedAt: !2748)
!2748 = distinct !DILocation(line: 2031, scope: !2738)
!2749 = !{!2750}
!2750 = distinct !{!2750, !2751, !"tcl.setFromAny: %typePtr"}
!2751 = distinct !{!2751, !"tcl.setFromAny"}
!2752 = !{!2753, !2754}
!2753 = distinct !{!2753, !2751, !"tcl.setFromAny: %interp"}
!2754 = distinct !{!2754, !2751, !"tcl.setFromAny: %objPtr"}
!2755 = !DILocation(line: 1328, scope: !2012, inlinedAt: !2748)
!2756 = !DILocation(line: 2031, scope: !2738)
!2757 = !DILocation(line: 2033, scope: !2738)
!2758 = !DILocation(line: 385, scope: !995, inlinedAt: !2759)
!2759 = distinct !DILocation(line: 2033, scope: !2738)
!2760 = !DILocation(line: 386, scope: !995, inlinedAt: !2759)
!2761 = !DILocation(line: 152, scope: !1044, inlinedAt: !2762)
!2762 = distinct !DILocation(line: 2034, scope: !2738)
!2763 = !DILocation(line: 158, scope: !1044, inlinedAt: !2762)
!2764 = !DILocation(line: 154, scope: !1044, inlinedAt: !2762)
!2765 = !DILocation(line: 156, scope: !1044, inlinedAt: !2762)
!2766 = !DILocation(line: 159, scope: !1044, inlinedAt: !2762)
!2767 = !DILocation(line: 160, scope: !1044, inlinedAt: !2762)
!2768 = !DILocation(line: 167, scope: !1044, inlinedAt: !2762)
!2769 = !DILocation(line: 169, scope: !1044, inlinedAt: !2762)
!2770 = !DILocation(line: 170, scope: !1044, inlinedAt: !2762)
!2771 = !DILocation(line: 2035, scope: !2738)
!2772 = !DILocation(line: 2036, scope: !2738)
!2773 = !DILocation(line: 2039, scope: !2738)
!2774 = !DILocation(line: 2041, scope: !2738)
!2775 = distinct !DISubprogram(name: "tcl.list.create", scope: !864, file: !1273, type: !2725, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !2776)
!2776 = !{!2777, !2778}
!2777 = !DILocalVariable(name: "objc", arg: 1, scope: !2775, file: !2, type: !9)
!2778 = !DILocalVariable(name: "objv", arg: 2, scope: !2775, file: !2, type: !1061)
!2779 = !DILocation(line: 2059, scope: !2775)
!2780 = !DILocation(line: 385, scope: !995, inlinedAt: !2781)
!2781 = distinct !DILocation(line: 2059, scope: !2775)
!2782 = !DILocation(line: 386, scope: !995, inlinedAt: !2781)
!2783 = !DILocation(line: 39, scope: !1004, inlinedAt: !2784)
!2784 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !2785)
!2785 = distinct !DILocation(line: 2060, scope: !2775)
!2786 = !DILocation(line: 2061, scope: !2775)
!2787 = distinct !DISubprogram(name: "tcl.list.length", scope: !864, file: !1273, type: !2788, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !2792)
!2788 = !DISubroutineType(types: !2789)
!2789 = !{!2790, !998, !976}
!2790 = !DICompositeType(tag: DW_TAG_structure_type, name: "INT?", scope: !12, file: !11, line: 1588, size: 32, elements: !2791)
!2791 = !{!14, !10}
!2792 = !{!2793, !2794}
!2793 = !DILocalVariable(name: "list", arg: 1, scope: !2787, file: !2, type: !998)
!2794 = !DILocalVariable(name: "ecvar", arg: 2, scope: !2787, file: !2, type: !976)
!2795 = !DILocation(line: 2078, scope: !2787)
!2796 = !DILocation(line: 2079, scope: !2787)
!2797 = !DILocation(line: 2080, scope: !2787)
!2798 = !DILocation(line: 2081, scope: !2787)
!2799 = !DILocation(line: 2083, scope: !2787)
!2800 = !DILocation(line: 2085, scope: !2787)
!2801 = !DILocation(line: 2086, scope: !2787)
!2802 = distinct !DISubprogram(name: "tcl.list.verify", scope: !864, file: !1273, type: !2803, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !2805)
!2803 = !DISubroutineType(types: !2804)
!2804 = !{!1382, !998, !976}
!2805 = !{!2806, !2807}
!2806 = !DILocalVariable(name: "value", arg: 1, scope: !2802, file: !2, type: !998)
!2807 = !DILocalVariable(name: "ecvar", arg: 2, scope: !2802, file: !2, type: !976)
!2808 = !DILocation(line: 2104, scope: !2802)
!2809 = !DILocation(line: 2105, scope: !2802)
!2810 = !DILocation(line: 2106, scope: !2802)
!2811 = !DILocation(line: 2107, scope: !2802)
!2812 = !DILocation(line: 38, scope: !1004, inlinedAt: !2813)
!2813 = distinct !DILocation(line: 2109, scope: !2802)
!2814 = !DILocation(line: 39, scope: !1004, inlinedAt: !2813)
!2815 = !DILocation(line: 2110, scope: !2802)
!2816 = !DILocation(line: 2112, scope: !2802)
!2817 = !DILocation(line: 2113, scope: !2802)
!2818 = distinct !DISubprogram(name: "tcl.list.append", scope: !864, file: !1273, type: !2117, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !2819)
!2819 = !{!2820, !2821, !2822}
!2820 = !DILocalVariable(name: "list", arg: 1, scope: !2818, file: !2, type: !998)
!2821 = !DILocalVariable(name: "value", arg: 2, scope: !2818, file: !2, type: !998)
!2822 = !DILocalVariable(name: "ecvar", arg: 3, scope: !2818, file: !2, type: !976)
!2823 = !DILocation(line: 2130, scope: !2818)
!2824 = !DILocation(line: 116, scope: !1345, inlinedAt: !2825)
!2825 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !2826)
!2826 = distinct !DILocation(line: 2131, scope: !2818)
!2827 = !DILocation(line: 138, scope: !1351, inlinedAt: !2826)
!2828 = !DILocation(line: 2131, scope: !2818)
!2829 = !DILocation(line: 2027, scope: !2738, inlinedAt: !2830)
!2830 = distinct !DILocation(line: 2133, scope: !2818)
!2831 = !{!2832, !2834}
!2832 = distinct !{!2832, !2833, !"tcl.impl.listDupe: %interp"}
!2833 = distinct !{!2833, !"tcl.impl.listDupe"}
!2834 = distinct !{!2834, !2833, !"tcl.impl.listDupe: %obj"}
!2835 = !DILocation(line: 2028, scope: !2738, inlinedAt: !2830)
!2836 = !{!2834}
!2837 = !{!2832}
!2838 = !DILocation(line: 2029, scope: !2738, inlinedAt: !2830)
!2839 = !DILocation(line: 1327, scope: !2012, inlinedAt: !2840)
!2840 = distinct !DILocation(line: 2031, scope: !2738, inlinedAt: !2830)
!2841 = !{!2842}
!2842 = distinct !{!2842, !2843, !"tcl.setFromAny: %typePtr"}
!2843 = distinct !{!2843, !"tcl.setFromAny"}
!2844 = !{!2845, !2846, !2832, !2834}
!2845 = distinct !{!2845, !2843, !"tcl.setFromAny: %interp"}
!2846 = distinct !{!2846, !2843, !"tcl.setFromAny: %objPtr"}
!2847 = !DILocation(line: 1328, scope: !2012, inlinedAt: !2840)
!2848 = !DILocation(line: 2031, scope: !2738, inlinedAt: !2830)
!2849 = !DILocation(line: 2033, scope: !2738, inlinedAt: !2830)
!2850 = !DILocation(line: 385, scope: !995, inlinedAt: !2851)
!2851 = distinct !DILocation(line: 2033, scope: !2738, inlinedAt: !2830)
!2852 = !DILocation(line: 386, scope: !995, inlinedAt: !2851)
!2853 = !DILocation(line: 152, scope: !1044, inlinedAt: !2854)
!2854 = distinct !DILocation(line: 2034, scope: !2738, inlinedAt: !2830)
!2855 = !DILocation(line: 158, scope: !1044, inlinedAt: !2854)
!2856 = !DILocation(line: 154, scope: !1044, inlinedAt: !2854)
!2857 = !DILocation(line: 156, scope: !1044, inlinedAt: !2854)
!2858 = !DILocation(line: 159, scope: !1044, inlinedAt: !2854)
!2859 = !DILocation(line: 160, scope: !1044, inlinedAt: !2854)
!2860 = !DILocation(line: 167, scope: !1044, inlinedAt: !2854)
!2861 = !DILocation(line: 169, scope: !1044, inlinedAt: !2854)
!2862 = !DILocation(line: 170, scope: !1044, inlinedAt: !2854)
!2863 = !DILocation(line: 2035, scope: !2738, inlinedAt: !2830)
!2864 = !DILocation(line: 2036, scope: !2738, inlinedAt: !2830)
!2865 = !DILocation(line: 2136, scope: !2818)
!2866 = !DILocation(line: 2137, scope: !2818)
!2867 = !DILocation(line: 2139, scope: !2818)
!2868 = !DILocation(line: 2140, scope: !2818)
!2869 = !DILocation(line: 152, scope: !1044, inlinedAt: !2870)
!2870 = distinct !DILocation(line: 2143, scope: !2818)
!2871 = !DILocation(line: 158, scope: !1044, inlinedAt: !2870)
!2872 = !DILocation(line: 154, scope: !1044, inlinedAt: !2870)
!2873 = !DILocation(line: 156, scope: !1044, inlinedAt: !2870)
!2874 = !DILocation(line: 159, scope: !1044, inlinedAt: !2870)
!2875 = !DILocation(line: 160, scope: !1044, inlinedAt: !2870)
!2876 = !DILocation(line: 167, scope: !1044, inlinedAt: !2870)
!2877 = !DILocation(line: 169, scope: !1044, inlinedAt: !2870)
!2878 = !DILocation(line: 170, scope: !1044, inlinedAt: !2870)
!2879 = !DILocation(line: 38, scope: !1004, inlinedAt: !2880)
!2880 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !2881)
!2881 = distinct !DILocation(line: 2144, scope: !2818)
!2882 = !DILocation(line: 39, scope: !1004, inlinedAt: !2880)
!2883 = !DILocation(line: 116, scope: !1345, inlinedAt: !2884)
!2884 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !2885)
!2885 = distinct !DILocation(line: 2145, scope: !2818)
!2886 = !DILocation(line: 138, scope: !1351, inlinedAt: !2885)
!2887 = !DILocation(line: 2145, scope: !2818)
!2888 = !DILocation(line: 39, scope: !1004, inlinedAt: !2889)
!2889 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !2890)
!2890 = distinct !DILocation(line: 2147, scope: !2818)
!2891 = !DILocation(line: 2148, scope: !2818)
!2892 = !DILocation(line: 2150, scope: !2818)
!2893 = !DILocation(line: 2152, scope: !2818)
!2894 = !DILocation(line: 2153, scope: !2818)
!2895 = distinct !DISubprogram(name: "tcl.list.concat", scope: !864, file: !1273, type: !2117, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !2896)
!2896 = !{!2897, !2898, !2899}
!2897 = !DILocalVariable(name: "list", arg: 1, scope: !2895, file: !2, type: !998)
!2898 = !DILocalVariable(name: "value", arg: 2, scope: !2895, file: !2, type: !998)
!2899 = !DILocalVariable(name: "ecvar", arg: 3, scope: !2895, file: !2, type: !976)
!2900 = !DILocation(line: 2170, scope: !2895)
!2901 = !DILocation(line: 2171, scope: !2895)
!2902 = !DILocation(line: 2172, scope: !2895)
!2903 = !DILocation(line: 2173, scope: !2895)
!2904 = !DILocation(line: 2174, scope: !2895)
!2905 = !DILocation(line: 2176, scope: !2895)
!2906 = !DILocation(line: 2177, scope: !2895)
!2907 = !DILocation(line: 2178, scope: !2895)
!2908 = !DILocation(line: 116, scope: !1345, inlinedAt: !2909)
!2909 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !2910)
!2910 = distinct !DILocation(line: 2180, scope: !2895)
!2911 = !DILocation(line: 138, scope: !1351, inlinedAt: !2910)
!2912 = !DILocation(line: 2180, scope: !2895)
!2913 = !DILocation(line: 2027, scope: !2738, inlinedAt: !2914)
!2914 = distinct !DILocation(line: 2182, scope: !2895)
!2915 = !{!2916, !2918}
!2916 = distinct !{!2916, !2917, !"tcl.impl.listDupe: %interp"}
!2917 = distinct !{!2917, !"tcl.impl.listDupe"}
!2918 = distinct !{!2918, !2917, !"tcl.impl.listDupe: %obj"}
!2919 = !DILocation(line: 2028, scope: !2738, inlinedAt: !2914)
!2920 = !{!2918}
!2921 = !{!2916}
!2922 = !DILocation(line: 2029, scope: !2738, inlinedAt: !2914)
!2923 = !DILocation(line: 1327, scope: !2012, inlinedAt: !2924)
!2924 = distinct !DILocation(line: 2031, scope: !2738, inlinedAt: !2914)
!2925 = !{!2926}
!2926 = distinct !{!2926, !2927, !"tcl.setFromAny: %typePtr"}
!2927 = distinct !{!2927, !"tcl.setFromAny"}
!2928 = !{!2929, !2930, !2916, !2918}
!2929 = distinct !{!2929, !2927, !"tcl.setFromAny: %interp"}
!2930 = distinct !{!2930, !2927, !"tcl.setFromAny: %objPtr"}
!2931 = !DILocation(line: 1328, scope: !2012, inlinedAt: !2924)
!2932 = !DILocation(line: 2031, scope: !2738, inlinedAt: !2914)
!2933 = !DILocation(line: 2033, scope: !2738, inlinedAt: !2914)
!2934 = !DILocation(line: 385, scope: !995, inlinedAt: !2935)
!2935 = distinct !DILocation(line: 2033, scope: !2738, inlinedAt: !2914)
!2936 = !DILocation(line: 386, scope: !995, inlinedAt: !2935)
!2937 = !DILocation(line: 152, scope: !1044, inlinedAt: !2938)
!2938 = distinct !DILocation(line: 2034, scope: !2738, inlinedAt: !2914)
!2939 = !DILocation(line: 158, scope: !1044, inlinedAt: !2938)
!2940 = !DILocation(line: 154, scope: !1044, inlinedAt: !2938)
!2941 = !DILocation(line: 156, scope: !1044, inlinedAt: !2938)
!2942 = !DILocation(line: 159, scope: !1044, inlinedAt: !2938)
!2943 = !DILocation(line: 160, scope: !1044, inlinedAt: !2938)
!2944 = !DILocation(line: 167, scope: !1044, inlinedAt: !2938)
!2945 = !DILocation(line: 169, scope: !1044, inlinedAt: !2938)
!2946 = !DILocation(line: 170, scope: !1044, inlinedAt: !2938)
!2947 = !DILocation(line: 2035, scope: !2738, inlinedAt: !2914)
!2948 = !DILocation(line: 2036, scope: !2738, inlinedAt: !2914)
!2949 = !DILocation(line: 2039, scope: !2738, inlinedAt: !2914)
!2950 = !DILocation(line: 2186, scope: !2895)
!2951 = !DILocation(line: 2187, scope: !2895)
!2952 = !DILocation(line: 2188, scope: !2895)
!2953 = !DILocation(line: 38, scope: !1004, inlinedAt: !2954)
!2954 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !2955)
!2955 = distinct !DILocation(line: 2189, scope: !2895)
!2956 = !DILocation(line: 39, scope: !1004, inlinedAt: !2954)
!2957 = !DILocation(line: 2190, scope: !2895)
!2958 = !DILocation(line: 2192, scope: !2895)
!2959 = !DILocation(line: 2193, scope: !2895)
!2960 = distinct !DISubprogram(name: "tcl.list.index", scope: !864, file: !1273, type: !2961, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !2963)
!2961 = !DISubroutineType(types: !2962)
!2962 = !{!1382, !998, !9, !1061, !976}
!2963 = !{!2964, !2965, !2966, !2967}
!2964 = !DILocalVariable(name: "list", arg: 1, scope: !2960, file: !2, type: !998)
!2965 = !DILocalVariable(name: "idxc", arg: 2, scope: !2960, file: !2, type: !9)
!2966 = !DILocalVariable(name: "idxv", arg: 3, scope: !2960, file: !2, type: !1061)
!2967 = !DILocalVariable(name: "ecvar", arg: 4, scope: !2960, file: !2, type: !976)
!2968 = !DILocation(line: 1279, scope: !1997, inlinedAt: !2969)
!2969 = distinct !DILocation(line: 2250, scope: !2960)
!2970 = !DILocation(line: 1279, scope: !1997, inlinedAt: !2971)
!2971 = distinct !DILocation(line: 2234, scope: !2960)
!2972 = !DILocation(line: 2212, scope: !2960)
!2973 = !DILocation(line: 2213, scope: !2960)
!2974 = !DILocation(line: 2214, scope: !2960)
!2975 = !DILocation(line: 38, scope: !1004, inlinedAt: !2976)
!2976 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !2977)
!2977 = distinct !DILocation(line: 2215, scope: !2960)
!2978 = !DILocation(line: 39, scope: !1004, inlinedAt: !2976)
!2979 = !DILocation(line: 2222, scope: !2960)
!2980 = !DILocation(line: 0, scope: !2738, inlinedAt: !2981)
!2981 = distinct !DILocation(line: 2226, scope: !2960)
!2982 = !{!2983, !2985}
!2983 = distinct !{!2983, !2984, !"tcl.impl.listDupe: %interp"}
!2984 = distinct !{!2984, !"tcl.impl.listDupe"}
!2985 = distinct !{!2985, !2984, !"tcl.impl.listDupe: %obj"}
!2986 = !DILocation(line: 0, scope: !2012, inlinedAt: !2987)
!2987 = distinct !DILocation(line: 2031, scope: !2738, inlinedAt: !2981)
!2988 = !DILocation(line: 0, scope: !1044, inlinedAt: !2989)
!2989 = distinct !DILocation(line: 2034, scope: !2738, inlinedAt: !2981)
!2990 = !DILocation(line: 0, scope: !1997, inlinedAt: !2971)
!2991 = !DILocation(line: 0, scope: !1997, inlinedAt: !2969)
!2992 = !DILocation(line: 2224, scope: !2960)
!2993 = !DILocation(line: 2225, scope: !2960)
!2994 = !DILocation(line: 2028, scope: !2738, inlinedAt: !2981)
!2995 = !{!2985}
!2996 = !{!2983}
!2997 = !DILocation(line: 2029, scope: !2738, inlinedAt: !2981)
!2998 = !DILocation(line: 1327, scope: !2012, inlinedAt: !2987)
!2999 = !{!3000}
!3000 = distinct !{!3000, !3001, !"tcl.setFromAny: %typePtr"}
!3001 = distinct !{!3001, !"tcl.setFromAny"}
!3002 = !{!3003, !3004, !2983, !2985}
!3003 = distinct !{!3003, !3001, !"tcl.setFromAny: %interp"}
!3004 = distinct !{!3004, !3001, !"tcl.setFromAny: %objPtr"}
!3005 = !DILocation(line: 1328, scope: !2012, inlinedAt: !2987)
!3006 = !DILocation(line: 2031, scope: !2738, inlinedAt: !2981)
!3007 = !DILocation(line: 2033, scope: !2738, inlinedAt: !2981)
!3008 = !DILocation(line: 385, scope: !995, inlinedAt: !3009)
!3009 = distinct !DILocation(line: 2033, scope: !2738, inlinedAt: !2981)
!3010 = !DILocation(line: 386, scope: !995, inlinedAt: !3009)
!3011 = !DILocation(line: 152, scope: !1044, inlinedAt: !2989)
!3012 = !DILocation(line: 158, scope: !1044, inlinedAt: !2989)
!3013 = !DILocation(line: 154, scope: !1044, inlinedAt: !2989)
!3014 = !DILocation(line: 156, scope: !1044, inlinedAt: !2989)
!3015 = !DILocation(line: 159, scope: !1044, inlinedAt: !2989)
!3016 = !DILocation(line: 160, scope: !1044, inlinedAt: !2989)
!3017 = !DILocation(line: 167, scope: !1044, inlinedAt: !2989)
!3018 = !DILocation(line: 169, scope: !1044, inlinedAt: !2989)
!3019 = !DILocation(line: 170, scope: !1044, inlinedAt: !2989)
!3020 = !DILocation(line: 2035, scope: !2738, inlinedAt: !2981)
!3021 = !DILocation(line: 2036, scope: !2738, inlinedAt: !2981)
!3022 = !DILocation(line: 2039, scope: !2738, inlinedAt: !2981)
!3023 = !DILocation(line: 71, scope: !1020, inlinedAt: !3024)
!3024 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !3025)
!3025 = distinct !DILocation(line: 2227, scope: !2960)
!3026 = !DILocation(line: 72, scope: !1020, inlinedAt: !3024)
!3027 = !DILocation(line: 73, scope: !1020, inlinedAt: !3024)
!3028 = !DILocation(line: 75, scope: !1020, inlinedAt: !3024)
!3029 = !DILocation(line: 76, scope: !1020, inlinedAt: !3024)
!3030 = !DILocation(line: 77, scope: !1020, inlinedAt: !3024)
!3031 = !DILocation(line: 79, scope: !1020, inlinedAt: !3024)
!3032 = !DILocation(line: 80, scope: !1020, inlinedAt: !3024)
!3033 = !DILocation(line: 2229, scope: !2960)
!3034 = !DILocation(line: 2231, scope: !2960)
!3035 = !DILocation(line: 2232, scope: !2960)
!3036 = !DILocation(line: 2233, scope: !2960)
!3037 = !DILocation(line: 2234, scope: !2960)
!3038 = !DILocation(line: 1281, scope: !1997, inlinedAt: !2971)
!3039 = !{!3040}
!3040 = distinct !{!3040, !3041, !"tcl.impl.getIndex: %objPtr"}
!3041 = distinct !{!3041, !"tcl.impl.getIndex"}
!3042 = !{!3043}
!3043 = distinct !{!3043, !3041, !"tcl.impl.getIndex: %interp"}
!3044 = !DILocation(line: 1283, scope: !1997, inlinedAt: !2971)
!3045 = !DILocation(line: 1285, scope: !1997, inlinedAt: !2971)
!3046 = !DILocation(line: 1287, scope: !1997, inlinedAt: !2971)
!3047 = !DILocation(line: 1288, scope: !1997, inlinedAt: !2971)
!3048 = !DILocation(line: 1289, scope: !1997, inlinedAt: !2971)
!3049 = !{!3043, !3040}
!3050 = !DILocation(line: 2236, scope: !2960)
!3051 = !DILocation(line: 2238, scope: !2960)
!3052 = !DILocation(line: 38, scope: !1004, inlinedAt: !3053)
!3053 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !3054)
!3054 = distinct !DILocation(line: 2240, scope: !2960)
!3055 = !DILocation(line: 39, scope: !1004, inlinedAt: !3053)
!3056 = !DILocation(line: 2241, scope: !2960)
!3057 = !DILocation(line: 0, scope: !2960)
!3058 = !DILocation(line: 2243, scope: !2960)
!3059 = !DILocation(line: 2244, scope: !2960)
!3060 = !DILocation(line: 2246, scope: !2960)
!3061 = !DILocation(line: 385, scope: !995, inlinedAt: !3062)
!3062 = distinct !DILocation(line: 2246, scope: !2960)
!3063 = !DILocation(line: 386, scope: !995, inlinedAt: !3062)
!3064 = !DILocation(line: 39, scope: !1004, inlinedAt: !3065)
!3065 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !3066)
!3066 = distinct !DILocation(line: 2247, scope: !2960)
!3067 = !DILocation(line: 2248, scope: !2960)
!3068 = !DILocation(line: 2250, scope: !2960)
!3069 = !DILocation(line: 1281, scope: !1997, inlinedAt: !2969)
!3070 = !{!3071}
!3071 = distinct !{!3071, !3072, !"tcl.impl.getIndex: %objPtr"}
!3072 = distinct !{!3072, !"tcl.impl.getIndex"}
!3073 = !{!3074}
!3074 = distinct !{!3074, !3072, !"tcl.impl.getIndex: %interp"}
!3075 = !DILocation(line: 1283, scope: !1997, inlinedAt: !2969)
!3076 = !DILocation(line: 1285, scope: !1997, inlinedAt: !2969)
!3077 = !DILocation(line: 1287, scope: !1997, inlinedAt: !2969)
!3078 = !DILocation(line: 1288, scope: !1997, inlinedAt: !2969)
!3079 = !DILocation(line: 1289, scope: !1997, inlinedAt: !2969)
!3080 = !{!3074, !3071}
!3081 = !DILocation(line: 71, scope: !1020, inlinedAt: !3082)
!3082 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !3083)
!3083 = distinct !DILocation(line: 2252, scope: !2960)
!3084 = !DILocation(line: 72, scope: !1020, inlinedAt: !3082)
!3085 = !DILocation(line: 73, scope: !1020, inlinedAt: !3082)
!3086 = !DILocation(line: 75, scope: !1020, inlinedAt: !3082)
!3087 = !DILocation(line: 76, scope: !1020, inlinedAt: !3082)
!3088 = !DILocation(line: 77, scope: !1020, inlinedAt: !3082)
!3089 = !DILocation(line: 79, scope: !1020, inlinedAt: !3082)
!3090 = !DILocation(line: 80, scope: !1020, inlinedAt: !3082)
!3091 = !DILocation(line: 71, scope: !1020, inlinedAt: !3092)
!3092 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !3093)
!3093 = distinct !DILocation(line: 2255, scope: !2960)
!3094 = !DILocation(line: 72, scope: !1020, inlinedAt: !3092)
!3095 = !DILocation(line: 73, scope: !1020, inlinedAt: !3092)
!3096 = !DILocation(line: 75, scope: !1020, inlinedAt: !3092)
!3097 = !DILocation(line: 76, scope: !1020, inlinedAt: !3092)
!3098 = !DILocation(line: 77, scope: !1020, inlinedAt: !3092)
!3099 = !DILocation(line: 79, scope: !1020, inlinedAt: !3092)
!3100 = !DILocation(line: 80, scope: !1020, inlinedAt: !3092)
!3101 = !DILocation(line: 2256, scope: !2960)
!3102 = !DILocation(line: 2260, scope: !2960)
!3103 = !DILocation(line: 2262, scope: !2960)
!3104 = !DILocation(line: 2263, scope: !2960)
!3105 = distinct !DISubprogram(name: "tcl.list.index1", scope: !864, file: !1273, type: !3106, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !3108)
!3106 = !DISubroutineType(types: !3107)
!3107 = !{!1382, !998, !10, !976}
!3108 = !{!3109, !3110, !3111}
!3109 = !DILocalVariable(name: "list", arg: 1, scope: !3105, file: !2, type: !998)
!3110 = !DILocalVariable(name: "index", arg: 2, scope: !3105, file: !2, type: !10)
!3111 = !DILocalVariable(name: "ecvar", arg: 3, scope: !3105, file: !2, type: !976)
!3112 = !DILocation(line: 2287, scope: !3105)
!3113 = !DILocation(line: 2288, scope: !3105)
!3114 = !DILocation(line: 2289, scope: !3105)
!3115 = !DILocation(line: 371, scope: !4, inlinedAt: !3116)
!3116 = distinct !DILocation(line: 2290, scope: !3105)
!3117 = !DILocation(line: 2291, scope: !3105)
!3118 = !DILocation(line: 2292, scope: !3105)
!3119 = !DILocation(line: 2294, scope: !3105)
!3120 = !DILocation(line: 2296, scope: !3105)
!3121 = !DILocation(line: 2297, scope: !3105)
!3122 = !DILocation(line: 38, scope: !1004, inlinedAt: !3123)
!3123 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !3124)
!3124 = distinct !DILocation(line: 2298, scope: !3105)
!3125 = !DILocation(line: 39, scope: !1004, inlinedAt: !3123)
!3126 = !DILocation(line: 2299, scope: !3105)
!3127 = !DILocation(line: 2301, scope: !3105)
!3128 = !DILocation(line: 385, scope: !995, inlinedAt: !3129)
!3129 = distinct !DILocation(line: 2301, scope: !3105)
!3130 = !DILocation(line: 386, scope: !995, inlinedAt: !3129)
!3131 = !DILocation(line: 39, scope: !1004, inlinedAt: !3132)
!3132 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !3133)
!3133 = distinct !DILocation(line: 2302, scope: !3105)
!3134 = !DILocation(line: 2303, scope: !3105)
!3135 = !DILocation(line: 2305, scope: !3105)
!3136 = !DILocation(line: 2306, scope: !3105)
!3137 = distinct !DISubprogram(name: "tcl.list.indexList", scope: !864, file: !1273, type: !2117, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !3138)
!3138 = !{!3139, !3140, !3141}
!3139 = !DILocalVariable(name: "list", arg: 1, scope: !3137, file: !2, type: !998)
!3140 = !DILocalVariable(name: "index", arg: 2, scope: !3137, file: !2, type: !998)
!3141 = !DILocalVariable(name: "ecvar", arg: 3, scope: !3137, file: !2, type: !976)
!3142 = !DILocation(line: 1279, scope: !1997, inlinedAt: !3143)
!3143 = distinct !DILocation(line: 2250, scope: !2960, inlinedAt: !3144)
!3144 = distinct !DILocation(line: 2353, scope: !3137)
!3145 = !DILocation(line: 1279, scope: !1997, inlinedAt: !3146)
!3146 = distinct !DILocation(line: 2234, scope: !2960, inlinedAt: !3144)
!3147 = !DILocation(line: 2212, scope: !2960, inlinedAt: !3144)
!3148 = !DILocation(line: 2213, scope: !2960, inlinedAt: !3144)
!3149 = !DILocation(line: 1279, scope: !1997, inlinedAt: !3150)
!3150 = distinct !DILocation(line: 2336, scope: !3137)
!3151 = !DILocation(line: 2323, scope: !3137)
!3152 = !DILocation(line: 2324, scope: !3137)
!3153 = !DILocation(line: 2325, scope: !3137)
!3154 = !DILocation(line: 2326, scope: !3137)
!3155 = !DILocation(line: 2327, scope: !3137)
!3156 = !DILocation(line: 2330, scope: !3137)
!3157 = !DILocation(line: 2331, scope: !3137)
!3158 = !DILocation(line: 2333, scope: !3137)
!3159 = !DILocation(line: 2335, scope: !3137)
!3160 = !DILocation(line: 1281, scope: !1997, inlinedAt: !3150)
!3161 = !{!3162, !3164}
!3162 = distinct !{!3162, !3163, !"tcl.impl.getIndex: %interp"}
!3163 = distinct !{!3163, !"tcl.impl.getIndex"}
!3164 = distinct !{!3164, !3163, !"tcl.impl.getIndex: %objPtr"}
!3165 = !DILocation(line: 1283, scope: !1997, inlinedAt: !3150)
!3166 = !DILocation(line: 1285, scope: !1997, inlinedAt: !3150)
!3167 = !{!3164}
!3168 = !{!3162}
!3169 = !DILocation(line: 1287, scope: !1997, inlinedAt: !3150)
!3170 = !DILocation(line: 1288, scope: !1997, inlinedAt: !3150)
!3171 = !DILocation(line: 1289, scope: !1997, inlinedAt: !3150)
!3172 = !DILocation(line: 0, scope: !1997, inlinedAt: !3150)
!3173 = !DILocation(line: 2336, scope: !3137)
!3174 = !DILocation(line: 2028, scope: !2738, inlinedAt: !3175)
!3175 = distinct !DILocation(line: 2349, scope: !3137)
!3176 = !{!3177}
!3177 = distinct !{!3177, !3178, !"tcl.impl.listDupe: %obj"}
!3178 = distinct !{!3178, !"tcl.impl.listDupe"}
!3179 = !{!3180}
!3180 = distinct !{!3180, !3178, !"tcl.impl.listDupe: %interp"}
!3181 = !DILocation(line: 2338, scope: !3137)
!3182 = !DILocation(line: 2340, scope: !3137)
!3183 = !DILocation(line: 2341, scope: !3137)
!3184 = !DILocation(line: 38, scope: !1004, inlinedAt: !3185)
!3185 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !3186)
!3186 = distinct !DILocation(line: 2342, scope: !3137)
!3187 = !DILocation(line: 39, scope: !1004, inlinedAt: !3185)
!3188 = !DILocation(line: 2343, scope: !3137)
!3189 = !DILocation(line: 2345, scope: !3137)
!3190 = !DILocation(line: 385, scope: !995, inlinedAt: !3191)
!3191 = distinct !DILocation(line: 2345, scope: !3137)
!3192 = !DILocation(line: 386, scope: !995, inlinedAt: !3191)
!3193 = !DILocation(line: 39, scope: !1004, inlinedAt: !3194)
!3194 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !3195)
!3195 = distinct !DILocation(line: 2346, scope: !3137)
!3196 = !DILocation(line: 2347, scope: !3137)
!3197 = !DILocation(line: 2029, scope: !2738, inlinedAt: !3175)
!3198 = !DILocation(line: 1327, scope: !2012, inlinedAt: !3199)
!3199 = distinct !DILocation(line: 2031, scope: !2738, inlinedAt: !3175)
!3200 = !{!3201}
!3201 = distinct !{!3201, !3202, !"tcl.setFromAny: %typePtr"}
!3202 = distinct !{!3202, !"tcl.setFromAny"}
!3203 = !{!3204, !3205, !3180, !3177}
!3204 = distinct !{!3204, !3202, !"tcl.setFromAny: %interp"}
!3205 = distinct !{!3205, !3202, !"tcl.setFromAny: %objPtr"}
!3206 = !DILocation(line: 1328, scope: !2012, inlinedAt: !3199)
!3207 = !DILocation(line: 2031, scope: !2738, inlinedAt: !3175)
!3208 = !DILocation(line: 2033, scope: !2738, inlinedAt: !3175)
!3209 = !{!3180, !3177}
!3210 = !DILocation(line: 385, scope: !995, inlinedAt: !3211)
!3211 = distinct !DILocation(line: 2033, scope: !2738, inlinedAt: !3175)
!3212 = !DILocation(line: 386, scope: !995, inlinedAt: !3211)
!3213 = !DILocation(line: 152, scope: !1044, inlinedAt: !3214)
!3214 = distinct !DILocation(line: 2034, scope: !2738, inlinedAt: !3175)
!3215 = !DILocation(line: 158, scope: !1044, inlinedAt: !3214)
!3216 = !DILocation(line: 154, scope: !1044, inlinedAt: !3214)
!3217 = !DILocation(line: 156, scope: !1044, inlinedAt: !3214)
!3218 = !DILocation(line: 159, scope: !1044, inlinedAt: !3214)
!3219 = !DILocation(line: 160, scope: !1044, inlinedAt: !3214)
!3220 = !DILocation(line: 167, scope: !1044, inlinedAt: !3214)
!3221 = !DILocation(line: 169, scope: !1044, inlinedAt: !3214)
!3222 = !DILocation(line: 170, scope: !1044, inlinedAt: !3214)
!3223 = !DILocation(line: 2035, scope: !2738, inlinedAt: !3175)
!3224 = !DILocation(line: 2036, scope: !2738, inlinedAt: !3175)
!3225 = !DILocation(line: 2352, scope: !3137)
!3226 = !DILocation(line: 2353, scope: !3137)
!3227 = !DILocation(line: 2214, scope: !2960, inlinedAt: !3144)
!3228 = !DILocation(line: 38, scope: !1004, inlinedAt: !3229)
!3229 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !3230)
!3230 = distinct !DILocation(line: 2215, scope: !2960, inlinedAt: !3144)
!3231 = !DILocation(line: 39, scope: !1004, inlinedAt: !3229)
!3232 = !{!3233}
!3233 = distinct !{!3233, !3234, !"tcl.list.index: %list"}
!3234 = distinct !{!3234, !"tcl.list.index"}
!3235 = !{!3236, !3237}
!3236 = distinct !{!3236, !3234, !"tcl.list.index: %idxv"}
!3237 = distinct !{!3237, !3234, !"tcl.list.index: %ecvar"}
!3238 = !DILocation(line: 2222, scope: !2960, inlinedAt: !3144)
!3239 = !DILocation(line: 0, scope: !2012, inlinedAt: !3240)
!3240 = distinct !DILocation(line: 2031, scope: !2738, inlinedAt: !3241)
!3241 = distinct !DILocation(line: 2226, scope: !2960, inlinedAt: !3144)
!3242 = !DILocation(line: 0, scope: !1044, inlinedAt: !3243)
!3243 = distinct !DILocation(line: 2034, scope: !2738, inlinedAt: !3241)
!3244 = !DILocation(line: 0, scope: !1997, inlinedAt: !3146)
!3245 = !DILocation(line: 0, scope: !1997, inlinedAt: !3143)
!3246 = !DILocation(line: 2224, scope: !2960, inlinedAt: !3144)
!3247 = !{!3233, !3236, !3237}
!3248 = !DILocation(line: 2225, scope: !2960, inlinedAt: !3144)
!3249 = !DILocation(line: 2028, scope: !2738, inlinedAt: !3241)
!3250 = !{!3251}
!3251 = distinct !{!3251, !3252, !"tcl.impl.listDupe: %obj"}
!3252 = distinct !{!3252, !"tcl.impl.listDupe"}
!3253 = !{!3254, !3236, !3237}
!3254 = distinct !{!3254, !3252, !"tcl.impl.listDupe: %interp"}
!3255 = !DILocation(line: 2029, scope: !2738, inlinedAt: !3241)
!3256 = !DILocation(line: 1327, scope: !2012, inlinedAt: !3240)
!3257 = !{!3258}
!3258 = distinct !{!3258, !3259, !"tcl.setFromAny: %typePtr"}
!3259 = distinct !{!3259, !"tcl.setFromAny"}
!3260 = !{!3261, !3262, !3254, !3251, !3236, !3237}
!3261 = distinct !{!3261, !3259, !"tcl.setFromAny: %interp"}
!3262 = distinct !{!3262, !3259, !"tcl.setFromAny: %objPtr"}
!3263 = !DILocation(line: 1328, scope: !2012, inlinedAt: !3240)
!3264 = !{!3258, !3236, !3237}
!3265 = !DILocation(line: 2031, scope: !2738, inlinedAt: !3241)
!3266 = !DILocation(line: 2033, scope: !2738, inlinedAt: !3241)
!3267 = !{!3254, !3251, !3236, !3237}
!3268 = !DILocation(line: 385, scope: !995, inlinedAt: !3269)
!3269 = distinct !DILocation(line: 2033, scope: !2738, inlinedAt: !3241)
!3270 = !DILocation(line: 386, scope: !995, inlinedAt: !3269)
!3271 = !{!3254, !3251, !3233, !3236, !3237}
!3272 = !DILocation(line: 152, scope: !1044, inlinedAt: !3243)
!3273 = !DILocation(line: 158, scope: !1044, inlinedAt: !3243)
!3274 = !DILocation(line: 154, scope: !1044, inlinedAt: !3243)
!3275 = !DILocation(line: 156, scope: !1044, inlinedAt: !3243)
!3276 = !DILocation(line: 159, scope: !1044, inlinedAt: !3243)
!3277 = !DILocation(line: 160, scope: !1044, inlinedAt: !3243)
!3278 = !DILocation(line: 167, scope: !1044, inlinedAt: !3243)
!3279 = !DILocation(line: 169, scope: !1044, inlinedAt: !3243)
!3280 = !DILocation(line: 170, scope: !1044, inlinedAt: !3243)
!3281 = !DILocation(line: 2035, scope: !2738, inlinedAt: !3241)
!3282 = !DILocation(line: 2036, scope: !2738, inlinedAt: !3241)
!3283 = !DILocation(line: 2039, scope: !2738, inlinedAt: !3241)
!3284 = !DILocation(line: 71, scope: !1020, inlinedAt: !3285)
!3285 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !3286)
!3286 = distinct !DILocation(line: 2227, scope: !2960, inlinedAt: !3144)
!3287 = !DILocation(line: 72, scope: !1020, inlinedAt: !3285)
!3288 = !DILocation(line: 73, scope: !1020, inlinedAt: !3285)
!3289 = !DILocation(line: 75, scope: !1020, inlinedAt: !3285)
!3290 = !DILocation(line: 76, scope: !1020, inlinedAt: !3285)
!3291 = !DILocation(line: 77, scope: !1020, inlinedAt: !3285)
!3292 = !DILocation(line: 79, scope: !1020, inlinedAt: !3285)
!3293 = !DILocation(line: 80, scope: !1020, inlinedAt: !3285)
!3294 = !DILocation(line: 2229, scope: !2960, inlinedAt: !3144)
!3295 = !DILocation(line: 2231, scope: !2960, inlinedAt: !3144)
!3296 = !DILocation(line: 2232, scope: !2960, inlinedAt: !3144)
!3297 = !DILocation(line: 2233, scope: !2960, inlinedAt: !3144)
!3298 = !DILocation(line: 2234, scope: !2960, inlinedAt: !3144)
!3299 = !{!3236}
!3300 = !{!3233, !3237}
!3301 = !DILocation(line: 1281, scope: !1997, inlinedAt: !3146)
!3302 = !{!3303}
!3303 = distinct !{!3303, !3304, !"tcl.impl.getIndex: %objPtr"}
!3304 = distinct !{!3304, !"tcl.impl.getIndex"}
!3305 = !{!3306, !3236, !3237}
!3306 = distinct !{!3306, !3304, !"tcl.impl.getIndex: %interp"}
!3307 = !DILocation(line: 1283, scope: !1997, inlinedAt: !3146)
!3308 = !DILocation(line: 1285, scope: !1997, inlinedAt: !3146)
!3309 = !DILocation(line: 1287, scope: !1997, inlinedAt: !3146)
!3310 = !DILocation(line: 1288, scope: !1997, inlinedAt: !3146)
!3311 = !DILocation(line: 1289, scope: !1997, inlinedAt: !3146)
!3312 = !{!3306, !3303, !3233, !3236, !3237}
!3313 = !DILocation(line: 2236, scope: !2960, inlinedAt: !3144)
!3314 = !DILocation(line: 2238, scope: !2960, inlinedAt: !3144)
!3315 = !DILocation(line: 38, scope: !1004, inlinedAt: !3316)
!3316 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !3317)
!3317 = distinct !DILocation(line: 2240, scope: !2960, inlinedAt: !3144)
!3318 = !DILocation(line: 39, scope: !1004, inlinedAt: !3316)
!3319 = !DILocation(line: 2241, scope: !2960, inlinedAt: !3144)
!3320 = !DILocation(line: 0, scope: !2960, inlinedAt: !3144)
!3321 = !DILocation(line: 2243, scope: !2960, inlinedAt: !3144)
!3322 = !DILocation(line: 2244, scope: !2960, inlinedAt: !3144)
!3323 = !DILocation(line: 2246, scope: !2960, inlinedAt: !3144)
!3324 = !DILocation(line: 385, scope: !995, inlinedAt: !3325)
!3325 = distinct !DILocation(line: 2246, scope: !2960, inlinedAt: !3144)
!3326 = !DILocation(line: 386, scope: !995, inlinedAt: !3325)
!3327 = !DILocation(line: 39, scope: !1004, inlinedAt: !3328)
!3328 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !3329)
!3329 = distinct !DILocation(line: 2247, scope: !2960, inlinedAt: !3144)
!3330 = !DILocation(line: 2248, scope: !2960, inlinedAt: !3144)
!3331 = !DILocation(line: 2250, scope: !2960, inlinedAt: !3144)
!3332 = !DILocation(line: 1281, scope: !1997, inlinedAt: !3143)
!3333 = !{!3334}
!3334 = distinct !{!3334, !3335, !"tcl.impl.getIndex: %objPtr"}
!3335 = distinct !{!3335, !"tcl.impl.getIndex"}
!3336 = !{!3337, !3236, !3237}
!3337 = distinct !{!3337, !3335, !"tcl.impl.getIndex: %interp"}
!3338 = !DILocation(line: 1283, scope: !1997, inlinedAt: !3143)
!3339 = !DILocation(line: 1285, scope: !1997, inlinedAt: !3143)
!3340 = !DILocation(line: 1287, scope: !1997, inlinedAt: !3143)
!3341 = !DILocation(line: 1288, scope: !1997, inlinedAt: !3143)
!3342 = !DILocation(line: 1289, scope: !1997, inlinedAt: !3143)
!3343 = !{!3337, !3334, !3233, !3236, !3237}
!3344 = !DILocation(line: 71, scope: !1020, inlinedAt: !3345)
!3345 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !3346)
!3346 = distinct !DILocation(line: 2252, scope: !2960, inlinedAt: !3144)
!3347 = !DILocation(line: 72, scope: !1020, inlinedAt: !3345)
!3348 = !DILocation(line: 73, scope: !1020, inlinedAt: !3345)
!3349 = !DILocation(line: 75, scope: !1020, inlinedAt: !3345)
!3350 = !DILocation(line: 76, scope: !1020, inlinedAt: !3345)
!3351 = !DILocation(line: 77, scope: !1020, inlinedAt: !3345)
!3352 = !DILocation(line: 79, scope: !1020, inlinedAt: !3345)
!3353 = !DILocation(line: 80, scope: !1020, inlinedAt: !3345)
!3354 = !DILocation(line: 71, scope: !1020, inlinedAt: !3355)
!3355 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !3356)
!3356 = distinct !DILocation(line: 2255, scope: !2960, inlinedAt: !3144)
!3357 = !DILocation(line: 72, scope: !1020, inlinedAt: !3355)
!3358 = !DILocation(line: 73, scope: !1020, inlinedAt: !3355)
!3359 = !DILocation(line: 75, scope: !1020, inlinedAt: !3355)
!3360 = !DILocation(line: 76, scope: !1020, inlinedAt: !3355)
!3361 = !DILocation(line: 77, scope: !1020, inlinedAt: !3355)
!3362 = !DILocation(line: 79, scope: !1020, inlinedAt: !3355)
!3363 = !DILocation(line: 80, scope: !1020, inlinedAt: !3355)
!3364 = !DILocation(line: 2256, scope: !2960, inlinedAt: !3144)
!3365 = !DILocation(line: 2260, scope: !2960, inlinedAt: !3144)
!3366 = !DILocation(line: 2262, scope: !2960, inlinedAt: !3144)
!3367 = !{!3237}
!3368 = !{!3233, !3236}
!3369 = !DILocation(line: 2263, scope: !2960, inlinedAt: !3144)
!3370 = !DILocation(line: 72, scope: !1020, inlinedAt: !3371)
!3371 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !3372)
!3372 = distinct !DILocation(line: 2354, scope: !3137)
!3373 = !DILocation(line: 73, scope: !1020, inlinedAt: !3371)
!3374 = !DILocation(line: 75, scope: !1020, inlinedAt: !3371)
!3375 = !DILocation(line: 76, scope: !1020, inlinedAt: !3371)
!3376 = !DILocation(line: 77, scope: !1020, inlinedAt: !3371)
!3377 = !DILocation(line: 79, scope: !1020, inlinedAt: !3371)
!3378 = !DILocation(line: 80, scope: !1020, inlinedAt: !3371)
!3379 = !DILocation(line: 2355, scope: !3137)
!3380 = distinct !DISubprogram(name: "tcl.list.range", scope: !864, file: !1273, type: !2198, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !3381)
!3381 = !{!3382, !3383, !3384, !3385}
!3382 = !DILocalVariable(name: "list", arg: 1, scope: !3380, file: !2, type: !998)
!3383 = !DILocalVariable(name: "from", arg: 2, scope: !3380, file: !2, type: !998)
!3384 = !DILocalVariable(name: "to", arg: 3, scope: !3380, file: !2, type: !998)
!3385 = !DILocalVariable(name: "ecvar", arg: 4, scope: !3380, file: !2, type: !976)
!3386 = !DILocation(line: 1279, scope: !1997, inlinedAt: !3387)
!3387 = distinct !DILocation(line: 2390, scope: !3380)
!3388 = !DILocation(line: 1279, scope: !1997, inlinedAt: !3389)
!3389 = distinct !DILocation(line: 2388, scope: !3380)
!3390 = !DILocation(line: 2380, scope: !3380)
!3391 = !DILocation(line: 2381, scope: !3380)
!3392 = !DILocation(line: 2382, scope: !3380)
!3393 = !DILocation(line: 2383, scope: !3380)
!3394 = !DILocation(line: 2384, scope: !3380)
!3395 = !DILocation(line: 2386, scope: !3380)
!3396 = !DILocation(line: 2387, scope: !3380)
!3397 = !DILocation(line: 1281, scope: !1997, inlinedAt: !3389)
!3398 = !{!3399}
!3399 = distinct !{!3399, !3400, !"tcl.impl.getIndex: %objPtr"}
!3400 = distinct !{!3400, !"tcl.impl.getIndex"}
!3401 = !{!3402}
!3402 = distinct !{!3402, !3400, !"tcl.impl.getIndex: %interp"}
!3403 = !{!3402, !3399}
!3404 = !DILocation(line: 1283, scope: !1997, inlinedAt: !3389)
!3405 = !DILocation(line: 1285, scope: !1997, inlinedAt: !3389)
!3406 = !DILocation(line: 1287, scope: !1997, inlinedAt: !3389)
!3407 = !DILocation(line: 1288, scope: !1997, inlinedAt: !3389)
!3408 = !DILocation(line: 1289, scope: !1997, inlinedAt: !3389)
!3409 = !DILocation(line: 0, scope: !1997, inlinedAt: !3389)
!3410 = !DILocation(line: 2388, scope: !3380)
!3411 = !DILocation(line: 1281, scope: !1997, inlinedAt: !3387)
!3412 = !{!3413}
!3413 = distinct !{!3413, !3414, !"tcl.impl.getIndex: %objPtr"}
!3414 = distinct !{!3414, !"tcl.impl.getIndex"}
!3415 = !{!3416}
!3416 = distinct !{!3416, !3414, !"tcl.impl.getIndex: %interp"}
!3417 = !DILocation(line: 1283, scope: !1997, inlinedAt: !3387)
!3418 = !DILocation(line: 1285, scope: !1997, inlinedAt: !3387)
!3419 = !DILocation(line: 1287, scope: !1997, inlinedAt: !3387)
!3420 = !DILocation(line: 1288, scope: !1997, inlinedAt: !3387)
!3421 = !DILocation(line: 1289, scope: !1997, inlinedAt: !3387)
!3422 = !{!3416, !3413}
!3423 = !DILocation(line: 0, scope: !1997, inlinedAt: !3387)
!3424 = !DILocation(line: 2390, scope: !3380)
!3425 = !DILocation(line: 2392, scope: !3380)
!3426 = !DILocation(line: 2393, scope: !3380)
!3427 = !DILocation(line: 2394, scope: !3380)
!3428 = !DILocation(line: 2395, scope: !3380)
!3429 = !DILocation(line: 2396, scope: !3380)
!3430 = !DILocation(line: 2398, scope: !3380)
!3431 = !DILocation(line: 2399, scope: !3380)
!3432 = !DILocation(line: 2400, scope: !3380)
!3433 = !DILocation(line: 2401, scope: !3380)
!3434 = !DILocation(line: 2402, scope: !3380)
!3435 = !DILocation(line: 116, scope: !1345, inlinedAt: !3436)
!3436 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !3437)
!3437 = distinct !DILocation(line: 2402, scope: !3380)
!3438 = !DILocation(line: 138, scope: !1351, inlinedAt: !3437)
!3439 = !DILocation(line: 2406, scope: !3380)
!3440 = !DILocation(line: 2407, scope: !3380)
!3441 = !DILocation(line: 2409, scope: !3380)
!3442 = !DILocation(line: 2414, scope: !3380)
!3443 = !DILocation(line: 2416, scope: !3380)
!3444 = !DILocation(line: 2417, scope: !3380)
!3445 = !DILocation(line: 71, scope: !1020, inlinedAt: !3446)
!3446 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !3447)
!3447 = distinct !DILocation(line: 2418, scope: !3380)
!3448 = !DILocation(line: 72, scope: !1020, inlinedAt: !3446)
!3449 = !DILocation(line: 73, scope: !1020, inlinedAt: !3446)
!3450 = !DILocation(line: 75, scope: !1020, inlinedAt: !3446)
!3451 = !DILocation(line: 76, scope: !1020, inlinedAt: !3446)
!3452 = !DILocation(line: 77, scope: !1020, inlinedAt: !3446)
!3453 = !DILocation(line: 79, scope: !1020, inlinedAt: !3446)
!3454 = !DILocation(line: 80, scope: !1020, inlinedAt: !3446)
!3455 = !DILocation(line: 2421, scope: !3380)
!3456 = !DILocation(line: 2422, scope: !3380)
!3457 = !DILocation(line: 152, scope: !1044, inlinedAt: !3458)
!3458 = distinct !DILocation(line: 2423, scope: !3380)
!3459 = !DILocation(line: 158, scope: !1044, inlinedAt: !3458)
!3460 = !DILocation(line: 154, scope: !1044, inlinedAt: !3458)
!3461 = !DILocation(line: 156, scope: !1044, inlinedAt: !3458)
!3462 = !DILocation(line: 159, scope: !1044, inlinedAt: !3458)
!3463 = !DILocation(line: 160, scope: !1044, inlinedAt: !3458)
!3464 = !DILocation(line: 167, scope: !1044, inlinedAt: !3458)
!3465 = !DILocation(line: 169, scope: !1044, inlinedAt: !3458)
!3466 = !DILocation(line: 170, scope: !1044, inlinedAt: !3458)
!3467 = !DILocation(line: 2426, scope: !3380)
!3468 = !DILocation(line: 385, scope: !995, inlinedAt: !3469)
!3469 = distinct !DILocation(line: 2426, scope: !3380)
!3470 = !DILocation(line: 386, scope: !995, inlinedAt: !3469)
!3471 = !DILocation(line: 2427, scope: !3380)
!3472 = !DILocation(line: 2429, scope: !3380)
!3473 = !DILocation(line: 385, scope: !995, inlinedAt: !3474)
!3474 = distinct !DILocation(line: 2429, scope: !3380)
!3475 = !DILocation(line: 386, scope: !995, inlinedAt: !3474)
!3476 = !DILocation(line: 2430, scope: !3380)
!3477 = !DILocation(line: 38, scope: !1004, inlinedAt: !3478)
!3478 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !3479)
!3479 = distinct !DILocation(line: 2434, scope: !3380)
!3480 = !DILocation(line: 39, scope: !1004, inlinedAt: !3478)
!3481 = !DILocation(line: 2435, scope: !3380)
!3482 = !DILocation(line: 2437, scope: !3380)
!3483 = !DILocation(line: 2438, scope: !3380)
!3484 = distinct !DISubprogram(name: "tcl.list.range1", scope: !864, file: !1273, type: !3485, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !3487)
!3485 = !DISubroutineType(types: !3486)
!3486 = !{!1382, !998, !10, !10, !976}
!3487 = !{!3488, !3489, !3490, !3491}
!3488 = !DILocalVariable(name: "list", arg: 1, scope: !3484, file: !2, type: !998)
!3489 = !DILocalVariable(name: "from", arg: 2, scope: !3484, file: !2, type: !10)
!3490 = !DILocalVariable(name: "to", arg: 3, scope: !3484, file: !2, type: !10)
!3491 = !DILocalVariable(name: "ecvar", arg: 4, scope: !3484, file: !2, type: !976)
!3492 = !DILocation(line: 2471, scope: !3484)
!3493 = !DILocation(line: 2472, scope: !3484)
!3494 = !DILocation(line: 2473, scope: !3484)
!3495 = !DILocation(line: 371, scope: !4, inlinedAt: !3496)
!3496 = distinct !DILocation(line: 2474, scope: !3484)
!3497 = !DILocation(line: 371, scope: !4, inlinedAt: !3498)
!3498 = distinct !DILocation(line: 2475, scope: !3484)
!3499 = !DILocation(line: 2476, scope: !3484)
!3500 = !DILocation(line: 2477, scope: !3484)
!3501 = !DILocation(line: 2479, scope: !3484)
!3502 = !DILocation(line: 2480, scope: !3484)
!3503 = !DILocation(line: 2481, scope: !3484)
!3504 = !DILocation(line: 2482, scope: !3484)
!3505 = !DILocation(line: 2483, scope: !3484)
!3506 = !DILocation(line: 2484, scope: !3484)
!3507 = !DILocation(line: 2485, scope: !3484)
!3508 = !DILocation(line: 2487, scope: !3484)
!3509 = !DILocation(line: 2488, scope: !3484)
!3510 = !DILocation(line: 2489, scope: !3484)
!3511 = !DILocation(line: 116, scope: !1345, inlinedAt: !3512)
!3512 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !3513)
!3513 = distinct !DILocation(line: 2489, scope: !3484)
!3514 = !DILocation(line: 138, scope: !1351, inlinedAt: !3513)
!3515 = !DILocation(line: 2493, scope: !3484)
!3516 = !DILocation(line: 2494, scope: !3484)
!3517 = !DILocation(line: 2496, scope: !3484)
!3518 = !DILocation(line: 2501, scope: !3484)
!3519 = !DILocation(line: 2503, scope: !3484)
!3520 = !DILocation(line: 2504, scope: !3484)
!3521 = !DILocation(line: 71, scope: !1020, inlinedAt: !3522)
!3522 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !3523)
!3523 = distinct !DILocation(line: 2505, scope: !3484)
!3524 = !DILocation(line: 72, scope: !1020, inlinedAt: !3522)
!3525 = !DILocation(line: 73, scope: !1020, inlinedAt: !3522)
!3526 = !DILocation(line: 75, scope: !1020, inlinedAt: !3522)
!3527 = !DILocation(line: 76, scope: !1020, inlinedAt: !3522)
!3528 = !DILocation(line: 77, scope: !1020, inlinedAt: !3522)
!3529 = !DILocation(line: 79, scope: !1020, inlinedAt: !3522)
!3530 = !DILocation(line: 80, scope: !1020, inlinedAt: !3522)
!3531 = !DILocation(line: 2508, scope: !3484)
!3532 = !DILocation(line: 2509, scope: !3484)
!3533 = !DILocation(line: 152, scope: !1044, inlinedAt: !3534)
!3534 = distinct !DILocation(line: 2510, scope: !3484)
!3535 = !DILocation(line: 158, scope: !1044, inlinedAt: !3534)
!3536 = !DILocation(line: 154, scope: !1044, inlinedAt: !3534)
!3537 = !DILocation(line: 156, scope: !1044, inlinedAt: !3534)
!3538 = !DILocation(line: 159, scope: !1044, inlinedAt: !3534)
!3539 = !DILocation(line: 160, scope: !1044, inlinedAt: !3534)
!3540 = !DILocation(line: 167, scope: !1044, inlinedAt: !3534)
!3541 = !DILocation(line: 169, scope: !1044, inlinedAt: !3534)
!3542 = !DILocation(line: 170, scope: !1044, inlinedAt: !3534)
!3543 = !DILocation(line: 2513, scope: !3484)
!3544 = !DILocation(line: 385, scope: !995, inlinedAt: !3545)
!3545 = distinct !DILocation(line: 2513, scope: !3484)
!3546 = !DILocation(line: 386, scope: !995, inlinedAt: !3545)
!3547 = !DILocation(line: 2514, scope: !3484)
!3548 = !DILocation(line: 2516, scope: !3484)
!3549 = !DILocation(line: 385, scope: !995, inlinedAt: !3550)
!3550 = distinct !DILocation(line: 2516, scope: !3484)
!3551 = !DILocation(line: 386, scope: !995, inlinedAt: !3550)
!3552 = !DILocation(line: 2517, scope: !3484)
!3553 = !DILocation(line: 38, scope: !1004, inlinedAt: !3554)
!3554 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !3555)
!3555 = distinct !DILocation(line: 2521, scope: !3484)
!3556 = !DILocation(line: 39, scope: !1004, inlinedAt: !3554)
!3557 = !DILocation(line: 2522, scope: !3484)
!3558 = !DILocation(line: 2524, scope: !3484)
!3559 = !DILocation(line: 2525, scope: !3484)
!3560 = distinct !DISubprogram(name: "tcl.list.set", scope: !864, file: !1273, type: !3561, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !3563)
!3561 = !DISubroutineType(types: !3562)
!3562 = !{!1382, !998, !9, !1061, !998, !976}
!3563 = !{!3564, !3565, !3566, !3567, !3568}
!3564 = !DILocalVariable(name: "list", arg: 1, scope: !3560, file: !2, type: !998)
!3565 = !DILocalVariable(name: "idxc", arg: 2, scope: !3560, file: !2, type: !9)
!3566 = !DILocalVariable(name: "idxv", arg: 3, scope: !3560, file: !2, type: !1061)
!3567 = !DILocalVariable(name: "elem", arg: 4, scope: !3560, file: !2, type: !998)
!3568 = !DILocalVariable(name: "ecvar", arg: 5, scope: !3560, file: !2, type: !976)
!3569 = !DILocation(line: 1279, scope: !1997, inlinedAt: !3570)
!3570 = distinct !DILocation(line: 2588, scope: !3560)
!3571 = !DILocation(line: 2560, scope: !3560)
!3572 = !DILocation(line: 2561, scope: !3560)
!3573 = !DILocation(line: 2564, scope: !3560)
!3574 = !DILocation(line: 2565, scope: !3560)
!3575 = !DILocation(line: 0, scope: !3560)
!3576 = !DILocation(line: 39, scope: !1004, inlinedAt: !3577)
!3577 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !3578)
!3578 = distinct !DILocation(line: 2567, scope: !3560)
!3579 = !DILocation(line: 2568, scope: !3560)
!3580 = !DILocation(line: 138, scope: !1351, inlinedAt: !3581)
!3581 = distinct !DILocation(line: 2570, scope: !3560)
!3582 = !DILocation(line: 2570, scope: !3560)
!3583 = !DILocation(line: 2572, scope: !3560)
!3584 = !DILocation(line: 385, scope: !995, inlinedAt: !3585)
!3585 = distinct !DILocation(line: 2572, scope: !3560)
!3586 = !DILocation(line: 386, scope: !995, inlinedAt: !3585)
!3587 = !DILocation(line: 2573, scope: !3560)
!3588 = !DILocation(line: 2583, scope: !3560)
!3589 = !DILocation(line: 0, scope: !1997, inlinedAt: !3570)
!3590 = !{!3591, !3593}
!3591 = distinct !{!3591, !3592, !"tcl.impl.getIndex: %interp"}
!3592 = distinct !{!3592, !"tcl.impl.getIndex"}
!3593 = distinct !{!3593, !3592, !"tcl.impl.getIndex: %objPtr"}
!3594 = !DILocation(line: 2634, scope: !3560)
!3595 = !DILocation(line: 2585, scope: !3560)
!3596 = !DILocation(line: 2586, scope: !3560)
!3597 = !DILocation(line: 2588, scope: !3560)
!3598 = !DILocation(line: 1281, scope: !1997, inlinedAt: !3570)
!3599 = !{!3593}
!3600 = !{!3591}
!3601 = !DILocation(line: 1283, scope: !1997, inlinedAt: !3570)
!3602 = !DILocation(line: 1285, scope: !1997, inlinedAt: !3570)
!3603 = !DILocation(line: 1287, scope: !1997, inlinedAt: !3570)
!3604 = !DILocation(line: 1288, scope: !1997, inlinedAt: !3570)
!3605 = !DILocation(line: 1289, scope: !1997, inlinedAt: !3570)
!3606 = !DILocation(line: 2590, scope: !3560)
!3607 = !DILocation(line: 2591, scope: !3560)
!3608 = !DILocation(line: 2593, scope: !3560)
!3609 = !DILocation(line: 2595, scope: !3560)
!3610 = !DILocation(line: 2598, scope: !3560)
!3611 = !DILocation(line: 2603, scope: !3560)
!3612 = !DILocation(line: 116, scope: !1345, inlinedAt: !3613)
!3613 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !3614)
!3614 = distinct !DILocation(line: 2604, scope: !3560)
!3615 = !DILocation(line: 138, scope: !1351, inlinedAt: !3614)
!3616 = !DILocation(line: 2604, scope: !3560)
!3617 = !DILocation(line: 2606, scope: !3560)
!3618 = !DILocation(line: 385, scope: !995, inlinedAt: !3619)
!3619 = distinct !DILocation(line: 2606, scope: !3560)
!3620 = !DILocation(line: 386, scope: !995, inlinedAt: !3619)
!3621 = !DILocation(line: 2607, scope: !3560)
!3622 = !DILocation(line: 2600, scope: !3560)
!3623 = !DILocation(line: 385, scope: !995, inlinedAt: !3624)
!3624 = distinct !DILocation(line: 2600, scope: !3560)
!3625 = !DILocation(line: 386, scope: !995, inlinedAt: !3624)
!3626 = !DILocation(line: 2613, scope: !3560)
!3627 = !DILocation(line: 2614, scope: !3560)
!3628 = !DILocation(line: 2616, scope: !3560)
!3629 = !DILocation(line: 2617, scope: !3560)
!3630 = !DILocation(line: 116, scope: !1345, inlinedAt: !3631)
!3631 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !3632)
!3632 = distinct !DILocation(line: 2619, scope: !3560)
!3633 = !DILocation(line: 138, scope: !1351, inlinedAt: !3632)
!3634 = !DILocation(line: 2619, scope: !3560)
!3635 = !DILocation(line: 2621, scope: !3560)
!3636 = !DILocation(line: 385, scope: !995, inlinedAt: !3637)
!3637 = distinct !DILocation(line: 2621, scope: !3560)
!3638 = !DILocation(line: 386, scope: !995, inlinedAt: !3637)
!3639 = !DILocation(line: 2622, scope: !3560)
!3640 = !DILocation(line: 2623, scope: !3560)
!3641 = !DILocation(line: 2625, scope: !3560)
!3642 = !DILocation(line: 2629, scope: !3560)
!3643 = !DILocation(line: 116, scope: !1345, inlinedAt: !3644)
!3644 = distinct !DILocation(line: 2629, scope: !3560)
!3645 = !DILocation(line: 2630, scope: !3560)
!3646 = !DILocation(line: 116, scope: !1345, inlinedAt: !3647)
!3647 = distinct !DILocation(line: 2630, scope: !3560)
!3648 = !DILocation(line: 2631, scope: !3560)
!3649 = !DILocation(line: 2651, scope: !3560)
!3650 = !DILocation(line: 0, scope: !1044, inlinedAt: !3651)
!3651 = distinct !DILocation(line: 2656, scope: !3560)
!3652 = !DILocation(line: 2636, scope: !3560)
!3653 = !DILocation(line: 2637, scope: !3560)
!3654 = !DILocation(line: 2638, scope: !3560)
!3655 = !DILocation(line: 2641, scope: !3560)
!3656 = !DILocation(line: 71, scope: !1020, inlinedAt: !3657)
!3657 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !3658)
!3658 = distinct !DILocation(line: 2643, scope: !3560)
!3659 = !DILocation(line: 72, scope: !1020, inlinedAt: !3657)
!3660 = !DILocation(line: 73, scope: !1020, inlinedAt: !3657)
!3661 = !DILocation(line: 75, scope: !1020, inlinedAt: !3657)
!3662 = !DILocation(line: 76, scope: !1020, inlinedAt: !3657)
!3663 = !DILocation(line: 77, scope: !1020, inlinedAt: !3657)
!3664 = !DILocation(line: 79, scope: !1020, inlinedAt: !3657)
!3665 = !DILocation(line: 80, scope: !1020, inlinedAt: !3657)
!3666 = !DILocation(line: 2646, scope: !3560)
!3667 = !DILocation(line: 2647, scope: !3560)
!3668 = !DILocation(line: 2653, scope: !3560)
!3669 = !DILocation(line: 2654, scope: !3560)
!3670 = !DILocation(line: 2655, scope: !3560)
!3671 = !DILocation(line: 152, scope: !1044, inlinedAt: !3651)
!3672 = !DILocation(line: 158, scope: !1044, inlinedAt: !3651)
!3673 = !DILocation(line: 154, scope: !1044, inlinedAt: !3651)
!3674 = !DILocation(line: 156, scope: !1044, inlinedAt: !3651)
!3675 = !DILocation(line: 159, scope: !1044, inlinedAt: !3651)
!3676 = !DILocation(line: 160, scope: !1044, inlinedAt: !3651)
!3677 = !DILocation(line: 167, scope: !1044, inlinedAt: !3651)
!3678 = !DILocation(line: 169, scope: !1044, inlinedAt: !3651)
!3679 = !DILocation(line: 170, scope: !1044, inlinedAt: !3651)
!3680 = !DILocation(line: 2659, scope: !3560)
!3681 = !DILocation(line: 2660, scope: !3560)
!3682 = !DILocation(line: 2662, scope: !3560)
!3683 = !DILocation(line: 2663, scope: !3560)
!3684 = !DILocation(line: 2665, scope: !3560)
!3685 = !DILocation(line: 2666, scope: !3560)
!3686 = !DILocation(line: 152, scope: !1044, inlinedAt: !3687)
!3687 = distinct !DILocation(line: 2668, scope: !3560)
!3688 = !DILocation(line: 158, scope: !1044, inlinedAt: !3687)
!3689 = !DILocation(line: 154, scope: !1044, inlinedAt: !3687)
!3690 = !DILocation(line: 156, scope: !1044, inlinedAt: !3687)
!3691 = !DILocation(line: 159, scope: !1044, inlinedAt: !3687)
!3692 = !DILocation(line: 160, scope: !1044, inlinedAt: !3687)
!3693 = !DILocation(line: 167, scope: !1044, inlinedAt: !3687)
!3694 = !DILocation(line: 169, scope: !1044, inlinedAt: !3687)
!3695 = !DILocation(line: 170, scope: !1044, inlinedAt: !3687)
!3696 = !DILocation(line: 38, scope: !1004, inlinedAt: !3697)
!3697 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !3698)
!3698 = distinct !DILocation(line: 2669, scope: !3560)
!3699 = !DILocation(line: 39, scope: !1004, inlinedAt: !3697)
!3700 = !DILocation(line: 116, scope: !1345, inlinedAt: !3701)
!3701 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !3702)
!3702 = distinct !DILocation(line: 2670, scope: !3560)
!3703 = !DILocation(line: 138, scope: !1351, inlinedAt: !3702)
!3704 = !DILocation(line: 2670, scope: !3560)
!3705 = !DILocation(line: 39, scope: !1004, inlinedAt: !3706)
!3706 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !3707)
!3707 = distinct !DILocation(line: 2672, scope: !3560)
!3708 = !DILocation(line: 2673, scope: !3560)
!3709 = !DILocation(line: 2675, scope: !3560)
!3710 = distinct !DISubprogram(name: "tcl.list.set1", scope: !864, file: !1273, type: !3711, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !3713)
!3711 = !DISubroutineType(types: !3712)
!3712 = !{!1382, !998, !10, !998, !976}
!3713 = !{!3714, !3715, !3716, !3717}
!3714 = !DILocalVariable(name: "list", arg: 1, scope: !3710, file: !2, type: !998)
!3715 = !DILocalVariable(name: "idx", arg: 2, scope: !3710, file: !2, type: !10)
!3716 = !DILocalVariable(name: "elem", arg: 3, scope: !3710, file: !2, type: !998)
!3717 = !DILocalVariable(name: "ecvar", arg: 4, scope: !3710, file: !2, type: !976)
!3718 = !DILocation(line: 2704, scope: !3710)
!3719 = !DILocation(line: 2705, scope: !3710)
!3720 = !DILocation(line: 371, scope: !4, inlinedAt: !3721)
!3721 = distinct !DILocation(line: 2706, scope: !3710)
!3722 = !DILocation(line: 2707, scope: !3710)
!3723 = !DILocation(line: 116, scope: !1345, inlinedAt: !3724)
!3724 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !3725)
!3725 = distinct !DILocation(line: 1351, scope: !2023, inlinedAt: !3726)
!3726 = distinct !DILocation(line: 2708, scope: !3710)
!3727 = !DILocation(line: 138, scope: !1351, inlinedAt: !3725)
!3728 = !DILocation(line: 1354, scope: !2023, inlinedAt: !3726)
!3729 = !DILocation(line: 1356, scope: !2023, inlinedAt: !3726)
!3730 = !DILocation(line: 385, scope: !995, inlinedAt: !3731)
!3731 = distinct !DILocation(line: 1356, scope: !2023, inlinedAt: !3726)
!3732 = !DILocation(line: 386, scope: !995, inlinedAt: !3731)
!3733 = !DILocation(line: 1358, scope: !2023, inlinedAt: !3726)
!3734 = !DILocation(line: 2709, scope: !3710)
!3735 = !DILocation(line: 2710, scope: !3710)
!3736 = !DILocation(line: 2712, scope: !3710)
!3737 = !DILocation(line: 2713, scope: !3710)
!3738 = !DILocation(line: 116, scope: !1345, inlinedAt: !3739)
!3739 = distinct !DILocation(line: 2715, scope: !3710)
!3740 = !DILocation(line: 2716, scope: !3710)
!3741 = !DILocation(line: 2718, scope: !3710)
!3742 = !DILocation(line: 2719, scope: !3710)
!3743 = !DILocation(line: 2721, scope: !3710)
!3744 = !DILocation(line: 2722, scope: !3710)
!3745 = !DILocation(line: 116, scope: !1345, inlinedAt: !3746)
!3746 = distinct !DILocation(line: 2724, scope: !3710)
!3747 = !DILocation(line: 2724, scope: !3710)
!3748 = !DILocation(line: 152, scope: !1044, inlinedAt: !3749)
!3749 = distinct !DILocation(line: 2725, scope: !3710)
!3750 = !DILocation(line: 158, scope: !1044, inlinedAt: !3749)
!3751 = !DILocation(line: 154, scope: !1044, inlinedAt: !3749)
!3752 = !DILocation(line: 156, scope: !1044, inlinedAt: !3749)
!3753 = !DILocation(line: 159, scope: !1044, inlinedAt: !3749)
!3754 = !DILocation(line: 160, scope: !1044, inlinedAt: !3749)
!3755 = !DILocation(line: 39, scope: !1004, inlinedAt: !3756)
!3756 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !3757)
!3757 = distinct !DILocation(line: 2726, scope: !3710)
!3758 = !DILocation(line: 167, scope: !1044, inlinedAt: !3749)
!3759 = !DILocation(line: 169, scope: !1044, inlinedAt: !3749)
!3760 = !DILocation(line: 170, scope: !1044, inlinedAt: !3749)
!3761 = !DILocation(line: 116, scope: !1345, inlinedAt: !3762)
!3762 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !3763)
!3763 = distinct !DILocation(line: 2727, scope: !3710)
!3764 = !DILocation(line: 138, scope: !1351, inlinedAt: !3763)
!3765 = !DILocation(line: 2727, scope: !3710)
!3766 = !DILocation(line: 39, scope: !1004, inlinedAt: !3767)
!3767 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !3768)
!3768 = distinct !DILocation(line: 2729, scope: !3710)
!3769 = !DILocation(line: 2730, scope: !3710)
!3770 = !DILocation(line: 2732, scope: !3710)
!3771 = !DILocation(line: 2734, scope: !3710)
!3772 = !DILocation(line: 116, scope: !1345, inlinedAt: !3773)
!3773 = distinct !DILocation(line: 2734, scope: !3710)
!3774 = !DILocation(line: 2735, scope: !3710)
!3775 = !DILocation(line: 116, scope: !1345, inlinedAt: !3776)
!3776 = distinct !DILocation(line: 2735, scope: !3710)
!3777 = !DILocation(line: 2736, scope: !3710)
!3778 = !DILocation(line: 1372, scope: !2042, inlinedAt: !3779)
!3779 = distinct !DILocation(line: 2738, scope: !3710)
!3780 = !DILocation(line: 71, scope: !1020, inlinedAt: !3781)
!3781 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !3782)
!3782 = distinct !DILocation(line: 1374, scope: !2042, inlinedAt: !3779)
!3783 = !DILocation(line: 72, scope: !1020, inlinedAt: !3781)
!3784 = !DILocation(line: 73, scope: !1020, inlinedAt: !3781)
!3785 = !DILocation(line: 75, scope: !1020, inlinedAt: !3781)
!3786 = !DILocation(line: 76, scope: !1020, inlinedAt: !3781)
!3787 = !DILocation(line: 77, scope: !1020, inlinedAt: !3781)
!3788 = !DILocation(line: 79, scope: !1020, inlinedAt: !3781)
!3789 = !DILocation(line: 80, scope: !1020, inlinedAt: !3781)
!3790 = !DILocation(line: 2739, scope: !3710)
!3791 = !DILocation(line: 2740, scope: !3710)
!3792 = distinct !DISubprogram(name: "tcl.list.setList", scope: !864, file: !1273, type: !2198, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !3793)
!3793 = !{!3794, !3795, !3796, !3797}
!3794 = !DILocalVariable(name: "list", arg: 1, scope: !3792, file: !2, type: !998)
!3795 = !DILocalVariable(name: "idxArg", arg: 2, scope: !3792, file: !2, type: !998)
!3796 = !DILocalVariable(name: "elem", arg: 3, scope: !3792, file: !2, type: !998)
!3797 = !DILocalVariable(name: "ecvar", arg: 4, scope: !3792, file: !2, type: !976)
!3798 = !DILocation(line: 1279, scope: !1997, inlinedAt: !3799)
!3799 = distinct !DILocation(line: 2588, scope: !3560, inlinedAt: !3800)
!3800 = distinct !DILocation(line: 2775, scope: !3792)
!3801 = !DILocation(line: 2560, scope: !3560, inlinedAt: !3800)
!3802 = !DILocation(line: 2561, scope: !3560, inlinedAt: !3800)
!3803 = !DILocation(line: 1279, scope: !1997, inlinedAt: !3804)
!3804 = distinct !DILocation(line: 2588, scope: !3560, inlinedAt: !3805)
!3805 = distinct !DILocation(line: 2768, scope: !3792)
!3806 = !DILocation(line: 2560, scope: !3560, inlinedAt: !3805)
!3807 = !DILocation(line: 2561, scope: !3560, inlinedAt: !3805)
!3808 = !DILocation(line: 1279, scope: !1997, inlinedAt: !3809)
!3809 = distinct !DILocation(line: 2765, scope: !3792)
!3810 = !DILocation(line: 2761, scope: !3792)
!3811 = !DILocation(line: 2762, scope: !3792)
!3812 = !DILocation(line: 2763, scope: !3792)
!3813 = !DILocation(line: 1281, scope: !1997, inlinedAt: !3809)
!3814 = !{!3815, !3817}
!3815 = distinct !{!3815, !3816, !"tcl.impl.getIndex: %interp"}
!3816 = distinct !{!3816, !"tcl.impl.getIndex"}
!3817 = distinct !{!3817, !3816, !"tcl.impl.getIndex: %objPtr"}
!3818 = !DILocation(line: 1283, scope: !1997, inlinedAt: !3809)
!3819 = !DILocation(line: 1285, scope: !1997, inlinedAt: !3809)
!3820 = !{!3817}
!3821 = !{!3815}
!3822 = !DILocation(line: 1287, scope: !1997, inlinedAt: !3809)
!3823 = !DILocation(line: 1288, scope: !1997, inlinedAt: !3809)
!3824 = !DILocation(line: 1289, scope: !1997, inlinedAt: !3809)
!3825 = !DILocation(line: 0, scope: !1997, inlinedAt: !3809)
!3826 = !DILocation(line: 2765, scope: !3792)
!3827 = !DILocation(line: 2564, scope: !3560, inlinedAt: !3805)
!3828 = !{!3829, !3831}
!3829 = distinct !{!3829, !3830, !"tcl.list.set: %idxv"}
!3830 = distinct !{!3830, !"tcl.list.set"}
!3831 = distinct !{!3831, !3830, !"tcl.list.set: %ecvar"}
!3832 = !DILocation(line: 0, scope: !3560, inlinedAt: !3805)
!3833 = !DILocation(line: 138, scope: !1351, inlinedAt: !3834)
!3834 = distinct !DILocation(line: 2570, scope: !3560, inlinedAt: !3805)
!3835 = !DILocation(line: 2570, scope: !3560, inlinedAt: !3805)
!3836 = !DILocation(line: 2572, scope: !3560, inlinedAt: !3805)
!3837 = !DILocation(line: 385, scope: !995, inlinedAt: !3838)
!3838 = distinct !DILocation(line: 2572, scope: !3560, inlinedAt: !3805)
!3839 = !DILocation(line: 386, scope: !995, inlinedAt: !3838)
!3840 = !DILocation(line: 2573, scope: !3560, inlinedAt: !3805)
!3841 = !DILocation(line: 2583, scope: !3560, inlinedAt: !3805)
!3842 = !DILocation(line: 0, scope: !1997, inlinedAt: !3804)
!3843 = !{!3844, !3846, !3829, !3831}
!3844 = distinct !{!3844, !3845, !"tcl.impl.getIndex: %interp"}
!3845 = distinct !{!3845, !"tcl.impl.getIndex"}
!3846 = distinct !{!3846, !3845, !"tcl.impl.getIndex: %objPtr"}
!3847 = !DILocation(line: 2585, scope: !3560, inlinedAt: !3805)
!3848 = !DILocation(line: 1281, scope: !1997, inlinedAt: !3804)
!3849 = !{!3846}
!3850 = !{!3844, !3829, !3831}
!3851 = !DILocation(line: 1283, scope: !1997, inlinedAt: !3804)
!3852 = !DILocation(line: 1285, scope: !1997, inlinedAt: !3804)
!3853 = !DILocation(line: 1287, scope: !1997, inlinedAt: !3804)
!3854 = !DILocation(line: 1288, scope: !1997, inlinedAt: !3804)
!3855 = !DILocation(line: 1289, scope: !1997, inlinedAt: !3804)
!3856 = !DILocation(line: 2588, scope: !3560, inlinedAt: !3805)
!3857 = !DILocation(line: 2591, scope: !3560, inlinedAt: !3805)
!3858 = !DILocation(line: 2629, scope: !3560, inlinedAt: !3805)
!3859 = !DILocation(line: 116, scope: !1345, inlinedAt: !3860)
!3860 = distinct !DILocation(line: 2629, scope: !3560, inlinedAt: !3805)
!3861 = !DILocation(line: 2630, scope: !3560, inlinedAt: !3805)
!3862 = !DILocation(line: 116, scope: !1345, inlinedAt: !3863)
!3863 = distinct !DILocation(line: 2630, scope: !3560, inlinedAt: !3805)
!3864 = !DILocation(line: 2631, scope: !3560, inlinedAt: !3805)
!3865 = !DILocation(line: 2641, scope: !3560, inlinedAt: !3805)
!3866 = !DILocation(line: 71, scope: !1020, inlinedAt: !3867)
!3867 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !3868)
!3868 = distinct !DILocation(line: 2643, scope: !3560, inlinedAt: !3805)
!3869 = !DILocation(line: 72, scope: !1020, inlinedAt: !3867)
!3870 = !DILocation(line: 73, scope: !1020, inlinedAt: !3867)
!3871 = !DILocation(line: 75, scope: !1020, inlinedAt: !3867)
!3872 = !DILocation(line: 76, scope: !1020, inlinedAt: !3867)
!3873 = !DILocation(line: 77, scope: !1020, inlinedAt: !3867)
!3874 = !DILocation(line: 79, scope: !1020, inlinedAt: !3867)
!3875 = !DILocation(line: 80, scope: !1020, inlinedAt: !3867)
!3876 = !DILocation(line: 2646, scope: !3560, inlinedAt: !3805)
!3877 = !{!3831}
!3878 = !{!3829}
!3879 = !DILocation(line: 2647, scope: !3560, inlinedAt: !3805)
!3880 = !DILocation(line: 2659, scope: !3560, inlinedAt: !3805)
!3881 = !DILocation(line: 2660, scope: !3560, inlinedAt: !3805)
!3882 = !DILocation(line: 2662, scope: !3560, inlinedAt: !3805)
!3883 = !DILocation(line: 2663, scope: !3560, inlinedAt: !3805)
!3884 = !DILocation(line: 2665, scope: !3560, inlinedAt: !3805)
!3885 = !DILocation(line: 2666, scope: !3560, inlinedAt: !3805)
!3886 = !DILocation(line: 152, scope: !1044, inlinedAt: !3887)
!3887 = distinct !DILocation(line: 2668, scope: !3560, inlinedAt: !3805)
!3888 = !DILocation(line: 158, scope: !1044, inlinedAt: !3887)
!3889 = !DILocation(line: 154, scope: !1044, inlinedAt: !3887)
!3890 = !DILocation(line: 156, scope: !1044, inlinedAt: !3887)
!3891 = !DILocation(line: 159, scope: !1044, inlinedAt: !3887)
!3892 = !DILocation(line: 160, scope: !1044, inlinedAt: !3887)
!3893 = !DILocation(line: 167, scope: !1044, inlinedAt: !3887)
!3894 = !DILocation(line: 169, scope: !1044, inlinedAt: !3887)
!3895 = !DILocation(line: 170, scope: !1044, inlinedAt: !3887)
!3896 = !DILocation(line: 38, scope: !1004, inlinedAt: !3897)
!3897 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !3898)
!3898 = distinct !DILocation(line: 2669, scope: !3560, inlinedAt: !3805)
!3899 = !DILocation(line: 39, scope: !1004, inlinedAt: !3897)
!3900 = !DILocation(line: 116, scope: !1345, inlinedAt: !3901)
!3901 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !3902)
!3902 = distinct !DILocation(line: 2670, scope: !3560, inlinedAt: !3805)
!3903 = !DILocation(line: 138, scope: !1351, inlinedAt: !3902)
!3904 = !DILocation(line: 2670, scope: !3560, inlinedAt: !3805)
!3905 = !DILocation(line: 39, scope: !1004, inlinedAt: !3906)
!3906 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !3907)
!3907 = distinct !DILocation(line: 2672, scope: !3560, inlinedAt: !3805)
!3908 = !DILocation(line: 2673, scope: !3560, inlinedAt: !3805)
!3909 = !DILocation(line: 2675, scope: !3560, inlinedAt: !3805)
!3910 = !DILocation(line: 2768, scope: !3792)
!3911 = !DILocation(line: 2770, scope: !3792)
!3912 = !DILocation(line: 2771, scope: !3792)
!3913 = !DILocation(line: 2773, scope: !3792)
!3914 = !DILocation(line: 385, scope: !995, inlinedAt: !3915)
!3915 = distinct !DILocation(line: 2773, scope: !3792)
!3916 = !DILocation(line: 386, scope: !995, inlinedAt: !3915)
!3917 = !DILocation(line: 2774, scope: !3792)
!3918 = !DILocation(line: 2775, scope: !3792)
!3919 = !DILocation(line: 2564, scope: !3560, inlinedAt: !3800)
!3920 = !{!3921, !3923}
!3921 = distinct !{!3921, !3922, !"tcl.list.set: %idxv"}
!3922 = distinct !{!3922, !"tcl.list.set"}
!3923 = distinct !{!3923, !3922, !"tcl.list.set: %ecvar"}
!3924 = !DILocation(line: 2565, scope: !3560, inlinedAt: !3800)
!3925 = !DILocation(line: 0, scope: !3560, inlinedAt: !3800)
!3926 = !DILocation(line: 39, scope: !1004, inlinedAt: !3927)
!3927 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !3928)
!3928 = distinct !DILocation(line: 2567, scope: !3560, inlinedAt: !3800)
!3929 = !DILocation(line: 2568, scope: !3560, inlinedAt: !3800)
!3930 = !DILocation(line: 138, scope: !1351, inlinedAt: !3931)
!3931 = distinct !DILocation(line: 2570, scope: !3560, inlinedAt: !3800)
!3932 = !DILocation(line: 2570, scope: !3560, inlinedAt: !3800)
!3933 = !DILocation(line: 2572, scope: !3560, inlinedAt: !3800)
!3934 = !DILocation(line: 385, scope: !995, inlinedAt: !3935)
!3935 = distinct !DILocation(line: 2572, scope: !3560, inlinedAt: !3800)
!3936 = !DILocation(line: 386, scope: !995, inlinedAt: !3935)
!3937 = !DILocation(line: 2573, scope: !3560, inlinedAt: !3800)
!3938 = !DILocation(line: 2583, scope: !3560, inlinedAt: !3800)
!3939 = !DILocation(line: 0, scope: !1997, inlinedAt: !3799)
!3940 = !{!3941, !3943, !3921, !3923}
!3941 = distinct !{!3941, !3942, !"tcl.impl.getIndex: %interp"}
!3942 = distinct !{!3942, !"tcl.impl.getIndex"}
!3943 = distinct !{!3943, !3942, !"tcl.impl.getIndex: %objPtr"}
!3944 = !DILocation(line: 2634, scope: !3560, inlinedAt: !3800)
!3945 = !DILocation(line: 2585, scope: !3560, inlinedAt: !3800)
!3946 = !DILocation(line: 2586, scope: !3560, inlinedAt: !3800)
!3947 = !DILocation(line: 2588, scope: !3560, inlinedAt: !3800)
!3948 = !{!3921}
!3949 = !{!3923}
!3950 = !DILocation(line: 1281, scope: !1997, inlinedAt: !3799)
!3951 = !{!3943}
!3952 = !{!3941, !3921, !3923}
!3953 = !DILocation(line: 1283, scope: !1997, inlinedAt: !3799)
!3954 = !DILocation(line: 1285, scope: !1997, inlinedAt: !3799)
!3955 = !DILocation(line: 1287, scope: !1997, inlinedAt: !3799)
!3956 = !DILocation(line: 1288, scope: !1997, inlinedAt: !3799)
!3957 = !DILocation(line: 1289, scope: !1997, inlinedAt: !3799)
!3958 = !DILocation(line: 2590, scope: !3560, inlinedAt: !3800)
!3959 = !DILocation(line: 2591, scope: !3560, inlinedAt: !3800)
!3960 = !DILocation(line: 2593, scope: !3560, inlinedAt: !3800)
!3961 = !DILocation(line: 2595, scope: !3560, inlinedAt: !3800)
!3962 = !DILocation(line: 2598, scope: !3560, inlinedAt: !3800)
!3963 = !DILocation(line: 2603, scope: !3560, inlinedAt: !3800)
!3964 = !DILocation(line: 116, scope: !1345, inlinedAt: !3965)
!3965 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !3966)
!3966 = distinct !DILocation(line: 2604, scope: !3560, inlinedAt: !3800)
!3967 = !DILocation(line: 138, scope: !1351, inlinedAt: !3966)
!3968 = !DILocation(line: 2604, scope: !3560, inlinedAt: !3800)
!3969 = !DILocation(line: 2606, scope: !3560, inlinedAt: !3800)
!3970 = !DILocation(line: 385, scope: !995, inlinedAt: !3971)
!3971 = distinct !DILocation(line: 2606, scope: !3560, inlinedAt: !3800)
!3972 = !DILocation(line: 386, scope: !995, inlinedAt: !3971)
!3973 = !DILocation(line: 2607, scope: !3560, inlinedAt: !3800)
!3974 = !DILocation(line: 2600, scope: !3560, inlinedAt: !3800)
!3975 = !DILocation(line: 385, scope: !995, inlinedAt: !3976)
!3976 = distinct !DILocation(line: 2600, scope: !3560, inlinedAt: !3800)
!3977 = !DILocation(line: 386, scope: !995, inlinedAt: !3976)
!3978 = !DILocation(line: 2613, scope: !3560, inlinedAt: !3800)
!3979 = !DILocation(line: 2614, scope: !3560, inlinedAt: !3800)
!3980 = !DILocation(line: 2616, scope: !3560, inlinedAt: !3800)
!3981 = !DILocation(line: 2617, scope: !3560, inlinedAt: !3800)
!3982 = !DILocation(line: 116, scope: !1345, inlinedAt: !3983)
!3983 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !3984)
!3984 = distinct !DILocation(line: 2619, scope: !3560, inlinedAt: !3800)
!3985 = !DILocation(line: 138, scope: !1351, inlinedAt: !3984)
!3986 = !DILocation(line: 2619, scope: !3560, inlinedAt: !3800)
!3987 = !DILocation(line: 2621, scope: !3560, inlinedAt: !3800)
!3988 = !DILocation(line: 385, scope: !995, inlinedAt: !3989)
!3989 = distinct !DILocation(line: 2621, scope: !3560, inlinedAt: !3800)
!3990 = !DILocation(line: 386, scope: !995, inlinedAt: !3989)
!3991 = !DILocation(line: 2622, scope: !3560, inlinedAt: !3800)
!3992 = !DILocation(line: 2623, scope: !3560, inlinedAt: !3800)
!3993 = !DILocation(line: 2625, scope: !3560, inlinedAt: !3800)
!3994 = !DILocation(line: 2629, scope: !3560, inlinedAt: !3800)
!3995 = !DILocation(line: 116, scope: !1345, inlinedAt: !3996)
!3996 = distinct !DILocation(line: 2629, scope: !3560, inlinedAt: !3800)
!3997 = !DILocation(line: 2630, scope: !3560, inlinedAt: !3800)
!3998 = !DILocation(line: 116, scope: !1345, inlinedAt: !3999)
!3999 = distinct !DILocation(line: 2630, scope: !3560, inlinedAt: !3800)
!4000 = !DILocation(line: 2631, scope: !3560, inlinedAt: !3800)
!4001 = !DILocation(line: 2651, scope: !3560, inlinedAt: !3800)
!4002 = !DILocation(line: 0, scope: !1044, inlinedAt: !4003)
!4003 = distinct !DILocation(line: 2656, scope: !3560, inlinedAt: !3800)
!4004 = !DILocation(line: 2636, scope: !3560, inlinedAt: !3800)
!4005 = !DILocation(line: 2637, scope: !3560, inlinedAt: !3800)
!4006 = !DILocation(line: 2638, scope: !3560, inlinedAt: !3800)
!4007 = !DILocation(line: 2641, scope: !3560, inlinedAt: !3800)
!4008 = !DILocation(line: 71, scope: !1020, inlinedAt: !4009)
!4009 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !4010)
!4010 = distinct !DILocation(line: 2643, scope: !3560, inlinedAt: !3800)
!4011 = !DILocation(line: 72, scope: !1020, inlinedAt: !4009)
!4012 = !DILocation(line: 73, scope: !1020, inlinedAt: !4009)
!4013 = !DILocation(line: 75, scope: !1020, inlinedAt: !4009)
!4014 = !DILocation(line: 76, scope: !1020, inlinedAt: !4009)
!4015 = !DILocation(line: 77, scope: !1020, inlinedAt: !4009)
!4016 = !DILocation(line: 79, scope: !1020, inlinedAt: !4009)
!4017 = !DILocation(line: 80, scope: !1020, inlinedAt: !4009)
!4018 = !DILocation(line: 2646, scope: !3560, inlinedAt: !3800)
!4019 = !DILocation(line: 2647, scope: !3560, inlinedAt: !3800)
!4020 = !DILocation(line: 2653, scope: !3560, inlinedAt: !3800)
!4021 = !DILocation(line: 2654, scope: !3560, inlinedAt: !3800)
!4022 = !DILocation(line: 2655, scope: !3560, inlinedAt: !3800)
!4023 = !DILocation(line: 152, scope: !1044, inlinedAt: !4003)
!4024 = !DILocation(line: 158, scope: !1044, inlinedAt: !4003)
!4025 = !DILocation(line: 154, scope: !1044, inlinedAt: !4003)
!4026 = !DILocation(line: 156, scope: !1044, inlinedAt: !4003)
!4027 = !DILocation(line: 159, scope: !1044, inlinedAt: !4003)
!4028 = !DILocation(line: 160, scope: !1044, inlinedAt: !4003)
!4029 = !DILocation(line: 167, scope: !1044, inlinedAt: !4003)
!4030 = !DILocation(line: 169, scope: !1044, inlinedAt: !4003)
!4031 = !DILocation(line: 170, scope: !1044, inlinedAt: !4003)
!4032 = !DILocation(line: 2659, scope: !3560, inlinedAt: !3800)
!4033 = !DILocation(line: 2660, scope: !3560, inlinedAt: !3800)
!4034 = !DILocation(line: 2662, scope: !3560, inlinedAt: !3800)
!4035 = !DILocation(line: 2663, scope: !3560, inlinedAt: !3800)
!4036 = !DILocation(line: 2665, scope: !3560, inlinedAt: !3800)
!4037 = !DILocation(line: 2666, scope: !3560, inlinedAt: !3800)
!4038 = !DILocation(line: 152, scope: !1044, inlinedAt: !4039)
!4039 = distinct !DILocation(line: 2668, scope: !3560, inlinedAt: !3800)
!4040 = !DILocation(line: 158, scope: !1044, inlinedAt: !4039)
!4041 = !DILocation(line: 154, scope: !1044, inlinedAt: !4039)
!4042 = !DILocation(line: 156, scope: !1044, inlinedAt: !4039)
!4043 = !DILocation(line: 159, scope: !1044, inlinedAt: !4039)
!4044 = !DILocation(line: 160, scope: !1044, inlinedAt: !4039)
!4045 = !DILocation(line: 167, scope: !1044, inlinedAt: !4039)
!4046 = !DILocation(line: 169, scope: !1044, inlinedAt: !4039)
!4047 = !DILocation(line: 170, scope: !1044, inlinedAt: !4039)
!4048 = !DILocation(line: 38, scope: !1004, inlinedAt: !4049)
!4049 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !4050)
!4050 = distinct !DILocation(line: 2669, scope: !3560, inlinedAt: !3800)
!4051 = !DILocation(line: 39, scope: !1004, inlinedAt: !4049)
!4052 = !DILocation(line: 116, scope: !1345, inlinedAt: !4053)
!4053 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !4054)
!4054 = distinct !DILocation(line: 2670, scope: !3560, inlinedAt: !3800)
!4055 = !DILocation(line: 138, scope: !1351, inlinedAt: !4054)
!4056 = !DILocation(line: 2670, scope: !3560, inlinedAt: !3800)
!4057 = !DILocation(line: 39, scope: !1004, inlinedAt: !4058)
!4058 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !4059)
!4059 = distinct !DILocation(line: 2672, scope: !3560, inlinedAt: !3800)
!4060 = !DILocation(line: 2673, scope: !3560, inlinedAt: !3800)
!4061 = !DILocation(line: 2675, scope: !3560, inlinedAt: !3800)
!4062 = !DILocation(line: 72, scope: !1020, inlinedAt: !4063)
!4063 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !4064)
!4064 = distinct !DILocation(line: 2776, scope: !3792)
!4065 = !DILocation(line: 73, scope: !1020, inlinedAt: !4063)
!4066 = !DILocation(line: 75, scope: !1020, inlinedAt: !4063)
!4067 = !DILocation(line: 76, scope: !1020, inlinedAt: !4063)
!4068 = !DILocation(line: 77, scope: !1020, inlinedAt: !4063)
!4069 = !DILocation(line: 79, scope: !1020, inlinedAt: !4063)
!4070 = !DILocation(line: 80, scope: !1020, inlinedAt: !4063)
!4071 = distinct !DISubprogram(name: "tcl.list.in", scope: !864, file: !1273, type: !4072, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !4076)
!4072 = !DISubroutineType(types: !4073)
!4073 = !{!4074, !998, !998, !976}
!4074 = !DICompositeType(tag: DW_TAG_structure_type, name: "ZEROONE?", scope: !12, file: !11, line: 1588, size: 16, elements: !4075)
!4075 = !{!14, !1536}
!4076 = !{!4077, !4078, !4079}
!4077 = !DILocalVariable(name: "value", arg: 1, scope: !4071, file: !2, type: !998)
!4078 = !DILocalVariable(name: "list", arg: 2, scope: !4071, file: !2, type: !998)
!4079 = !DILocalVariable(name: "ecVar", arg: 3, scope: !4071, file: !2, type: !976)
!4080 = !DILocation(line: 828, scope: !1787, inlinedAt: !4081)
!4081 = distinct !DILocation(line: 2809, scope: !4071)
!4082 = !DILocation(line: 828, scope: !1787, inlinedAt: !4083)
!4083 = distinct !DILocation(line: 2797, scope: !4071)
!4084 = !DILocation(line: 2796, scope: !4071)
!4085 = !DILocation(line: 829, scope: !1787, inlinedAt: !4083)
!4086 = !DILocation(line: 831, scope: !1787, inlinedAt: !4083)
!4087 = !DILocation(line: 833, scope: !1787, inlinedAt: !4083)
!4088 = !DILocation(line: 2798, scope: !4071)
!4089 = !DILocation(line: 2799, scope: !4071)
!4090 = !DILocation(line: 2800, scope: !4071)
!4091 = !DILocation(line: 2801, scope: !4071)
!4092 = !DILocation(line: 2803, scope: !4071)
!4093 = !DILocation(line: 2804, scope: !4071)
!4094 = !DILocation(line: 2805, scope: !4071)
!4095 = !DILocation(line: 0, scope: !1787, inlinedAt: !4081)
!4096 = !DILocation(line: 2810, scope: !4071)
!4097 = !DILocation(line: 2808, scope: !4071)
!4098 = !DILocation(line: 829, scope: !1787, inlinedAt: !4081)
!4099 = !DILocation(line: 831, scope: !1787, inlinedAt: !4081)
!4100 = !DILocation(line: 833, scope: !1787, inlinedAt: !4081)
!4101 = !DILocation(line: 2812, scope: !4071)
!4102 = !DILocation(line: 2814, scope: !4071)
!4103 = !DILocation(line: 2815, scope: !4071)
!4104 = !DILocation(line: 2817, scope: !4071)
!4105 = !DILocation(line: 2818, scope: !4071)
!4106 = !DILocation(line: 2821, scope: !4071)
!4107 = distinct !DISubprogram(name: "tcl.list.unshare", scope: !864, file: !1273, type: !1552, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !4108)
!4108 = !{!4109}
!4109 = !DILocalVariable(name: "list", arg: 1, scope: !4107, file: !2, type: !998)
!4110 = !DILocation(line: 116, scope: !1345, inlinedAt: !4111)
!4111 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !4112)
!4112 = distinct !DILocation(line: 2838, scope: !4107)
!4113 = !DILocation(line: 138, scope: !1351, inlinedAt: !4112)
!4114 = !DILocation(line: 2838, scope: !4107)
!4115 = !DILocation(line: 2027, scope: !2738, inlinedAt: !4116)
!4116 = distinct !DILocation(line: 2840, scope: !4107)
!4117 = !{!4118, !4120}
!4118 = distinct !{!4118, !4119, !"tcl.impl.listDupe: %interp"}
!4119 = distinct !{!4119, !"tcl.impl.listDupe"}
!4120 = distinct !{!4120, !4119, !"tcl.impl.listDupe: %obj"}
!4121 = !DILocation(line: 2028, scope: !2738, inlinedAt: !4116)
!4122 = !{!4120}
!4123 = !{!4118}
!4124 = !DILocation(line: 2029, scope: !2738, inlinedAt: !4116)
!4125 = !DILocation(line: 1327, scope: !2012, inlinedAt: !4126)
!4126 = distinct !DILocation(line: 2031, scope: !2738, inlinedAt: !4116)
!4127 = !{!4128}
!4128 = distinct !{!4128, !4129, !"tcl.setFromAny: %typePtr"}
!4129 = distinct !{!4129, !"tcl.setFromAny"}
!4130 = !{!4131, !4132, !4118, !4120}
!4131 = distinct !{!4131, !4129, !"tcl.setFromAny: %interp"}
!4132 = distinct !{!4132, !4129, !"tcl.setFromAny: %objPtr"}
!4133 = !DILocation(line: 1328, scope: !2012, inlinedAt: !4126)
!4134 = !DILocation(line: 2031, scope: !2738, inlinedAt: !4116)
!4135 = !DILocation(line: 2033, scope: !2738, inlinedAt: !4116)
!4136 = !DILocation(line: 385, scope: !995, inlinedAt: !4137)
!4137 = distinct !DILocation(line: 2033, scope: !2738, inlinedAt: !4116)
!4138 = !DILocation(line: 386, scope: !995, inlinedAt: !4137)
!4139 = !DILocation(line: 152, scope: !1044, inlinedAt: !4140)
!4140 = distinct !DILocation(line: 2034, scope: !2738, inlinedAt: !4116)
!4141 = !DILocation(line: 158, scope: !1044, inlinedAt: !4140)
!4142 = !DILocation(line: 154, scope: !1044, inlinedAt: !4140)
!4143 = !DILocation(line: 156, scope: !1044, inlinedAt: !4140)
!4144 = !DILocation(line: 159, scope: !1044, inlinedAt: !4140)
!4145 = !DILocation(line: 160, scope: !1044, inlinedAt: !4140)
!4146 = !DILocation(line: 167, scope: !1044, inlinedAt: !4140)
!4147 = !DILocation(line: 169, scope: !1044, inlinedAt: !4140)
!4148 = !DILocation(line: 170, scope: !1044, inlinedAt: !4140)
!4149 = !DILocation(line: 2035, scope: !2738, inlinedAt: !4116)
!4150 = !DILocation(line: 2036, scope: !2738, inlinedAt: !4116)
!4151 = !DILocation(line: 39, scope: !1004, inlinedAt: !4152)
!4152 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !4153)
!4153 = distinct !DILocation(line: 2844, scope: !4107)
!4154 = !DILocation(line: 2039, scope: !2738, inlinedAt: !4116)
!4155 = !DILocation(line: 38, scope: !1004, inlinedAt: !4152)
!4156 = !DILocation(line: 2845, scope: !4107)
!4157 = distinct !DISubprogram(name: "tcl.list.foreach.start.step", scope: !864, file: !1273, type: !4158, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !4162)
!4158 = !DISubroutineType(types: !4159)
!4159 = !{!4160, !4160, !998, !9}
!4160 = !DICompositeType(tag: DW_TAG_structure_type, name: "optional.i32", scope: !12, file: !11, line: 701, size: 16, elements: !4161)
!4161 = !{!14, !9}
!4162 = !{!4163, !4164, !4165}
!4163 = !DILocalVariable(name: "steps_init", arg: 1, scope: !4157, file: !2, type: !4160)
!4164 = !DILocalVariable(name: "list", arg: 2, scope: !4157, file: !2, type: !998)
!4165 = !DILocalVariable(name: "stride", arg: 3, scope: !4157, file: !2, type: !9)
!4166 = !DILocation(line: 2865, scope: !4157)
!4167 = !DILocation(line: 2867, scope: !4157)
!4168 = !DILocation(line: 2869, scope: !4157)
!4169 = !DILocation(line: 2866, scope: !4157)
!4170 = !DILocation(line: 2871, scope: !4157)
!4171 = !DILocation(line: 2872, scope: !4157)
!4172 = !DILocation(line: 2874, scope: !4157)
!4173 = !DILocation(line: 2875, scope: !4157)
!4174 = !DILocation(line: 2876, scope: !4157)
!4175 = !DILocation(line: 2877, scope: !4157)
!4176 = !DILocation(line: 2878, scope: !4157)
!4177 = distinct !DISubprogram(name: "tcl.list.foreach.start.finish", scope: !864, file: !1273, type: !4178, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !4183)
!4178 = !DISubroutineType(types: !4179)
!4179 = !{!4180, !4160, !976}
!4180 = !DICompositeType(tag: DW_TAG_structure_type, name: "FOREACH?", scope: !12, file: !11, line: 1567, size: 24, elements: !4181)
!4181 = !{!14, !4182}
!4182 = !DICompositeType(tag: DW_TAG_structure_type, name: "FOREACH", scope: !12, file: !11, line: 1537, size: 16, elements: !883)
!4183 = !{!4184, !4185}
!4184 = !DILocalVariable(name: "steps", arg: 1, scope: !4177, file: !2, type: !4160)
!4185 = !DILocalVariable(name: "ecvar", arg: 2, scope: !4177, file: !2, type: !976)
!4186 = !DILocation(line: 2902, scope: !4177)
!4187 = !DILocation(line: 2904, scope: !4177)
!4188 = !DILocation(line: 2905, scope: !4177)
!4189 = !DILocation(line: 2909, scope: !4177)
!4190 = !DILocation(line: 2910, scope: !4177)
!4191 = distinct !DISubprogram(name: "tcl.list.foreach.getStep", scope: !864, file: !1273, type: !4192, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !4194)
!4192 = !DISubroutineType(types: !4193)
!4193 = !{!10, !4182}
!4194 = !{!4195}
!4195 = !DILocalVariable(name: "pair", arg: 1, scope: !4191, file: !2, type: !4182)
!4196 = !DILocation(line: 2927, scope: !4191)
!4197 = distinct !DISubprogram(name: "tcl.list.foreach.mayStep", scope: !864, file: !1273, type: !4198, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !4199)
!4198 = !DISubroutineType(types: !4181)
!4199 = !{!4200}
!4200 = !DILocalVariable(name: "pair", arg: 1, scope: !4197, file: !2, type: !4182)
!4201 = !DILocation(line: 2943, scope: !4197)
!4202 = !DILocation(line: 2944, scope: !4197)
!4203 = !DILocation(line: 2945, scope: !4197)
!4204 = distinct !DISubprogram(name: "tcl.list.foreach.nextStep", scope: !864, file: !1273, type: !4205, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !4207)
!4205 = !DISubroutineType(types: !4206)
!4206 = !{!4182, !4182}
!4207 = !{!4208}
!4208 = !DILocalVariable(name: "pair", arg: 1, scope: !4204, file: !2, type: !4182)
!4209 = !DILocation(line: 2961, scope: !4204)
!4210 = !DILocation(line: 2962, scope: !4204)
!4211 = distinct !DISubprogram(name: "tcl.dict.exists1", scope: !864, file: !1273, type: !4212, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !4214)
!4212 = !DISubroutineType(types: !4213)
!4213 = !{!14, !998, !998}
!4214 = !{!4215, !4216}
!4215 = !DILocalVariable(name: "dict", arg: 1, scope: !4211, file: !2, type: !998)
!4216 = !DILocalVariable(name: "key", arg: 2, scope: !4211, file: !2, type: !998)
!4217 = !DILocation(line: 2991, scope: !4211)
!4218 = !DILocation(line: 2992, scope: !4211)
!4219 = !DILocation(line: 2993, scope: !4211)
!4220 = !DILocation(line: 2994, scope: !4211)
!4221 = distinct !DISubprogram(name: "tcl.dict.exists", scope: !864, file: !1273, type: !4222, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !4224)
!4222 = !DISubroutineType(types: !4223)
!4223 = !{!14, !998, !9, !1061}
!4224 = !{!4225, !4226, !4227}
!4225 = !DILocalVariable(name: "dict", arg: 1, scope: !4221, file: !2, type: !998)
!4226 = !DILocalVariable(name: "keyc", arg: 2, scope: !4221, file: !2, type: !9)
!4227 = !DILocalVariable(name: "keyv", arg: 3, scope: !4221, file: !2, type: !1061)
!4228 = !DILocation(line: 3012, scope: !4221)
!4229 = !DILocation(line: 3013, scope: !4221)
!4230 = !DILocation(line: 3014, scope: !4221)
!4231 = !DILocation(line: 3016, scope: !4221)
!4232 = !DILocation(line: 3017, scope: !4221)
!4233 = !DILocation(line: 3019, scope: !4221)
!4234 = !DILocation(line: 3020, scope: !4221)
!4235 = !DILocation(line: 3022, scope: !4221)
!4236 = !DILocation(line: 3024, scope: !4221)
!4237 = !DILocation(line: 3025, scope: !4221)
!4238 = !DILocation(line: 3026, scope: !4221)
!4239 = !DILocation(line: 3027, scope: !4221)
!4240 = !DILocation(line: 3029, scope: !4221)
!4241 = distinct !DISubprogram(name: "tcl.dict.size", scope: !864, file: !1273, type: !2788, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !4242)
!4242 = !{!4243, !4244}
!4243 = !DILocalVariable(name: "dict", arg: 1, scope: !4241, file: !2, type: !998)
!4244 = !DILocalVariable(name: "ecvar", arg: 2, scope: !4241, file: !2, type: !976)
!4245 = !DILocation(line: 3046, scope: !4241)
!4246 = !DILocation(line: 3047, scope: !4241)
!4247 = !DILocation(line: 3048, scope: !4241)
!4248 = !DILocation(line: 3049, scope: !4241)
!4249 = !DILocation(line: 3051, scope: !4241)
!4250 = !DILocation(line: 3053, scope: !4241)
!4251 = !DILocation(line: 3054, scope: !4241)
!4252 = distinct !DISubprogram(name: "tcl.dict.get1", scope: !864, file: !1273, type: !2117, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !4253)
!4253 = !{!4254, !4255, !4256}
!4254 = !DILocalVariable(name: "dict", arg: 1, scope: !4252, file: !2, type: !998)
!4255 = !DILocalVariable(name: "key", arg: 2, scope: !4252, file: !2, type: !998)
!4256 = !DILocalVariable(name: "ecvar", arg: 3, scope: !4252, file: !2, type: !976)
!4257 = !DILocation(line: 3069, scope: !4252)
!4258 = !DILocation(line: 3070, scope: !4252)
!4259 = !DILocation(line: 3071, scope: !4252)
!4260 = !DILocation(line: 3072, scope: !4252)
!4261 = !DILocation(line: 3074, scope: !4252)
!4262 = !DILocation(line: 3075, scope: !4252)
!4263 = !DILocation(line: 38, scope: !1004, inlinedAt: !4264)
!4264 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !4265)
!4265 = distinct !DILocation(line: 3077, scope: !4252)
!4266 = !DILocation(line: 39, scope: !1004, inlinedAt: !4264)
!4267 = !DILocation(line: 3078, scope: !4252)
!4268 = !DILocation(line: 3080, scope: !4252)
!4269 = !DILocation(line: 3081, scope: !4252)
!4270 = !DILocation(line: 385, scope: !995, inlinedAt: !4271)
!4271 = distinct !DILocation(line: 3081, scope: !4252)
!4272 = !DILocation(line: 386, scope: !995, inlinedAt: !4271)
!4273 = !DILocation(line: 3082, scope: !4252)
!4274 = !DILocation(line: 3083, scope: !4252)
!4275 = !DILocation(line: 3085, scope: !4252)
!4276 = !DILocation(line: 3086, scope: !4252)
!4277 = distinct !DISubprogram(name: "tcl.dict.get", scope: !864, file: !1273, type: !2961, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !4278)
!4278 = !{!4279, !4280, !4281, !4282}
!4279 = !DILocalVariable(name: "dict", arg: 1, scope: !4277, file: !2, type: !998)
!4280 = !DILocalVariable(name: "keyc", arg: 2, scope: !4277, file: !2, type: !9)
!4281 = !DILocalVariable(name: "keyv", arg: 3, scope: !4277, file: !2, type: !1061)
!4282 = !DILocalVariable(name: "ecvar", arg: 4, scope: !4277, file: !2, type: !976)
!4283 = !DILocation(line: 3107, scope: !4277)
!4284 = !DILocation(line: 3108, scope: !4277)
!4285 = !DILocation(line: 3109, scope: !4277)
!4286 = !DILocation(line: 3110, scope: !4277)
!4287 = !DILocation(line: 3112, scope: !4277)
!4288 = !DILocation(line: 3113, scope: !4277)
!4289 = !DILocation(line: 3115, scope: !4277)
!4290 = !DILocation(line: 3116, scope: !4277)
!4291 = !DILocation(line: 3118, scope: !4277)
!4292 = !DILocation(line: 3120, scope: !4277)
!4293 = !DILocation(line: 3121, scope: !4277)
!4294 = !DILocation(line: 3122, scope: !4277)
!4295 = !DILocation(line: 3124, scope: !4277)
!4296 = !DILocation(line: 3125, scope: !4277)
!4297 = !DILocation(line: 38, scope: !1004, inlinedAt: !4298)
!4298 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !4299)
!4299 = distinct !DILocation(line: 3128, scope: !4277)
!4300 = !DILocation(line: 39, scope: !1004, inlinedAt: !4298)
!4301 = !DILocation(line: 3129, scope: !4277)
!4302 = !DILocation(line: 3131, scope: !4277)
!4303 = !DILocation(line: 3132, scope: !4277)
!4304 = !DILocation(line: 385, scope: !995, inlinedAt: !4305)
!4305 = distinct !DILocation(line: 3132, scope: !4277)
!4306 = !DILocation(line: 386, scope: !995, inlinedAt: !4305)
!4307 = !DILocation(line: 3133, scope: !4277)
!4308 = !DILocation(line: 3134, scope: !4277)
!4309 = !DILocation(line: 3136, scope: !4277)
!4310 = !DILocation(line: 3137, scope: !4277)
!4311 = distinct !DISubprogram(name: "tcl.dict.get1.empty", scope: !864, file: !1273, type: !4312, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !4314)
!4312 = !DISubroutineType(types: !4313)
!4313 = !{!1468, !998, !998, !976}
!4314 = !{!4315, !4316, !4317}
!4315 = !DILocalVariable(name: "dict", arg: 1, scope: !4311, file: !2, type: !998)
!4316 = !DILocalVariable(name: "key", arg: 2, scope: !4311, file: !2, type: !998)
!4317 = !DILocalVariable(name: "ecvar", arg: 3, scope: !4311, file: !2, type: !976)
!4318 = !DILocation(line: 3158, scope: !4311)
!4319 = !DILocation(line: 3159, scope: !4311)
!4320 = !DILocation(line: 3160, scope: !4311)
!4321 = !DILocation(line: 3161, scope: !4311)
!4322 = !DILocation(line: 3163, scope: !4311)
!4323 = !DILocation(line: 3164, scope: !4311)
!4324 = !DILocation(line: 38, scope: !1004, inlinedAt: !4325)
!4325 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !4326)
!4326 = distinct !DILocation(line: 3166, scope: !4311)
!4327 = !DILocation(line: 39, scope: !1004, inlinedAt: !4325)
!4328 = !DILocation(line: 3167, scope: !4311)
!4329 = !DILocation(line: 3169, scope: !4311)
!4330 = !DILocation(line: 3171, scope: !4311)
!4331 = !DILocation(line: 3172, scope: !4311)
!4332 = distinct !DISubprogram(name: "tcl.dict.set1", scope: !864, file: !1273, type: !2198, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !4333)
!4333 = !{!4334, !4335, !4336, !4337}
!4334 = !DILocalVariable(name: "dict", arg: 1, scope: !4332, file: !2, type: !998)
!4335 = !DILocalVariable(name: "key", arg: 2, scope: !4332, file: !2, type: !998)
!4336 = !DILocalVariable(name: "value", arg: 3, scope: !4332, file: !2, type: !998)
!4337 = !DILocalVariable(name: "ecvar", arg: 4, scope: !4332, file: !2, type: !976)
!4338 = !DILocation(line: 3188, scope: !4332)
!4339 = !DILocation(line: 116, scope: !1345, inlinedAt: !4340)
!4340 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !4341)
!4341 = distinct !DILocation(line: 1351, scope: !2023, inlinedAt: !4342)
!4342 = distinct !DILocation(line: 3189, scope: !4332)
!4343 = !DILocation(line: 138, scope: !1351, inlinedAt: !4341)
!4344 = !DILocation(line: 1354, scope: !2023, inlinedAt: !4342)
!4345 = !DILocation(line: 1356, scope: !2023, inlinedAt: !4342)
!4346 = !DILocation(line: 385, scope: !995, inlinedAt: !4347)
!4347 = distinct !DILocation(line: 1356, scope: !2023, inlinedAt: !4342)
!4348 = !DILocation(line: 386, scope: !995, inlinedAt: !4347)
!4349 = !DILocation(line: 1358, scope: !2023, inlinedAt: !4342)
!4350 = !DILocation(line: 3190, scope: !4332)
!4351 = !DILocation(line: 3191, scope: !4332)
!4352 = !DILocation(line: 38, scope: !1004, inlinedAt: !4353)
!4353 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !4354)
!4354 = distinct !DILocation(line: 3193, scope: !4332)
!4355 = !DILocation(line: 39, scope: !1004, inlinedAt: !4353)
!4356 = !DILocation(line: 116, scope: !1345, inlinedAt: !4357)
!4357 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !4358)
!4358 = distinct !DILocation(line: 3194, scope: !4332)
!4359 = !DILocation(line: 138, scope: !1351, inlinedAt: !4358)
!4360 = !DILocation(line: 3194, scope: !4332)
!4361 = !DILocation(line: 39, scope: !1004, inlinedAt: !4362)
!4362 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !4363)
!4363 = distinct !DILocation(line: 3196, scope: !4332)
!4364 = !DILocation(line: 3197, scope: !4332)
!4365 = !DILocation(line: 3199, scope: !4332)
!4366 = !DILocation(line: 1372, scope: !2042, inlinedAt: !4367)
!4367 = distinct !DILocation(line: 3201, scope: !4332)
!4368 = !DILocation(line: 71, scope: !1020, inlinedAt: !4369)
!4369 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !4370)
!4370 = distinct !DILocation(line: 1374, scope: !2042, inlinedAt: !4367)
!4371 = !DILocation(line: 72, scope: !1020, inlinedAt: !4369)
!4372 = !DILocation(line: 73, scope: !1020, inlinedAt: !4369)
!4373 = !DILocation(line: 75, scope: !1020, inlinedAt: !4369)
!4374 = !DILocation(line: 76, scope: !1020, inlinedAt: !4369)
!4375 = !DILocation(line: 77, scope: !1020, inlinedAt: !4369)
!4376 = !DILocation(line: 79, scope: !1020, inlinedAt: !4369)
!4377 = !DILocation(line: 80, scope: !1020, inlinedAt: !4369)
!4378 = !DILocation(line: 3202, scope: !4332)
!4379 = !DILocation(line: 3203, scope: !4332)
!4380 = distinct !DISubprogram(name: "tcl.dict.set", scope: !864, file: !1273, type: !3561, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !4381)
!4381 = !{!4382, !4383, !4384, !4385, !4386}
!4382 = !DILocalVariable(name: "dict", arg: 1, scope: !4380, file: !2, type: !998)
!4383 = !DILocalVariable(name: "pathlen", arg: 2, scope: !4380, file: !2, type: !9)
!4384 = !DILocalVariable(name: "pathobjs", arg: 3, scope: !4380, file: !2, type: !1061)
!4385 = !DILocalVariable(name: "value", arg: 4, scope: !4380, file: !2, type: !998)
!4386 = !DILocalVariable(name: "ecvar", arg: 5, scope: !4380, file: !2, type: !976)
!4387 = !DILocation(line: 3219, scope: !4380)
!4388 = !DILocation(line: 116, scope: !1345, inlinedAt: !4389)
!4389 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !4390)
!4390 = distinct !DILocation(line: 1351, scope: !2023, inlinedAt: !4391)
!4391 = distinct !DILocation(line: 3220, scope: !4380)
!4392 = !DILocation(line: 138, scope: !1351, inlinedAt: !4390)
!4393 = !DILocation(line: 1354, scope: !2023, inlinedAt: !4391)
!4394 = !DILocation(line: 1356, scope: !2023, inlinedAt: !4391)
!4395 = !DILocation(line: 385, scope: !995, inlinedAt: !4396)
!4396 = distinct !DILocation(line: 1356, scope: !2023, inlinedAt: !4391)
!4397 = !DILocation(line: 386, scope: !995, inlinedAt: !4396)
!4398 = !DILocation(line: 1358, scope: !2023, inlinedAt: !4391)
!4399 = !DILocation(line: 3221, scope: !4380)
!4400 = !DILocation(line: 3222, scope: !4380)
!4401 = !DILocation(line: 38, scope: !1004, inlinedAt: !4402)
!4402 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !4403)
!4403 = distinct !DILocation(line: 3224, scope: !4380)
!4404 = !DILocation(line: 39, scope: !1004, inlinedAt: !4402)
!4405 = !DILocation(line: 116, scope: !1345, inlinedAt: !4406)
!4406 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !4407)
!4407 = distinct !DILocation(line: 3225, scope: !4380)
!4408 = !DILocation(line: 138, scope: !1351, inlinedAt: !4407)
!4409 = !DILocation(line: 3225, scope: !4380)
!4410 = !DILocation(line: 39, scope: !1004, inlinedAt: !4411)
!4411 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !4412)
!4412 = distinct !DILocation(line: 3227, scope: !4380)
!4413 = !DILocation(line: 3228, scope: !4380)
!4414 = !DILocation(line: 3230, scope: !4380)
!4415 = !DILocation(line: 1372, scope: !2042, inlinedAt: !4416)
!4416 = distinct !DILocation(line: 3232, scope: !4380)
!4417 = !DILocation(line: 71, scope: !1020, inlinedAt: !4418)
!4418 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !4419)
!4419 = distinct !DILocation(line: 1374, scope: !2042, inlinedAt: !4416)
!4420 = !DILocation(line: 72, scope: !1020, inlinedAt: !4418)
!4421 = !DILocation(line: 73, scope: !1020, inlinedAt: !4418)
!4422 = !DILocation(line: 75, scope: !1020, inlinedAt: !4418)
!4423 = !DILocation(line: 76, scope: !1020, inlinedAt: !4418)
!4424 = !DILocation(line: 77, scope: !1020, inlinedAt: !4418)
!4425 = !DILocation(line: 79, scope: !1020, inlinedAt: !4418)
!4426 = !DILocation(line: 80, scope: !1020, inlinedAt: !4418)
!4427 = !DILocation(line: 3233, scope: !4380)
!4428 = !DILocation(line: 3234, scope: !4380)
!4429 = distinct !DISubprogram(name: "tcl.dict.unset1", scope: !864, file: !1273, type: !2117, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !4430)
!4430 = !{!4431, !4432, !4433}
!4431 = !DILocalVariable(name: "dict", arg: 1, scope: !4429, file: !2, type: !998)
!4432 = !DILocalVariable(name: "key", arg: 2, scope: !4429, file: !2, type: !998)
!4433 = !DILocalVariable(name: "ecvar", arg: 3, scope: !4429, file: !2, type: !976)
!4434 = !DILocation(line: 3249, scope: !4429)
!4435 = !DILocation(line: 116, scope: !1345, inlinedAt: !4436)
!4436 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !4437)
!4437 = distinct !DILocation(line: 1351, scope: !2023, inlinedAt: !4438)
!4438 = distinct !DILocation(line: 3250, scope: !4429)
!4439 = !DILocation(line: 138, scope: !1351, inlinedAt: !4437)
!4440 = !DILocation(line: 1354, scope: !2023, inlinedAt: !4438)
!4441 = !DILocation(line: 1356, scope: !2023, inlinedAt: !4438)
!4442 = !DILocation(line: 385, scope: !995, inlinedAt: !4443)
!4443 = distinct !DILocation(line: 1356, scope: !2023, inlinedAt: !4438)
!4444 = !DILocation(line: 386, scope: !995, inlinedAt: !4443)
!4445 = !DILocation(line: 1358, scope: !2023, inlinedAt: !4438)
!4446 = !DILocation(line: 3251, scope: !4429)
!4447 = !DILocation(line: 3252, scope: !4429)
!4448 = !DILocation(line: 38, scope: !1004, inlinedAt: !4449)
!4449 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !4450)
!4450 = distinct !DILocation(line: 3254, scope: !4429)
!4451 = !DILocation(line: 39, scope: !1004, inlinedAt: !4449)
!4452 = !DILocation(line: 3255, scope: !4429)
!4453 = !DILocation(line: 1372, scope: !2042, inlinedAt: !4454)
!4454 = distinct !DILocation(line: 3257, scope: !4429)
!4455 = !DILocation(line: 71, scope: !1020, inlinedAt: !4456)
!4456 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !4457)
!4457 = distinct !DILocation(line: 1374, scope: !2042, inlinedAt: !4454)
!4458 = !DILocation(line: 72, scope: !1020, inlinedAt: !4456)
!4459 = !DILocation(line: 73, scope: !1020, inlinedAt: !4456)
!4460 = !DILocation(line: 75, scope: !1020, inlinedAt: !4456)
!4461 = !DILocation(line: 76, scope: !1020, inlinedAt: !4456)
!4462 = !DILocation(line: 77, scope: !1020, inlinedAt: !4456)
!4463 = !DILocation(line: 79, scope: !1020, inlinedAt: !4456)
!4464 = !DILocation(line: 80, scope: !1020, inlinedAt: !4456)
!4465 = !DILocation(line: 3258, scope: !4429)
!4466 = !DILocation(line: 3259, scope: !4429)
!4467 = distinct !DISubprogram(name: "tcl.dict.unset", scope: !864, file: !1273, type: !2961, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !4468)
!4468 = !{!4469, !4470, !4471, !4472}
!4469 = !DILocalVariable(name: "dict", arg: 1, scope: !4467, file: !2, type: !998)
!4470 = !DILocalVariable(name: "pathlen", arg: 2, scope: !4467, file: !2, type: !9)
!4471 = !DILocalVariable(name: "pathobjs", arg: 3, scope: !4467, file: !2, type: !1061)
!4472 = !DILocalVariable(name: "ecvar", arg: 4, scope: !4467, file: !2, type: !976)
!4473 = !DILocation(line: 3275, scope: !4467)
!4474 = !DILocation(line: 116, scope: !1345, inlinedAt: !4475)
!4475 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !4476)
!4476 = distinct !DILocation(line: 1351, scope: !2023, inlinedAt: !4477)
!4477 = distinct !DILocation(line: 3276, scope: !4467)
!4478 = !DILocation(line: 138, scope: !1351, inlinedAt: !4476)
!4479 = !DILocation(line: 1354, scope: !2023, inlinedAt: !4477)
!4480 = !DILocation(line: 1356, scope: !2023, inlinedAt: !4477)
!4481 = !DILocation(line: 385, scope: !995, inlinedAt: !4482)
!4482 = distinct !DILocation(line: 1356, scope: !2023, inlinedAt: !4477)
!4483 = !DILocation(line: 386, scope: !995, inlinedAt: !4482)
!4484 = !DILocation(line: 1358, scope: !2023, inlinedAt: !4477)
!4485 = !DILocation(line: 3277, scope: !4467)
!4486 = !DILocation(line: 3278, scope: !4467)
!4487 = !DILocation(line: 3280, scope: !4467)
!4488 = !DILocation(line: 1372, scope: !2042, inlinedAt: !4489)
!4489 = distinct !DILocation(line: 3282, scope: !4467)
!4490 = !DILocation(line: 71, scope: !1020, inlinedAt: !4491)
!4491 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !4492)
!4492 = distinct !DILocation(line: 1374, scope: !2042, inlinedAt: !4489)
!4493 = !DILocation(line: 72, scope: !1020, inlinedAt: !4491)
!4494 = !DILocation(line: 73, scope: !1020, inlinedAt: !4491)
!4495 = !DILocation(line: 75, scope: !1020, inlinedAt: !4491)
!4496 = !DILocation(line: 76, scope: !1020, inlinedAt: !4491)
!4497 = !DILocation(line: 77, scope: !1020, inlinedAt: !4491)
!4498 = !DILocation(line: 79, scope: !1020, inlinedAt: !4491)
!4499 = !DILocation(line: 80, scope: !1020, inlinedAt: !4491)
!4500 = !DILocation(line: 3283, scope: !4467)
!4501 = !DILocation(line: 3284, scope: !4467)
!4502 = distinct !DISubprogram(name: "tcl.dict.set1.empty", scope: !864, file: !1273, type: !4503, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !4505)
!4503 = !DISubroutineType(types: !4504)
!4504 = !{!1382, !998, !998, !1439, !976}
!4505 = !{!4506, !4507, !4508, !4509}
!4506 = !DILocalVariable(name: "dict", arg: 1, scope: !4502, file: !2, type: !998)
!4507 = !DILocalVariable(name: "key", arg: 2, scope: !4502, file: !2, type: !998)
!4508 = !DILocalVariable(name: "value", arg: 3, scope: !4502, file: !2, type: !1439)
!4509 = !DILocalVariable(name: "ecvar", arg: 4, scope: !4502, file: !2, type: !976)
!4510 = !DILocation(line: 3302, scope: !4502)
!4511 = !DILocation(line: 3304, scope: !4502)
!4512 = !DILocation(line: 3188, scope: !4332, inlinedAt: !4513)
!4513 = distinct !DILocation(line: 3305, scope: !4502)
!4514 = !{!4515}
!4515 = distinct !{!4515, !4516, !"tcl.dict.set1: %ecvar"}
!4516 = distinct !{!4516, !"tcl.dict.set1"}
!4517 = !DILocation(line: 116, scope: !1345, inlinedAt: !4518)
!4518 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !4519)
!4519 = distinct !DILocation(line: 1351, scope: !2023, inlinedAt: !4520)
!4520 = distinct !DILocation(line: 3189, scope: !4332, inlinedAt: !4513)
!4521 = !DILocation(line: 138, scope: !1351, inlinedAt: !4519)
!4522 = !DILocation(line: 1354, scope: !2023, inlinedAt: !4520)
!4523 = !DILocation(line: 1356, scope: !2023, inlinedAt: !4520)
!4524 = !DILocation(line: 385, scope: !995, inlinedAt: !4525)
!4525 = distinct !DILocation(line: 1356, scope: !2023, inlinedAt: !4520)
!4526 = !DILocation(line: 386, scope: !995, inlinedAt: !4525)
!4527 = !DILocation(line: 1358, scope: !2023, inlinedAt: !4520)
!4528 = !DILocation(line: 3190, scope: !4332, inlinedAt: !4513)
!4529 = !DILocation(line: 3191, scope: !4332, inlinedAt: !4513)
!4530 = !DILocation(line: 38, scope: !1004, inlinedAt: !4531)
!4531 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !4532)
!4532 = distinct !DILocation(line: 3193, scope: !4332, inlinedAt: !4513)
!4533 = !DILocation(line: 39, scope: !1004, inlinedAt: !4531)
!4534 = !DILocation(line: 116, scope: !1345, inlinedAt: !4535)
!4535 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !4536)
!4536 = distinct !DILocation(line: 3194, scope: !4332, inlinedAt: !4513)
!4537 = !DILocation(line: 138, scope: !1351, inlinedAt: !4536)
!4538 = !DILocation(line: 3194, scope: !4332, inlinedAt: !4513)
!4539 = !DILocation(line: 39, scope: !1004, inlinedAt: !4540)
!4540 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !4541)
!4541 = distinct !DILocation(line: 3196, scope: !4332, inlinedAt: !4513)
!4542 = !DILocation(line: 3197, scope: !4332, inlinedAt: !4513)
!4543 = !DILocation(line: 3199, scope: !4332, inlinedAt: !4513)
!4544 = !DILocation(line: 1372, scope: !2042, inlinedAt: !4545)
!4545 = distinct !DILocation(line: 3201, scope: !4332, inlinedAt: !4513)
!4546 = !DILocation(line: 71, scope: !1020, inlinedAt: !4547)
!4547 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !4548)
!4548 = distinct !DILocation(line: 1374, scope: !2042, inlinedAt: !4545)
!4549 = !DILocation(line: 72, scope: !1020, inlinedAt: !4547)
!4550 = !DILocation(line: 73, scope: !1020, inlinedAt: !4547)
!4551 = !DILocation(line: 75, scope: !1020, inlinedAt: !4547)
!4552 = !DILocation(line: 76, scope: !1020, inlinedAt: !4547)
!4553 = !DILocation(line: 77, scope: !1020, inlinedAt: !4547)
!4554 = !DILocation(line: 79, scope: !1020, inlinedAt: !4547)
!4555 = !DILocation(line: 80, scope: !1020, inlinedAt: !4547)
!4556 = !DILocation(line: 3202, scope: !4332, inlinedAt: !4513)
!4557 = !DILocation(line: 3203, scope: !4332, inlinedAt: !4513)
!4558 = !DILocation(line: 3305, scope: !4502)
!4559 = !DILocation(line: 3249, scope: !4429, inlinedAt: !4560)
!4560 = distinct !DILocation(line: 3307, scope: !4502)
!4561 = !{!4562}
!4562 = distinct !{!4562, !4563, !"tcl.dict.unset1: %ecvar"}
!4563 = distinct !{!4563, !"tcl.dict.unset1"}
!4564 = !DILocation(line: 116, scope: !1345, inlinedAt: !4565)
!4565 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !4566)
!4566 = distinct !DILocation(line: 1351, scope: !2023, inlinedAt: !4567)
!4567 = distinct !DILocation(line: 3250, scope: !4429, inlinedAt: !4560)
!4568 = !DILocation(line: 138, scope: !1351, inlinedAt: !4566)
!4569 = !DILocation(line: 1354, scope: !2023, inlinedAt: !4567)
!4570 = !DILocation(line: 1356, scope: !2023, inlinedAt: !4567)
!4571 = !DILocation(line: 385, scope: !995, inlinedAt: !4572)
!4572 = distinct !DILocation(line: 1356, scope: !2023, inlinedAt: !4567)
!4573 = !DILocation(line: 386, scope: !995, inlinedAt: !4572)
!4574 = !DILocation(line: 1358, scope: !2023, inlinedAt: !4567)
!4575 = !DILocation(line: 3251, scope: !4429, inlinedAt: !4560)
!4576 = !DILocation(line: 3252, scope: !4429, inlinedAt: !4560)
!4577 = !DILocation(line: 38, scope: !1004, inlinedAt: !4578)
!4578 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !4579)
!4579 = distinct !DILocation(line: 3254, scope: !4429, inlinedAt: !4560)
!4580 = !DILocation(line: 39, scope: !1004, inlinedAt: !4578)
!4581 = !DILocation(line: 3255, scope: !4429, inlinedAt: !4560)
!4582 = !DILocation(line: 1372, scope: !2042, inlinedAt: !4583)
!4583 = distinct !DILocation(line: 3257, scope: !4429, inlinedAt: !4560)
!4584 = !DILocation(line: 71, scope: !1020, inlinedAt: !4585)
!4585 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !4586)
!4586 = distinct !DILocation(line: 1374, scope: !2042, inlinedAt: !4583)
!4587 = !DILocation(line: 72, scope: !1020, inlinedAt: !4585)
!4588 = !DILocation(line: 73, scope: !1020, inlinedAt: !4585)
!4589 = !DILocation(line: 75, scope: !1020, inlinedAt: !4585)
!4590 = !DILocation(line: 76, scope: !1020, inlinedAt: !4585)
!4591 = !DILocation(line: 77, scope: !1020, inlinedAt: !4585)
!4592 = !DILocation(line: 79, scope: !1020, inlinedAt: !4585)
!4593 = !DILocation(line: 80, scope: !1020, inlinedAt: !4585)
!4594 = !DILocation(line: 3258, scope: !4429, inlinedAt: !4560)
!4595 = !DILocation(line: 3259, scope: !4429, inlinedAt: !4560)
!4596 = distinct !DISubprogram(name: "tcl.dict.addIterReference", scope: !864, file: !1273, type: !4597, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !4611)
!4597 = !DISubroutineType(types: !4598)
!4598 = !{!657, !4599}
!4599 = !DIDerivedType(tag: DW_TAG_typedef, name: "DICTFOR*", scope: !12, file: !11, line: 1566, baseType: !4600)
!4600 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4601, size: 64)
!4601 = !DICompositeType(tag: DW_TAG_structure_type, name: "DICTFOR", scope: !12, file: !11, line: 1541, size: 64, elements: !4602)
!4602 = !{!4603, !998, !998, !998, !9, !14}
!4603 = !DICompositeType(tag: DW_TAG_structure_type, name: "DictSearch", scope: !12, file: !11, line: 1497, size: 24, elements: !4604)
!4604 = !{!4605, !9, !4608}
!4605 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4606, size: 64)
!4606 = !DICompositeType(tag: DW_TAG_structure_type, name: "ChainEntry", scope: !12, file: !11, line: 1484, size: 56, elements: !4607)
!4607 = !{!924, !655, !655}
!4608 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4609, size: 64)
!4609 = !DICompositeType(tag: DW_TAG_structure_type, name: "Dict", scope: !12, file: !11, line: 1489, size: 128, elements: !4610)
!4610 = !{!895, !4605, !4605, !9, !9, !904}
!4611 = !{!4612}
!4612 = !DILocalVariable(name: "iter", arg: 1, scope: !4596, file: !2, type: !4599)
!4613 = !DILocation(line: 3320, scope: !4596)
!4614 = !DILocation(line: 3321, scope: !4596)
!4615 = !DILocation(line: 3322, scope: !4596)
!4616 = !DILocation(line: 3323, scope: !4596)
!4617 = distinct !DISubprogram(name: "tcl.dict.addIterFailReference", scope: !864, file: !1273, type: !4618, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !4622)
!4618 = !DISubroutineType(types: !4619)
!4619 = !{!657, !4620}
!4620 = !DICompositeType(tag: DW_TAG_structure_type, name: "DICTITER?", scope: !12, file: !11, line: 1568, size: 16, elements: !4621)
!4621 = !{!14, !4599}
!4622 = !{!4623}
!4623 = !DILocalVariable(name: "value", arg: 1, scope: !4617, file: !2, type: !4620)
!4624 = !DILocation(line: 3336, scope: !4617)
!4625 = !DILocation(line: 3338, scope: !4617)
!4626 = !DILocation(line: 3340, scope: !4617)
!4627 = !DILocation(line: 3320, scope: !4596, inlinedAt: !4628)
!4628 = distinct !DILocation(line: 3340, scope: !4617)
!4629 = !DILocation(line: 3321, scope: !4596, inlinedAt: !4628)
!4630 = !DILocation(line: 3322, scope: !4596, inlinedAt: !4628)
!4631 = !DILocation(line: 3341, scope: !4617)
!4632 = distinct !DISubprogram(name: "tcl.dict.iterStart", scope: !864, file: !1273, type: !4633, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !4635)
!4633 = !DISubroutineType(types: !4634)
!4634 = !{!4620, !998, !976}
!4635 = !{!4636, !4637}
!4636 = !DILocalVariable(name: "dict", arg: 1, scope: !4632, file: !2, type: !998)
!4637 = !DILocalVariable(name: "ecvar", arg: 2, scope: !4632, file: !2, type: !976)
!4638 = !DILocation(line: 3357, scope: !4632)
!4639 = !DILocation(line: 3358, scope: !4632)
!4640 = !DILocation(line: 3359, scope: !4632)
!4641 = !DILocation(line: 3360, scope: !4632)
!4642 = !DILocation(line: 3362, scope: !4632)
!4643 = !DILocation(line: 3364, scope: !4632)
!4644 = !DILocation(line: 3365, scope: !4632)
!4645 = !DILocation(line: 3366, scope: !4632)
!4646 = !DILocation(line: 3368, scope: !4632)
!4647 = !DILocation(line: 3369, scope: !4632)
!4648 = !DILocation(line: 3370, scope: !4632)
!4649 = !DILocation(line: 38, scope: !1004, inlinedAt: !4650)
!4650 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !4651)
!4651 = distinct !DILocation(line: 3371, scope: !4632)
!4652 = !DILocation(line: 39, scope: !1004, inlinedAt: !4650)
!4653 = !DILocation(line: 3322, scope: !4596, inlinedAt: !4654)
!4654 = distinct !DILocation(line: 3372, scope: !4632)
!4655 = !DILocation(line: 3373, scope: !4632)
!4656 = !DILocation(line: 3375, scope: !4632)
!4657 = !DILocation(line: 3376, scope: !4632)
!4658 = !DILocation(line: 3377, scope: !4632)
!4659 = distinct !DISubprogram(name: "tcl.dict.iterNext", scope: !864, file: !1273, type: !4660, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !4662)
!4660 = !DISubroutineType(types: !4661)
!4661 = !{!4599, !4599}
!4662 = !{!4663}
!4663 = !DILocalVariable(name: "iter", arg: 1, scope: !4659, file: !2, type: !4599)
!4664 = !DILocation(line: 3393, scope: !4659)
!4665 = !DILocation(line: 3394, scope: !4659)
!4666 = !DILocation(line: 3396, scope: !4659)
!4667 = !DILocation(line: 3398, scope: !4659)
!4668 = !DILocation(line: 3400, scope: !4659)
!4669 = !DILocation(line: 3401, scope: !4659)
!4670 = !DILocation(line: 3402, scope: !4659)
!4671 = !DILocation(line: 3403, scope: !4659)
!4672 = !DILocation(line: 3320, scope: !4596, inlinedAt: !4673)
!4673 = distinct !DILocation(line: 3405, scope: !4659)
!4674 = !DILocation(line: 3321, scope: !4596, inlinedAt: !4673)
!4675 = !DILocation(line: 3322, scope: !4596, inlinedAt: !4673)
!4676 = !DILocation(line: 3406, scope: !4659)
!4677 = distinct !DISubprogram(name: "tcl.dict.dropIterReference", scope: !864, file: !1273, type: !4597, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !4678)
!4678 = !{!4679}
!4679 = !DILocalVariable(name: "iter", arg: 1, scope: !4677, file: !2, type: !4599)
!4680 = !DILocation(line: 3420, scope: !4677)
!4681 = !DILocation(line: 3421, scope: !4677)
!4682 = !DILocation(line: 3422, scope: !4677)
!4683 = !DILocation(line: 3423, scope: !4677)
!4684 = !DILocation(line: 3425, scope: !4677)
!4685 = !DILocation(line: 3426, scope: !4677)
!4686 = !DILocation(line: 3427, scope: !4677)
!4687 = !DILocation(line: 71, scope: !1020, inlinedAt: !4688)
!4688 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !4689)
!4689 = distinct !DILocation(line: 3427, scope: !4677)
!4690 = !DILocation(line: 72, scope: !1020, inlinedAt: !4688)
!4691 = !DILocation(line: 73, scope: !1020, inlinedAt: !4688)
!4692 = !DILocation(line: 75, scope: !1020, inlinedAt: !4688)
!4693 = !DILocation(line: 76, scope: !1020, inlinedAt: !4688)
!4694 = !DILocation(line: 77, scope: !1020, inlinedAt: !4688)
!4695 = !DILocation(line: 79, scope: !1020, inlinedAt: !4688)
!4696 = !DILocation(line: 80, scope: !1020, inlinedAt: !4688)
!4697 = !DILocation(line: 3428, scope: !4677)
!4698 = !DILocation(line: 3429, scope: !4677)
!4699 = !DILocation(line: 3431, scope: !4677)
!4700 = distinct !DISubprogram(name: "tcl.dict.dropIterFailReference", scope: !864, file: !1273, type: !4618, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !4701)
!4701 = !{!4702}
!4702 = !DILocalVariable(name: "iter", arg: 1, scope: !4700, file: !2, type: !4620)
!4703 = !DILocation(line: 3444, scope: !4700)
!4704 = !DILocation(line: 3446, scope: !4700)
!4705 = !DILocation(line: 3448, scope: !4700)
!4706 = !DILocation(line: 3420, scope: !4677, inlinedAt: !4707)
!4707 = distinct !DILocation(line: 3448, scope: !4700)
!4708 = !DILocation(line: 3421, scope: !4677, inlinedAt: !4707)
!4709 = !DILocation(line: 3422, scope: !4677, inlinedAt: !4707)
!4710 = !DILocation(line: 3423, scope: !4677, inlinedAt: !4707)
!4711 = !DILocation(line: 3425, scope: !4677, inlinedAt: !4707)
!4712 = !DILocation(line: 3426, scope: !4677, inlinedAt: !4707)
!4713 = !DILocation(line: 3427, scope: !4677, inlinedAt: !4707)
!4714 = !DILocation(line: 71, scope: !1020, inlinedAt: !4715)
!4715 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !4716)
!4716 = distinct !DILocation(line: 3427, scope: !4677, inlinedAt: !4707)
!4717 = !DILocation(line: 72, scope: !1020, inlinedAt: !4715)
!4718 = !DILocation(line: 73, scope: !1020, inlinedAt: !4715)
!4719 = !DILocation(line: 75, scope: !1020, inlinedAt: !4715)
!4720 = !DILocation(line: 76, scope: !1020, inlinedAt: !4715)
!4721 = !DILocation(line: 77, scope: !1020, inlinedAt: !4715)
!4722 = !DILocation(line: 79, scope: !1020, inlinedAt: !4715)
!4723 = !DILocation(line: 80, scope: !1020, inlinedAt: !4715)
!4724 = !DILocation(line: 3428, scope: !4677, inlinedAt: !4707)
!4725 = !DILocation(line: 3429, scope: !4677, inlinedAt: !4707)
!4726 = distinct !DISubprogram(name: "tcl.dict.iterKey", scope: !864, file: !1273, type: !4727, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !4729)
!4727 = !DISubroutineType(types: !4728)
!4728 = !{!998, !4599}
!4729 = !{!4730}
!4730 = !DILocalVariable(name: "iter", arg: 1, scope: !4726, file: !2, type: !4599)
!4731 = !DILocation(line: 3463, scope: !4726)
!4732 = !DILocation(line: 3465, scope: !4726)
!4733 = !DILocation(line: 3466, scope: !4726)
!4734 = !DILocation(line: 3468, scope: !4726)
!4735 = !DILocation(line: 0, scope: !1004, inlinedAt: !4736)
!4736 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !4737)
!4737 = distinct !DILocation(line: 3472, scope: !4726)
!4738 = !DILocation(line: 39, scope: !1004, inlinedAt: !4736)
!4739 = !DILocation(line: 3469, scope: !4726)
!4740 = !DILocation(line: 38, scope: !1004, inlinedAt: !4736)
!4741 = !DILocation(line: 3473, scope: !4726)
!4742 = distinct !DISubprogram(name: "tcl.dict.iterValue", scope: !864, file: !1273, type: !4727, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !4743)
!4743 = !{!4744}
!4744 = !DILocalVariable(name: "iter", arg: 1, scope: !4742, file: !2, type: !4599)
!4745 = !DILocation(line: 3487, scope: !4742)
!4746 = !DILocation(line: 3489, scope: !4742)
!4747 = !DILocation(line: 3490, scope: !4742)
!4748 = !DILocation(line: 3492, scope: !4742)
!4749 = !DILocation(line: 0, scope: !1004, inlinedAt: !4750)
!4750 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !4751)
!4751 = distinct !DILocation(line: 3496, scope: !4742)
!4752 = !DILocation(line: 39, scope: !1004, inlinedAt: !4750)
!4753 = !DILocation(line: 3493, scope: !4742)
!4754 = !DILocation(line: 38, scope: !1004, inlinedAt: !4750)
!4755 = !DILocation(line: 3497, scope: !4742)
!4756 = distinct !DISubprogram(name: "tcl.dict.iterDone", scope: !864, file: !1273, type: !4757, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !4758)
!4757 = !DISubroutineType(types: !4621)
!4758 = !{!4759}
!4759 = !DILocalVariable(name: "iter", arg: 1, scope: !4756, file: !2, type: !4599)
!4760 = !DILocation(line: 3510, scope: !4756)
!4761 = distinct !DISubprogram(name: "tcl.dict.append", scope: !864, file: !1273, type: !2198, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !4762)
!4762 = !{!4763, !4764, !4765, !4766}
!4763 = !DILocalVariable(name: "dict", arg: 1, scope: !4761, file: !2, type: !998)
!4764 = !DILocalVariable(name: "key", arg: 2, scope: !4761, file: !2, type: !998)
!4765 = !DILocalVariable(name: "value", arg: 3, scope: !4761, file: !2, type: !998)
!4766 = !DILocalVariable(name: "ecvar", arg: 4, scope: !4761, file: !2, type: !976)
!4767 = !DILocation(line: 3526, scope: !4761)
!4768 = !DILocation(line: 3527, scope: !4761)
!4769 = !DILocation(line: 116, scope: !1345, inlinedAt: !4770)
!4770 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !4771)
!4771 = distinct !DILocation(line: 1351, scope: !2023, inlinedAt: !4772)
!4772 = distinct !DILocation(line: 3528, scope: !4761)
!4773 = !DILocation(line: 138, scope: !1351, inlinedAt: !4771)
!4774 = !DILocation(line: 1354, scope: !2023, inlinedAt: !4772)
!4775 = !DILocation(line: 1356, scope: !2023, inlinedAt: !4772)
!4776 = !DILocation(line: 385, scope: !995, inlinedAt: !4777)
!4777 = distinct !DILocation(line: 1356, scope: !2023, inlinedAt: !4772)
!4778 = !DILocation(line: 386, scope: !995, inlinedAt: !4777)
!4779 = !DILocation(line: 1358, scope: !2023, inlinedAt: !4772)
!4780 = !DILocation(line: 3529, scope: !4761)
!4781 = !DILocation(line: 3530, scope: !4761)
!4782 = !DILocation(line: 3532, scope: !4761)
!4783 = !DILocation(line: 3533, scope: !4761)
!4784 = !DILocation(line: 3535, scope: !4761)
!4785 = !DILocation(line: 3536, scope: !4761)
!4786 = !DILocation(line: 116, scope: !1345, inlinedAt: !4787)
!4787 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !4788)
!4788 = distinct !DILocation(line: 3538, scope: !4761)
!4789 = !DILocation(line: 138, scope: !1351, inlinedAt: !4788)
!4790 = !DILocation(line: 3538, scope: !4761)
!4791 = !DILocation(line: 3540, scope: !4761)
!4792 = !DILocation(line: 152, scope: !1044, inlinedAt: !4793)
!4793 = distinct !DILocation(line: 3541, scope: !4761)
!4794 = !DILocation(line: 158, scope: !1044, inlinedAt: !4793)
!4795 = !DILocation(line: 154, scope: !1044, inlinedAt: !4793)
!4796 = !DILocation(line: 156, scope: !1044, inlinedAt: !4793)
!4797 = !DILocation(line: 159, scope: !1044, inlinedAt: !4793)
!4798 = !DILocation(line: 160, scope: !1044, inlinedAt: !4793)
!4799 = !DILocation(line: 167, scope: !1044, inlinedAt: !4793)
!4800 = !DILocation(line: 169, scope: !1044, inlinedAt: !4793)
!4801 = !DILocation(line: 170, scope: !1044, inlinedAt: !4793)
!4802 = !DILocation(line: 3544, scope: !4761)
!4803 = !DILocation(line: 385, scope: !995, inlinedAt: !4804)
!4804 = distinct !DILocation(line: 3544, scope: !4761)
!4805 = !DILocation(line: 386, scope: !995, inlinedAt: !4804)
!4806 = !DILocation(line: 3545, scope: !4761)
!4807 = !DILocation(line: 3546, scope: !4761)
!4808 = !DILocation(line: 3548, scope: !4761)
!4809 = !DILocation(line: 38, scope: !1004, inlinedAt: !4810)
!4810 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !4811)
!4811 = distinct !DILocation(line: 3550, scope: !4761)
!4812 = !DILocation(line: 39, scope: !1004, inlinedAt: !4810)
!4813 = !DILocation(line: 3551, scope: !4761)
!4814 = !DILocation(line: 1372, scope: !2042, inlinedAt: !4815)
!4815 = distinct !DILocation(line: 3553, scope: !4761)
!4816 = !DILocation(line: 71, scope: !1020, inlinedAt: !4817)
!4817 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !4818)
!4818 = distinct !DILocation(line: 1374, scope: !2042, inlinedAt: !4815)
!4819 = !DILocation(line: 72, scope: !1020, inlinedAt: !4817)
!4820 = !DILocation(line: 73, scope: !1020, inlinedAt: !4817)
!4821 = !DILocation(line: 75, scope: !1020, inlinedAt: !4817)
!4822 = !DILocation(line: 76, scope: !1020, inlinedAt: !4817)
!4823 = !DILocation(line: 77, scope: !1020, inlinedAt: !4817)
!4824 = !DILocation(line: 79, scope: !1020, inlinedAt: !4817)
!4825 = !DILocation(line: 80, scope: !1020, inlinedAt: !4817)
!4826 = !DILocation(line: 3554, scope: !4761)
!4827 = !DILocation(line: 3555, scope: !4761)
!4828 = distinct !DISubprogram(name: "tcl.dict.incr", scope: !864, file: !1273, type: !4829, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !4831)
!4829 = !DISubroutineType(types: !4830)
!4830 = !{!1382, !998, !998, !10, !976}
!4831 = !{!4832, !4833, !4834, !4835}
!4832 = !DILocalVariable(name: "dict", arg: 1, scope: !4828, file: !2, type: !998)
!4833 = !DILocalVariable(name: "key", arg: 2, scope: !4828, file: !2, type: !998)
!4834 = !DILocalVariable(name: "value", arg: 3, scope: !4828, file: !2, type: !10)
!4835 = !DILocalVariable(name: "ecvar", arg: 4, scope: !4828, file: !2, type: !976)
!4836 = !DILocation(line: 3572, scope: !4828)
!4837 = !DILocation(line: 3573, scope: !4828)
!4838 = !DILocation(line: 3574, scope: !4828)
!4839 = !DILocation(line: 116, scope: !1345, inlinedAt: !4840)
!4840 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !4841)
!4841 = distinct !DILocation(line: 1351, scope: !2023, inlinedAt: !4842)
!4842 = distinct !DILocation(line: 3575, scope: !4828)
!4843 = !DILocation(line: 138, scope: !1351, inlinedAt: !4841)
!4844 = !DILocation(line: 1354, scope: !2023, inlinedAt: !4842)
!4845 = !DILocation(line: 1356, scope: !2023, inlinedAt: !4842)
!4846 = !DILocation(line: 385, scope: !995, inlinedAt: !4847)
!4847 = distinct !DILocation(line: 1356, scope: !2023, inlinedAt: !4842)
!4848 = !DILocation(line: 386, scope: !995, inlinedAt: !4847)
!4849 = !DILocation(line: 1358, scope: !2023, inlinedAt: !4842)
!4850 = !DILocation(line: 3576, scope: !4828)
!4851 = !DILocation(line: 3577, scope: !4828)
!4852 = !DILocation(line: 3579, scope: !4828)
!4853 = !DILocation(line: 3580, scope: !4828)
!4854 = !DILocation(line: 1189, scope: !1303, inlinedAt: !4855)
!4855 = distinct !DILocation(line: 3582, scope: !4828)
!4856 = !DILocation(line: 1191, scope: !1303, inlinedAt: !4855)
!4857 = !DILocation(line: 1194, scope: !1303, inlinedAt: !4855)
!4858 = !DILocation(line: 1196, scope: !1303, inlinedAt: !4855)
!4859 = !DILocation(line: 1199, scope: !1303, inlinedAt: !4855)
!4860 = !DILocation(line: 3586, scope: !4828)
!4861 = !DILocation(line: 3587, scope: !4828)
!4862 = !DILocation(line: 3589, scope: !4828)
!4863 = !DILocation(line: 0, scope: !75, inlinedAt: !4864)
!4864 = distinct !DILocation(line: 3590, scope: !4828)
!4865 = !DILocation(line: 392, scope: !21, inlinedAt: !4866)
!4866 = distinct !DILocation(line: 84, scope: !75, inlinedAt: !4864)
!4867 = !DILocation(line: 85, scope: !75, inlinedAt: !4864)
!4868 = !DILocation(line: 1196, scope: !1303, inlinedAt: !4869)
!4869 = distinct !DILocation(line: 3591, scope: !4828)
!4870 = !DILocation(line: 1199, scope: !1303, inlinedAt: !4869)
!4871 = !DILocation(line: 0, scope: !4828)
!4872 = !DILocation(line: 3596, scope: !4828)
!4873 = !DILocation(line: 38, scope: !1004, inlinedAt: !4874)
!4874 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !4875)
!4875 = distinct !DILocation(line: 3597, scope: !4828)
!4876 = !DILocation(line: 39, scope: !1004, inlinedAt: !4874)
!4877 = !DILocation(line: 3598, scope: !4828)
!4878 = !DILocation(line: 1372, scope: !2042, inlinedAt: !4879)
!4879 = distinct !DILocation(line: 3600, scope: !4828)
!4880 = !DILocation(line: 71, scope: !1020, inlinedAt: !4881)
!4881 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !4882)
!4882 = distinct !DILocation(line: 1374, scope: !2042, inlinedAt: !4879)
!4883 = !DILocation(line: 72, scope: !1020, inlinedAt: !4881)
!4884 = !DILocation(line: 73, scope: !1020, inlinedAt: !4881)
!4885 = !DILocation(line: 75, scope: !1020, inlinedAt: !4881)
!4886 = !DILocation(line: 76, scope: !1020, inlinedAt: !4881)
!4887 = !DILocation(line: 77, scope: !1020, inlinedAt: !4881)
!4888 = !DILocation(line: 79, scope: !1020, inlinedAt: !4881)
!4889 = !DILocation(line: 80, scope: !1020, inlinedAt: !4881)
!4890 = !DILocation(line: 3601, scope: !4828)
!4891 = !DILocation(line: 3602, scope: !4828)
!4892 = distinct !DISubprogram(name: "tcl.dict.lappend", scope: !864, file: !1273, type: !2198, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !4893)
!4893 = !{!4894, !4895, !4896, !4897}
!4894 = !DILocalVariable(name: "dict", arg: 1, scope: !4892, file: !2, type: !998)
!4895 = !DILocalVariable(name: "key", arg: 2, scope: !4892, file: !2, type: !998)
!4896 = !DILocalVariable(name: "value", arg: 3, scope: !4892, file: !2, type: !998)
!4897 = !DILocalVariable(name: "ecvar", arg: 4, scope: !4892, file: !2, type: !976)
!4898 = !DILocation(line: 3620, scope: !4892)
!4899 = !DILocation(line: 3621, scope: !4892)
!4900 = !DILocation(line: 116, scope: !1345, inlinedAt: !4901)
!4901 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !4902)
!4902 = distinct !DILocation(line: 1351, scope: !2023, inlinedAt: !4903)
!4903 = distinct !DILocation(line: 3622, scope: !4892)
!4904 = !DILocation(line: 138, scope: !1351, inlinedAt: !4902)
!4905 = !DILocation(line: 1354, scope: !2023, inlinedAt: !4903)
!4906 = !DILocation(line: 1356, scope: !2023, inlinedAt: !4903)
!4907 = !DILocation(line: 385, scope: !995, inlinedAt: !4908)
!4908 = distinct !DILocation(line: 1356, scope: !2023, inlinedAt: !4903)
!4909 = !DILocation(line: 386, scope: !995, inlinedAt: !4908)
!4910 = !DILocation(line: 1358, scope: !2023, inlinedAt: !4903)
!4911 = !DILocation(line: 3623, scope: !4892)
!4912 = !DILocation(line: 3624, scope: !4892)
!4913 = !DILocation(line: 3626, scope: !4892)
!4914 = !DILocation(line: 3627, scope: !4892)
!4915 = !DILocation(line: 3629, scope: !4892)
!4916 = !DILocation(line: 3630, scope: !4892)
!4917 = !DILocation(line: 385, scope: !995, inlinedAt: !4918)
!4918 = distinct !DILocation(line: 3630, scope: !4892)
!4919 = !DILocation(line: 386, scope: !995, inlinedAt: !4918)
!4920 = !DILocation(line: 3631, scope: !4892)
!4921 = !DILocation(line: 3632, scope: !4892)
!4922 = !DILocation(line: 116, scope: !1345, inlinedAt: !4923)
!4923 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !4924)
!4924 = distinct !DILocation(line: 3634, scope: !4892)
!4925 = !DILocation(line: 138, scope: !1351, inlinedAt: !4924)
!4926 = !DILocation(line: 3634, scope: !4892)
!4927 = !DILocation(line: 3636, scope: !4892)
!4928 = !DILocation(line: 3637, scope: !4892)
!4929 = !DILocation(line: 152, scope: !1044, inlinedAt: !4930)
!4930 = distinct !DILocation(line: 3639, scope: !4892)
!4931 = !DILocation(line: 158, scope: !1044, inlinedAt: !4930)
!4932 = !DILocation(line: 154, scope: !1044, inlinedAt: !4930)
!4933 = !DILocation(line: 156, scope: !1044, inlinedAt: !4930)
!4934 = !DILocation(line: 159, scope: !1044, inlinedAt: !4930)
!4935 = !DILocation(line: 160, scope: !1044, inlinedAt: !4930)
!4936 = !DILocation(line: 167, scope: !1044, inlinedAt: !4930)
!4937 = !DILocation(line: 169, scope: !1044, inlinedAt: !4930)
!4938 = !DILocation(line: 170, scope: !1044, inlinedAt: !4930)
!4939 = !DILocation(line: 3642, scope: !4892)
!4940 = !DILocation(line: 385, scope: !995, inlinedAt: !4941)
!4941 = distinct !DILocation(line: 3642, scope: !4892)
!4942 = !DILocation(line: 386, scope: !995, inlinedAt: !4941)
!4943 = !DILocation(line: 3643, scope: !4892)
!4944 = !DILocation(line: 3644, scope: !4892)
!4945 = !DILocation(line: 3646, scope: !4892)
!4946 = !DILocation(line: 3648, scope: !4892)
!4947 = !DILocation(line: 38, scope: !1004, inlinedAt: !4948)
!4948 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !4949)
!4949 = distinct !DILocation(line: 3650, scope: !4892)
!4950 = !DILocation(line: 39, scope: !1004, inlinedAt: !4948)
!4951 = !DILocation(line: 3651, scope: !4892)
!4952 = !DILocation(line: 72, scope: !1020, inlinedAt: !4953)
!4953 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !4954)
!4954 = distinct !DILocation(line: 3653, scope: !4892)
!4955 = !DILocation(line: 73, scope: !1020, inlinedAt: !4953)
!4956 = !DILocation(line: 75, scope: !1020, inlinedAt: !4953)
!4957 = !DILocation(line: 76, scope: !1020, inlinedAt: !4953)
!4958 = !DILocation(line: 77, scope: !1020, inlinedAt: !4953)
!4959 = !DILocation(line: 79, scope: !1020, inlinedAt: !4953)
!4960 = !DILocation(line: 80, scope: !1020, inlinedAt: !4953)
!4961 = !DILocation(line: 1372, scope: !2042, inlinedAt: !4962)
!4962 = distinct !DILocation(line: 3656, scope: !4892)
!4963 = !DILocation(line: 71, scope: !1020, inlinedAt: !4964)
!4964 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !4965)
!4965 = distinct !DILocation(line: 1374, scope: !2042, inlinedAt: !4962)
!4966 = !DILocation(line: 72, scope: !1020, inlinedAt: !4964)
!4967 = !DILocation(line: 73, scope: !1020, inlinedAt: !4964)
!4968 = !DILocation(line: 75, scope: !1020, inlinedAt: !4964)
!4969 = !DILocation(line: 76, scope: !1020, inlinedAt: !4964)
!4970 = !DILocation(line: 77, scope: !1020, inlinedAt: !4964)
!4971 = !DILocation(line: 79, scope: !1020, inlinedAt: !4964)
!4972 = !DILocation(line: 80, scope: !1020, inlinedAt: !4964)
!4973 = !DILocation(line: 3657, scope: !4892)
!4974 = !DILocation(line: 3658, scope: !4892)
!4975 = distinct !DISubprogram(name: "tcl.streq", scope: !864, file: !1273, type: !4212, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !4976)
!4976 = !{!4977, !4978}
!4977 = !DILocalVariable(name: "value1Ptr", arg: 1, scope: !4975, file: !2, type: !998)
!4978 = !DILocalVariable(name: "value2Ptr", arg: 2, scope: !4975, file: !2, type: !998)
!4979 = !DILocation(line: 880, scope: !1814, inlinedAt: !4980)
!4980 = distinct !DILocation(line: 3699, scope: !4975)
!4981 = !DILocation(line: 880, scope: !1814, inlinedAt: !4982)
!4982 = distinct !DILocation(line: 3700, scope: !4975)
!4983 = !DILocation(line: 828, scope: !1787, inlinedAt: !4984)
!4984 = distinct !DILocation(line: 3716, scope: !4975)
!4985 = !DILocation(line: 828, scope: !1787, inlinedAt: !4986)
!4986 = distinct !DILocation(line: 3717, scope: !4975)
!4987 = !DILocation(line: 3689, scope: !4975)
!4988 = !DILocation(line: 703, scope: !1740, inlinedAt: !4989)
!4989 = distinct !DILocation(line: 3691, scope: !4975)
!4990 = !DILocation(line: 704, scope: !1740, inlinedAt: !4989)
!4991 = !DILocation(line: 705, scope: !1740, inlinedAt: !4989)
!4992 = !DILocation(line: 707, scope: !1740, inlinedAt: !4989)
!4993 = !DILocation(line: 704, scope: !1740, inlinedAt: !4994)
!4994 = distinct !DILocation(line: 3691, scope: !4975)
!4995 = !DILocation(line: 705, scope: !1740, inlinedAt: !4994)
!4996 = !DILocation(line: 707, scope: !1740, inlinedAt: !4994)
!4997 = !DILocation(line: 730, scope: !1748, inlinedAt: !4998)
!4998 = distinct !DILocation(line: 3693, scope: !4975)
!4999 = !DILocation(line: 732, scope: !1748, inlinedAt: !4998)
!5000 = !DILocation(line: 732, scope: !1748, inlinedAt: !5001)
!5001 = distinct !DILocation(line: 3693, scope: !4975)
!5002 = !DILocation(line: 3693, scope: !4975)
!5003 = !DILocation(line: 3695, scope: !4975)
!5004 = !DILocation(line: 881, scope: !1814, inlinedAt: !4980)
!5005 = !DILocation(line: 883, scope: !1814, inlinedAt: !4980)
!5006 = !DILocation(line: 885, scope: !1814, inlinedAt: !4980)
!5007 = !DILocation(line: 881, scope: !1814, inlinedAt: !4982)
!5008 = !DILocation(line: 883, scope: !1814, inlinedAt: !4982)
!5009 = !DILocation(line: 885, scope: !1814, inlinedAt: !4982)
!5010 = !DILocation(line: 3701, scope: !4975)
!5011 = !DILocation(line: 3703, scope: !4975)
!5012 = !DILocation(line: 3704, scope: !4975)
!5013 = !DILocation(line: 3706, scope: !4975)
!5014 = !DILocation(line: 3707, scope: !4975)
!5015 = !DILocation(line: 3710, scope: !4975)
!5016 = !DILocation(line: 3711, scope: !4975)
!5017 = !DILocation(line: 3712, scope: !4975)
!5018 = !DILocation(line: 3713, scope: !4975)
!5019 = !DILocation(line: 3714, scope: !4975)
!5020 = !DILocation(line: 829, scope: !1787, inlinedAt: !4984)
!5021 = !DILocation(line: 831, scope: !1787, inlinedAt: !4984)
!5022 = !DILocation(line: 833, scope: !1787, inlinedAt: !4984)
!5023 = !DILocation(line: 829, scope: !1787, inlinedAt: !4986)
!5024 = !DILocation(line: 831, scope: !1787, inlinedAt: !4986)
!5025 = !DILocation(line: 833, scope: !1787, inlinedAt: !4986)
!5026 = !DILocation(line: 3718, scope: !4975)
!5027 = !DILocation(line: 3720, scope: !4975)
!5028 = !DILocation(line: 3721, scope: !4975)
!5029 = distinct !DISubprogram(name: "tcl.strcmp", scope: !864, file: !1273, type: !5030, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !5032)
!5030 = !DISubroutineType(types: !5031)
!5031 = !{!9, !998, !998}
!5032 = !{!5033, !5034}
!5033 = !DILocalVariable(name: "value1Ptr", arg: 1, scope: !5029, file: !2, type: !998)
!5034 = !DILocalVariable(name: "value2Ptr", arg: 2, scope: !5029, file: !2, type: !998)
!5035 = !DILocation(line: 880, scope: !1814, inlinedAt: !5036)
!5036 = distinct !DILocation(line: 3753, scope: !5029)
!5037 = !DILocation(line: 880, scope: !1814, inlinedAt: !5038)
!5038 = distinct !DILocation(line: 3754, scope: !5029)
!5039 = !DILocation(line: 3743, scope: !5029)
!5040 = !DILocation(line: 703, scope: !1740, inlinedAt: !5041)
!5041 = distinct !DILocation(line: 3745, scope: !5029)
!5042 = !DILocation(line: 704, scope: !1740, inlinedAt: !5041)
!5043 = !DILocation(line: 705, scope: !1740, inlinedAt: !5041)
!5044 = !DILocation(line: 707, scope: !1740, inlinedAt: !5041)
!5045 = !DILocation(line: 704, scope: !1740, inlinedAt: !5046)
!5046 = distinct !DILocation(line: 3747, scope: !5029)
!5047 = !DILocation(line: 705, scope: !1740, inlinedAt: !5046)
!5048 = !DILocation(line: 707, scope: !1740, inlinedAt: !5046)
!5049 = !DILocation(line: 730, scope: !1748, inlinedAt: !5050)
!5050 = distinct !DILocation(line: 3749, scope: !5029)
!5051 = !DILocation(line: 732, scope: !1748, inlinedAt: !5050)
!5052 = !DILocation(line: 731, scope: !1748, inlinedAt: !5053)
!5053 = distinct !DILocation(line: 3749, scope: !5029)
!5054 = !DILocation(line: 732, scope: !1748, inlinedAt: !5053)
!5055 = !DILocation(line: 3749, scope: !5029)
!5056 = !DILocation(line: 3751, scope: !5029)
!5057 = !DILocation(line: 881, scope: !1814, inlinedAt: !5036)
!5058 = !DILocation(line: 883, scope: !1814, inlinedAt: !5036)
!5059 = !DILocation(line: 885, scope: !1814, inlinedAt: !5036)
!5060 = !DILocation(line: 881, scope: !1814, inlinedAt: !5038)
!5061 = !DILocation(line: 883, scope: !1814, inlinedAt: !5038)
!5062 = !DILocation(line: 885, scope: !1814, inlinedAt: !5038)
!5063 = !DILocation(line: 3755, scope: !5029)
!5064 = !DILocation(line: 3756, scope: !5029)
!5065 = !DILocation(line: 3757, scope: !5029)
!5066 = !DILocation(line: 3759, scope: !5029)
!5067 = !DILocation(line: 3760, scope: !5029)
!5068 = !DILocation(line: 3761, scope: !5029)
!5069 = !DILocation(line: 3762, scope: !5029)
!5070 = !DILocation(line: 3763, scope: !5029)
!5071 = !DILocation(line: 3765, scope: !5029)
!5072 = !DILocation(line: 3766, scope: !5029)
!5073 = !DILocation(line: 3767, scope: !5029)
!5074 = !DILocation(line: 3768, scope: !5029)
!5075 = !DILocation(line: 3769, scope: !5029)
!5076 = !DILocation(line: 3770, scope: !5029)
!5077 = !DILocation(line: 3771, scope: !5029)
!5078 = !DILocation(line: 3776, scope: !5029)
!5079 = distinct !DISubprogram(name: "tcl.strmatch", scope: !864, file: !1273, type: !5080, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !5082)
!5080 = !DISubroutineType(types: !5081)
!5081 = !{!14, !10, !998, !998}
!5082 = !{!5083, !5084, !5085}
!5083 = !DILocalVariable(name: "nocase", arg: 1, scope: !5079, file: !2, type: !10)
!5084 = !DILocalVariable(name: "pattern", arg: 2, scope: !5079, file: !2, type: !998)
!5085 = !DILocalVariable(name: "string", arg: 3, scope: !5079, file: !2, type: !998)
!5086 = !DILocation(line: 854, scope: !1799, inlinedAt: !5087)
!5087 = distinct !DILocation(line: 3808, scope: !5079)
!5088 = !DILocation(line: 854, scope: !1799, inlinedAt: !5089)
!5089 = distinct !DILocation(line: 3809, scope: !5079)
!5090 = !DILocation(line: 371, scope: !4, inlinedAt: !5091)
!5091 = distinct !DILocation(line: 3797, scope: !5079)
!5092 = !DILocation(line: 730, scope: !1748, inlinedAt: !5093)
!5093 = distinct !DILocation(line: 3798, scope: !5079)
!5094 = !DILocation(line: 731, scope: !1748, inlinedAt: !5093)
!5095 = !DILocation(line: 732, scope: !1748, inlinedAt: !5093)
!5096 = !DILocation(line: 3798, scope: !5079)
!5097 = !DILocation(line: 731, scope: !1748, inlinedAt: !5098)
!5098 = distinct !DILocation(line: 3800, scope: !5079)
!5099 = !DILocation(line: 732, scope: !1748, inlinedAt: !5098)
!5100 = !DILocation(line: 3800, scope: !5079)
!5101 = !DILocation(line: 3803, scope: !5079)
!5102 = !DILocation(line: 3804, scope: !5079)
!5103 = !DILocation(line: 3805, scope: !5079)
!5104 = !DILocation(line: 3806, scope: !5079)
!5105 = !DILocation(line: 855, scope: !1799, inlinedAt: !5087)
!5106 = !DILocation(line: 857, scope: !1799, inlinedAt: !5087)
!5107 = !DILocation(line: 859, scope: !1799, inlinedAt: !5087)
!5108 = !DILocation(line: 855, scope: !1799, inlinedAt: !5089)
!5109 = !DILocation(line: 857, scope: !1799, inlinedAt: !5089)
!5110 = !DILocation(line: 859, scope: !1799, inlinedAt: !5089)
!5111 = !DILocation(line: 3810, scope: !5079)
!5112 = !DILocation(line: 3811, scope: !5079)
!5113 = distinct !DISubprogram(name: "tcl.regexp", scope: !864, file: !1273, type: !5114, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !5116)
!5114 = !DISubroutineType(types: !5115)
!5115 = !{!4074, !10, !998, !998, !976}
!5116 = !{!5117, !5118, !5119, !5120}
!5117 = !DILocalVariable(name: "flags", arg: 1, scope: !5113, file: !2, type: !10)
!5118 = !DILocalVariable(name: "regexp", arg: 2, scope: !5113, file: !2, type: !998)
!5119 = !DILocalVariable(name: "string", arg: 3, scope: !5113, file: !2, type: !998)
!5120 = !DILocalVariable(name: "errorCode", arg: 4, scope: !5113, file: !2, type: !976)
!5121 = !DILocation(line: 3833, scope: !5113)
!5122 = !DILocation(line: 371, scope: !4, inlinedAt: !5123)
!5123 = distinct !DILocation(line: 3834, scope: !5113)
!5124 = !DILocation(line: 3834, scope: !5113)
!5125 = !DILocation(line: 3835, scope: !5113)
!5126 = !DILocation(line: 3837, scope: !5113)
!5127 = !DILocation(line: 3838, scope: !5113)
!5128 = !DILocation(line: 3840, scope: !5113)
!5129 = !DILocation(line: 3841, scope: !5113)
!5130 = !DILocation(line: 3843, scope: !5113)
!5131 = !DILocation(line: 3844, scope: !5113)
!5132 = distinct !DISubprogram(name: "tcl.div", scope: !864, file: !5, type: !5133, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !5135)
!5133 = !DISubroutineType(types: !5134)
!5134 = !{!2790, !10, !10, !976}
!5135 = !{!5136, !5137, !5138}
!5136 = !DILocalVariable(name: "x", arg: 1, scope: !5132, file: !2, type: !10)
!5137 = !DILocalVariable(name: "y", arg: 2, scope: !5132, file: !2, type: !10)
!5138 = !DILocalVariable(name: "ecvar", arg: 3, scope: !5132, file: !2, type: !976)
!5139 = !DILocation(line: 156, scope: !203, inlinedAt: !5140)
!5140 = distinct !DILocation(line: 739, scope: !5132)
!5141 = !DILocation(line: 166, scope: !203, inlinedAt: !5140)
!5142 = !DILocation(line: 739, scope: !5132)
!5143 = !DILocation(line: 741, scope: !5132)
!5144 = !DILocation(line: 0, scope: !5132)
!5145 = !DILocation(line: 743, scope: !5132)
!5146 = !DILocation(line: 448, scope: !49, inlinedAt: !5147)
!5147 = distinct !DILocation(line: 747, scope: !5132)
!5148 = !DILocation(line: 449, scope: !49, inlinedAt: !5147)
!5149 = !DILocation(line: 453, scope: !49, inlinedAt: !5147)
!5150 = !DILocation(line: 455, scope: !49, inlinedAt: !5147)
!5151 = !DILocation(line: 457, scope: !49, inlinedAt: !5147)
!5152 = !DILocation(line: 748, scope: !5132)
!5153 = !DILocation(line: 394, scope: !21, inlinedAt: !5154)
!5154 = distinct !DILocation(line: 750, scope: !5132)
!5155 = !DILocation(line: 392, scope: !21, inlinedAt: !5156)
!5156 = distinct !DILocation(line: 751, scope: !5132)
!5157 = !DILocation(line: 396, scope: !21, inlinedAt: !5154)
!5158 = !DILocation(line: 396, scope: !21, inlinedAt: !5156)
!5159 = !DILocation(line: 448, scope: !62, inlinedAt: !5160)
!5160 = distinct !DILocation(line: 752, scope: !5132)
!5161 = !DILocation(line: 449, scope: !62, inlinedAt: !5160)
!5162 = !DILocation(line: 453, scope: !62, inlinedAt: !5160)
!5163 = !DILocation(line: 455, scope: !62, inlinedAt: !5160)
!5164 = !DILocation(line: 457, scope: !62, inlinedAt: !5160)
!5165 = !DILocation(line: 753, scope: !5132)
!5166 = !DILocation(line: 755, scope: !5132)
!5167 = !DILocation(line: 116, scope: !1345, inlinedAt: !5168)
!5168 = distinct !DILocation(line: 755, scope: !5132)
!5169 = !DILocation(line: 116, scope: !1345, inlinedAt: !5170)
!5170 = distinct !DILocation(line: 755, scope: !5132)
!5171 = !DILocation(line: 756, scope: !5132)
!5172 = distinct !DISubprogram(name: "tcl.div.double", scope: !864, file: !5, type: !5173, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !5177)
!5173 = !DISubroutineType(types: !5174)
!5174 = !{!5175, !321, !321, !976}
!5175 = !DICompositeType(tag: DW_TAG_structure_type, name: "DOUBLE?", scope: !12, file: !11, line: 1588, size: 16, elements: !5176)
!5176 = !{!14, !1514}
!5177 = !{!5178, !5179, !5180}
!5178 = !DILocalVariable(name: "x", arg: 1, scope: !5172, file: !2, type: !321)
!5179 = !DILocalVariable(name: "y", arg: 2, scope: !5172, file: !2, type: !321)
!5180 = !DILocalVariable(name: "ecvar", arg: 3, scope: !5172, file: !2, type: !976)
!5181 = !DILocation(line: 772, scope: !5172)
!5182 = !DILocation(line: 774, scope: !5172)
!5183 = !DILocation(line: 776, scope: !5172)
!5184 = !DILocation(line: 116, scope: !1345, inlinedAt: !5185)
!5185 = distinct !DILocation(line: 776, scope: !5172)
!5186 = !DILocation(line: 116, scope: !1345, inlinedAt: !5187)
!5187 = distinct !DILocation(line: 776, scope: !5172)
!5188 = !DILocation(line: 777, scope: !5172)
!5189 = distinct !DISubprogram(name: "tcl.mod", scope: !864, file: !5, type: !5133, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !5190)
!5190 = !{!5191, !5192, !5193}
!5191 = !DILocalVariable(name: "x", arg: 1, scope: !5189, file: !2, type: !10)
!5192 = !DILocalVariable(name: "y", arg: 2, scope: !5189, file: !2, type: !10)
!5193 = !DILocalVariable(name: "ecvar", arg: 3, scope: !5189, file: !2, type: !976)
!5194 = !DILocation(line: 156, scope: !203, inlinedAt: !5195)
!5195 = distinct !DILocation(line: 796, scope: !5189)
!5196 = !DILocation(line: 166, scope: !203, inlinedAt: !5195)
!5197 = !DILocation(line: 796, scope: !5189)
!5198 = !DILocation(line: 798, scope: !5189)
!5199 = !DILocation(line: 0, scope: !5189)
!5200 = !DILocation(line: 800, scope: !5189)
!5201 = !DILocation(line: 448, scope: !49, inlinedAt: !5202)
!5202 = distinct !DILocation(line: 804, scope: !5189)
!5203 = !DILocation(line: 449, scope: !49, inlinedAt: !5202)
!5204 = !DILocation(line: 453, scope: !49, inlinedAt: !5202)
!5205 = !DILocation(line: 455, scope: !49, inlinedAt: !5202)
!5206 = !DILocation(line: 457, scope: !49, inlinedAt: !5202)
!5207 = !DILocation(line: 804, scope: !5189)
!5208 = !DILocation(line: 805, scope: !5189)
!5209 = !DILocation(line: 394, scope: !21, inlinedAt: !5210)
!5210 = distinct !DILocation(line: 807, scope: !5189)
!5211 = !DILocation(line: 392, scope: !21, inlinedAt: !5212)
!5212 = distinct !DILocation(line: 808, scope: !5189)
!5213 = !DILocation(line: 396, scope: !21, inlinedAt: !5210)
!5214 = !DILocation(line: 396, scope: !21, inlinedAt: !5212)
!5215 = !DILocation(line: 448, scope: !62, inlinedAt: !5216)
!5216 = distinct !DILocation(line: 809, scope: !5189)
!5217 = !DILocation(line: 449, scope: !62, inlinedAt: !5216)
!5218 = !DILocation(line: 453, scope: !62, inlinedAt: !5216)
!5219 = !DILocation(line: 455, scope: !62, inlinedAt: !5216)
!5220 = !DILocation(line: 457, scope: !62, inlinedAt: !5216)
!5221 = !DILocation(line: 809, scope: !5189)
!5222 = !DILocation(line: 810, scope: !5189)
!5223 = !DILocation(line: 812, scope: !5189)
!5224 = !DILocation(line: 116, scope: !1345, inlinedAt: !5225)
!5225 = distinct !DILocation(line: 812, scope: !5189)
!5226 = !DILocation(line: 116, scope: !1345, inlinedAt: !5227)
!5227 = distinct !DILocation(line: 812, scope: !5189)
!5228 = !DILocation(line: 813, scope: !5189)
!5229 = distinct !DISubprogram(name: "tcl.div.numeric", scope: !864, file: !5, type: !5230, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !5233)
!5230 = !DISubroutineType(types: !5231)
!5231 = !{!5232, !343, !343, !976}
!5232 = !DICompositeType(tag: DW_TAG_structure_type, name: "NUMERIC?", scope: !12, file: !11, line: 1588, size: 48, elements: !641)
!5233 = !{!5234, !5235, !5236}
!5234 = !DILocalVariable(name: "left", arg: 1, scope: !5229, file: !2, type: !343)
!5235 = !DILocalVariable(name: "right", arg: 2, scope: !5229, file: !2, type: !343)
!5236 = !DILocalVariable(name: "ecvar", arg: 3, scope: !5229, file: !2, type: !976)
!5237 = !DILocation(line: 830, scope: !5229)
!5238 = !DILocation(line: 0, scope: !5229)
!5239 = !DILocation(line: 832, scope: !5229)
!5240 = !DILocation(line: 156, scope: !203, inlinedAt: !5241)
!5241 = distinct !DILocation(line: 739, scope: !5132, inlinedAt: !5242)
!5242 = distinct !DILocation(line: 832, scope: !5229)
!5243 = !DILocation(line: 166, scope: !203, inlinedAt: !5241)
!5244 = !DILocation(line: 739, scope: !5132, inlinedAt: !5242)
!5245 = !DILocation(line: 741, scope: !5132, inlinedAt: !5242)
!5246 = !DILocation(line: 0, scope: !5132, inlinedAt: !5242)
!5247 = !DILocation(line: 743, scope: !5132, inlinedAt: !5242)
!5248 = !DILocation(line: 448, scope: !49, inlinedAt: !5249)
!5249 = distinct !DILocation(line: 747, scope: !5132, inlinedAt: !5242)
!5250 = !DILocation(line: 449, scope: !49, inlinedAt: !5249)
!5251 = !DILocation(line: 453, scope: !49, inlinedAt: !5249)
!5252 = !DILocation(line: 455, scope: !49, inlinedAt: !5249)
!5253 = !DILocation(line: 457, scope: !49, inlinedAt: !5249)
!5254 = !DILocation(line: 748, scope: !5132, inlinedAt: !5242)
!5255 = !DILocation(line: 394, scope: !21, inlinedAt: !5256)
!5256 = distinct !DILocation(line: 750, scope: !5132, inlinedAt: !5242)
!5257 = !DILocation(line: 392, scope: !21, inlinedAt: !5258)
!5258 = distinct !DILocation(line: 751, scope: !5132, inlinedAt: !5242)
!5259 = !DILocation(line: 396, scope: !21, inlinedAt: !5256)
!5260 = !DILocation(line: 396, scope: !21, inlinedAt: !5258)
!5261 = !DILocation(line: 448, scope: !62, inlinedAt: !5262)
!5262 = distinct !DILocation(line: 752, scope: !5132, inlinedAt: !5242)
!5263 = !DILocation(line: 449, scope: !62, inlinedAt: !5262)
!5264 = !DILocation(line: 453, scope: !62, inlinedAt: !5262)
!5265 = !DILocation(line: 455, scope: !62, inlinedAt: !5262)
!5266 = !DILocation(line: 457, scope: !62, inlinedAt: !5262)
!5267 = !DILocation(line: 753, scope: !5132, inlinedAt: !5242)
!5268 = !DILocation(line: 755, scope: !5132, inlinedAt: !5242)
!5269 = !{!5270}
!5270 = distinct !{!5270, !5271, !"tcl.div: %ecvar"}
!5271 = distinct !{!5271, !"tcl.div"}
!5272 = !DILocation(line: 116, scope: !1345, inlinedAt: !5273)
!5273 = distinct !DILocation(line: 755, scope: !5132, inlinedAt: !5242)
!5274 = !DILocation(line: 116, scope: !1345, inlinedAt: !5275)
!5275 = distinct !DILocation(line: 755, scope: !5132, inlinedAt: !5242)
!5276 = !DILocation(line: 756, scope: !5132, inlinedAt: !5242)
!5277 = !DILocation(line: 833, scope: !5229)
!5278 = !DILocation(line: 392, scope: !21, inlinedAt: !5279)
!5279 = distinct !DILocation(line: 835, scope: !5229)
!5280 = !DILocation(line: 835, scope: !5229)
!5281 = !DILocation(line: 836, scope: !5229)
!5282 = !DILocation(line: 392, scope: !21, inlinedAt: !5283)
!5283 = distinct !DILocation(line: 836, scope: !5229)
!5284 = !DILocation(line: 772, scope: !5172, inlinedAt: !5285)
!5285 = distinct !DILocation(line: 837, scope: !5229)
!5286 = !DILocation(line: 774, scope: !5172, inlinedAt: !5285)
!5287 = !DILocation(line: 776, scope: !5172, inlinedAt: !5285)
!5288 = !{!5289}
!5289 = distinct !{!5289, !5290, !"tcl.div.double: %ecvar"}
!5290 = distinct !{!5290, !"tcl.div.double"}
!5291 = !DILocation(line: 116, scope: !1345, inlinedAt: !5292)
!5292 = distinct !DILocation(line: 776, scope: !5172, inlinedAt: !5285)
!5293 = !DILocation(line: 116, scope: !1345, inlinedAt: !5294)
!5294 = distinct !DILocation(line: 776, scope: !5172, inlinedAt: !5285)
!5295 = !DILocation(line: 777, scope: !5172, inlinedAt: !5285)
!5296 = !DILocation(line: 838, scope: !5229)
!5297 = distinct !DISubprogram(name: "tcl.fpow", scope: !864, file: !5, type: !5173, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !5298)
!5298 = !{!5299, !5300, !5301}
!5299 = !DILocalVariable(name: "x", arg: 1, scope: !5297, file: !2, type: !321)
!5300 = !DILocalVariable(name: "y", arg: 2, scope: !5297, file: !2, type: !321)
!5301 = !DILocalVariable(name: "ecvar", arg: 3, scope: !5297, file: !2, type: !976)
!5302 = !DILocation(line: 859, scope: !5297)
!5303 = !DILocation(line: 861, scope: !5297)
!5304 = !DILocation(line: 862, scope: !5297)
!5305 = !DILocation(line: 864, scope: !5297)
!5306 = !DILocation(line: 866, scope: !5297)
!5307 = !DILocation(line: 868, scope: !5297)
!5308 = !DILocation(line: 116, scope: !1345, inlinedAt: !5309)
!5309 = distinct !DILocation(line: 868, scope: !5297)
!5310 = !DILocation(line: 116, scope: !1345, inlinedAt: !5311)
!5311 = distinct !DILocation(line: 868, scope: !5297)
!5312 = !DILocation(line: 869, scope: !5297)
!5313 = !DILocation(line: 871, scope: !5297)
!5314 = !DILocation(line: 116, scope: !1345, inlinedAt: !5315)
!5315 = distinct !DILocation(line: 871, scope: !5297)
!5316 = !DILocation(line: 116, scope: !1345, inlinedAt: !5317)
!5317 = distinct !DILocation(line: 871, scope: !5297)
!5318 = !DILocation(line: 872, scope: !5297)
!5319 = distinct !DISubprogram(name: "tcl.powi", scope: !864, file: !5, type: !5320, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !5322)
!5320 = !DISubroutineType(types: !5321)
!5321 = !{!5175, !321, !10, !976}
!5322 = !{!5323, !5324, !5325}
!5323 = !DILocalVariable(name: "x", arg: 1, scope: !5319, file: !2, type: !321)
!5324 = !DILocalVariable(name: "y", arg: 2, scope: !5319, file: !2, type: !10)
!5325 = !DILocalVariable(name: "ecvar", arg: 3, scope: !5319, file: !2, type: !976)
!5326 = !DILocation(line: 894, scope: !5319)
!5327 = !DILocation(line: 156, scope: !265, inlinedAt: !5328)
!5328 = distinct !DILocation(line: 894, scope: !5319)
!5329 = !DILocation(line: 166, scope: !265, inlinedAt: !5328)
!5330 = !DILocation(line: 896, scope: !5319)
!5331 = !DILocation(line: 902, scope: !5319)
!5332 = !DILocation(line: 904, scope: !5319)
!5333 = !DILocation(line: 905, scope: !5319)
!5334 = !DILocation(line: 907, scope: !5319)
!5335 = !DILocation(line: 910, scope: !5319)
!5336 = !DILocation(line: 912, scope: !5319)
!5337 = !DILocation(line: 116, scope: !1345, inlinedAt: !5338)
!5338 = distinct !DILocation(line: 912, scope: !5319)
!5339 = !DILocation(line: 116, scope: !1345, inlinedAt: !5340)
!5340 = distinct !DILocation(line: 912, scope: !5319)
!5341 = !DILocation(line: 913, scope: !5319)
!5342 = distinct !DISubprogram(name: "tcl.ipow.bypow2", scope: !864, file: !5, type: !30, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !5343)
!5343 = !{!5344, !5345}
!5344 = !DILocalVariable(name: "x", arg: 1, scope: !5342, file: !2, type: !10)
!5345 = !DILocalVariable(name: "y", arg: 2, scope: !5342, file: !2, type: !10)
!5346 = !DILocation(line: 392, scope: !21, inlinedAt: !5347)
!5347 = distinct !DILocation(line: 936, scope: !5342)
!5348 = !DILocation(line: 944, scope: !5342)
!5349 = !DILocation(line: 946, scope: !5342)
!5350 = !DILocation(line: 948, scope: !5342)
!5351 = !DILocation(line: 0, scope: !5342)
!5352 = !DILocation(line: 67, scope: !115, inlinedAt: !5353)
!5353 = distinct !DILocation(line: 958, scope: !5342)
!5354 = !DILocation(line: 67, scope: !115, inlinedAt: !5355)
!5355 = distinct !DILocation(line: 950, scope: !5342)
!5356 = !DILocation(line: 69, scope: !115, inlinedAt: !5355)
!5357 = !DILocation(line: 0, scope: !115, inlinedAt: !5355)
!5358 = !DILocation(line: 72, scope: !115, inlinedAt: !5355)
!5359 = !DILocation(line: 73, scope: !115, inlinedAt: !5355)
!5360 = !DILocation(line: 75, scope: !115, inlinedAt: !5355)
!5361 = !DILocation(line: 77, scope: !115, inlinedAt: !5355)
!5362 = !DILocation(line: 78, scope: !115, inlinedAt: !5355)
!5363 = !DILocation(line: 79, scope: !115, inlinedAt: !5355)
!5364 = !DILocation(line: 81, scope: !115, inlinedAt: !5355)
!5365 = !DILocation(line: 396, scope: !21, inlinedAt: !5366)
!5366 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5355)
!5367 = !DILocation(line: 392, scope: !21, inlinedAt: !5368)
!5368 = distinct !DILocation(line: 84, scope: !115, inlinedAt: !5355)
!5369 = !DILocation(line: 85, scope: !115, inlinedAt: !5355)
!5370 = !DILocation(line: 951, scope: !5342)
!5371 = !DILocation(line: 394, scope: !21, inlinedAt: !5366)
!5372 = !DILocation(line: 0, scope: !115, inlinedAt: !5353)
!5373 = !DILocation(line: 73, scope: !115, inlinedAt: !5353)
!5374 = !DILocation(line: 75, scope: !115, inlinedAt: !5353)
!5375 = !DILocation(line: 77, scope: !115, inlinedAt: !5353)
!5376 = !DILocation(line: 79, scope: !115, inlinedAt: !5353)
!5377 = !DILocation(line: 81, scope: !115, inlinedAt: !5353)
!5378 = !DILocation(line: 396, scope: !21, inlinedAt: !5379)
!5379 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5353)
!5380 = !DILocation(line: 85, scope: !115, inlinedAt: !5353)
!5381 = !DILocation(line: 959, scope: !5342)
!5382 = distinct !DISubprogram(name: "tcl.ipow32", scope: !864, file: !5, type: !30, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !5383)
!5383 = !{!5384, !5385}
!5384 = !DILocalVariable(name: "x", arg: 1, scope: !5382, file: !2, type: !10)
!5385 = !DILocalVariable(name: "y", arg: 2, scope: !5382, file: !2, type: !10)
!5386 = !DILocation(line: 392, scope: !21, inlinedAt: !5387)
!5387 = distinct !DILocation(line: 978, scope: !5382)
!5388 = !DILocation(line: 978, scope: !5382)
!5389 = !DILocation(line: 67, scope: !115, inlinedAt: !5390)
!5390 = distinct !DILocation(line: 980, scope: !5382)
!5391 = !DILocation(line: 0, scope: !115, inlinedAt: !5390)
!5392 = !DILocation(line: 73, scope: !115, inlinedAt: !5390)
!5393 = !DILocation(line: 75, scope: !115, inlinedAt: !5390)
!5394 = !DILocation(line: 77, scope: !115, inlinedAt: !5390)
!5395 = !DILocation(line: 79, scope: !115, inlinedAt: !5390)
!5396 = !DILocation(line: 81, scope: !115, inlinedAt: !5390)
!5397 = !DILocation(line: 396, scope: !21, inlinedAt: !5398)
!5398 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5390)
!5399 = !DILocation(line: 85, scope: !115, inlinedAt: !5390)
!5400 = !DILocation(line: 980, scope: !5382)
!5401 = !DILocation(line: 67, scope: !115, inlinedAt: !5402)
!5402 = distinct !DILocation(line: 982, scope: !5382)
!5403 = !DILocation(line: 0, scope: !115, inlinedAt: !5402)
!5404 = !DILocation(line: 73, scope: !115, inlinedAt: !5402)
!5405 = !DILocation(line: 75, scope: !115, inlinedAt: !5402)
!5406 = !DILocation(line: 77, scope: !115, inlinedAt: !5402)
!5407 = !DILocation(line: 79, scope: !115, inlinedAt: !5402)
!5408 = !DILocation(line: 81, scope: !115, inlinedAt: !5402)
!5409 = !DILocation(line: 396, scope: !21, inlinedAt: !5410)
!5410 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5402)
!5411 = !DILocation(line: 85, scope: !115, inlinedAt: !5402)
!5412 = !DILocation(line: 67, scope: !115, inlinedAt: !5413)
!5413 = distinct !DILocation(line: 982, scope: !5382)
!5414 = !DILocation(line: 0, scope: !115, inlinedAt: !5413)
!5415 = !DILocation(line: 69, scope: !115, inlinedAt: !5413)
!5416 = !DILocation(line: 72, scope: !115, inlinedAt: !5413)
!5417 = !DILocation(line: 73, scope: !115, inlinedAt: !5413)
!5418 = !DILocation(line: 75, scope: !115, inlinedAt: !5413)
!5419 = !DILocation(line: 77, scope: !115, inlinedAt: !5413)
!5420 = !DILocation(line: 78, scope: !115, inlinedAt: !5413)
!5421 = !DILocation(line: 79, scope: !115, inlinedAt: !5413)
!5422 = !DILocation(line: 81, scope: !115, inlinedAt: !5413)
!5423 = !DILocation(line: 394, scope: !21, inlinedAt: !5424)
!5424 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5413)
!5425 = !DILocation(line: 392, scope: !21, inlinedAt: !5426)
!5426 = distinct !DILocation(line: 84, scope: !115, inlinedAt: !5413)
!5427 = !DILocation(line: 396, scope: !21, inlinedAt: !5424)
!5428 = !DILocation(line: 85, scope: !115, inlinedAt: !5413)
!5429 = !DILocation(line: 67, scope: !115, inlinedAt: !5430)
!5430 = distinct !DILocation(line: 984, scope: !5382)
!5431 = !DILocation(line: 0, scope: !115, inlinedAt: !5430)
!5432 = !DILocation(line: 73, scope: !115, inlinedAt: !5430)
!5433 = !DILocation(line: 75, scope: !115, inlinedAt: !5430)
!5434 = !DILocation(line: 77, scope: !115, inlinedAt: !5430)
!5435 = !DILocation(line: 79, scope: !115, inlinedAt: !5430)
!5436 = !DILocation(line: 81, scope: !115, inlinedAt: !5430)
!5437 = !DILocation(line: 396, scope: !21, inlinedAt: !5438)
!5438 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5430)
!5439 = !DILocation(line: 85, scope: !115, inlinedAt: !5430)
!5440 = !DILocation(line: 67, scope: !115, inlinedAt: !5441)
!5441 = distinct !DILocation(line: 985, scope: !5382)
!5442 = !DILocation(line: 0, scope: !115, inlinedAt: !5441)
!5443 = !DILocation(line: 73, scope: !115, inlinedAt: !5441)
!5444 = !DILocation(line: 75, scope: !115, inlinedAt: !5441)
!5445 = !DILocation(line: 77, scope: !115, inlinedAt: !5441)
!5446 = !DILocation(line: 79, scope: !115, inlinedAt: !5441)
!5447 = !DILocation(line: 81, scope: !115, inlinedAt: !5441)
!5448 = !DILocation(line: 396, scope: !21, inlinedAt: !5449)
!5449 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5441)
!5450 = !DILocation(line: 85, scope: !115, inlinedAt: !5441)
!5451 = !DILocation(line: 67, scope: !115, inlinedAt: !5452)
!5452 = distinct !DILocation(line: 987, scope: !5382)
!5453 = !DILocation(line: 0, scope: !115, inlinedAt: !5452)
!5454 = !DILocation(line: 73, scope: !115, inlinedAt: !5452)
!5455 = !DILocation(line: 75, scope: !115, inlinedAt: !5452)
!5456 = !DILocation(line: 77, scope: !115, inlinedAt: !5452)
!5457 = !DILocation(line: 79, scope: !115, inlinedAt: !5452)
!5458 = !DILocation(line: 81, scope: !115, inlinedAt: !5452)
!5459 = !DILocation(line: 396, scope: !21, inlinedAt: !5460)
!5460 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5452)
!5461 = !DILocation(line: 85, scope: !115, inlinedAt: !5452)
!5462 = !DILocation(line: 67, scope: !115, inlinedAt: !5463)
!5463 = distinct !DILocation(line: 988, scope: !5382)
!5464 = !DILocation(line: 0, scope: !115, inlinedAt: !5463)
!5465 = !DILocation(line: 73, scope: !115, inlinedAt: !5463)
!5466 = !DILocation(line: 75, scope: !115, inlinedAt: !5463)
!5467 = !DILocation(line: 77, scope: !115, inlinedAt: !5463)
!5468 = !DILocation(line: 79, scope: !115, inlinedAt: !5463)
!5469 = !DILocation(line: 81, scope: !115, inlinedAt: !5463)
!5470 = !DILocation(line: 396, scope: !21, inlinedAt: !5471)
!5471 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5463)
!5472 = !DILocation(line: 85, scope: !115, inlinedAt: !5463)
!5473 = !DILocation(line: 67, scope: !115, inlinedAt: !5474)
!5474 = distinct !DILocation(line: 988, scope: !5382)
!5475 = !DILocation(line: 0, scope: !115, inlinedAt: !5474)
!5476 = !DILocation(line: 69, scope: !115, inlinedAt: !5474)
!5477 = !DILocation(line: 72, scope: !115, inlinedAt: !5474)
!5478 = !DILocation(line: 73, scope: !115, inlinedAt: !5474)
!5479 = !DILocation(line: 75, scope: !115, inlinedAt: !5474)
!5480 = !DILocation(line: 77, scope: !115, inlinedAt: !5474)
!5481 = !DILocation(line: 78, scope: !115, inlinedAt: !5474)
!5482 = !DILocation(line: 79, scope: !115, inlinedAt: !5474)
!5483 = !DILocation(line: 81, scope: !115, inlinedAt: !5474)
!5484 = !DILocation(line: 394, scope: !21, inlinedAt: !5485)
!5485 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5474)
!5486 = !DILocation(line: 392, scope: !21, inlinedAt: !5487)
!5487 = distinct !DILocation(line: 84, scope: !115, inlinedAt: !5474)
!5488 = !DILocation(line: 396, scope: !21, inlinedAt: !5485)
!5489 = !DILocation(line: 85, scope: !115, inlinedAt: !5474)
!5490 = !DILocation(line: 67, scope: !115, inlinedAt: !5491)
!5491 = distinct !DILocation(line: 990, scope: !5382)
!5492 = !DILocation(line: 0, scope: !115, inlinedAt: !5491)
!5493 = !DILocation(line: 73, scope: !115, inlinedAt: !5491)
!5494 = !DILocation(line: 75, scope: !115, inlinedAt: !5491)
!5495 = !DILocation(line: 77, scope: !115, inlinedAt: !5491)
!5496 = !DILocation(line: 79, scope: !115, inlinedAt: !5491)
!5497 = !DILocation(line: 81, scope: !115, inlinedAt: !5491)
!5498 = !DILocation(line: 396, scope: !21, inlinedAt: !5499)
!5499 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5491)
!5500 = !DILocation(line: 85, scope: !115, inlinedAt: !5491)
!5501 = !DILocation(line: 67, scope: !115, inlinedAt: !5502)
!5502 = distinct !DILocation(line: 990, scope: !5382)
!5503 = !DILocation(line: 0, scope: !115, inlinedAt: !5502)
!5504 = !DILocation(line: 69, scope: !115, inlinedAt: !5502)
!5505 = !DILocation(line: 72, scope: !115, inlinedAt: !5502)
!5506 = !DILocation(line: 73, scope: !115, inlinedAt: !5502)
!5507 = !DILocation(line: 75, scope: !115, inlinedAt: !5502)
!5508 = !DILocation(line: 77, scope: !115, inlinedAt: !5502)
!5509 = !DILocation(line: 78, scope: !115, inlinedAt: !5502)
!5510 = !DILocation(line: 79, scope: !115, inlinedAt: !5502)
!5511 = !DILocation(line: 81, scope: !115, inlinedAt: !5502)
!5512 = !DILocation(line: 394, scope: !21, inlinedAt: !5513)
!5513 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5502)
!5514 = !DILocation(line: 392, scope: !21, inlinedAt: !5515)
!5515 = distinct !DILocation(line: 84, scope: !115, inlinedAt: !5502)
!5516 = !DILocation(line: 396, scope: !21, inlinedAt: !5513)
!5517 = !DILocation(line: 85, scope: !115, inlinedAt: !5502)
!5518 = !DILocation(line: 67, scope: !115, inlinedAt: !5519)
!5519 = distinct !DILocation(line: 991, scope: !5382)
!5520 = !DILocation(line: 0, scope: !115, inlinedAt: !5519)
!5521 = !DILocation(line: 73, scope: !115, inlinedAt: !5519)
!5522 = !DILocation(line: 75, scope: !115, inlinedAt: !5519)
!5523 = !DILocation(line: 77, scope: !115, inlinedAt: !5519)
!5524 = !DILocation(line: 79, scope: !115, inlinedAt: !5519)
!5525 = !DILocation(line: 81, scope: !115, inlinedAt: !5519)
!5526 = !DILocation(line: 396, scope: !21, inlinedAt: !5527)
!5527 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5519)
!5528 = !DILocation(line: 85, scope: !115, inlinedAt: !5519)
!5529 = !DILocation(line: 67, scope: !115, inlinedAt: !5530)
!5530 = distinct !DILocation(line: 993, scope: !5382)
!5531 = !DILocation(line: 0, scope: !115, inlinedAt: !5530)
!5532 = !DILocation(line: 73, scope: !115, inlinedAt: !5530)
!5533 = !DILocation(line: 75, scope: !115, inlinedAt: !5530)
!5534 = !DILocation(line: 77, scope: !115, inlinedAt: !5530)
!5535 = !DILocation(line: 79, scope: !115, inlinedAt: !5530)
!5536 = !DILocation(line: 81, scope: !115, inlinedAt: !5530)
!5537 = !DILocation(line: 396, scope: !21, inlinedAt: !5538)
!5538 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5530)
!5539 = !DILocation(line: 85, scope: !115, inlinedAt: !5530)
!5540 = !DILocation(line: 67, scope: !115, inlinedAt: !5541)
!5541 = distinct !DILocation(line: 993, scope: !5382)
!5542 = !DILocation(line: 0, scope: !115, inlinedAt: !5541)
!5543 = !DILocation(line: 69, scope: !115, inlinedAt: !5541)
!5544 = !DILocation(line: 72, scope: !115, inlinedAt: !5541)
!5545 = !DILocation(line: 73, scope: !115, inlinedAt: !5541)
!5546 = !DILocation(line: 75, scope: !115, inlinedAt: !5541)
!5547 = !DILocation(line: 77, scope: !115, inlinedAt: !5541)
!5548 = !DILocation(line: 78, scope: !115, inlinedAt: !5541)
!5549 = !DILocation(line: 79, scope: !115, inlinedAt: !5541)
!5550 = !DILocation(line: 81, scope: !115, inlinedAt: !5541)
!5551 = !DILocation(line: 394, scope: !21, inlinedAt: !5552)
!5552 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5541)
!5553 = !DILocation(line: 392, scope: !21, inlinedAt: !5554)
!5554 = distinct !DILocation(line: 84, scope: !115, inlinedAt: !5541)
!5555 = !DILocation(line: 396, scope: !21, inlinedAt: !5552)
!5556 = !DILocation(line: 85, scope: !115, inlinedAt: !5541)
!5557 = !DILocation(line: 67, scope: !115, inlinedAt: !5558)
!5558 = distinct !DILocation(line: 994, scope: !5382)
!5559 = !DILocation(line: 0, scope: !115, inlinedAt: !5558)
!5560 = !DILocation(line: 73, scope: !115, inlinedAt: !5558)
!5561 = !DILocation(line: 75, scope: !115, inlinedAt: !5558)
!5562 = !DILocation(line: 77, scope: !115, inlinedAt: !5558)
!5563 = !DILocation(line: 79, scope: !115, inlinedAt: !5558)
!5564 = !DILocation(line: 81, scope: !115, inlinedAt: !5558)
!5565 = !DILocation(line: 396, scope: !21, inlinedAt: !5566)
!5566 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5558)
!5567 = !DILocation(line: 85, scope: !115, inlinedAt: !5558)
!5568 = !DILocation(line: 67, scope: !115, inlinedAt: !5569)
!5569 = distinct !DILocation(line: 994, scope: !5382)
!5570 = !DILocation(line: 0, scope: !115, inlinedAt: !5569)
!5571 = !DILocation(line: 69, scope: !115, inlinedAt: !5569)
!5572 = !DILocation(line: 72, scope: !115, inlinedAt: !5569)
!5573 = !DILocation(line: 73, scope: !115, inlinedAt: !5569)
!5574 = !DILocation(line: 75, scope: !115, inlinedAt: !5569)
!5575 = !DILocation(line: 77, scope: !115, inlinedAt: !5569)
!5576 = !DILocation(line: 78, scope: !115, inlinedAt: !5569)
!5577 = !DILocation(line: 79, scope: !115, inlinedAt: !5569)
!5578 = !DILocation(line: 81, scope: !115, inlinedAt: !5569)
!5579 = !DILocation(line: 394, scope: !21, inlinedAt: !5580)
!5580 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5569)
!5581 = !DILocation(line: 392, scope: !21, inlinedAt: !5582)
!5582 = distinct !DILocation(line: 84, scope: !115, inlinedAt: !5569)
!5583 = !DILocation(line: 396, scope: !21, inlinedAt: !5580)
!5584 = !DILocation(line: 85, scope: !115, inlinedAt: !5569)
!5585 = !DILocation(line: 67, scope: !115, inlinedAt: !5586)
!5586 = distinct !DILocation(line: 996, scope: !5382)
!5587 = !DILocation(line: 0, scope: !115, inlinedAt: !5586)
!5588 = !DILocation(line: 73, scope: !115, inlinedAt: !5586)
!5589 = !DILocation(line: 75, scope: !115, inlinedAt: !5586)
!5590 = !DILocation(line: 77, scope: !115, inlinedAt: !5586)
!5591 = !DILocation(line: 79, scope: !115, inlinedAt: !5586)
!5592 = !DILocation(line: 81, scope: !115, inlinedAt: !5586)
!5593 = !DILocation(line: 396, scope: !21, inlinedAt: !5594)
!5594 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5586)
!5595 = !DILocation(line: 85, scope: !115, inlinedAt: !5586)
!5596 = !DILocation(line: 67, scope: !115, inlinedAt: !5597)
!5597 = distinct !DILocation(line: 997, scope: !5382)
!5598 = !DILocation(line: 0, scope: !115, inlinedAt: !5597)
!5599 = !DILocation(line: 73, scope: !115, inlinedAt: !5597)
!5600 = !DILocation(line: 75, scope: !115, inlinedAt: !5597)
!5601 = !DILocation(line: 77, scope: !115, inlinedAt: !5597)
!5602 = !DILocation(line: 79, scope: !115, inlinedAt: !5597)
!5603 = !DILocation(line: 81, scope: !115, inlinedAt: !5597)
!5604 = !DILocation(line: 396, scope: !21, inlinedAt: !5605)
!5605 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5597)
!5606 = !DILocation(line: 85, scope: !115, inlinedAt: !5597)
!5607 = !DILocation(line: 67, scope: !115, inlinedAt: !5608)
!5608 = distinct !DILocation(line: 998, scope: !5382)
!5609 = !DILocation(line: 0, scope: !115, inlinedAt: !5608)
!5610 = !DILocation(line: 73, scope: !115, inlinedAt: !5608)
!5611 = !DILocation(line: 75, scope: !115, inlinedAt: !5608)
!5612 = !DILocation(line: 77, scope: !115, inlinedAt: !5608)
!5613 = !DILocation(line: 79, scope: !115, inlinedAt: !5608)
!5614 = !DILocation(line: 81, scope: !115, inlinedAt: !5608)
!5615 = !DILocation(line: 396, scope: !21, inlinedAt: !5616)
!5616 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5608)
!5617 = !DILocation(line: 85, scope: !115, inlinedAt: !5608)
!5618 = !DILocation(line: 948, scope: !5342, inlinedAt: !5619)
!5619 = distinct !DILocation(line: 1000, scope: !5382)
!5620 = !DILocation(line: 0, scope: !5342, inlinedAt: !5619)
!5621 = !DILocation(line: 67, scope: !115, inlinedAt: !5622)
!5622 = distinct !DILocation(line: 958, scope: !5342, inlinedAt: !5619)
!5623 = !DILocation(line: 396, scope: !21, inlinedAt: !5624)
!5624 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5622)
!5625 = !DILocation(line: 0, scope: !115, inlinedAt: !5622)
!5626 = !DILocation(line: 67, scope: !115, inlinedAt: !5627)
!5627 = distinct !DILocation(line: 950, scope: !5342, inlinedAt: !5619)
!5628 = !DILocation(line: 69, scope: !115, inlinedAt: !5627)
!5629 = !DILocation(line: 0, scope: !115, inlinedAt: !5627)
!5630 = !DILocation(line: 72, scope: !115, inlinedAt: !5627)
!5631 = !DILocation(line: 73, scope: !115, inlinedAt: !5627)
!5632 = !DILocation(line: 75, scope: !115, inlinedAt: !5627)
!5633 = !DILocation(line: 77, scope: !115, inlinedAt: !5627)
!5634 = !DILocation(line: 78, scope: !115, inlinedAt: !5627)
!5635 = !DILocation(line: 79, scope: !115, inlinedAt: !5627)
!5636 = !DILocation(line: 81, scope: !115, inlinedAt: !5627)
!5637 = !DILocation(line: 396, scope: !21, inlinedAt: !5638)
!5638 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5627)
!5639 = !DILocation(line: 392, scope: !21, inlinedAt: !5640)
!5640 = distinct !DILocation(line: 84, scope: !115, inlinedAt: !5627)
!5641 = !DILocation(line: 85, scope: !115, inlinedAt: !5627)
!5642 = !DILocation(line: 951, scope: !5342, inlinedAt: !5619)
!5643 = !DILocation(line: 394, scope: !21, inlinedAt: !5638)
!5644 = !DILocation(line: 73, scope: !115, inlinedAt: !5622)
!5645 = !DILocation(line: 75, scope: !115, inlinedAt: !5622)
!5646 = !DILocation(line: 77, scope: !115, inlinedAt: !5622)
!5647 = !DILocation(line: 79, scope: !115, inlinedAt: !5622)
!5648 = !DILocation(line: 81, scope: !115, inlinedAt: !5622)
!5649 = !DILocation(line: 85, scope: !115, inlinedAt: !5622)
!5650 = !DILocation(line: 959, scope: !5342, inlinedAt: !5619)
!5651 = !DILocation(line: 944, scope: !5342, inlinedAt: !5619)
!5652 = distinct !DISubprogram(name: "tcl.ipow64", scope: !864, file: !5, type: !30, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !5653)
!5653 = !{!5654, !5655}
!5654 = !DILocalVariable(name: "x", arg: 1, scope: !5652, file: !2, type: !10)
!5655 = !DILocalVariable(name: "y", arg: 2, scope: !5652, file: !2, type: !10)
!5656 = !DILocation(line: 392, scope: !21, inlinedAt: !5657)
!5657 = distinct !DILocation(line: 1017, scope: !5652)
!5658 = !DILocation(line: 1017, scope: !5652)
!5659 = !DILocation(line: 67, scope: !115, inlinedAt: !5660)
!5660 = distinct !DILocation(line: 1019, scope: !5652)
!5661 = !DILocation(line: 0, scope: !115, inlinedAt: !5660)
!5662 = !DILocation(line: 73, scope: !115, inlinedAt: !5660)
!5663 = !DILocation(line: 75, scope: !115, inlinedAt: !5660)
!5664 = !DILocation(line: 77, scope: !115, inlinedAt: !5660)
!5665 = !DILocation(line: 79, scope: !115, inlinedAt: !5660)
!5666 = !DILocation(line: 81, scope: !115, inlinedAt: !5660)
!5667 = !DILocation(line: 396, scope: !21, inlinedAt: !5668)
!5668 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5660)
!5669 = !DILocation(line: 85, scope: !115, inlinedAt: !5660)
!5670 = !DILocation(line: 1019, scope: !5652)
!5671 = !DILocation(line: 67, scope: !115, inlinedAt: !5672)
!5672 = distinct !DILocation(line: 1021, scope: !5652)
!5673 = !DILocation(line: 0, scope: !115, inlinedAt: !5672)
!5674 = !DILocation(line: 73, scope: !115, inlinedAt: !5672)
!5675 = !DILocation(line: 75, scope: !115, inlinedAt: !5672)
!5676 = !DILocation(line: 77, scope: !115, inlinedAt: !5672)
!5677 = !DILocation(line: 79, scope: !115, inlinedAt: !5672)
!5678 = !DILocation(line: 81, scope: !115, inlinedAt: !5672)
!5679 = !DILocation(line: 396, scope: !21, inlinedAt: !5680)
!5680 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5672)
!5681 = !DILocation(line: 85, scope: !115, inlinedAt: !5672)
!5682 = !DILocation(line: 67, scope: !115, inlinedAt: !5683)
!5683 = distinct !DILocation(line: 1021, scope: !5652)
!5684 = !DILocation(line: 0, scope: !115, inlinedAt: !5683)
!5685 = !DILocation(line: 69, scope: !115, inlinedAt: !5683)
!5686 = !DILocation(line: 72, scope: !115, inlinedAt: !5683)
!5687 = !DILocation(line: 73, scope: !115, inlinedAt: !5683)
!5688 = !DILocation(line: 75, scope: !115, inlinedAt: !5683)
!5689 = !DILocation(line: 77, scope: !115, inlinedAt: !5683)
!5690 = !DILocation(line: 78, scope: !115, inlinedAt: !5683)
!5691 = !DILocation(line: 79, scope: !115, inlinedAt: !5683)
!5692 = !DILocation(line: 81, scope: !115, inlinedAt: !5683)
!5693 = !DILocation(line: 394, scope: !21, inlinedAt: !5694)
!5694 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5683)
!5695 = !DILocation(line: 392, scope: !21, inlinedAt: !5696)
!5696 = distinct !DILocation(line: 84, scope: !115, inlinedAt: !5683)
!5697 = !DILocation(line: 396, scope: !21, inlinedAt: !5694)
!5698 = !DILocation(line: 85, scope: !115, inlinedAt: !5683)
!5699 = !DILocation(line: 67, scope: !115, inlinedAt: !5700)
!5700 = distinct !DILocation(line: 1023, scope: !5652)
!5701 = !DILocation(line: 0, scope: !115, inlinedAt: !5700)
!5702 = !DILocation(line: 73, scope: !115, inlinedAt: !5700)
!5703 = !DILocation(line: 75, scope: !115, inlinedAt: !5700)
!5704 = !DILocation(line: 77, scope: !115, inlinedAt: !5700)
!5705 = !DILocation(line: 79, scope: !115, inlinedAt: !5700)
!5706 = !DILocation(line: 81, scope: !115, inlinedAt: !5700)
!5707 = !DILocation(line: 396, scope: !21, inlinedAt: !5708)
!5708 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5700)
!5709 = !DILocation(line: 85, scope: !115, inlinedAt: !5700)
!5710 = !DILocation(line: 67, scope: !115, inlinedAt: !5711)
!5711 = distinct !DILocation(line: 1024, scope: !5652)
!5712 = !DILocation(line: 0, scope: !115, inlinedAt: !5711)
!5713 = !DILocation(line: 73, scope: !115, inlinedAt: !5711)
!5714 = !DILocation(line: 75, scope: !115, inlinedAt: !5711)
!5715 = !DILocation(line: 77, scope: !115, inlinedAt: !5711)
!5716 = !DILocation(line: 79, scope: !115, inlinedAt: !5711)
!5717 = !DILocation(line: 81, scope: !115, inlinedAt: !5711)
!5718 = !DILocation(line: 396, scope: !21, inlinedAt: !5719)
!5719 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5711)
!5720 = !DILocation(line: 85, scope: !115, inlinedAt: !5711)
!5721 = !DILocation(line: 67, scope: !115, inlinedAt: !5722)
!5722 = distinct !DILocation(line: 1026, scope: !5652)
!5723 = !DILocation(line: 0, scope: !115, inlinedAt: !5722)
!5724 = !DILocation(line: 73, scope: !115, inlinedAt: !5722)
!5725 = !DILocation(line: 75, scope: !115, inlinedAt: !5722)
!5726 = !DILocation(line: 77, scope: !115, inlinedAt: !5722)
!5727 = !DILocation(line: 79, scope: !115, inlinedAt: !5722)
!5728 = !DILocation(line: 81, scope: !115, inlinedAt: !5722)
!5729 = !DILocation(line: 396, scope: !21, inlinedAt: !5730)
!5730 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5722)
!5731 = !DILocation(line: 85, scope: !115, inlinedAt: !5722)
!5732 = !DILocation(line: 67, scope: !115, inlinedAt: !5733)
!5733 = distinct !DILocation(line: 1027, scope: !5652)
!5734 = !DILocation(line: 0, scope: !115, inlinedAt: !5733)
!5735 = !DILocation(line: 73, scope: !115, inlinedAt: !5733)
!5736 = !DILocation(line: 75, scope: !115, inlinedAt: !5733)
!5737 = !DILocation(line: 77, scope: !115, inlinedAt: !5733)
!5738 = !DILocation(line: 79, scope: !115, inlinedAt: !5733)
!5739 = !DILocation(line: 81, scope: !115, inlinedAt: !5733)
!5740 = !DILocation(line: 396, scope: !21, inlinedAt: !5741)
!5741 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5733)
!5742 = !DILocation(line: 85, scope: !115, inlinedAt: !5733)
!5743 = !DILocation(line: 67, scope: !115, inlinedAt: !5744)
!5744 = distinct !DILocation(line: 1027, scope: !5652)
!5745 = !DILocation(line: 0, scope: !115, inlinedAt: !5744)
!5746 = !DILocation(line: 69, scope: !115, inlinedAt: !5744)
!5747 = !DILocation(line: 72, scope: !115, inlinedAt: !5744)
!5748 = !DILocation(line: 73, scope: !115, inlinedAt: !5744)
!5749 = !DILocation(line: 75, scope: !115, inlinedAt: !5744)
!5750 = !DILocation(line: 77, scope: !115, inlinedAt: !5744)
!5751 = !DILocation(line: 78, scope: !115, inlinedAt: !5744)
!5752 = !DILocation(line: 79, scope: !115, inlinedAt: !5744)
!5753 = !DILocation(line: 81, scope: !115, inlinedAt: !5744)
!5754 = !DILocation(line: 394, scope: !21, inlinedAt: !5755)
!5755 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5744)
!5756 = !DILocation(line: 392, scope: !21, inlinedAt: !5757)
!5757 = distinct !DILocation(line: 84, scope: !115, inlinedAt: !5744)
!5758 = !DILocation(line: 396, scope: !21, inlinedAt: !5755)
!5759 = !DILocation(line: 85, scope: !115, inlinedAt: !5744)
!5760 = !DILocation(line: 67, scope: !115, inlinedAt: !5761)
!5761 = distinct !DILocation(line: 1029, scope: !5652)
!5762 = !DILocation(line: 0, scope: !115, inlinedAt: !5761)
!5763 = !DILocation(line: 73, scope: !115, inlinedAt: !5761)
!5764 = !DILocation(line: 75, scope: !115, inlinedAt: !5761)
!5765 = !DILocation(line: 77, scope: !115, inlinedAt: !5761)
!5766 = !DILocation(line: 79, scope: !115, inlinedAt: !5761)
!5767 = !DILocation(line: 81, scope: !115, inlinedAt: !5761)
!5768 = !DILocation(line: 396, scope: !21, inlinedAt: !5769)
!5769 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5761)
!5770 = !DILocation(line: 85, scope: !115, inlinedAt: !5761)
!5771 = !DILocation(line: 67, scope: !115, inlinedAt: !5772)
!5772 = distinct !DILocation(line: 1029, scope: !5652)
!5773 = !DILocation(line: 0, scope: !115, inlinedAt: !5772)
!5774 = !DILocation(line: 69, scope: !115, inlinedAt: !5772)
!5775 = !DILocation(line: 72, scope: !115, inlinedAt: !5772)
!5776 = !DILocation(line: 73, scope: !115, inlinedAt: !5772)
!5777 = !DILocation(line: 75, scope: !115, inlinedAt: !5772)
!5778 = !DILocation(line: 77, scope: !115, inlinedAt: !5772)
!5779 = !DILocation(line: 78, scope: !115, inlinedAt: !5772)
!5780 = !DILocation(line: 79, scope: !115, inlinedAt: !5772)
!5781 = !DILocation(line: 81, scope: !115, inlinedAt: !5772)
!5782 = !DILocation(line: 394, scope: !21, inlinedAt: !5783)
!5783 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5772)
!5784 = !DILocation(line: 392, scope: !21, inlinedAt: !5785)
!5785 = distinct !DILocation(line: 84, scope: !115, inlinedAt: !5772)
!5786 = !DILocation(line: 396, scope: !21, inlinedAt: !5783)
!5787 = !DILocation(line: 85, scope: !115, inlinedAt: !5772)
!5788 = !DILocation(line: 67, scope: !115, inlinedAt: !5789)
!5789 = distinct !DILocation(line: 1030, scope: !5652)
!5790 = !DILocation(line: 0, scope: !115, inlinedAt: !5789)
!5791 = !DILocation(line: 73, scope: !115, inlinedAt: !5789)
!5792 = !DILocation(line: 75, scope: !115, inlinedAt: !5789)
!5793 = !DILocation(line: 77, scope: !115, inlinedAt: !5789)
!5794 = !DILocation(line: 79, scope: !115, inlinedAt: !5789)
!5795 = !DILocation(line: 81, scope: !115, inlinedAt: !5789)
!5796 = !DILocation(line: 396, scope: !21, inlinedAt: !5797)
!5797 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5789)
!5798 = !DILocation(line: 85, scope: !115, inlinedAt: !5789)
!5799 = !DILocation(line: 67, scope: !115, inlinedAt: !5800)
!5800 = distinct !DILocation(line: 1032, scope: !5652)
!5801 = !DILocation(line: 0, scope: !115, inlinedAt: !5800)
!5802 = !DILocation(line: 73, scope: !115, inlinedAt: !5800)
!5803 = !DILocation(line: 75, scope: !115, inlinedAt: !5800)
!5804 = !DILocation(line: 77, scope: !115, inlinedAt: !5800)
!5805 = !DILocation(line: 79, scope: !115, inlinedAt: !5800)
!5806 = !DILocation(line: 81, scope: !115, inlinedAt: !5800)
!5807 = !DILocation(line: 396, scope: !21, inlinedAt: !5808)
!5808 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5800)
!5809 = !DILocation(line: 85, scope: !115, inlinedAt: !5800)
!5810 = !DILocation(line: 67, scope: !115, inlinedAt: !5811)
!5811 = distinct !DILocation(line: 1032, scope: !5652)
!5812 = !DILocation(line: 0, scope: !115, inlinedAt: !5811)
!5813 = !DILocation(line: 69, scope: !115, inlinedAt: !5811)
!5814 = !DILocation(line: 72, scope: !115, inlinedAt: !5811)
!5815 = !DILocation(line: 73, scope: !115, inlinedAt: !5811)
!5816 = !DILocation(line: 75, scope: !115, inlinedAt: !5811)
!5817 = !DILocation(line: 77, scope: !115, inlinedAt: !5811)
!5818 = !DILocation(line: 78, scope: !115, inlinedAt: !5811)
!5819 = !DILocation(line: 79, scope: !115, inlinedAt: !5811)
!5820 = !DILocation(line: 81, scope: !115, inlinedAt: !5811)
!5821 = !DILocation(line: 394, scope: !21, inlinedAt: !5822)
!5822 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5811)
!5823 = !DILocation(line: 392, scope: !21, inlinedAt: !5824)
!5824 = distinct !DILocation(line: 84, scope: !115, inlinedAt: !5811)
!5825 = !DILocation(line: 396, scope: !21, inlinedAt: !5822)
!5826 = !DILocation(line: 85, scope: !115, inlinedAt: !5811)
!5827 = !DILocation(line: 67, scope: !115, inlinedAt: !5828)
!5828 = distinct !DILocation(line: 1033, scope: !5652)
!5829 = !DILocation(line: 0, scope: !115, inlinedAt: !5828)
!5830 = !DILocation(line: 73, scope: !115, inlinedAt: !5828)
!5831 = !DILocation(line: 75, scope: !115, inlinedAt: !5828)
!5832 = !DILocation(line: 77, scope: !115, inlinedAt: !5828)
!5833 = !DILocation(line: 79, scope: !115, inlinedAt: !5828)
!5834 = !DILocation(line: 81, scope: !115, inlinedAt: !5828)
!5835 = !DILocation(line: 396, scope: !21, inlinedAt: !5836)
!5836 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5828)
!5837 = !DILocation(line: 85, scope: !115, inlinedAt: !5828)
!5838 = !DILocation(line: 67, scope: !115, inlinedAt: !5839)
!5839 = distinct !DILocation(line: 1033, scope: !5652)
!5840 = !DILocation(line: 0, scope: !115, inlinedAt: !5839)
!5841 = !DILocation(line: 69, scope: !115, inlinedAt: !5839)
!5842 = !DILocation(line: 72, scope: !115, inlinedAt: !5839)
!5843 = !DILocation(line: 73, scope: !115, inlinedAt: !5839)
!5844 = !DILocation(line: 75, scope: !115, inlinedAt: !5839)
!5845 = !DILocation(line: 77, scope: !115, inlinedAt: !5839)
!5846 = !DILocation(line: 78, scope: !115, inlinedAt: !5839)
!5847 = !DILocation(line: 79, scope: !115, inlinedAt: !5839)
!5848 = !DILocation(line: 81, scope: !115, inlinedAt: !5839)
!5849 = !DILocation(line: 394, scope: !21, inlinedAt: !5850)
!5850 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5839)
!5851 = !DILocation(line: 392, scope: !21, inlinedAt: !5852)
!5852 = distinct !DILocation(line: 84, scope: !115, inlinedAt: !5839)
!5853 = !DILocation(line: 396, scope: !21, inlinedAt: !5850)
!5854 = !DILocation(line: 85, scope: !115, inlinedAt: !5839)
!5855 = !DILocation(line: 67, scope: !115, inlinedAt: !5856)
!5856 = distinct !DILocation(line: 1035, scope: !5652)
!5857 = !DILocation(line: 0, scope: !115, inlinedAt: !5856)
!5858 = !DILocation(line: 73, scope: !115, inlinedAt: !5856)
!5859 = !DILocation(line: 75, scope: !115, inlinedAt: !5856)
!5860 = !DILocation(line: 77, scope: !115, inlinedAt: !5856)
!5861 = !DILocation(line: 79, scope: !115, inlinedAt: !5856)
!5862 = !DILocation(line: 81, scope: !115, inlinedAt: !5856)
!5863 = !DILocation(line: 396, scope: !21, inlinedAt: !5864)
!5864 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5856)
!5865 = !DILocation(line: 85, scope: !115, inlinedAt: !5856)
!5866 = !DILocation(line: 67, scope: !115, inlinedAt: !5867)
!5867 = distinct !DILocation(line: 1036, scope: !5652)
!5868 = !DILocation(line: 0, scope: !115, inlinedAt: !5867)
!5869 = !DILocation(line: 73, scope: !115, inlinedAt: !5867)
!5870 = !DILocation(line: 75, scope: !115, inlinedAt: !5867)
!5871 = !DILocation(line: 77, scope: !115, inlinedAt: !5867)
!5872 = !DILocation(line: 79, scope: !115, inlinedAt: !5867)
!5873 = !DILocation(line: 81, scope: !115, inlinedAt: !5867)
!5874 = !DILocation(line: 396, scope: !21, inlinedAt: !5875)
!5875 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5867)
!5876 = !DILocation(line: 85, scope: !115, inlinedAt: !5867)
!5877 = !DILocation(line: 67, scope: !115, inlinedAt: !5878)
!5878 = distinct !DILocation(line: 1037, scope: !5652)
!5879 = !DILocation(line: 0, scope: !115, inlinedAt: !5878)
!5880 = !DILocation(line: 73, scope: !115, inlinedAt: !5878)
!5881 = !DILocation(line: 75, scope: !115, inlinedAt: !5878)
!5882 = !DILocation(line: 77, scope: !115, inlinedAt: !5878)
!5883 = !DILocation(line: 79, scope: !115, inlinedAt: !5878)
!5884 = !DILocation(line: 81, scope: !115, inlinedAt: !5878)
!5885 = !DILocation(line: 396, scope: !21, inlinedAt: !5886)
!5886 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5878)
!5887 = !DILocation(line: 85, scope: !115, inlinedAt: !5878)
!5888 = !DILocation(line: 67, scope: !115, inlinedAt: !5889)
!5889 = distinct !DILocation(line: 1039, scope: !5652)
!5890 = !DILocation(line: 0, scope: !115, inlinedAt: !5889)
!5891 = !DILocation(line: 73, scope: !115, inlinedAt: !5889)
!5892 = !DILocation(line: 75, scope: !115, inlinedAt: !5889)
!5893 = !DILocation(line: 77, scope: !115, inlinedAt: !5889)
!5894 = !DILocation(line: 79, scope: !115, inlinedAt: !5889)
!5895 = !DILocation(line: 81, scope: !115, inlinedAt: !5889)
!5896 = !DILocation(line: 396, scope: !21, inlinedAt: !5897)
!5897 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5889)
!5898 = !DILocation(line: 85, scope: !115, inlinedAt: !5889)
!5899 = !DILocation(line: 67, scope: !115, inlinedAt: !5900)
!5900 = distinct !DILocation(line: 1040, scope: !5652)
!5901 = !DILocation(line: 0, scope: !115, inlinedAt: !5900)
!5902 = !DILocation(line: 73, scope: !115, inlinedAt: !5900)
!5903 = !DILocation(line: 75, scope: !115, inlinedAt: !5900)
!5904 = !DILocation(line: 77, scope: !115, inlinedAt: !5900)
!5905 = !DILocation(line: 79, scope: !115, inlinedAt: !5900)
!5906 = !DILocation(line: 81, scope: !115, inlinedAt: !5900)
!5907 = !DILocation(line: 396, scope: !21, inlinedAt: !5908)
!5908 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5900)
!5909 = !DILocation(line: 85, scope: !115, inlinedAt: !5900)
!5910 = !DILocation(line: 67, scope: !115, inlinedAt: !5911)
!5911 = distinct !DILocation(line: 1041, scope: !5652)
!5912 = !DILocation(line: 0, scope: !115, inlinedAt: !5911)
!5913 = !DILocation(line: 73, scope: !115, inlinedAt: !5911)
!5914 = !DILocation(line: 75, scope: !115, inlinedAt: !5911)
!5915 = !DILocation(line: 77, scope: !115, inlinedAt: !5911)
!5916 = !DILocation(line: 79, scope: !115, inlinedAt: !5911)
!5917 = !DILocation(line: 81, scope: !115, inlinedAt: !5911)
!5918 = !DILocation(line: 396, scope: !21, inlinedAt: !5919)
!5919 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5911)
!5920 = !DILocation(line: 85, scope: !115, inlinedAt: !5911)
!5921 = !DILocation(line: 67, scope: !115, inlinedAt: !5922)
!5922 = distinct !DILocation(line: 1041, scope: !5652)
!5923 = !DILocation(line: 0, scope: !115, inlinedAt: !5922)
!5924 = !DILocation(line: 69, scope: !115, inlinedAt: !5922)
!5925 = !DILocation(line: 72, scope: !115, inlinedAt: !5922)
!5926 = !DILocation(line: 73, scope: !115, inlinedAt: !5922)
!5927 = !DILocation(line: 75, scope: !115, inlinedAt: !5922)
!5928 = !DILocation(line: 77, scope: !115, inlinedAt: !5922)
!5929 = !DILocation(line: 78, scope: !115, inlinedAt: !5922)
!5930 = !DILocation(line: 79, scope: !115, inlinedAt: !5922)
!5931 = !DILocation(line: 81, scope: !115, inlinedAt: !5922)
!5932 = !DILocation(line: 394, scope: !21, inlinedAt: !5933)
!5933 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5922)
!5934 = !DILocation(line: 392, scope: !21, inlinedAt: !5935)
!5935 = distinct !DILocation(line: 84, scope: !115, inlinedAt: !5922)
!5936 = !DILocation(line: 396, scope: !21, inlinedAt: !5933)
!5937 = !DILocation(line: 85, scope: !115, inlinedAt: !5922)
!5938 = !DILocation(line: 67, scope: !115, inlinedAt: !5939)
!5939 = distinct !DILocation(line: 1043, scope: !5652)
!5940 = !DILocation(line: 0, scope: !115, inlinedAt: !5939)
!5941 = !DILocation(line: 73, scope: !115, inlinedAt: !5939)
!5942 = !DILocation(line: 75, scope: !115, inlinedAt: !5939)
!5943 = !DILocation(line: 77, scope: !115, inlinedAt: !5939)
!5944 = !DILocation(line: 79, scope: !115, inlinedAt: !5939)
!5945 = !DILocation(line: 81, scope: !115, inlinedAt: !5939)
!5946 = !DILocation(line: 396, scope: !21, inlinedAt: !5947)
!5947 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5939)
!5948 = !DILocation(line: 85, scope: !115, inlinedAt: !5939)
!5949 = !DILocation(line: 67, scope: !115, inlinedAt: !5950)
!5950 = distinct !DILocation(line: 1044, scope: !5652)
!5951 = !DILocation(line: 0, scope: !115, inlinedAt: !5950)
!5952 = !DILocation(line: 73, scope: !115, inlinedAt: !5950)
!5953 = !DILocation(line: 75, scope: !115, inlinedAt: !5950)
!5954 = !DILocation(line: 77, scope: !115, inlinedAt: !5950)
!5955 = !DILocation(line: 79, scope: !115, inlinedAt: !5950)
!5956 = !DILocation(line: 81, scope: !115, inlinedAt: !5950)
!5957 = !DILocation(line: 396, scope: !21, inlinedAt: !5958)
!5958 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5950)
!5959 = !DILocation(line: 85, scope: !115, inlinedAt: !5950)
!5960 = !DILocation(line: 67, scope: !115, inlinedAt: !5961)
!5961 = distinct !DILocation(line: 1044, scope: !5652)
!5962 = !DILocation(line: 0, scope: !115, inlinedAt: !5961)
!5963 = !DILocation(line: 69, scope: !115, inlinedAt: !5961)
!5964 = !DILocation(line: 72, scope: !115, inlinedAt: !5961)
!5965 = !DILocation(line: 73, scope: !115, inlinedAt: !5961)
!5966 = !DILocation(line: 75, scope: !115, inlinedAt: !5961)
!5967 = !DILocation(line: 77, scope: !115, inlinedAt: !5961)
!5968 = !DILocation(line: 78, scope: !115, inlinedAt: !5961)
!5969 = !DILocation(line: 79, scope: !115, inlinedAt: !5961)
!5970 = !DILocation(line: 81, scope: !115, inlinedAt: !5961)
!5971 = !DILocation(line: 394, scope: !21, inlinedAt: !5972)
!5972 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5961)
!5973 = !DILocation(line: 392, scope: !21, inlinedAt: !5974)
!5974 = distinct !DILocation(line: 84, scope: !115, inlinedAt: !5961)
!5975 = !DILocation(line: 396, scope: !21, inlinedAt: !5972)
!5976 = !DILocation(line: 85, scope: !115, inlinedAt: !5961)
!5977 = !DILocation(line: 67, scope: !115, inlinedAt: !5978)
!5978 = distinct !DILocation(line: 1045, scope: !5652)
!5979 = !DILocation(line: 0, scope: !115, inlinedAt: !5978)
!5980 = !DILocation(line: 73, scope: !115, inlinedAt: !5978)
!5981 = !DILocation(line: 75, scope: !115, inlinedAt: !5978)
!5982 = !DILocation(line: 77, scope: !115, inlinedAt: !5978)
!5983 = !DILocation(line: 79, scope: !115, inlinedAt: !5978)
!5984 = !DILocation(line: 81, scope: !115, inlinedAt: !5978)
!5985 = !DILocation(line: 396, scope: !21, inlinedAt: !5986)
!5986 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5978)
!5987 = !DILocation(line: 85, scope: !115, inlinedAt: !5978)
!5988 = !DILocation(line: 67, scope: !115, inlinedAt: !5989)
!5989 = distinct !DILocation(line: 1047, scope: !5652)
!5990 = !DILocation(line: 0, scope: !115, inlinedAt: !5989)
!5991 = !DILocation(line: 73, scope: !115, inlinedAt: !5989)
!5992 = !DILocation(line: 75, scope: !115, inlinedAt: !5989)
!5993 = !DILocation(line: 77, scope: !115, inlinedAt: !5989)
!5994 = !DILocation(line: 79, scope: !115, inlinedAt: !5989)
!5995 = !DILocation(line: 81, scope: !115, inlinedAt: !5989)
!5996 = !DILocation(line: 396, scope: !21, inlinedAt: !5997)
!5997 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !5989)
!5998 = !DILocation(line: 85, scope: !115, inlinedAt: !5989)
!5999 = !DILocation(line: 67, scope: !115, inlinedAt: !6000)
!6000 = distinct !DILocation(line: 1048, scope: !5652)
!6001 = !DILocation(line: 0, scope: !115, inlinedAt: !6000)
!6002 = !DILocation(line: 73, scope: !115, inlinedAt: !6000)
!6003 = !DILocation(line: 75, scope: !115, inlinedAt: !6000)
!6004 = !DILocation(line: 77, scope: !115, inlinedAt: !6000)
!6005 = !DILocation(line: 79, scope: !115, inlinedAt: !6000)
!6006 = !DILocation(line: 81, scope: !115, inlinedAt: !6000)
!6007 = !DILocation(line: 396, scope: !21, inlinedAt: !6008)
!6008 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6000)
!6009 = !DILocation(line: 85, scope: !115, inlinedAt: !6000)
!6010 = !DILocation(line: 67, scope: !115, inlinedAt: !6011)
!6011 = distinct !DILocation(line: 1048, scope: !5652)
!6012 = !DILocation(line: 0, scope: !115, inlinedAt: !6011)
!6013 = !DILocation(line: 69, scope: !115, inlinedAt: !6011)
!6014 = !DILocation(line: 72, scope: !115, inlinedAt: !6011)
!6015 = !DILocation(line: 73, scope: !115, inlinedAt: !6011)
!6016 = !DILocation(line: 75, scope: !115, inlinedAt: !6011)
!6017 = !DILocation(line: 77, scope: !115, inlinedAt: !6011)
!6018 = !DILocation(line: 78, scope: !115, inlinedAt: !6011)
!6019 = !DILocation(line: 79, scope: !115, inlinedAt: !6011)
!6020 = !DILocation(line: 81, scope: !115, inlinedAt: !6011)
!6021 = !DILocation(line: 394, scope: !21, inlinedAt: !6022)
!6022 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6011)
!6023 = !DILocation(line: 392, scope: !21, inlinedAt: !6024)
!6024 = distinct !DILocation(line: 84, scope: !115, inlinedAt: !6011)
!6025 = !DILocation(line: 396, scope: !21, inlinedAt: !6022)
!6026 = !DILocation(line: 85, scope: !115, inlinedAt: !6011)
!6027 = !DILocation(line: 67, scope: !115, inlinedAt: !6028)
!6028 = distinct !DILocation(line: 1049, scope: !5652)
!6029 = !DILocation(line: 0, scope: !115, inlinedAt: !6028)
!6030 = !DILocation(line: 73, scope: !115, inlinedAt: !6028)
!6031 = !DILocation(line: 75, scope: !115, inlinedAt: !6028)
!6032 = !DILocation(line: 77, scope: !115, inlinedAt: !6028)
!6033 = !DILocation(line: 79, scope: !115, inlinedAt: !6028)
!6034 = !DILocation(line: 81, scope: !115, inlinedAt: !6028)
!6035 = !DILocation(line: 396, scope: !21, inlinedAt: !6036)
!6036 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6028)
!6037 = !DILocation(line: 85, scope: !115, inlinedAt: !6028)
!6038 = !DILocation(line: 67, scope: !115, inlinedAt: !6039)
!6039 = distinct !DILocation(line: 1049, scope: !5652)
!6040 = !DILocation(line: 0, scope: !115, inlinedAt: !6039)
!6041 = !DILocation(line: 69, scope: !115, inlinedAt: !6039)
!6042 = !DILocation(line: 72, scope: !115, inlinedAt: !6039)
!6043 = !DILocation(line: 73, scope: !115, inlinedAt: !6039)
!6044 = !DILocation(line: 75, scope: !115, inlinedAt: !6039)
!6045 = !DILocation(line: 77, scope: !115, inlinedAt: !6039)
!6046 = !DILocation(line: 78, scope: !115, inlinedAt: !6039)
!6047 = !DILocation(line: 79, scope: !115, inlinedAt: !6039)
!6048 = !DILocation(line: 81, scope: !115, inlinedAt: !6039)
!6049 = !DILocation(line: 394, scope: !21, inlinedAt: !6050)
!6050 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6039)
!6051 = !DILocation(line: 392, scope: !21, inlinedAt: !6052)
!6052 = distinct !DILocation(line: 84, scope: !115, inlinedAt: !6039)
!6053 = !DILocation(line: 396, scope: !21, inlinedAt: !6050)
!6054 = !DILocation(line: 85, scope: !115, inlinedAt: !6039)
!6055 = !DILocation(line: 67, scope: !115, inlinedAt: !6056)
!6056 = distinct !DILocation(line: 1051, scope: !5652)
!6057 = !DILocation(line: 0, scope: !115, inlinedAt: !6056)
!6058 = !DILocation(line: 73, scope: !115, inlinedAt: !6056)
!6059 = !DILocation(line: 75, scope: !115, inlinedAt: !6056)
!6060 = !DILocation(line: 77, scope: !115, inlinedAt: !6056)
!6061 = !DILocation(line: 79, scope: !115, inlinedAt: !6056)
!6062 = !DILocation(line: 81, scope: !115, inlinedAt: !6056)
!6063 = !DILocation(line: 396, scope: !21, inlinedAt: !6064)
!6064 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6056)
!6065 = !DILocation(line: 85, scope: !115, inlinedAt: !6056)
!6066 = !DILocation(line: 67, scope: !115, inlinedAt: !6067)
!6067 = distinct !DILocation(line: 1051, scope: !5652)
!6068 = !DILocation(line: 0, scope: !115, inlinedAt: !6067)
!6069 = !DILocation(line: 69, scope: !115, inlinedAt: !6067)
!6070 = !DILocation(line: 72, scope: !115, inlinedAt: !6067)
!6071 = !DILocation(line: 73, scope: !115, inlinedAt: !6067)
!6072 = !DILocation(line: 75, scope: !115, inlinedAt: !6067)
!6073 = !DILocation(line: 77, scope: !115, inlinedAt: !6067)
!6074 = !DILocation(line: 78, scope: !115, inlinedAt: !6067)
!6075 = !DILocation(line: 79, scope: !115, inlinedAt: !6067)
!6076 = !DILocation(line: 81, scope: !115, inlinedAt: !6067)
!6077 = !DILocation(line: 394, scope: !21, inlinedAt: !6078)
!6078 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6067)
!6079 = !DILocation(line: 392, scope: !21, inlinedAt: !6080)
!6080 = distinct !DILocation(line: 84, scope: !115, inlinedAt: !6067)
!6081 = !DILocation(line: 396, scope: !21, inlinedAt: !6078)
!6082 = !DILocation(line: 85, scope: !115, inlinedAt: !6067)
!6083 = !DILocation(line: 67, scope: !115, inlinedAt: !6084)
!6084 = distinct !DILocation(line: 1052, scope: !5652)
!6085 = !DILocation(line: 0, scope: !115, inlinedAt: !6084)
!6086 = !DILocation(line: 73, scope: !115, inlinedAt: !6084)
!6087 = !DILocation(line: 75, scope: !115, inlinedAt: !6084)
!6088 = !DILocation(line: 77, scope: !115, inlinedAt: !6084)
!6089 = !DILocation(line: 79, scope: !115, inlinedAt: !6084)
!6090 = !DILocation(line: 81, scope: !115, inlinedAt: !6084)
!6091 = !DILocation(line: 396, scope: !21, inlinedAt: !6092)
!6092 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6084)
!6093 = !DILocation(line: 85, scope: !115, inlinedAt: !6084)
!6094 = !DILocation(line: 67, scope: !115, inlinedAt: !6095)
!6095 = distinct !DILocation(line: 1053, scope: !5652)
!6096 = !DILocation(line: 0, scope: !115, inlinedAt: !6095)
!6097 = !DILocation(line: 73, scope: !115, inlinedAt: !6095)
!6098 = !DILocation(line: 75, scope: !115, inlinedAt: !6095)
!6099 = !DILocation(line: 77, scope: !115, inlinedAt: !6095)
!6100 = !DILocation(line: 79, scope: !115, inlinedAt: !6095)
!6101 = !DILocation(line: 81, scope: !115, inlinedAt: !6095)
!6102 = !DILocation(line: 396, scope: !21, inlinedAt: !6103)
!6103 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6095)
!6104 = !DILocation(line: 85, scope: !115, inlinedAt: !6095)
!6105 = !DILocation(line: 67, scope: !115, inlinedAt: !6106)
!6106 = distinct !DILocation(line: 1055, scope: !5652)
!6107 = !DILocation(line: 0, scope: !115, inlinedAt: !6106)
!6108 = !DILocation(line: 73, scope: !115, inlinedAt: !6106)
!6109 = !DILocation(line: 75, scope: !115, inlinedAt: !6106)
!6110 = !DILocation(line: 77, scope: !115, inlinedAt: !6106)
!6111 = !DILocation(line: 79, scope: !115, inlinedAt: !6106)
!6112 = !DILocation(line: 81, scope: !115, inlinedAt: !6106)
!6113 = !DILocation(line: 396, scope: !21, inlinedAt: !6114)
!6114 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6106)
!6115 = !DILocation(line: 85, scope: !115, inlinedAt: !6106)
!6116 = !DILocation(line: 67, scope: !115, inlinedAt: !6117)
!6117 = distinct !DILocation(line: 1055, scope: !5652)
!6118 = !DILocation(line: 0, scope: !115, inlinedAt: !6117)
!6119 = !DILocation(line: 69, scope: !115, inlinedAt: !6117)
!6120 = !DILocation(line: 72, scope: !115, inlinedAt: !6117)
!6121 = !DILocation(line: 73, scope: !115, inlinedAt: !6117)
!6122 = !DILocation(line: 75, scope: !115, inlinedAt: !6117)
!6123 = !DILocation(line: 77, scope: !115, inlinedAt: !6117)
!6124 = !DILocation(line: 78, scope: !115, inlinedAt: !6117)
!6125 = !DILocation(line: 79, scope: !115, inlinedAt: !6117)
!6126 = !DILocation(line: 81, scope: !115, inlinedAt: !6117)
!6127 = !DILocation(line: 394, scope: !21, inlinedAt: !6128)
!6128 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6117)
!6129 = !DILocation(line: 392, scope: !21, inlinedAt: !6130)
!6130 = distinct !DILocation(line: 84, scope: !115, inlinedAt: !6117)
!6131 = !DILocation(line: 396, scope: !21, inlinedAt: !6128)
!6132 = !DILocation(line: 85, scope: !115, inlinedAt: !6117)
!6133 = !DILocation(line: 67, scope: !115, inlinedAt: !6134)
!6134 = distinct !DILocation(line: 1056, scope: !5652)
!6135 = !DILocation(line: 0, scope: !115, inlinedAt: !6134)
!6136 = !DILocation(line: 73, scope: !115, inlinedAt: !6134)
!6137 = !DILocation(line: 75, scope: !115, inlinedAt: !6134)
!6138 = !DILocation(line: 77, scope: !115, inlinedAt: !6134)
!6139 = !DILocation(line: 79, scope: !115, inlinedAt: !6134)
!6140 = !DILocation(line: 81, scope: !115, inlinedAt: !6134)
!6141 = !DILocation(line: 396, scope: !21, inlinedAt: !6142)
!6142 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6134)
!6143 = !DILocation(line: 85, scope: !115, inlinedAt: !6134)
!6144 = !DILocation(line: 67, scope: !115, inlinedAt: !6145)
!6145 = distinct !DILocation(line: 1057, scope: !5652)
!6146 = !DILocation(line: 0, scope: !115, inlinedAt: !6145)
!6147 = !DILocation(line: 73, scope: !115, inlinedAt: !6145)
!6148 = !DILocation(line: 75, scope: !115, inlinedAt: !6145)
!6149 = !DILocation(line: 77, scope: !115, inlinedAt: !6145)
!6150 = !DILocation(line: 79, scope: !115, inlinedAt: !6145)
!6151 = !DILocation(line: 81, scope: !115, inlinedAt: !6145)
!6152 = !DILocation(line: 396, scope: !21, inlinedAt: !6153)
!6153 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6145)
!6154 = !DILocation(line: 85, scope: !115, inlinedAt: !6145)
!6155 = !DILocation(line: 67, scope: !115, inlinedAt: !6156)
!6156 = distinct !DILocation(line: 1057, scope: !5652)
!6157 = !DILocation(line: 0, scope: !115, inlinedAt: !6156)
!6158 = !DILocation(line: 69, scope: !115, inlinedAt: !6156)
!6159 = !DILocation(line: 72, scope: !115, inlinedAt: !6156)
!6160 = !DILocation(line: 73, scope: !115, inlinedAt: !6156)
!6161 = !DILocation(line: 75, scope: !115, inlinedAt: !6156)
!6162 = !DILocation(line: 77, scope: !115, inlinedAt: !6156)
!6163 = !DILocation(line: 78, scope: !115, inlinedAt: !6156)
!6164 = !DILocation(line: 79, scope: !115, inlinedAt: !6156)
!6165 = !DILocation(line: 81, scope: !115, inlinedAt: !6156)
!6166 = !DILocation(line: 394, scope: !21, inlinedAt: !6167)
!6167 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6156)
!6168 = !DILocation(line: 392, scope: !21, inlinedAt: !6169)
!6169 = distinct !DILocation(line: 84, scope: !115, inlinedAt: !6156)
!6170 = !DILocation(line: 396, scope: !21, inlinedAt: !6167)
!6171 = !DILocation(line: 85, scope: !115, inlinedAt: !6156)
!6172 = !DILocation(line: 67, scope: !115, inlinedAt: !6173)
!6173 = distinct !DILocation(line: 1059, scope: !5652)
!6174 = !DILocation(line: 0, scope: !115, inlinedAt: !6173)
!6175 = !DILocation(line: 73, scope: !115, inlinedAt: !6173)
!6176 = !DILocation(line: 75, scope: !115, inlinedAt: !6173)
!6177 = !DILocation(line: 77, scope: !115, inlinedAt: !6173)
!6178 = !DILocation(line: 79, scope: !115, inlinedAt: !6173)
!6179 = !DILocation(line: 81, scope: !115, inlinedAt: !6173)
!6180 = !DILocation(line: 396, scope: !21, inlinedAt: !6181)
!6181 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6173)
!6182 = !DILocation(line: 85, scope: !115, inlinedAt: !6173)
!6183 = !DILocation(line: 67, scope: !115, inlinedAt: !6184)
!6184 = distinct !DILocation(line: 1059, scope: !5652)
!6185 = !DILocation(line: 0, scope: !115, inlinedAt: !6184)
!6186 = !DILocation(line: 69, scope: !115, inlinedAt: !6184)
!6187 = !DILocation(line: 72, scope: !115, inlinedAt: !6184)
!6188 = !DILocation(line: 73, scope: !115, inlinedAt: !6184)
!6189 = !DILocation(line: 75, scope: !115, inlinedAt: !6184)
!6190 = !DILocation(line: 77, scope: !115, inlinedAt: !6184)
!6191 = !DILocation(line: 78, scope: !115, inlinedAt: !6184)
!6192 = !DILocation(line: 79, scope: !115, inlinedAt: !6184)
!6193 = !DILocation(line: 81, scope: !115, inlinedAt: !6184)
!6194 = !DILocation(line: 394, scope: !21, inlinedAt: !6195)
!6195 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6184)
!6196 = !DILocation(line: 392, scope: !21, inlinedAt: !6197)
!6197 = distinct !DILocation(line: 84, scope: !115, inlinedAt: !6184)
!6198 = !DILocation(line: 396, scope: !21, inlinedAt: !6195)
!6199 = !DILocation(line: 85, scope: !115, inlinedAt: !6184)
!6200 = !DILocation(line: 67, scope: !115, inlinedAt: !6201)
!6201 = distinct !DILocation(line: 1060, scope: !5652)
!6202 = !DILocation(line: 0, scope: !115, inlinedAt: !6201)
!6203 = !DILocation(line: 73, scope: !115, inlinedAt: !6201)
!6204 = !DILocation(line: 75, scope: !115, inlinedAt: !6201)
!6205 = !DILocation(line: 77, scope: !115, inlinedAt: !6201)
!6206 = !DILocation(line: 79, scope: !115, inlinedAt: !6201)
!6207 = !DILocation(line: 81, scope: !115, inlinedAt: !6201)
!6208 = !DILocation(line: 396, scope: !21, inlinedAt: !6209)
!6209 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6201)
!6210 = !DILocation(line: 85, scope: !115, inlinedAt: !6201)
!6211 = !DILocation(line: 67, scope: !115, inlinedAt: !6212)
!6212 = distinct !DILocation(line: 1060, scope: !5652)
!6213 = !DILocation(line: 0, scope: !115, inlinedAt: !6212)
!6214 = !DILocation(line: 69, scope: !115, inlinedAt: !6212)
!6215 = !DILocation(line: 72, scope: !115, inlinedAt: !6212)
!6216 = !DILocation(line: 73, scope: !115, inlinedAt: !6212)
!6217 = !DILocation(line: 75, scope: !115, inlinedAt: !6212)
!6218 = !DILocation(line: 77, scope: !115, inlinedAt: !6212)
!6219 = !DILocation(line: 78, scope: !115, inlinedAt: !6212)
!6220 = !DILocation(line: 79, scope: !115, inlinedAt: !6212)
!6221 = !DILocation(line: 81, scope: !115, inlinedAt: !6212)
!6222 = !DILocation(line: 394, scope: !21, inlinedAt: !6223)
!6223 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6212)
!6224 = !DILocation(line: 392, scope: !21, inlinedAt: !6225)
!6225 = distinct !DILocation(line: 84, scope: !115, inlinedAt: !6212)
!6226 = !DILocation(line: 396, scope: !21, inlinedAt: !6223)
!6227 = !DILocation(line: 85, scope: !115, inlinedAt: !6212)
!6228 = !DILocation(line: 67, scope: !115, inlinedAt: !6229)
!6229 = distinct !DILocation(line: 1061, scope: !5652)
!6230 = !DILocation(line: 0, scope: !115, inlinedAt: !6229)
!6231 = !DILocation(line: 73, scope: !115, inlinedAt: !6229)
!6232 = !DILocation(line: 75, scope: !115, inlinedAt: !6229)
!6233 = !DILocation(line: 77, scope: !115, inlinedAt: !6229)
!6234 = !DILocation(line: 79, scope: !115, inlinedAt: !6229)
!6235 = !DILocation(line: 81, scope: !115, inlinedAt: !6229)
!6236 = !DILocation(line: 396, scope: !21, inlinedAt: !6237)
!6237 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6229)
!6238 = !DILocation(line: 85, scope: !115, inlinedAt: !6229)
!6239 = !DILocation(line: 67, scope: !115, inlinedAt: !6240)
!6240 = distinct !DILocation(line: 1063, scope: !5652)
!6241 = !DILocation(line: 0, scope: !115, inlinedAt: !6240)
!6242 = !DILocation(line: 73, scope: !115, inlinedAt: !6240)
!6243 = !DILocation(line: 75, scope: !115, inlinedAt: !6240)
!6244 = !DILocation(line: 77, scope: !115, inlinedAt: !6240)
!6245 = !DILocation(line: 79, scope: !115, inlinedAt: !6240)
!6246 = !DILocation(line: 81, scope: !115, inlinedAt: !6240)
!6247 = !DILocation(line: 396, scope: !21, inlinedAt: !6248)
!6248 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6240)
!6249 = !DILocation(line: 85, scope: !115, inlinedAt: !6240)
!6250 = !DILocation(line: 67, scope: !115, inlinedAt: !6251)
!6251 = distinct !DILocation(line: 1063, scope: !5652)
!6252 = !DILocation(line: 0, scope: !115, inlinedAt: !6251)
!6253 = !DILocation(line: 69, scope: !115, inlinedAt: !6251)
!6254 = !DILocation(line: 72, scope: !115, inlinedAt: !6251)
!6255 = !DILocation(line: 73, scope: !115, inlinedAt: !6251)
!6256 = !DILocation(line: 75, scope: !115, inlinedAt: !6251)
!6257 = !DILocation(line: 77, scope: !115, inlinedAt: !6251)
!6258 = !DILocation(line: 78, scope: !115, inlinedAt: !6251)
!6259 = !DILocation(line: 79, scope: !115, inlinedAt: !6251)
!6260 = !DILocation(line: 81, scope: !115, inlinedAt: !6251)
!6261 = !DILocation(line: 394, scope: !21, inlinedAt: !6262)
!6262 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6251)
!6263 = !DILocation(line: 392, scope: !21, inlinedAt: !6264)
!6264 = distinct !DILocation(line: 84, scope: !115, inlinedAt: !6251)
!6265 = !DILocation(line: 396, scope: !21, inlinedAt: !6262)
!6266 = !DILocation(line: 85, scope: !115, inlinedAt: !6251)
!6267 = !DILocation(line: 67, scope: !115, inlinedAt: !6268)
!6268 = distinct !DILocation(line: 1064, scope: !5652)
!6269 = !DILocation(line: 0, scope: !115, inlinedAt: !6268)
!6270 = !DILocation(line: 73, scope: !115, inlinedAt: !6268)
!6271 = !DILocation(line: 75, scope: !115, inlinedAt: !6268)
!6272 = !DILocation(line: 77, scope: !115, inlinedAt: !6268)
!6273 = !DILocation(line: 79, scope: !115, inlinedAt: !6268)
!6274 = !DILocation(line: 81, scope: !115, inlinedAt: !6268)
!6275 = !DILocation(line: 396, scope: !21, inlinedAt: !6276)
!6276 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6268)
!6277 = !DILocation(line: 85, scope: !115, inlinedAt: !6268)
!6278 = !DILocation(line: 67, scope: !115, inlinedAt: !6279)
!6279 = distinct !DILocation(line: 1064, scope: !5652)
!6280 = !DILocation(line: 0, scope: !115, inlinedAt: !6279)
!6281 = !DILocation(line: 69, scope: !115, inlinedAt: !6279)
!6282 = !DILocation(line: 72, scope: !115, inlinedAt: !6279)
!6283 = !DILocation(line: 73, scope: !115, inlinedAt: !6279)
!6284 = !DILocation(line: 75, scope: !115, inlinedAt: !6279)
!6285 = !DILocation(line: 77, scope: !115, inlinedAt: !6279)
!6286 = !DILocation(line: 78, scope: !115, inlinedAt: !6279)
!6287 = !DILocation(line: 79, scope: !115, inlinedAt: !6279)
!6288 = !DILocation(line: 81, scope: !115, inlinedAt: !6279)
!6289 = !DILocation(line: 394, scope: !21, inlinedAt: !6290)
!6290 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6279)
!6291 = !DILocation(line: 392, scope: !21, inlinedAt: !6292)
!6292 = distinct !DILocation(line: 84, scope: !115, inlinedAt: !6279)
!6293 = !DILocation(line: 396, scope: !21, inlinedAt: !6290)
!6294 = !DILocation(line: 85, scope: !115, inlinedAt: !6279)
!6295 = !DILocation(line: 67, scope: !115, inlinedAt: !6296)
!6296 = distinct !DILocation(line: 1065, scope: !5652)
!6297 = !DILocation(line: 0, scope: !115, inlinedAt: !6296)
!6298 = !DILocation(line: 73, scope: !115, inlinedAt: !6296)
!6299 = !DILocation(line: 75, scope: !115, inlinedAt: !6296)
!6300 = !DILocation(line: 77, scope: !115, inlinedAt: !6296)
!6301 = !DILocation(line: 79, scope: !115, inlinedAt: !6296)
!6302 = !DILocation(line: 81, scope: !115, inlinedAt: !6296)
!6303 = !DILocation(line: 396, scope: !21, inlinedAt: !6304)
!6304 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6296)
!6305 = !DILocation(line: 85, scope: !115, inlinedAt: !6296)
!6306 = !DILocation(line: 67, scope: !115, inlinedAt: !6307)
!6307 = distinct !DILocation(line: 1065, scope: !5652)
!6308 = !DILocation(line: 0, scope: !115, inlinedAt: !6307)
!6309 = !DILocation(line: 69, scope: !115, inlinedAt: !6307)
!6310 = !DILocation(line: 72, scope: !115, inlinedAt: !6307)
!6311 = !DILocation(line: 73, scope: !115, inlinedAt: !6307)
!6312 = !DILocation(line: 75, scope: !115, inlinedAt: !6307)
!6313 = !DILocation(line: 77, scope: !115, inlinedAt: !6307)
!6314 = !DILocation(line: 78, scope: !115, inlinedAt: !6307)
!6315 = !DILocation(line: 79, scope: !115, inlinedAt: !6307)
!6316 = !DILocation(line: 81, scope: !115, inlinedAt: !6307)
!6317 = !DILocation(line: 394, scope: !21, inlinedAt: !6318)
!6318 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6307)
!6319 = !DILocation(line: 392, scope: !21, inlinedAt: !6320)
!6320 = distinct !DILocation(line: 84, scope: !115, inlinedAt: !6307)
!6321 = !DILocation(line: 396, scope: !21, inlinedAt: !6318)
!6322 = !DILocation(line: 85, scope: !115, inlinedAt: !6307)
!6323 = !DILocation(line: 67, scope: !115, inlinedAt: !6324)
!6324 = distinct !DILocation(line: 1067, scope: !5652)
!6325 = !DILocation(line: 0, scope: !115, inlinedAt: !6324)
!6326 = !DILocation(line: 73, scope: !115, inlinedAt: !6324)
!6327 = !DILocation(line: 75, scope: !115, inlinedAt: !6324)
!6328 = !DILocation(line: 77, scope: !115, inlinedAt: !6324)
!6329 = !DILocation(line: 79, scope: !115, inlinedAt: !6324)
!6330 = !DILocation(line: 81, scope: !115, inlinedAt: !6324)
!6331 = !DILocation(line: 396, scope: !21, inlinedAt: !6332)
!6332 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6324)
!6333 = !DILocation(line: 85, scope: !115, inlinedAt: !6324)
!6334 = !DILocation(line: 67, scope: !115, inlinedAt: !6335)
!6335 = distinct !DILocation(line: 1068, scope: !5652)
!6336 = !DILocation(line: 0, scope: !115, inlinedAt: !6335)
!6337 = !DILocation(line: 73, scope: !115, inlinedAt: !6335)
!6338 = !DILocation(line: 75, scope: !115, inlinedAt: !6335)
!6339 = !DILocation(line: 77, scope: !115, inlinedAt: !6335)
!6340 = !DILocation(line: 79, scope: !115, inlinedAt: !6335)
!6341 = !DILocation(line: 81, scope: !115, inlinedAt: !6335)
!6342 = !DILocation(line: 396, scope: !21, inlinedAt: !6343)
!6343 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6335)
!6344 = !DILocation(line: 85, scope: !115, inlinedAt: !6335)
!6345 = !DILocation(line: 67, scope: !115, inlinedAt: !6346)
!6346 = distinct !DILocation(line: 1069, scope: !5652)
!6347 = !DILocation(line: 0, scope: !115, inlinedAt: !6346)
!6348 = !DILocation(line: 73, scope: !115, inlinedAt: !6346)
!6349 = !DILocation(line: 75, scope: !115, inlinedAt: !6346)
!6350 = !DILocation(line: 77, scope: !115, inlinedAt: !6346)
!6351 = !DILocation(line: 79, scope: !115, inlinedAt: !6346)
!6352 = !DILocation(line: 81, scope: !115, inlinedAt: !6346)
!6353 = !DILocation(line: 396, scope: !21, inlinedAt: !6354)
!6354 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6346)
!6355 = !DILocation(line: 85, scope: !115, inlinedAt: !6346)
!6356 = !DILocation(line: 67, scope: !115, inlinedAt: !6357)
!6357 = distinct !DILocation(line: 1070, scope: !5652)
!6358 = !DILocation(line: 0, scope: !115, inlinedAt: !6357)
!6359 = !DILocation(line: 73, scope: !115, inlinedAt: !6357)
!6360 = !DILocation(line: 75, scope: !115, inlinedAt: !6357)
!6361 = !DILocation(line: 77, scope: !115, inlinedAt: !6357)
!6362 = !DILocation(line: 79, scope: !115, inlinedAt: !6357)
!6363 = !DILocation(line: 81, scope: !115, inlinedAt: !6357)
!6364 = !DILocation(line: 396, scope: !21, inlinedAt: !6365)
!6365 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6357)
!6366 = !DILocation(line: 85, scope: !115, inlinedAt: !6357)
!6367 = !DILocation(line: 948, scope: !5342, inlinedAt: !6368)
!6368 = distinct !DILocation(line: 1072, scope: !5652)
!6369 = !DILocation(line: 0, scope: !5342, inlinedAt: !6368)
!6370 = !DILocation(line: 67, scope: !115, inlinedAt: !6371)
!6371 = distinct !DILocation(line: 958, scope: !5342, inlinedAt: !6368)
!6372 = !DILocation(line: 396, scope: !21, inlinedAt: !6373)
!6373 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6371)
!6374 = !DILocation(line: 0, scope: !115, inlinedAt: !6371)
!6375 = !DILocation(line: 67, scope: !115, inlinedAt: !6376)
!6376 = distinct !DILocation(line: 950, scope: !5342, inlinedAt: !6368)
!6377 = !DILocation(line: 69, scope: !115, inlinedAt: !6376)
!6378 = !DILocation(line: 0, scope: !115, inlinedAt: !6376)
!6379 = !DILocation(line: 72, scope: !115, inlinedAt: !6376)
!6380 = !DILocation(line: 73, scope: !115, inlinedAt: !6376)
!6381 = !DILocation(line: 75, scope: !115, inlinedAt: !6376)
!6382 = !DILocation(line: 77, scope: !115, inlinedAt: !6376)
!6383 = !DILocation(line: 78, scope: !115, inlinedAt: !6376)
!6384 = !DILocation(line: 79, scope: !115, inlinedAt: !6376)
!6385 = !DILocation(line: 81, scope: !115, inlinedAt: !6376)
!6386 = !DILocation(line: 396, scope: !21, inlinedAt: !6387)
!6387 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6376)
!6388 = !DILocation(line: 392, scope: !21, inlinedAt: !6389)
!6389 = distinct !DILocation(line: 84, scope: !115, inlinedAt: !6376)
!6390 = !DILocation(line: 85, scope: !115, inlinedAt: !6376)
!6391 = !DILocation(line: 951, scope: !5342, inlinedAt: !6368)
!6392 = !DILocation(line: 394, scope: !21, inlinedAt: !6387)
!6393 = !DILocation(line: 73, scope: !115, inlinedAt: !6371)
!6394 = !DILocation(line: 75, scope: !115, inlinedAt: !6371)
!6395 = !DILocation(line: 77, scope: !115, inlinedAt: !6371)
!6396 = !DILocation(line: 79, scope: !115, inlinedAt: !6371)
!6397 = !DILocation(line: 81, scope: !115, inlinedAt: !6371)
!6398 = !DILocation(line: 85, scope: !115, inlinedAt: !6371)
!6399 = !DILocation(line: 959, scope: !5342, inlinedAt: !6368)
!6400 = !DILocation(line: 944, scope: !5342, inlinedAt: !6368)
!6401 = distinct !DISubprogram(name: "tcl.ipow", scope: !864, file: !5, type: !5133, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !6402)
!6402 = !{!6403, !6404, !6405}
!6403 = !DILocalVariable(name: "x", arg: 1, scope: !6401, file: !2, type: !10)
!6404 = !DILocalVariable(name: "y", arg: 2, scope: !6401, file: !2, type: !10)
!6405 = !DILocalVariable(name: "ecvar", arg: 3, scope: !6401, file: !2, type: !976)
!6406 = !DILocation(line: 156, scope: !203, inlinedAt: !6407)
!6407 = distinct !DILocation(line: 1091, scope: !6401)
!6408 = !DILocation(line: 166, scope: !203, inlinedAt: !6407)
!6409 = !DILocation(line: 156, scope: !265, inlinedAt: !6410)
!6410 = distinct !DILocation(line: 1091, scope: !6401)
!6411 = !DILocation(line: 166, scope: !265, inlinedAt: !6410)
!6412 = !DILocation(line: 1091, scope: !6401)
!6413 = !DILocation(line: 1093, scope: !6401)
!6414 = !DILocation(line: 1098, scope: !6401)
!6415 = !DILocation(line: 1100, scope: !6401)
!6416 = !DILocation(line: 978, scope: !5382, inlinedAt: !6417)
!6417 = distinct !DILocation(line: 1102, scope: !6401)
!6418 = !DILocation(line: 73, scope: !115, inlinedAt: !6419)
!6419 = distinct !DILocation(line: 980, scope: !5382, inlinedAt: !6417)
!6420 = !DILocation(line: 75, scope: !115, inlinedAt: !6419)
!6421 = !DILocation(line: 79, scope: !115, inlinedAt: !6419)
!6422 = !DILocation(line: 81, scope: !115, inlinedAt: !6419)
!6423 = !DILocation(line: 73, scope: !115, inlinedAt: !6424)
!6424 = distinct !DILocation(line: 982, scope: !5382, inlinedAt: !6417)
!6425 = !DILocation(line: 75, scope: !115, inlinedAt: !6424)
!6426 = !DILocation(line: 67, scope: !115, inlinedAt: !6427)
!6427 = distinct !DILocation(line: 982, scope: !5382, inlinedAt: !6417)
!6428 = !DILocation(line: 0, scope: !115, inlinedAt: !6427)
!6429 = !DILocation(line: 73, scope: !115, inlinedAt: !6427)
!6430 = !DILocation(line: 75, scope: !115, inlinedAt: !6427)
!6431 = !DILocation(line: 77, scope: !115, inlinedAt: !6427)
!6432 = !DILocation(line: 79, scope: !115, inlinedAt: !6427)
!6433 = !DILocation(line: 81, scope: !115, inlinedAt: !6427)
!6434 = !DILocation(line: 396, scope: !21, inlinedAt: !6435)
!6435 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6427)
!6436 = !DILocation(line: 85, scope: !115, inlinedAt: !6427)
!6437 = !DILocation(line: 73, scope: !115, inlinedAt: !6438)
!6438 = distinct !DILocation(line: 984, scope: !5382, inlinedAt: !6417)
!6439 = !DILocation(line: 75, scope: !115, inlinedAt: !6438)
!6440 = !DILocation(line: 67, scope: !115, inlinedAt: !6441)
!6441 = distinct !DILocation(line: 985, scope: !5382, inlinedAt: !6417)
!6442 = !DILocation(line: 0, scope: !115, inlinedAt: !6441)
!6443 = !DILocation(line: 73, scope: !115, inlinedAt: !6441)
!6444 = !DILocation(line: 75, scope: !115, inlinedAt: !6441)
!6445 = !DILocation(line: 77, scope: !115, inlinedAt: !6441)
!6446 = !DILocation(line: 79, scope: !115, inlinedAt: !6441)
!6447 = !DILocation(line: 81, scope: !115, inlinedAt: !6441)
!6448 = !DILocation(line: 396, scope: !21, inlinedAt: !6449)
!6449 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6441)
!6450 = !DILocation(line: 85, scope: !115, inlinedAt: !6441)
!6451 = !DILocation(line: 73, scope: !115, inlinedAt: !6452)
!6452 = distinct !DILocation(line: 987, scope: !5382, inlinedAt: !6417)
!6453 = !DILocation(line: 75, scope: !115, inlinedAt: !6452)
!6454 = !DILocation(line: 67, scope: !115, inlinedAt: !6455)
!6455 = distinct !DILocation(line: 988, scope: !5382, inlinedAt: !6417)
!6456 = !DILocation(line: 0, scope: !115, inlinedAt: !6455)
!6457 = !DILocation(line: 73, scope: !115, inlinedAt: !6455)
!6458 = !DILocation(line: 75, scope: !115, inlinedAt: !6455)
!6459 = !DILocation(line: 77, scope: !115, inlinedAt: !6455)
!6460 = !DILocation(line: 79, scope: !115, inlinedAt: !6455)
!6461 = !DILocation(line: 81, scope: !115, inlinedAt: !6455)
!6462 = !DILocation(line: 396, scope: !21, inlinedAt: !6463)
!6463 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6455)
!6464 = !DILocation(line: 85, scope: !115, inlinedAt: !6455)
!6465 = !DILocation(line: 67, scope: !115, inlinedAt: !6466)
!6466 = distinct !DILocation(line: 988, scope: !5382, inlinedAt: !6417)
!6467 = !DILocation(line: 0, scope: !115, inlinedAt: !6466)
!6468 = !DILocation(line: 73, scope: !115, inlinedAt: !6466)
!6469 = !DILocation(line: 75, scope: !115, inlinedAt: !6466)
!6470 = !DILocation(line: 77, scope: !115, inlinedAt: !6466)
!6471 = !DILocation(line: 79, scope: !115, inlinedAt: !6466)
!6472 = !DILocation(line: 81, scope: !115, inlinedAt: !6466)
!6473 = !DILocation(line: 396, scope: !21, inlinedAt: !6474)
!6474 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6466)
!6475 = !DILocation(line: 85, scope: !115, inlinedAt: !6466)
!6476 = !DILocation(line: 73, scope: !115, inlinedAt: !6477)
!6477 = distinct !DILocation(line: 990, scope: !5382, inlinedAt: !6417)
!6478 = !DILocation(line: 75, scope: !115, inlinedAt: !6477)
!6479 = !DILocation(line: 67, scope: !115, inlinedAt: !6480)
!6480 = distinct !DILocation(line: 990, scope: !5382, inlinedAt: !6417)
!6481 = !DILocation(line: 0, scope: !115, inlinedAt: !6480)
!6482 = !DILocation(line: 73, scope: !115, inlinedAt: !6480)
!6483 = !DILocation(line: 75, scope: !115, inlinedAt: !6480)
!6484 = !DILocation(line: 77, scope: !115, inlinedAt: !6480)
!6485 = !DILocation(line: 79, scope: !115, inlinedAt: !6480)
!6486 = !DILocation(line: 81, scope: !115, inlinedAt: !6480)
!6487 = !DILocation(line: 396, scope: !21, inlinedAt: !6488)
!6488 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6480)
!6489 = !DILocation(line: 85, scope: !115, inlinedAt: !6480)
!6490 = !DILocation(line: 67, scope: !115, inlinedAt: !6491)
!6491 = distinct !DILocation(line: 991, scope: !5382, inlinedAt: !6417)
!6492 = !DILocation(line: 0, scope: !115, inlinedAt: !6491)
!6493 = !DILocation(line: 73, scope: !115, inlinedAt: !6491)
!6494 = !DILocation(line: 75, scope: !115, inlinedAt: !6491)
!6495 = !DILocation(line: 77, scope: !115, inlinedAt: !6491)
!6496 = !DILocation(line: 79, scope: !115, inlinedAt: !6491)
!6497 = !DILocation(line: 81, scope: !115, inlinedAt: !6491)
!6498 = !DILocation(line: 396, scope: !21, inlinedAt: !6499)
!6499 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6491)
!6500 = !DILocation(line: 85, scope: !115, inlinedAt: !6491)
!6501 = !DILocation(line: 73, scope: !115, inlinedAt: !6502)
!6502 = distinct !DILocation(line: 993, scope: !5382, inlinedAt: !6417)
!6503 = !DILocation(line: 75, scope: !115, inlinedAt: !6502)
!6504 = !DILocation(line: 67, scope: !115, inlinedAt: !6505)
!6505 = distinct !DILocation(line: 993, scope: !5382, inlinedAt: !6417)
!6506 = !DILocation(line: 0, scope: !115, inlinedAt: !6505)
!6507 = !DILocation(line: 73, scope: !115, inlinedAt: !6505)
!6508 = !DILocation(line: 75, scope: !115, inlinedAt: !6505)
!6509 = !DILocation(line: 77, scope: !115, inlinedAt: !6505)
!6510 = !DILocation(line: 79, scope: !115, inlinedAt: !6505)
!6511 = !DILocation(line: 81, scope: !115, inlinedAt: !6505)
!6512 = !DILocation(line: 396, scope: !21, inlinedAt: !6513)
!6513 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6505)
!6514 = !DILocation(line: 85, scope: !115, inlinedAt: !6505)
!6515 = !DILocation(line: 67, scope: !115, inlinedAt: !6516)
!6516 = distinct !DILocation(line: 994, scope: !5382, inlinedAt: !6417)
!6517 = !DILocation(line: 0, scope: !115, inlinedAt: !6516)
!6518 = !DILocation(line: 73, scope: !115, inlinedAt: !6516)
!6519 = !DILocation(line: 75, scope: !115, inlinedAt: !6516)
!6520 = !DILocation(line: 77, scope: !115, inlinedAt: !6516)
!6521 = !DILocation(line: 79, scope: !115, inlinedAt: !6516)
!6522 = !DILocation(line: 81, scope: !115, inlinedAt: !6516)
!6523 = !DILocation(line: 396, scope: !21, inlinedAt: !6524)
!6524 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6516)
!6525 = !DILocation(line: 85, scope: !115, inlinedAt: !6516)
!6526 = !DILocation(line: 67, scope: !115, inlinedAt: !6527)
!6527 = distinct !DILocation(line: 994, scope: !5382, inlinedAt: !6417)
!6528 = !DILocation(line: 0, scope: !115, inlinedAt: !6527)
!6529 = !DILocation(line: 73, scope: !115, inlinedAt: !6527)
!6530 = !DILocation(line: 75, scope: !115, inlinedAt: !6527)
!6531 = !DILocation(line: 77, scope: !115, inlinedAt: !6527)
!6532 = !DILocation(line: 79, scope: !115, inlinedAt: !6527)
!6533 = !DILocation(line: 81, scope: !115, inlinedAt: !6527)
!6534 = !DILocation(line: 396, scope: !21, inlinedAt: !6535)
!6535 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6527)
!6536 = !DILocation(line: 85, scope: !115, inlinedAt: !6527)
!6537 = !DILocation(line: 73, scope: !115, inlinedAt: !6538)
!6538 = distinct !DILocation(line: 996, scope: !5382, inlinedAt: !6417)
!6539 = !DILocation(line: 75, scope: !115, inlinedAt: !6538)
!6540 = !DILocation(line: 67, scope: !115, inlinedAt: !6541)
!6541 = distinct !DILocation(line: 997, scope: !5382, inlinedAt: !6417)
!6542 = !DILocation(line: 0, scope: !115, inlinedAt: !6541)
!6543 = !DILocation(line: 73, scope: !115, inlinedAt: !6541)
!6544 = !DILocation(line: 75, scope: !115, inlinedAt: !6541)
!6545 = !DILocation(line: 77, scope: !115, inlinedAt: !6541)
!6546 = !DILocation(line: 79, scope: !115, inlinedAt: !6541)
!6547 = !DILocation(line: 81, scope: !115, inlinedAt: !6541)
!6548 = !DILocation(line: 396, scope: !21, inlinedAt: !6549)
!6549 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6541)
!6550 = !DILocation(line: 85, scope: !115, inlinedAt: !6541)
!6551 = !DILocation(line: 67, scope: !115, inlinedAt: !6552)
!6552 = distinct !DILocation(line: 998, scope: !5382, inlinedAt: !6417)
!6553 = !DILocation(line: 0, scope: !115, inlinedAt: !6552)
!6554 = !DILocation(line: 73, scope: !115, inlinedAt: !6552)
!6555 = !DILocation(line: 75, scope: !115, inlinedAt: !6552)
!6556 = !DILocation(line: 77, scope: !115, inlinedAt: !6552)
!6557 = !DILocation(line: 79, scope: !115, inlinedAt: !6552)
!6558 = !DILocation(line: 81, scope: !115, inlinedAt: !6552)
!6559 = !DILocation(line: 396, scope: !21, inlinedAt: !6560)
!6560 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6552)
!6561 = !DILocation(line: 85, scope: !115, inlinedAt: !6552)
!6562 = !DILocation(line: 948, scope: !5342, inlinedAt: !6563)
!6563 = distinct !DILocation(line: 1000, scope: !5382, inlinedAt: !6417)
!6564 = !DILocation(line: 0, scope: !5342, inlinedAt: !6563)
!6565 = !DILocation(line: 67, scope: !115, inlinedAt: !6566)
!6566 = distinct !DILocation(line: 958, scope: !5342, inlinedAt: !6563)
!6567 = !DILocation(line: 396, scope: !21, inlinedAt: !6568)
!6568 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6566)
!6569 = !DILocation(line: 0, scope: !115, inlinedAt: !6566)
!6570 = !DILocation(line: 67, scope: !115, inlinedAt: !6571)
!6571 = distinct !DILocation(line: 950, scope: !5342, inlinedAt: !6563)
!6572 = !DILocation(line: 69, scope: !115, inlinedAt: !6571)
!6573 = !DILocation(line: 0, scope: !115, inlinedAt: !6571)
!6574 = !DILocation(line: 72, scope: !115, inlinedAt: !6571)
!6575 = !DILocation(line: 73, scope: !115, inlinedAt: !6571)
!6576 = !DILocation(line: 75, scope: !115, inlinedAt: !6571)
!6577 = !DILocation(line: 77, scope: !115, inlinedAt: !6571)
!6578 = !DILocation(line: 78, scope: !115, inlinedAt: !6571)
!6579 = !DILocation(line: 79, scope: !115, inlinedAt: !6571)
!6580 = !DILocation(line: 81, scope: !115, inlinedAt: !6571)
!6581 = !DILocation(line: 396, scope: !21, inlinedAt: !6582)
!6582 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6571)
!6583 = !DILocation(line: 392, scope: !21, inlinedAt: !6584)
!6584 = distinct !DILocation(line: 84, scope: !115, inlinedAt: !6571)
!6585 = !DILocation(line: 85, scope: !115, inlinedAt: !6571)
!6586 = !DILocation(line: 951, scope: !5342, inlinedAt: !6563)
!6587 = !DILocation(line: 394, scope: !21, inlinedAt: !6582)
!6588 = !DILocation(line: 73, scope: !115, inlinedAt: !6566)
!6589 = !DILocation(line: 75, scope: !115, inlinedAt: !6566)
!6590 = !DILocation(line: 77, scope: !115, inlinedAt: !6566)
!6591 = !DILocation(line: 79, scope: !115, inlinedAt: !6566)
!6592 = !DILocation(line: 81, scope: !115, inlinedAt: !6566)
!6593 = !DILocation(line: 85, scope: !115, inlinedAt: !6566)
!6594 = !DILocation(line: 959, scope: !5342, inlinedAt: !6563)
!6595 = !DILocation(line: 944, scope: !5342, inlinedAt: !6563)
!6596 = !DILocation(line: 1017, scope: !5652, inlinedAt: !6597)
!6597 = distinct !DILocation(line: 1105, scope: !6401)
!6598 = !DILocation(line: 85, scope: !115, inlinedAt: !6599)
!6599 = distinct !DILocation(line: 1019, scope: !5652, inlinedAt: !6597)
!6600 = !DILocation(line: 85, scope: !115, inlinedAt: !6601)
!6601 = distinct !DILocation(line: 1021, scope: !5652, inlinedAt: !6597)
!6602 = !DILocation(line: 85, scope: !115, inlinedAt: !6603)
!6603 = distinct !DILocation(line: 1021, scope: !5652, inlinedAt: !6597)
!6604 = !DILocation(line: 85, scope: !115, inlinedAt: !6605)
!6605 = distinct !DILocation(line: 1023, scope: !5652, inlinedAt: !6597)
!6606 = !DILocation(line: 85, scope: !115, inlinedAt: !6607)
!6607 = distinct !DILocation(line: 1024, scope: !5652, inlinedAt: !6597)
!6608 = !DILocation(line: 85, scope: !115, inlinedAt: !6609)
!6609 = distinct !DILocation(line: 1026, scope: !5652, inlinedAt: !6597)
!6610 = !DILocation(line: 85, scope: !115, inlinedAt: !6611)
!6611 = distinct !DILocation(line: 1027, scope: !5652, inlinedAt: !6597)
!6612 = !DILocation(line: 85, scope: !115, inlinedAt: !6613)
!6613 = distinct !DILocation(line: 1027, scope: !5652, inlinedAt: !6597)
!6614 = !DILocation(line: 85, scope: !115, inlinedAt: !6615)
!6615 = distinct !DILocation(line: 1029, scope: !5652, inlinedAt: !6597)
!6616 = !DILocation(line: 85, scope: !115, inlinedAt: !6617)
!6617 = distinct !DILocation(line: 1029, scope: !5652, inlinedAt: !6597)
!6618 = !DILocation(line: 85, scope: !115, inlinedAt: !6619)
!6619 = distinct !DILocation(line: 1030, scope: !5652, inlinedAt: !6597)
!6620 = !DILocation(line: 85, scope: !115, inlinedAt: !6621)
!6621 = distinct !DILocation(line: 1032, scope: !5652, inlinedAt: !6597)
!6622 = !DILocation(line: 85, scope: !115, inlinedAt: !6623)
!6623 = distinct !DILocation(line: 1032, scope: !5652, inlinedAt: !6597)
!6624 = !DILocation(line: 85, scope: !115, inlinedAt: !6625)
!6625 = distinct !DILocation(line: 1033, scope: !5652, inlinedAt: !6597)
!6626 = !DILocation(line: 85, scope: !115, inlinedAt: !6627)
!6627 = distinct !DILocation(line: 1033, scope: !5652, inlinedAt: !6597)
!6628 = !DILocation(line: 85, scope: !115, inlinedAt: !6629)
!6629 = distinct !DILocation(line: 1035, scope: !5652, inlinedAt: !6597)
!6630 = !DILocation(line: 85, scope: !115, inlinedAt: !6631)
!6631 = distinct !DILocation(line: 1036, scope: !5652, inlinedAt: !6597)
!6632 = !DILocation(line: 85, scope: !115, inlinedAt: !6633)
!6633 = distinct !DILocation(line: 1037, scope: !5652, inlinedAt: !6597)
!6634 = !DILocation(line: 85, scope: !115, inlinedAt: !6635)
!6635 = distinct !DILocation(line: 1039, scope: !5652, inlinedAt: !6597)
!6636 = !DILocation(line: 85, scope: !115, inlinedAt: !6637)
!6637 = distinct !DILocation(line: 1040, scope: !5652, inlinedAt: !6597)
!6638 = !DILocation(line: 85, scope: !115, inlinedAt: !6639)
!6639 = distinct !DILocation(line: 1041, scope: !5652, inlinedAt: !6597)
!6640 = !DILocation(line: 85, scope: !115, inlinedAt: !6641)
!6641 = distinct !DILocation(line: 1041, scope: !5652, inlinedAt: !6597)
!6642 = !DILocation(line: 85, scope: !115, inlinedAt: !6643)
!6643 = distinct !DILocation(line: 1043, scope: !5652, inlinedAt: !6597)
!6644 = !DILocation(line: 85, scope: !115, inlinedAt: !6645)
!6645 = distinct !DILocation(line: 1044, scope: !5652, inlinedAt: !6597)
!6646 = !DILocation(line: 85, scope: !115, inlinedAt: !6647)
!6647 = distinct !DILocation(line: 1044, scope: !5652, inlinedAt: !6597)
!6648 = !DILocation(line: 85, scope: !115, inlinedAt: !6649)
!6649 = distinct !DILocation(line: 1045, scope: !5652, inlinedAt: !6597)
!6650 = !DILocation(line: 85, scope: !115, inlinedAt: !6651)
!6651 = distinct !DILocation(line: 1047, scope: !5652, inlinedAt: !6597)
!6652 = !DILocation(line: 85, scope: !115, inlinedAt: !6653)
!6653 = distinct !DILocation(line: 1048, scope: !5652, inlinedAt: !6597)
!6654 = !DILocation(line: 85, scope: !115, inlinedAt: !6655)
!6655 = distinct !DILocation(line: 1048, scope: !5652, inlinedAt: !6597)
!6656 = !DILocation(line: 85, scope: !115, inlinedAt: !6657)
!6657 = distinct !DILocation(line: 1049, scope: !5652, inlinedAt: !6597)
!6658 = !DILocation(line: 85, scope: !115, inlinedAt: !6659)
!6659 = distinct !DILocation(line: 1049, scope: !5652, inlinedAt: !6597)
!6660 = !DILocation(line: 85, scope: !115, inlinedAt: !6661)
!6661 = distinct !DILocation(line: 1051, scope: !5652, inlinedAt: !6597)
!6662 = !DILocation(line: 85, scope: !115, inlinedAt: !6663)
!6663 = distinct !DILocation(line: 1051, scope: !5652, inlinedAt: !6597)
!6664 = !DILocation(line: 85, scope: !115, inlinedAt: !6665)
!6665 = distinct !DILocation(line: 1052, scope: !5652, inlinedAt: !6597)
!6666 = !DILocation(line: 85, scope: !115, inlinedAt: !6667)
!6667 = distinct !DILocation(line: 1053, scope: !5652, inlinedAt: !6597)
!6668 = !DILocation(line: 85, scope: !115, inlinedAt: !6669)
!6669 = distinct !DILocation(line: 1055, scope: !5652, inlinedAt: !6597)
!6670 = !DILocation(line: 85, scope: !115, inlinedAt: !6671)
!6671 = distinct !DILocation(line: 1055, scope: !5652, inlinedAt: !6597)
!6672 = !DILocation(line: 85, scope: !115, inlinedAt: !6673)
!6673 = distinct !DILocation(line: 1056, scope: !5652, inlinedAt: !6597)
!6674 = !DILocation(line: 85, scope: !115, inlinedAt: !6675)
!6675 = distinct !DILocation(line: 1057, scope: !5652, inlinedAt: !6597)
!6676 = !DILocation(line: 85, scope: !115, inlinedAt: !6677)
!6677 = distinct !DILocation(line: 1057, scope: !5652, inlinedAt: !6597)
!6678 = !DILocation(line: 85, scope: !115, inlinedAt: !6679)
!6679 = distinct !DILocation(line: 1059, scope: !5652, inlinedAt: !6597)
!6680 = !DILocation(line: 85, scope: !115, inlinedAt: !6681)
!6681 = distinct !DILocation(line: 1059, scope: !5652, inlinedAt: !6597)
!6682 = !DILocation(line: 85, scope: !115, inlinedAt: !6683)
!6683 = distinct !DILocation(line: 1060, scope: !5652, inlinedAt: !6597)
!6684 = !DILocation(line: 85, scope: !115, inlinedAt: !6685)
!6685 = distinct !DILocation(line: 1060, scope: !5652, inlinedAt: !6597)
!6686 = !DILocation(line: 85, scope: !115, inlinedAt: !6687)
!6687 = distinct !DILocation(line: 1061, scope: !5652, inlinedAt: !6597)
!6688 = !DILocation(line: 85, scope: !115, inlinedAt: !6689)
!6689 = distinct !DILocation(line: 1063, scope: !5652, inlinedAt: !6597)
!6690 = !DILocation(line: 85, scope: !115, inlinedAt: !6691)
!6691 = distinct !DILocation(line: 1063, scope: !5652, inlinedAt: !6597)
!6692 = !DILocation(line: 85, scope: !115, inlinedAt: !6693)
!6693 = distinct !DILocation(line: 1064, scope: !5652, inlinedAt: !6597)
!6694 = !DILocation(line: 85, scope: !115, inlinedAt: !6695)
!6695 = distinct !DILocation(line: 1064, scope: !5652, inlinedAt: !6597)
!6696 = !DILocation(line: 85, scope: !115, inlinedAt: !6697)
!6697 = distinct !DILocation(line: 1065, scope: !5652, inlinedAt: !6597)
!6698 = !DILocation(line: 85, scope: !115, inlinedAt: !6699)
!6699 = distinct !DILocation(line: 1065, scope: !5652, inlinedAt: !6597)
!6700 = !DILocation(line: 85, scope: !115, inlinedAt: !6701)
!6701 = distinct !DILocation(line: 1067, scope: !5652, inlinedAt: !6597)
!6702 = !DILocation(line: 85, scope: !115, inlinedAt: !6703)
!6703 = distinct !DILocation(line: 1068, scope: !5652, inlinedAt: !6597)
!6704 = !DILocation(line: 85, scope: !115, inlinedAt: !6705)
!6705 = distinct !DILocation(line: 1069, scope: !5652, inlinedAt: !6597)
!6706 = !DILocation(line: 85, scope: !115, inlinedAt: !6707)
!6707 = distinct !DILocation(line: 1070, scope: !5652, inlinedAt: !6597)
!6708 = !DILocation(line: 948, scope: !5342, inlinedAt: !6709)
!6709 = distinct !DILocation(line: 1072, scope: !5652, inlinedAt: !6597)
!6710 = !DILocation(line: 0, scope: !5342, inlinedAt: !6709)
!6711 = !DILocation(line: 67, scope: !115, inlinedAt: !6712)
!6712 = distinct !DILocation(line: 958, scope: !5342, inlinedAt: !6709)
!6713 = !DILocation(line: 396, scope: !21, inlinedAt: !6714)
!6714 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6712)
!6715 = !DILocation(line: 0, scope: !115, inlinedAt: !6712)
!6716 = !DILocation(line: 67, scope: !115, inlinedAt: !6717)
!6717 = distinct !DILocation(line: 950, scope: !5342, inlinedAt: !6709)
!6718 = !DILocation(line: 69, scope: !115, inlinedAt: !6717)
!6719 = !DILocation(line: 0, scope: !115, inlinedAt: !6717)
!6720 = !DILocation(line: 72, scope: !115, inlinedAt: !6717)
!6721 = !DILocation(line: 73, scope: !115, inlinedAt: !6717)
!6722 = !DILocation(line: 75, scope: !115, inlinedAt: !6717)
!6723 = !DILocation(line: 77, scope: !115, inlinedAt: !6717)
!6724 = !DILocation(line: 78, scope: !115, inlinedAt: !6717)
!6725 = !DILocation(line: 79, scope: !115, inlinedAt: !6717)
!6726 = !DILocation(line: 81, scope: !115, inlinedAt: !6717)
!6727 = !DILocation(line: 396, scope: !21, inlinedAt: !6728)
!6728 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6717)
!6729 = !DILocation(line: 392, scope: !21, inlinedAt: !6730)
!6730 = distinct !DILocation(line: 84, scope: !115, inlinedAt: !6717)
!6731 = !DILocation(line: 85, scope: !115, inlinedAt: !6717)
!6732 = !DILocation(line: 951, scope: !5342, inlinedAt: !6709)
!6733 = !DILocation(line: 394, scope: !21, inlinedAt: !6728)
!6734 = !DILocation(line: 73, scope: !115, inlinedAt: !6712)
!6735 = !DILocation(line: 75, scope: !115, inlinedAt: !6712)
!6736 = !DILocation(line: 77, scope: !115, inlinedAt: !6712)
!6737 = !DILocation(line: 79, scope: !115, inlinedAt: !6712)
!6738 = !DILocation(line: 81, scope: !115, inlinedAt: !6712)
!6739 = !DILocation(line: 85, scope: !115, inlinedAt: !6712)
!6740 = !DILocation(line: 959, scope: !5342, inlinedAt: !6709)
!6741 = !DILocation(line: 944, scope: !5342, inlinedAt: !6709)
!6742 = !DILocation(line: 1110, scope: !6401)
!6743 = !DILocation(line: 1112, scope: !6401)
!6744 = !DILocation(line: 116, scope: !1345, inlinedAt: !6745)
!6745 = distinct !DILocation(line: 1112, scope: !6401)
!6746 = !DILocation(line: 116, scope: !1345, inlinedAt: !6747)
!6747 = distinct !DILocation(line: 1112, scope: !6401)
!6748 = !DILocation(line: 1113, scope: !6401)
!6749 = distinct !DISubprogram(name: "tcl.pow.numeric", scope: !864, file: !5, type: !5230, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !6750)
!6750 = !{!6751, !6752, !6753}
!6751 = !DILocalVariable(name: "x", arg: 1, scope: !6749, file: !2, type: !343)
!6752 = !DILocalVariable(name: "y", arg: 2, scope: !6749, file: !2, type: !343)
!6753 = !DILocalVariable(name: "ecvar", arg: 3, scope: !6749, file: !2, type: !976)
!6754 = !DILocation(line: 1132, scope: !6749)
!6755 = !DILocation(line: 1134, scope: !6749)
!6756 = !DILocation(line: 0, scope: !6749)
!6757 = !DILocation(line: 1136, scope: !6749)
!6758 = !DILocation(line: 1137, scope: !6749)
!6759 = !DILocation(line: 392, scope: !21, inlinedAt: !6760)
!6760 = distinct !DILocation(line: 1137, scope: !6749)
!6761 = !DILocation(line: 859, scope: !5297, inlinedAt: !6762)
!6762 = distinct !DILocation(line: 1138, scope: !6749)
!6763 = !DILocation(line: 861, scope: !5297, inlinedAt: !6762)
!6764 = !DILocation(line: 862, scope: !5297, inlinedAt: !6762)
!6765 = !DILocation(line: 864, scope: !5297, inlinedAt: !6762)
!6766 = !DILocation(line: 866, scope: !5297, inlinedAt: !6762)
!6767 = !DILocation(line: 868, scope: !5297, inlinedAt: !6762)
!6768 = !{!6769}
!6769 = distinct !{!6769, !6770, !"tcl.fpow: %ecvar"}
!6770 = distinct !{!6770, !"tcl.fpow"}
!6771 = !DILocation(line: 116, scope: !1345, inlinedAt: !6772)
!6772 = distinct !DILocation(line: 868, scope: !5297, inlinedAt: !6762)
!6773 = !DILocation(line: 116, scope: !1345, inlinedAt: !6774)
!6774 = distinct !DILocation(line: 868, scope: !5297, inlinedAt: !6762)
!6775 = !DILocation(line: 869, scope: !5297, inlinedAt: !6762)
!6776 = !DILocation(line: 871, scope: !5297, inlinedAt: !6762)
!6777 = !DILocation(line: 116, scope: !1345, inlinedAt: !6778)
!6778 = distinct !DILocation(line: 871, scope: !5297, inlinedAt: !6762)
!6779 = !DILocation(line: 116, scope: !1345, inlinedAt: !6780)
!6780 = distinct !DILocation(line: 871, scope: !5297, inlinedAt: !6762)
!6781 = !DILocation(line: 872, scope: !5297, inlinedAt: !6762)
!6782 = !DILocation(line: 1138, scope: !6749)
!6783 = !DILocation(line: 1141, scope: !6749)
!6784 = !DILocation(line: 156, scope: !203, inlinedAt: !6785)
!6785 = distinct !DILocation(line: 1091, scope: !6401, inlinedAt: !6786)
!6786 = distinct !DILocation(line: 1142, scope: !6749)
!6787 = !DILocation(line: 166, scope: !203, inlinedAt: !6785)
!6788 = !DILocation(line: 156, scope: !265, inlinedAt: !6789)
!6789 = distinct !DILocation(line: 1091, scope: !6401, inlinedAt: !6786)
!6790 = !DILocation(line: 166, scope: !265, inlinedAt: !6789)
!6791 = !DILocation(line: 1091, scope: !6401, inlinedAt: !6786)
!6792 = !DILocation(line: 1093, scope: !6401, inlinedAt: !6786)
!6793 = !DILocation(line: 1098, scope: !6401, inlinedAt: !6786)
!6794 = !DILocation(line: 1100, scope: !6401, inlinedAt: !6786)
!6795 = !DILocation(line: 978, scope: !5382, inlinedAt: !6796)
!6796 = distinct !DILocation(line: 1102, scope: !6401, inlinedAt: !6786)
!6797 = !DILocation(line: 73, scope: !115, inlinedAt: !6798)
!6798 = distinct !DILocation(line: 980, scope: !5382, inlinedAt: !6796)
!6799 = !DILocation(line: 75, scope: !115, inlinedAt: !6798)
!6800 = !DILocation(line: 79, scope: !115, inlinedAt: !6798)
!6801 = !DILocation(line: 81, scope: !115, inlinedAt: !6798)
!6802 = !DILocation(line: 73, scope: !115, inlinedAt: !6803)
!6803 = distinct !DILocation(line: 982, scope: !5382, inlinedAt: !6796)
!6804 = !DILocation(line: 75, scope: !115, inlinedAt: !6803)
!6805 = !DILocation(line: 67, scope: !115, inlinedAt: !6806)
!6806 = distinct !DILocation(line: 982, scope: !5382, inlinedAt: !6796)
!6807 = !DILocation(line: 0, scope: !115, inlinedAt: !6806)
!6808 = !DILocation(line: 73, scope: !115, inlinedAt: !6806)
!6809 = !DILocation(line: 75, scope: !115, inlinedAt: !6806)
!6810 = !DILocation(line: 77, scope: !115, inlinedAt: !6806)
!6811 = !DILocation(line: 79, scope: !115, inlinedAt: !6806)
!6812 = !DILocation(line: 81, scope: !115, inlinedAt: !6806)
!6813 = !DILocation(line: 396, scope: !21, inlinedAt: !6814)
!6814 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6806)
!6815 = !DILocation(line: 85, scope: !115, inlinedAt: !6806)
!6816 = !DILocation(line: 73, scope: !115, inlinedAt: !6817)
!6817 = distinct !DILocation(line: 984, scope: !5382, inlinedAt: !6796)
!6818 = !DILocation(line: 75, scope: !115, inlinedAt: !6817)
!6819 = !DILocation(line: 67, scope: !115, inlinedAt: !6820)
!6820 = distinct !DILocation(line: 985, scope: !5382, inlinedAt: !6796)
!6821 = !DILocation(line: 0, scope: !115, inlinedAt: !6820)
!6822 = !DILocation(line: 73, scope: !115, inlinedAt: !6820)
!6823 = !DILocation(line: 75, scope: !115, inlinedAt: !6820)
!6824 = !DILocation(line: 77, scope: !115, inlinedAt: !6820)
!6825 = !DILocation(line: 79, scope: !115, inlinedAt: !6820)
!6826 = !DILocation(line: 81, scope: !115, inlinedAt: !6820)
!6827 = !DILocation(line: 396, scope: !21, inlinedAt: !6828)
!6828 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6820)
!6829 = !DILocation(line: 85, scope: !115, inlinedAt: !6820)
!6830 = !DILocation(line: 73, scope: !115, inlinedAt: !6831)
!6831 = distinct !DILocation(line: 987, scope: !5382, inlinedAt: !6796)
!6832 = !DILocation(line: 75, scope: !115, inlinedAt: !6831)
!6833 = !DILocation(line: 67, scope: !115, inlinedAt: !6834)
!6834 = distinct !DILocation(line: 988, scope: !5382, inlinedAt: !6796)
!6835 = !DILocation(line: 0, scope: !115, inlinedAt: !6834)
!6836 = !DILocation(line: 73, scope: !115, inlinedAt: !6834)
!6837 = !DILocation(line: 75, scope: !115, inlinedAt: !6834)
!6838 = !DILocation(line: 77, scope: !115, inlinedAt: !6834)
!6839 = !DILocation(line: 79, scope: !115, inlinedAt: !6834)
!6840 = !DILocation(line: 81, scope: !115, inlinedAt: !6834)
!6841 = !DILocation(line: 396, scope: !21, inlinedAt: !6842)
!6842 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6834)
!6843 = !DILocation(line: 85, scope: !115, inlinedAt: !6834)
!6844 = !DILocation(line: 67, scope: !115, inlinedAt: !6845)
!6845 = distinct !DILocation(line: 988, scope: !5382, inlinedAt: !6796)
!6846 = !DILocation(line: 0, scope: !115, inlinedAt: !6845)
!6847 = !DILocation(line: 73, scope: !115, inlinedAt: !6845)
!6848 = !DILocation(line: 75, scope: !115, inlinedAt: !6845)
!6849 = !DILocation(line: 77, scope: !115, inlinedAt: !6845)
!6850 = !DILocation(line: 79, scope: !115, inlinedAt: !6845)
!6851 = !DILocation(line: 81, scope: !115, inlinedAt: !6845)
!6852 = !DILocation(line: 396, scope: !21, inlinedAt: !6853)
!6853 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6845)
!6854 = !DILocation(line: 85, scope: !115, inlinedAt: !6845)
!6855 = !DILocation(line: 73, scope: !115, inlinedAt: !6856)
!6856 = distinct !DILocation(line: 990, scope: !5382, inlinedAt: !6796)
!6857 = !DILocation(line: 75, scope: !115, inlinedAt: !6856)
!6858 = !DILocation(line: 67, scope: !115, inlinedAt: !6859)
!6859 = distinct !DILocation(line: 990, scope: !5382, inlinedAt: !6796)
!6860 = !DILocation(line: 0, scope: !115, inlinedAt: !6859)
!6861 = !DILocation(line: 73, scope: !115, inlinedAt: !6859)
!6862 = !DILocation(line: 75, scope: !115, inlinedAt: !6859)
!6863 = !DILocation(line: 77, scope: !115, inlinedAt: !6859)
!6864 = !DILocation(line: 79, scope: !115, inlinedAt: !6859)
!6865 = !DILocation(line: 81, scope: !115, inlinedAt: !6859)
!6866 = !DILocation(line: 396, scope: !21, inlinedAt: !6867)
!6867 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6859)
!6868 = !DILocation(line: 85, scope: !115, inlinedAt: !6859)
!6869 = !DILocation(line: 67, scope: !115, inlinedAt: !6870)
!6870 = distinct !DILocation(line: 991, scope: !5382, inlinedAt: !6796)
!6871 = !DILocation(line: 0, scope: !115, inlinedAt: !6870)
!6872 = !DILocation(line: 73, scope: !115, inlinedAt: !6870)
!6873 = !DILocation(line: 75, scope: !115, inlinedAt: !6870)
!6874 = !DILocation(line: 77, scope: !115, inlinedAt: !6870)
!6875 = !DILocation(line: 79, scope: !115, inlinedAt: !6870)
!6876 = !DILocation(line: 81, scope: !115, inlinedAt: !6870)
!6877 = !DILocation(line: 396, scope: !21, inlinedAt: !6878)
!6878 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6870)
!6879 = !DILocation(line: 85, scope: !115, inlinedAt: !6870)
!6880 = !DILocation(line: 73, scope: !115, inlinedAt: !6881)
!6881 = distinct !DILocation(line: 993, scope: !5382, inlinedAt: !6796)
!6882 = !DILocation(line: 75, scope: !115, inlinedAt: !6881)
!6883 = !DILocation(line: 67, scope: !115, inlinedAt: !6884)
!6884 = distinct !DILocation(line: 993, scope: !5382, inlinedAt: !6796)
!6885 = !DILocation(line: 0, scope: !115, inlinedAt: !6884)
!6886 = !DILocation(line: 73, scope: !115, inlinedAt: !6884)
!6887 = !DILocation(line: 75, scope: !115, inlinedAt: !6884)
!6888 = !DILocation(line: 77, scope: !115, inlinedAt: !6884)
!6889 = !DILocation(line: 79, scope: !115, inlinedAt: !6884)
!6890 = !DILocation(line: 81, scope: !115, inlinedAt: !6884)
!6891 = !DILocation(line: 396, scope: !21, inlinedAt: !6892)
!6892 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6884)
!6893 = !DILocation(line: 85, scope: !115, inlinedAt: !6884)
!6894 = !DILocation(line: 67, scope: !115, inlinedAt: !6895)
!6895 = distinct !DILocation(line: 994, scope: !5382, inlinedAt: !6796)
!6896 = !DILocation(line: 0, scope: !115, inlinedAt: !6895)
!6897 = !DILocation(line: 73, scope: !115, inlinedAt: !6895)
!6898 = !DILocation(line: 75, scope: !115, inlinedAt: !6895)
!6899 = !DILocation(line: 77, scope: !115, inlinedAt: !6895)
!6900 = !DILocation(line: 79, scope: !115, inlinedAt: !6895)
!6901 = !DILocation(line: 81, scope: !115, inlinedAt: !6895)
!6902 = !DILocation(line: 396, scope: !21, inlinedAt: !6903)
!6903 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6895)
!6904 = !DILocation(line: 85, scope: !115, inlinedAt: !6895)
!6905 = !DILocation(line: 67, scope: !115, inlinedAt: !6906)
!6906 = distinct !DILocation(line: 994, scope: !5382, inlinedAt: !6796)
!6907 = !DILocation(line: 0, scope: !115, inlinedAt: !6906)
!6908 = !DILocation(line: 73, scope: !115, inlinedAt: !6906)
!6909 = !DILocation(line: 75, scope: !115, inlinedAt: !6906)
!6910 = !DILocation(line: 77, scope: !115, inlinedAt: !6906)
!6911 = !DILocation(line: 79, scope: !115, inlinedAt: !6906)
!6912 = !DILocation(line: 81, scope: !115, inlinedAt: !6906)
!6913 = !DILocation(line: 396, scope: !21, inlinedAt: !6914)
!6914 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6906)
!6915 = !DILocation(line: 85, scope: !115, inlinedAt: !6906)
!6916 = !DILocation(line: 73, scope: !115, inlinedAt: !6917)
!6917 = distinct !DILocation(line: 996, scope: !5382, inlinedAt: !6796)
!6918 = !DILocation(line: 75, scope: !115, inlinedAt: !6917)
!6919 = !DILocation(line: 67, scope: !115, inlinedAt: !6920)
!6920 = distinct !DILocation(line: 997, scope: !5382, inlinedAt: !6796)
!6921 = !DILocation(line: 0, scope: !115, inlinedAt: !6920)
!6922 = !DILocation(line: 73, scope: !115, inlinedAt: !6920)
!6923 = !DILocation(line: 75, scope: !115, inlinedAt: !6920)
!6924 = !DILocation(line: 77, scope: !115, inlinedAt: !6920)
!6925 = !DILocation(line: 79, scope: !115, inlinedAt: !6920)
!6926 = !DILocation(line: 81, scope: !115, inlinedAt: !6920)
!6927 = !DILocation(line: 396, scope: !21, inlinedAt: !6928)
!6928 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6920)
!6929 = !DILocation(line: 85, scope: !115, inlinedAt: !6920)
!6930 = !DILocation(line: 67, scope: !115, inlinedAt: !6931)
!6931 = distinct !DILocation(line: 998, scope: !5382, inlinedAt: !6796)
!6932 = !DILocation(line: 0, scope: !115, inlinedAt: !6931)
!6933 = !DILocation(line: 73, scope: !115, inlinedAt: !6931)
!6934 = !DILocation(line: 75, scope: !115, inlinedAt: !6931)
!6935 = !DILocation(line: 77, scope: !115, inlinedAt: !6931)
!6936 = !DILocation(line: 79, scope: !115, inlinedAt: !6931)
!6937 = !DILocation(line: 81, scope: !115, inlinedAt: !6931)
!6938 = !DILocation(line: 396, scope: !21, inlinedAt: !6939)
!6939 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6931)
!6940 = !DILocation(line: 85, scope: !115, inlinedAt: !6931)
!6941 = !DILocation(line: 948, scope: !5342, inlinedAt: !6942)
!6942 = distinct !DILocation(line: 1000, scope: !5382, inlinedAt: !6796)
!6943 = !DILocation(line: 0, scope: !5342, inlinedAt: !6942)
!6944 = !DILocation(line: 67, scope: !115, inlinedAt: !6945)
!6945 = distinct !DILocation(line: 958, scope: !5342, inlinedAt: !6942)
!6946 = !DILocation(line: 396, scope: !21, inlinedAt: !6947)
!6947 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6945)
!6948 = !DILocation(line: 0, scope: !115, inlinedAt: !6945)
!6949 = !DILocation(line: 67, scope: !115, inlinedAt: !6950)
!6950 = distinct !DILocation(line: 950, scope: !5342, inlinedAt: !6942)
!6951 = !DILocation(line: 69, scope: !115, inlinedAt: !6950)
!6952 = !DILocation(line: 0, scope: !115, inlinedAt: !6950)
!6953 = !DILocation(line: 72, scope: !115, inlinedAt: !6950)
!6954 = !DILocation(line: 73, scope: !115, inlinedAt: !6950)
!6955 = !DILocation(line: 75, scope: !115, inlinedAt: !6950)
!6956 = !DILocation(line: 77, scope: !115, inlinedAt: !6950)
!6957 = !DILocation(line: 78, scope: !115, inlinedAt: !6950)
!6958 = !DILocation(line: 79, scope: !115, inlinedAt: !6950)
!6959 = !DILocation(line: 81, scope: !115, inlinedAt: !6950)
!6960 = !DILocation(line: 396, scope: !21, inlinedAt: !6961)
!6961 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !6950)
!6962 = !DILocation(line: 392, scope: !21, inlinedAt: !6963)
!6963 = distinct !DILocation(line: 84, scope: !115, inlinedAt: !6950)
!6964 = !DILocation(line: 85, scope: !115, inlinedAt: !6950)
!6965 = !DILocation(line: 951, scope: !5342, inlinedAt: !6942)
!6966 = !DILocation(line: 394, scope: !21, inlinedAt: !6961)
!6967 = !DILocation(line: 73, scope: !115, inlinedAt: !6945)
!6968 = !DILocation(line: 75, scope: !115, inlinedAt: !6945)
!6969 = !DILocation(line: 77, scope: !115, inlinedAt: !6945)
!6970 = !DILocation(line: 79, scope: !115, inlinedAt: !6945)
!6971 = !DILocation(line: 81, scope: !115, inlinedAt: !6945)
!6972 = !DILocation(line: 85, scope: !115, inlinedAt: !6945)
!6973 = !DILocation(line: 959, scope: !5342, inlinedAt: !6942)
!6974 = !DILocation(line: 944, scope: !5342, inlinedAt: !6942)
!6975 = !DILocation(line: 1017, scope: !5652, inlinedAt: !6976)
!6976 = distinct !DILocation(line: 1105, scope: !6401, inlinedAt: !6786)
!6977 = !DILocation(line: 85, scope: !115, inlinedAt: !6978)
!6978 = distinct !DILocation(line: 1019, scope: !5652, inlinedAt: !6976)
!6979 = !DILocation(line: 85, scope: !115, inlinedAt: !6980)
!6980 = distinct !DILocation(line: 1021, scope: !5652, inlinedAt: !6976)
!6981 = !DILocation(line: 85, scope: !115, inlinedAt: !6982)
!6982 = distinct !DILocation(line: 1021, scope: !5652, inlinedAt: !6976)
!6983 = !DILocation(line: 85, scope: !115, inlinedAt: !6984)
!6984 = distinct !DILocation(line: 1023, scope: !5652, inlinedAt: !6976)
!6985 = !DILocation(line: 85, scope: !115, inlinedAt: !6986)
!6986 = distinct !DILocation(line: 1024, scope: !5652, inlinedAt: !6976)
!6987 = !DILocation(line: 85, scope: !115, inlinedAt: !6988)
!6988 = distinct !DILocation(line: 1026, scope: !5652, inlinedAt: !6976)
!6989 = !DILocation(line: 85, scope: !115, inlinedAt: !6990)
!6990 = distinct !DILocation(line: 1027, scope: !5652, inlinedAt: !6976)
!6991 = !DILocation(line: 85, scope: !115, inlinedAt: !6992)
!6992 = distinct !DILocation(line: 1027, scope: !5652, inlinedAt: !6976)
!6993 = !DILocation(line: 85, scope: !115, inlinedAt: !6994)
!6994 = distinct !DILocation(line: 1029, scope: !5652, inlinedAt: !6976)
!6995 = !DILocation(line: 85, scope: !115, inlinedAt: !6996)
!6996 = distinct !DILocation(line: 1029, scope: !5652, inlinedAt: !6976)
!6997 = !DILocation(line: 85, scope: !115, inlinedAt: !6998)
!6998 = distinct !DILocation(line: 1030, scope: !5652, inlinedAt: !6976)
!6999 = !DILocation(line: 85, scope: !115, inlinedAt: !7000)
!7000 = distinct !DILocation(line: 1032, scope: !5652, inlinedAt: !6976)
!7001 = !DILocation(line: 85, scope: !115, inlinedAt: !7002)
!7002 = distinct !DILocation(line: 1032, scope: !5652, inlinedAt: !6976)
!7003 = !DILocation(line: 85, scope: !115, inlinedAt: !7004)
!7004 = distinct !DILocation(line: 1033, scope: !5652, inlinedAt: !6976)
!7005 = !DILocation(line: 85, scope: !115, inlinedAt: !7006)
!7006 = distinct !DILocation(line: 1033, scope: !5652, inlinedAt: !6976)
!7007 = !DILocation(line: 85, scope: !115, inlinedAt: !7008)
!7008 = distinct !DILocation(line: 1035, scope: !5652, inlinedAt: !6976)
!7009 = !DILocation(line: 85, scope: !115, inlinedAt: !7010)
!7010 = distinct !DILocation(line: 1036, scope: !5652, inlinedAt: !6976)
!7011 = !DILocation(line: 85, scope: !115, inlinedAt: !7012)
!7012 = distinct !DILocation(line: 1037, scope: !5652, inlinedAt: !6976)
!7013 = !DILocation(line: 85, scope: !115, inlinedAt: !7014)
!7014 = distinct !DILocation(line: 1039, scope: !5652, inlinedAt: !6976)
!7015 = !DILocation(line: 85, scope: !115, inlinedAt: !7016)
!7016 = distinct !DILocation(line: 1040, scope: !5652, inlinedAt: !6976)
!7017 = !DILocation(line: 85, scope: !115, inlinedAt: !7018)
!7018 = distinct !DILocation(line: 1041, scope: !5652, inlinedAt: !6976)
!7019 = !DILocation(line: 85, scope: !115, inlinedAt: !7020)
!7020 = distinct !DILocation(line: 1041, scope: !5652, inlinedAt: !6976)
!7021 = !DILocation(line: 85, scope: !115, inlinedAt: !7022)
!7022 = distinct !DILocation(line: 1043, scope: !5652, inlinedAt: !6976)
!7023 = !DILocation(line: 85, scope: !115, inlinedAt: !7024)
!7024 = distinct !DILocation(line: 1044, scope: !5652, inlinedAt: !6976)
!7025 = !DILocation(line: 85, scope: !115, inlinedAt: !7026)
!7026 = distinct !DILocation(line: 1044, scope: !5652, inlinedAt: !6976)
!7027 = !DILocation(line: 85, scope: !115, inlinedAt: !7028)
!7028 = distinct !DILocation(line: 1045, scope: !5652, inlinedAt: !6976)
!7029 = !DILocation(line: 85, scope: !115, inlinedAt: !7030)
!7030 = distinct !DILocation(line: 1047, scope: !5652, inlinedAt: !6976)
!7031 = !DILocation(line: 85, scope: !115, inlinedAt: !7032)
!7032 = distinct !DILocation(line: 1048, scope: !5652, inlinedAt: !6976)
!7033 = !DILocation(line: 85, scope: !115, inlinedAt: !7034)
!7034 = distinct !DILocation(line: 1048, scope: !5652, inlinedAt: !6976)
!7035 = !DILocation(line: 85, scope: !115, inlinedAt: !7036)
!7036 = distinct !DILocation(line: 1049, scope: !5652, inlinedAt: !6976)
!7037 = !DILocation(line: 85, scope: !115, inlinedAt: !7038)
!7038 = distinct !DILocation(line: 1049, scope: !5652, inlinedAt: !6976)
!7039 = !DILocation(line: 85, scope: !115, inlinedAt: !7040)
!7040 = distinct !DILocation(line: 1051, scope: !5652, inlinedAt: !6976)
!7041 = !DILocation(line: 85, scope: !115, inlinedAt: !7042)
!7042 = distinct !DILocation(line: 1051, scope: !5652, inlinedAt: !6976)
!7043 = !DILocation(line: 85, scope: !115, inlinedAt: !7044)
!7044 = distinct !DILocation(line: 1052, scope: !5652, inlinedAt: !6976)
!7045 = !DILocation(line: 85, scope: !115, inlinedAt: !7046)
!7046 = distinct !DILocation(line: 1053, scope: !5652, inlinedAt: !6976)
!7047 = !DILocation(line: 85, scope: !115, inlinedAt: !7048)
!7048 = distinct !DILocation(line: 1055, scope: !5652, inlinedAt: !6976)
!7049 = !DILocation(line: 85, scope: !115, inlinedAt: !7050)
!7050 = distinct !DILocation(line: 1055, scope: !5652, inlinedAt: !6976)
!7051 = !DILocation(line: 85, scope: !115, inlinedAt: !7052)
!7052 = distinct !DILocation(line: 1056, scope: !5652, inlinedAt: !6976)
!7053 = !DILocation(line: 85, scope: !115, inlinedAt: !7054)
!7054 = distinct !DILocation(line: 1057, scope: !5652, inlinedAt: !6976)
!7055 = !DILocation(line: 85, scope: !115, inlinedAt: !7056)
!7056 = distinct !DILocation(line: 1057, scope: !5652, inlinedAt: !6976)
!7057 = !DILocation(line: 85, scope: !115, inlinedAt: !7058)
!7058 = distinct !DILocation(line: 1059, scope: !5652, inlinedAt: !6976)
!7059 = !DILocation(line: 85, scope: !115, inlinedAt: !7060)
!7060 = distinct !DILocation(line: 1059, scope: !5652, inlinedAt: !6976)
!7061 = !DILocation(line: 85, scope: !115, inlinedAt: !7062)
!7062 = distinct !DILocation(line: 1060, scope: !5652, inlinedAt: !6976)
!7063 = !DILocation(line: 85, scope: !115, inlinedAt: !7064)
!7064 = distinct !DILocation(line: 1060, scope: !5652, inlinedAt: !6976)
!7065 = !DILocation(line: 85, scope: !115, inlinedAt: !7066)
!7066 = distinct !DILocation(line: 1061, scope: !5652, inlinedAt: !6976)
!7067 = !DILocation(line: 85, scope: !115, inlinedAt: !7068)
!7068 = distinct !DILocation(line: 1063, scope: !5652, inlinedAt: !6976)
!7069 = !DILocation(line: 85, scope: !115, inlinedAt: !7070)
!7070 = distinct !DILocation(line: 1063, scope: !5652, inlinedAt: !6976)
!7071 = !DILocation(line: 85, scope: !115, inlinedAt: !7072)
!7072 = distinct !DILocation(line: 1064, scope: !5652, inlinedAt: !6976)
!7073 = !DILocation(line: 85, scope: !115, inlinedAt: !7074)
!7074 = distinct !DILocation(line: 1064, scope: !5652, inlinedAt: !6976)
!7075 = !DILocation(line: 85, scope: !115, inlinedAt: !7076)
!7076 = distinct !DILocation(line: 1065, scope: !5652, inlinedAt: !6976)
!7077 = !DILocation(line: 85, scope: !115, inlinedAt: !7078)
!7078 = distinct !DILocation(line: 1065, scope: !5652, inlinedAt: !6976)
!7079 = !DILocation(line: 85, scope: !115, inlinedAt: !7080)
!7080 = distinct !DILocation(line: 1067, scope: !5652, inlinedAt: !6976)
!7081 = !DILocation(line: 85, scope: !115, inlinedAt: !7082)
!7082 = distinct !DILocation(line: 1068, scope: !5652, inlinedAt: !6976)
!7083 = !DILocation(line: 85, scope: !115, inlinedAt: !7084)
!7084 = distinct !DILocation(line: 1069, scope: !5652, inlinedAt: !6976)
!7085 = !DILocation(line: 85, scope: !115, inlinedAt: !7086)
!7086 = distinct !DILocation(line: 1070, scope: !5652, inlinedAt: !6976)
!7087 = !DILocation(line: 948, scope: !5342, inlinedAt: !7088)
!7088 = distinct !DILocation(line: 1072, scope: !5652, inlinedAt: !6976)
!7089 = !DILocation(line: 0, scope: !5342, inlinedAt: !7088)
!7090 = !DILocation(line: 67, scope: !115, inlinedAt: !7091)
!7091 = distinct !DILocation(line: 958, scope: !5342, inlinedAt: !7088)
!7092 = !DILocation(line: 396, scope: !21, inlinedAt: !7093)
!7093 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !7091)
!7094 = !DILocation(line: 0, scope: !115, inlinedAt: !7091)
!7095 = !DILocation(line: 67, scope: !115, inlinedAt: !7096)
!7096 = distinct !DILocation(line: 950, scope: !5342, inlinedAt: !7088)
!7097 = !DILocation(line: 69, scope: !115, inlinedAt: !7096)
!7098 = !DILocation(line: 0, scope: !115, inlinedAt: !7096)
!7099 = !DILocation(line: 72, scope: !115, inlinedAt: !7096)
!7100 = !DILocation(line: 73, scope: !115, inlinedAt: !7096)
!7101 = !DILocation(line: 75, scope: !115, inlinedAt: !7096)
!7102 = !DILocation(line: 77, scope: !115, inlinedAt: !7096)
!7103 = !DILocation(line: 78, scope: !115, inlinedAt: !7096)
!7104 = !DILocation(line: 79, scope: !115, inlinedAt: !7096)
!7105 = !DILocation(line: 81, scope: !115, inlinedAt: !7096)
!7106 = !DILocation(line: 396, scope: !21, inlinedAt: !7107)
!7107 = distinct !DILocation(line: 83, scope: !115, inlinedAt: !7096)
!7108 = !DILocation(line: 392, scope: !21, inlinedAt: !7109)
!7109 = distinct !DILocation(line: 84, scope: !115, inlinedAt: !7096)
!7110 = !DILocation(line: 85, scope: !115, inlinedAt: !7096)
!7111 = !DILocation(line: 951, scope: !5342, inlinedAt: !7088)
!7112 = !DILocation(line: 394, scope: !21, inlinedAt: !7107)
!7113 = !DILocation(line: 73, scope: !115, inlinedAt: !7091)
!7114 = !DILocation(line: 75, scope: !115, inlinedAt: !7091)
!7115 = !DILocation(line: 77, scope: !115, inlinedAt: !7091)
!7116 = !DILocation(line: 79, scope: !115, inlinedAt: !7091)
!7117 = !DILocation(line: 81, scope: !115, inlinedAt: !7091)
!7118 = !DILocation(line: 85, scope: !115, inlinedAt: !7091)
!7119 = !DILocation(line: 959, scope: !5342, inlinedAt: !7088)
!7120 = !DILocation(line: 944, scope: !5342, inlinedAt: !7088)
!7121 = !DILocation(line: 1110, scope: !6401, inlinedAt: !6786)
!7122 = !DILocation(line: 1112, scope: !6401, inlinedAt: !6786)
!7123 = !{!7124}
!7124 = distinct !{!7124, !7125, !"tcl.ipow: %ecvar"}
!7125 = distinct !{!7125, !"tcl.ipow"}
!7126 = !DILocation(line: 116, scope: !1345, inlinedAt: !7127)
!7127 = distinct !DILocation(line: 1112, scope: !6401, inlinedAt: !6786)
!7128 = !DILocation(line: 116, scope: !1345, inlinedAt: !7129)
!7129 = distinct !DILocation(line: 1112, scope: !6401, inlinedAt: !6786)
!7130 = !DILocation(line: 1113, scope: !6401, inlinedAt: !6786)
!7131 = !DILocation(line: 1142, scope: !6749)
!7132 = !DILocation(line: 1145, scope: !6749)
!7133 = !DILocation(line: 894, scope: !5319, inlinedAt: !7134)
!7134 = distinct !DILocation(line: 1146, scope: !6749)
!7135 = !DILocation(line: 156, scope: !265, inlinedAt: !7136)
!7136 = distinct !DILocation(line: 894, scope: !5319, inlinedAt: !7134)
!7137 = !DILocation(line: 166, scope: !265, inlinedAt: !7136)
!7138 = !DILocation(line: 896, scope: !5319, inlinedAt: !7134)
!7139 = !DILocation(line: 902, scope: !5319, inlinedAt: !7134)
!7140 = !DILocation(line: 904, scope: !5319, inlinedAt: !7134)
!7141 = !DILocation(line: 905, scope: !5319, inlinedAt: !7134)
!7142 = !DILocation(line: 907, scope: !5319, inlinedAt: !7134)
!7143 = !DILocation(line: 910, scope: !5319, inlinedAt: !7134)
!7144 = !DILocation(line: 912, scope: !5319, inlinedAt: !7134)
!7145 = !{!7146}
!7146 = distinct !{!7146, !7147, !"tcl.powi: %ecvar"}
!7147 = distinct !{!7147, !"tcl.powi"}
!7148 = !DILocation(line: 116, scope: !1345, inlinedAt: !7149)
!7149 = distinct !DILocation(line: 912, scope: !5319, inlinedAt: !7134)
!7150 = !DILocation(line: 116, scope: !1345, inlinedAt: !7151)
!7151 = distinct !DILocation(line: 912, scope: !5319, inlinedAt: !7134)
!7152 = !DILocation(line: 913, scope: !5319, inlinedAt: !7134)
!7153 = !DILocation(line: 1146, scope: !6749)
!7154 = distinct !DISubprogram(name: "tcl.getresult", scope: !864, file: !1273, type: !7155, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !3)
!7155 = !DISubroutineType(types: !7156)
!7156 = !{!998}
!7157 = !DILocation(line: 3942, scope: !7154)
!7158 = !DILocation(line: 38, scope: !1004, inlinedAt: !7159)
!7159 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !7160)
!7160 = distinct !DILocation(line: 3944, scope: !7154)
!7161 = !DILocation(line: 39, scope: !1004, inlinedAt: !7159)
!7162 = !DILocation(line: 3945, scope: !7154)
!7163 = distinct !DISubprogram(name: "tcl.getreturnopts", scope: !864, file: !1273, type: !1304, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7164)
!7164 = !{!7165}
!7165 = !DILocalVariable(name: "returnCode", arg: 1, scope: !7163, file: !2, type: !10)
!7166 = !DILocation(line: 3960, scope: !7163)
!7167 = !DILocation(line: 3961, scope: !7163)
!7168 = !DILocation(line: 385, scope: !995, inlinedAt: !7169)
!7169 = distinct !DILocation(line: 3961, scope: !7163)
!7170 = !DILocation(line: 386, scope: !995, inlinedAt: !7169)
!7171 = !DILocation(line: 39, scope: !1004, inlinedAt: !7172)
!7172 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !7173)
!7173 = distinct !DILocation(line: 3963, scope: !7163)
!7174 = !DILocation(line: 3964, scope: !7163)
!7175 = distinct !DISubprogram(name: "tcl.initExceptionOptions", scope: !864, file: !1273, type: !5030, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7176)
!7176 = !{!7177, !7178}
!7177 = !DILocalVariable(name: "objPtr", arg: 1, scope: !7175, file: !2, type: !998)
!7178 = !DILocalVariable(name: "dictPtr", arg: 2, scope: !7175, file: !2, type: !998)
!7179 = !DILocation(line: 3977, scope: !7175)
!7180 = !DILocation(line: 3978, scope: !7175)
!7181 = !DILocation(line: 3979, scope: !7175)
!7182 = !DILocation(line: 3981, scope: !7175)
!7183 = !DILocation(line: 3986, scope: !7175)
!7184 = !DILocation(line: 3987, scope: !7175)
!7185 = !DILocation(line: 3988, scope: !7175)
!7186 = !DILocation(line: 3990, scope: !7175)
!7187 = !DILocation(line: 3991, scope: !7175)
!7188 = distinct !DISubprogram(name: "tcl.initExceptionSimple", scope: !864, file: !1273, type: !2061, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7189)
!7189 = !{!7190, !7191}
!7190 = !DILocalVariable(name: "message", arg: 1, scope: !7188, file: !2, type: !998)
!7191 = !DILocalVariable(name: "errorcode", arg: 2, scope: !7188, file: !2, type: !998)
!7192 = !DILocation(line: 4005, scope: !7188)
!7193 = !DILocation(line: 4006, scope: !7188)
!7194 = !DILocation(line: 4007, scope: !7188)
!7195 = !DILocation(line: 4008, scope: !7188)
!7196 = !DILocation(line: 4009, scope: !7188)
!7197 = !DILocation(line: 385, scope: !995, inlinedAt: !7198)
!7198 = distinct !DILocation(line: 4009, scope: !7188)
!7199 = !DILocation(line: 386, scope: !995, inlinedAt: !7198)
!7200 = !DILocation(line: 4010, scope: !7188)
!7201 = !DILocation(line: 116, scope: !1345, inlinedAt: !7202)
!7202 = distinct !DILocation(line: 4010, scope: !7188)
!7203 = !DILocation(line: 4011, scope: !7188)
!7204 = !DILocation(line: 4012, scope: !7188)
!7205 = !DILocation(line: 39, scope: !1004, inlinedAt: !7206)
!7206 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !7207)
!7207 = distinct !DILocation(line: 4013, scope: !7188)
!7208 = !DILocation(line: 4014, scope: !7188)
!7209 = !DILocation(line: 71, scope: !1020, inlinedAt: !7210)
!7210 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !7211)
!7211 = distinct !DILocation(line: 4016, scope: !7188)
!7212 = !DILocation(line: 72, scope: !1020, inlinedAt: !7210)
!7213 = !DILocation(line: 73, scope: !1020, inlinedAt: !7210)
!7214 = !DILocation(line: 75, scope: !1020, inlinedAt: !7210)
!7215 = !DILocation(line: 76, scope: !1020, inlinedAt: !7210)
!7216 = !DILocation(line: 77, scope: !1020, inlinedAt: !7210)
!7217 = !DILocation(line: 79, scope: !1020, inlinedAt: !7210)
!7218 = !DILocation(line: 80, scope: !1020, inlinedAt: !7210)
!7219 = !DILocation(line: 4019, scope: !7188)
!7220 = !DILocation(line: 4020, scope: !7188)
!7221 = !DILocation(line: 4021, scope: !7188)
!7222 = !DILocation(line: 71, scope: !1020, inlinedAt: !7223)
!7223 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !7224)
!7224 = distinct !DILocation(line: 4023, scope: !7188)
!7225 = !DILocation(line: 72, scope: !1020, inlinedAt: !7223)
!7226 = !DILocation(line: 73, scope: !1020, inlinedAt: !7223)
!7227 = !DILocation(line: 75, scope: !1020, inlinedAt: !7223)
!7228 = !DILocation(line: 76, scope: !1020, inlinedAt: !7223)
!7229 = !DILocation(line: 77, scope: !1020, inlinedAt: !7223)
!7230 = !DILocation(line: 79, scope: !1020, inlinedAt: !7223)
!7231 = !DILocation(line: 80, scope: !1020, inlinedAt: !7223)
!7232 = !DILocation(line: 4024, scope: !7188)
!7233 = !DILocation(line: 4025, scope: !7188)
!7234 = !DILocation(line: 4027, scope: !7188)
!7235 = !DILocation(line: 4028, scope: !7188)
!7236 = !DILocation(line: 4029, scope: !7188)
!7237 = !DILocation(line: 4030, scope: !7188)
!7238 = distinct !DISubprogram(name: "tcl.processReturn", scope: !864, file: !1273, type: !7239, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7241)
!7239 = !DISubroutineType(types: !7240)
!7240 = !{!9, !998, !9, !9, !998}
!7241 = !{!7242, !7243, !7244, !7245}
!7242 = !DILocalVariable(name: "result", arg: 1, scope: !7238, file: !2, type: !998)
!7243 = !DILocalVariable(name: "code", arg: 2, scope: !7238, file: !2, type: !9)
!7244 = !DILocalVariable(name: "level", arg: 3, scope: !7238, file: !2, type: !9)
!7245 = !DILocalVariable(name: "returnOpts", arg: 4, scope: !7238, file: !2, type: !998)
!7246 = !DILocation(line: 4049, scope: !7238)
!7247 = !DILocation(line: 4050, scope: !7238)
!7248 = !DILocation(line: 4051, scope: !7238)
!7249 = !DILocation(line: 4052, scope: !7238)
!7250 = !DILocation(line: 4053, scope: !7238)
!7251 = !DILocation(line: 4054, scope: !7238)
!7252 = !DILocation(line: 4055, scope: !7238)
!7253 = !DILocation(line: 4056, scope: !7238)
!7254 = !DILocation(line: 4057, scope: !7238)
!7255 = !DILocation(line: 4058, scope: !7238)
!7256 = !DILocation(line: 4060, scope: !7238)
!7257 = !DILocation(line: 71, scope: !1020, inlinedAt: !7258)
!7258 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !7259)
!7259 = distinct !DILocation(line: 4062, scope: !7238)
!7260 = !DILocation(line: 72, scope: !1020, inlinedAt: !7258)
!7261 = !DILocation(line: 73, scope: !1020, inlinedAt: !7258)
!7262 = !DILocation(line: 75, scope: !1020, inlinedAt: !7258)
!7263 = !DILocation(line: 76, scope: !1020, inlinedAt: !7258)
!7264 = !DILocation(line: 77, scope: !1020, inlinedAt: !7258)
!7265 = !DILocation(line: 79, scope: !1020, inlinedAt: !7258)
!7266 = !DILocation(line: 80, scope: !1020, inlinedAt: !7258)
!7267 = !DILocation(line: 4063, scope: !7238)
!7268 = !DILocation(line: 4065, scope: !7238)
!7269 = !DILocation(line: 385, scope: !995, inlinedAt: !7270)
!7270 = distinct !DILocation(line: 4065, scope: !7238)
!7271 = !DILocation(line: 386, scope: !995, inlinedAt: !7270)
!7272 = !DILocation(line: 4066, scope: !7238)
!7273 = !DILocation(line: 4068, scope: !7238)
!7274 = !DILocation(line: 4070, scope: !7238)
!7275 = !DILocation(line: 38, scope: !1004, inlinedAt: !7276)
!7276 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !7277)
!7277 = distinct !DILocation(line: 4071, scope: !7238)
!7278 = !DILocation(line: 4072, scope: !7238)
!7279 = !DILocation(line: 0, scope: !7238)
!7280 = !DILocation(line: 4074, scope: !7238)
!7281 = !DILocation(line: 4076, scope: !7238)
!7282 = !DILocation(line: 4077, scope: !7238)
!7283 = !DILocation(line: 4078, scope: !7238)
!7284 = !DILocation(line: 71, scope: !1020, inlinedAt: !7285)
!7285 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !7286)
!7286 = distinct !DILocation(line: 4080, scope: !7238)
!7287 = !DILocation(line: 72, scope: !1020, inlinedAt: !7285)
!7288 = !DILocation(line: 73, scope: !1020, inlinedAt: !7285)
!7289 = !DILocation(line: 75, scope: !1020, inlinedAt: !7285)
!7290 = !DILocation(line: 76, scope: !1020, inlinedAt: !7285)
!7291 = !DILocation(line: 77, scope: !1020, inlinedAt: !7285)
!7292 = !DILocation(line: 79, scope: !1020, inlinedAt: !7285)
!7293 = !DILocation(line: 80, scope: !1020, inlinedAt: !7285)
!7294 = !DILocation(line: 4081, scope: !7238)
!7295 = !DILocation(line: 4082, scope: !7238)
!7296 = !DILocation(line: 4084, scope: !7238)
!7297 = !DILocation(line: 4085, scope: !7238)
!7298 = !DILocation(line: 4087, scope: !7238)
!7299 = !DILocation(line: 116, scope: !1345, inlinedAt: !7300)
!7300 = distinct !DILocation(line: 4087, scope: !7238)
!7301 = !DILocation(line: 4088, scope: !7238)
!7302 = !DILocation(line: 4089, scope: !7238)
!7303 = !DILocation(line: 4091, scope: !7238)
!7304 = !DILocation(line: 4092, scope: !7238)
!7305 = !DILocation(line: 4094, scope: !7238)
!7306 = !DILocation(line: 38, scope: !1004, inlinedAt: !7307)
!7307 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !7308)
!7308 = distinct !DILocation(line: 4095, scope: !7238)
!7309 = !DILocation(line: 39, scope: !1004, inlinedAt: !7307)
!7310 = !DILocation(line: 4096, scope: !7238)
!7311 = !DILocation(line: 4097, scope: !7238)
!7312 = !DILocation(line: 4098, scope: !7238)
!7313 = !DILocation(line: 4102, scope: !7238)
!7314 = !DILocation(line: 116, scope: !1345, inlinedAt: !7315)
!7315 = distinct !DILocation(line: 4102, scope: !7238)
!7316 = !DILocation(line: 4103, scope: !7238)
!7317 = !DILocation(line: 4104, scope: !7238)
!7318 = !DILocation(line: 4106, scope: !7238)
!7319 = !DILocation(line: 4107, scope: !7238)
!7320 = !DILocation(line: 116, scope: !1345, inlinedAt: !7321)
!7321 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !7322)
!7322 = distinct !DILocation(line: 4107, scope: !7238)
!7323 = !DILocation(line: 138, scope: !1351, inlinedAt: !7322)
!7324 = !DILocation(line: 4110, scope: !7238)
!7325 = !DILocation(line: 385, scope: !995, inlinedAt: !7326)
!7326 = distinct !DILocation(line: 4110, scope: !7238)
!7327 = !DILocation(line: 386, scope: !995, inlinedAt: !7326)
!7328 = !DILocation(line: 72, scope: !1020, inlinedAt: !7329)
!7329 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !7330)
!7330 = distinct !DILocation(line: 4111, scope: !7238)
!7331 = !DILocation(line: 73, scope: !1020, inlinedAt: !7329)
!7332 = !DILocation(line: 75, scope: !1020, inlinedAt: !7329)
!7333 = !DILocation(line: 76, scope: !1020, inlinedAt: !7329)
!7334 = !DILocation(line: 77, scope: !1020, inlinedAt: !7329)
!7335 = !DILocation(line: 79, scope: !1020, inlinedAt: !7329)
!7336 = !DILocation(line: 80, scope: !1020, inlinedAt: !7329)
!7337 = !DILocation(line: 39, scope: !1004, inlinedAt: !7338)
!7338 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !7339)
!7339 = distinct !DILocation(line: 4112, scope: !7238)
!7340 = !DILocation(line: 4113, scope: !7238)
!7341 = !DILocation(line: 4114, scope: !7238)
!7342 = !DILocation(line: 4116, scope: !7238)
!7343 = !DILocation(line: 4118, scope: !7238)
!7344 = !DILocation(line: 4120, scope: !7238)
!7345 = !DILocation(line: 4121, scope: !7238)
!7346 = !DILocation(line: 4122, scope: !7238)
!7347 = !DILocation(line: 4123, scope: !7238)
!7348 = !DILocation(line: 4124, scope: !7238)
!7349 = !DILocation(line: 4128, scope: !7238)
!7350 = !DILocation(line: 116, scope: !1345, inlinedAt: !7351)
!7351 = distinct !DILocation(line: 4128, scope: !7238)
!7352 = !DILocation(line: 4129, scope: !7238)
!7353 = !DILocation(line: 4130, scope: !7238)
!7354 = !DILocation(line: 4135, scope: !7238)
!7355 = !DILocation(line: 4138, scope: !7238)
!7356 = !DILocation(line: 4132, scope: !7238)
!7357 = !DILocation(line: 4140, scope: !7238)
!7358 = !DILocation(line: 116, scope: !1345, inlinedAt: !7359)
!7359 = distinct !DILocation(line: 4140, scope: !7238)
!7360 = !DILocation(line: 4141, scope: !7238)
!7361 = !DILocation(line: 4142, scope: !7238)
!7362 = !DILocation(line: 4144, scope: !7238)
!7363 = !DILocation(line: 4145, scope: !7238)
!7364 = !DILocation(line: 4147, scope: !7238)
!7365 = !DILocation(line: 4149, scope: !7238)
!7366 = !DILocation(line: 4150, scope: !7238)
!7367 = !DILocation(line: 4151, scope: !7238)
!7368 = !DILocation(line: 4153, scope: !7238)
!7369 = !DILocation(line: 4155, scope: !7238)
!7370 = !DILocation(line: 4156, scope: !7238)
!7371 = !DILocation(line: 4157, scope: !7238)
!7372 = distinct !DISubprogram(name: "tcl.handleExceptionResult", scope: !864, file: !1273, type: !7373, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7375)
!7373 = !DISubroutineType(types: !7374)
!7374 = !{!14, !9, !998}
!7375 = !{!7376, !7377}
!7376 = !DILocalVariable(name: "code", arg: 1, scope: !7372, file: !2, type: !9)
!7377 = !DILocalVariable(name: "result", arg: 2, scope: !7372, file: !2, type: !998)
!7378 = !DILocation(line: 4183, scope: !7372)
!7379 = !DILocation(line: 4184, scope: !7372)
!7380 = !DILocation(line: 38, scope: !1004, inlinedAt: !7381)
!7381 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !7382)
!7382 = distinct !DILocation(line: 4186, scope: !7372)
!7383 = !DILocation(line: 39, scope: !1004, inlinedAt: !7381)
!7384 = !DILocation(line: 4187, scope: !7372)
!7385 = !DILocation(line: 4189, scope: !7372)
!7386 = distinct !DISubprogram(name: "tcl.procedure.return", scope: !864, file: !1273, type: !7387, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7389)
!7387 = !DISubroutineType(types: !7388)
!7388 = !{!9, !10, !998, !976}
!7389 = !{!7390, !7391, !7392}
!7390 = !DILocalVariable(name: "code", arg: 1, scope: !7386, file: !2, type: !10)
!7391 = !DILocalVariable(name: "procName", arg: 2, scope: !7386, file: !2, type: !998)
!7392 = !DILocalVariable(name: "ecvar", arg: 3, scope: !7386, file: !2, type: !976)
!7393 = !DILocation(line: 4204, scope: !7386)
!7394 = !DILocation(line: 4205, scope: !7386)
!7395 = !DILocation(line: 371, scope: !4, inlinedAt: !7396)
!7396 = distinct !DILocation(line: 4206, scope: !7386)
!7397 = !DILocation(line: 4207, scope: !7386)
!7398 = !DILocation(line: 4215, scope: !7386)
!7399 = !DILocation(line: 4218, scope: !7386)
!7400 = !DILocation(line: 4219, scope: !7386)
!7401 = !DILocation(line: 4220, scope: !7386)
!7402 = !DILocation(line: 385, scope: !995, inlinedAt: !7403)
!7403 = distinct !DILocation(line: 4220, scope: !7386)
!7404 = !DILocation(line: 386, scope: !995, inlinedAt: !7403)
!7405 = !DILocation(line: 4221, scope: !7386)
!7406 = !DILocation(line: 4223, scope: !7386)
!7407 = !DILocation(line: 4224, scope: !7386)
!7408 = !DILocation(line: 4225, scope: !7386)
!7409 = !DILocation(line: 4227, scope: !7386)
!7410 = !DILocation(line: 385, scope: !995, inlinedAt: !7411)
!7411 = distinct !DILocation(line: 4227, scope: !7386)
!7412 = !DILocation(line: 386, scope: !995, inlinedAt: !7411)
!7413 = !DILocation(line: 4228, scope: !7386)
!7414 = !DILocation(line: 116, scope: !1345, inlinedAt: !7415)
!7415 = distinct !DILocation(line: 4228, scope: !7386)
!7416 = !DILocation(line: 4229, scope: !7386)
!7417 = !DILocation(line: 4230, scope: !7386)
!7418 = !DILocation(line: 4232, scope: !7386)
!7419 = !DILocation(line: 385, scope: !995, inlinedAt: !7420)
!7420 = distinct !DILocation(line: 4232, scope: !7386)
!7421 = !DILocation(line: 386, scope: !995, inlinedAt: !7420)
!7422 = !DILocation(line: 4233, scope: !7386)
!7423 = !DILocation(line: 116, scope: !1345, inlinedAt: !7424)
!7424 = distinct !DILocation(line: 4233, scope: !7386)
!7425 = !DILocation(line: 4234, scope: !7386)
!7426 = !DILocation(line: 4235, scope: !7386)
!7427 = !DILocation(line: 4237, scope: !7386)
!7428 = !DILocation(line: 4238, scope: !7386)
!7429 = distinct !DISubprogram(name: "tcl.logCommandInfo", scope: !864, file: !1273, type: !7430, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7432)
!7430 = !DISubroutineType(types: !7431)
!7431 = !{!657, !9, !9, !655, !655}
!7432 = !{!7433, !7434, !7435, !7436}
!7433 = !DILocalVariable(name: "code", arg: 1, scope: !7429, file: !2, type: !9)
!7434 = !DILocalVariable(name: "length", arg: 2, scope: !7429, file: !2, type: !9)
!7435 = !DILocalVariable(name: "command", arg: 3, scope: !7429, file: !2, type: !655)
!7436 = !DILocalVariable(name: "ellipsis", arg: 4, scope: !7429, file: !2, type: !655)
!7437 = !DILocation(line: 4267, scope: !7429)
!7438 = !DILocation(line: 4268, scope: !7429)
!7439 = !DILocation(line: 4269, scope: !7429)
!7440 = !DILocation(line: 4270, scope: !7429)
!7441 = !DILocation(line: 4272, scope: !7429)
!7442 = !DILocation(line: 4274, scope: !7429)
!7443 = !DILocation(line: 4275, scope: !7429)
!7444 = !DILocation(line: 385, scope: !995, inlinedAt: !7445)
!7445 = distinct !DILocation(line: 4275, scope: !7429)
!7446 = !DILocation(line: 386, scope: !995, inlinedAt: !7445)
!7447 = !DILocation(line: 4279, scope: !7429)
!7448 = !DILocation(line: 4281, scope: !7429)
!7449 = !DILocation(line: 4282, scope: !7429)
!7450 = distinct !DISubprogram(name: "tcl.setErrorLine", scope: !864, file: !1273, type: !7451, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7453)
!7451 = !DISubroutineType(types: !7452)
!7452 = !{!657, !14, !9, !9, !9, !655, !655}
!7453 = !{!7454, !7455, !7456, !7457, !7458, !7459}
!7454 = !DILocalVariable(name: "test", arg: 1, scope: !7450, file: !2, type: !14)
!7455 = !DILocalVariable(name: "code", arg: 2, scope: !7450, file: !2, type: !9)
!7456 = !DILocalVariable(name: "line", arg: 3, scope: !7450, file: !2, type: !9)
!7457 = !DILocalVariable(name: "length", arg: 4, scope: !7450, file: !2, type: !9)
!7458 = !DILocalVariable(name: "command", arg: 5, scope: !7450, file: !2, type: !655)
!7459 = !DILocalVariable(name: "ellipsis", arg: 6, scope: !7450, file: !2, type: !655)
!7460 = !DILocation(line: 4304, scope: !7450)
!7461 = !DILocation(line: 4306, scope: !7450)
!7462 = !DILocation(line: 4307, scope: !7450)
!7463 = !DILocation(line: 4268, scope: !7429, inlinedAt: !7464)
!7464 = distinct !DILocation(line: 4308, scope: !7450)
!7465 = !DILocation(line: 4269, scope: !7429, inlinedAt: !7464)
!7466 = !DILocation(line: 4270, scope: !7429, inlinedAt: !7464)
!7467 = !DILocation(line: 4272, scope: !7429, inlinedAt: !7464)
!7468 = !DILocation(line: 4274, scope: !7429, inlinedAt: !7464)
!7469 = !DILocation(line: 4275, scope: !7429, inlinedAt: !7464)
!7470 = !DILocation(line: 385, scope: !995, inlinedAt: !7471)
!7471 = distinct !DILocation(line: 4275, scope: !7429, inlinedAt: !7464)
!7472 = !DILocation(line: 386, scope: !995, inlinedAt: !7471)
!7473 = !DILocation(line: 4279, scope: !7429, inlinedAt: !7464)
!7474 = !DILocation(line: 4281, scope: !7429, inlinedAt: !7464)
!7475 = !DILocation(line: 4309, scope: !7450)
!7476 = !DILocation(line: 4311, scope: !7450)
!7477 = distinct !DISubprogram(name: "tcl.booleanTest", scope: !864, file: !1273, type: !1352, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7478)
!7478 = !{!7479}
!7479 = !DILocalVariable(name: "objPtr", arg: 1, scope: !7477, file: !2, type: !998)
!7480 = !DILocation(line: 4327, scope: !7477)
!7481 = !DILocation(line: 1327, scope: !2012, inlinedAt: !7482)
!7482 = distinct !DILocation(line: 4327, scope: !7477)
!7483 = !{!7484}
!7484 = distinct !{!7484, !7485, !"tcl.setFromAny: %typePtr"}
!7485 = distinct !{!7485, !"tcl.setFromAny"}
!7486 = !{!7487, !7488}
!7487 = distinct !{!7487, !7485, !"tcl.setFromAny: %interp"}
!7488 = distinct !{!7488, !7485, !"tcl.setFromAny: %objPtr"}
!7489 = !DILocation(line: 1328, scope: !2012, inlinedAt: !7482)
!7490 = !DILocation(line: 4328, scope: !7477)
!7491 = distinct !DISubprogram(name: "tcl.invoke.command", scope: !864, file: !1273, type: !7492, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7495)
!7492 = !DISubroutineType(types: !7493)
!7493 = !{!1382, !9, !1061, !7494, !976}
!7494 = !DIDerivedType(tag: DW_TAG_typedef, name: "CallFrame*", scope: !12, file: !11, line: 1516, baseType: !913)
!7495 = !{!7496, !7497, !7498, !7499}
!7496 = !DILocalVariable(name: "objc", arg: 1, scope: !7491, file: !2, type: !9)
!7497 = !DILocalVariable(name: "objv", arg: 2, scope: !7491, file: !2, type: !1061)
!7498 = !DILocalVariable(name: "frame", arg: 3, scope: !7491, file: !2, type: !7494)
!7499 = !DILocalVariable(name: "ecvar", arg: 4, scope: !7491, file: !2, type: !976)
!7500 = !DILocation(line: 4345, scope: !7491)
!7501 = !DILocation(line: 4346, scope: !7491)
!7502 = !DILocation(line: 4348, scope: !7491)
!7503 = !DILocation(line: 4349, scope: !7491)
!7504 = !DILocation(line: 4351, scope: !7491)
!7505 = !DILocation(line: 4352, scope: !7491)
!7506 = !DILocation(line: 4353, scope: !7491)
!7507 = !DILocation(line: 4354, scope: !7491)
!7508 = !DILocation(line: 4355, scope: !7491)
!7509 = !DILocation(line: 4356, scope: !7491)
!7510 = !DILocation(line: 4358, scope: !7491)
!7511 = !DILocation(line: 38, scope: !1004, inlinedAt: !7512)
!7512 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !7513)
!7513 = distinct !DILocation(line: 4359, scope: !7491)
!7514 = !DILocation(line: 39, scope: !1004, inlinedAt: !7512)
!7515 = !DILocation(line: 4360, scope: !7491)
!7516 = !DILocation(line: 4363, scope: !7491)
!7517 = !DILocation(line: 4364, scope: !7491)
!7518 = distinct !DISubprogram(name: "tcl.invoke.expanded", scope: !864, file: !1273, type: !7519, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7523)
!7519 = !DISubroutineType(types: !7520)
!7520 = !{!1382, !9, !1061, !7521, !976}
!7521 = !DIDerivedType(tag: DW_TAG_typedef, name: "bool*", scope: !12, file: !11, line: 699, baseType: !7522)
!7522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64)
!7523 = !{!7524, !7525, !7526, !7527}
!7524 = !DILocalVariable(name: "objc", arg: 1, scope: !7518, file: !2, type: !9)
!7525 = !DILocalVariable(name: "objv", arg: 2, scope: !7518, file: !2, type: !1061)
!7526 = !DILocalVariable(name: "flags", arg: 3, scope: !7518, file: !2, type: !7521)
!7527 = !DILocalVariable(name: "ecvar", arg: 4, scope: !7518, file: !2, type: !976)
!7528 = !DILocation(line: 4385, scope: !7518)
!7529 = !DILocation(line: 4386, scope: !7518)
!7530 = !DILocation(line: 4388, scope: !7518)
!7531 = !DILocation(line: 4394, scope: !7518)
!7532 = !DILocation(line: 4396, scope: !7518)
!7533 = !DILocation(line: 4398, scope: !7518)
!7534 = !DILocation(line: 4400, scope: !7518)
!7535 = !DILocation(line: 4401, scope: !7518)
!7536 = !DILocation(line: 4402, scope: !7518)
!7537 = !DILocation(line: 4403, scope: !7518)
!7538 = !DILocation(line: 4409, scope: !7518)
!7539 = !DILocation(line: 4410, scope: !7518)
!7540 = !DILocation(line: 0, scope: !7518)
!7541 = !DILocation(line: 4415, scope: !7518)
!7542 = !DILocation(line: 4421, scope: !7518)
!7543 = !DILocation(line: 4424, scope: !7518)
!7544 = !DILocation(line: 4425, scope: !7518)
!7545 = !DILocation(line: 4426, scope: !7518)
!7546 = !DILocation(line: 4427, scope: !7518)
!7547 = !DILocation(line: 4429, scope: !7518)
!7548 = !DILocation(line: 4430, scope: !7518)
!7549 = !DILocation(line: 4431, scope: !7518)
!7550 = !DILocation(line: 4432, scope: !7518)
!7551 = !DILocation(line: 4434, scope: !7518)
!7552 = !DILocation(line: 4436, scope: !7518)
!7553 = !DILocation(line: 4438, scope: !7518)
!7554 = !DILocation(line: 4440, scope: !7518)
!7555 = !DILocation(line: 4443, scope: !7518)
!7556 = !DILocation(line: 4444, scope: !7518)
!7557 = !DILocation(line: 4445, scope: !7518)
!7558 = !DILocation(line: 4447, scope: !7518)
!7559 = !DILocation(line: 38, scope: !1004, inlinedAt: !7560)
!7560 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !7561)
!7561 = distinct !DILocation(line: 4448, scope: !7518)
!7562 = !DILocation(line: 39, scope: !1004, inlinedAt: !7560)
!7563 = !DILocation(line: 4449, scope: !7518)
!7564 = !DILocation(line: 4451, scope: !7518)
!7565 = !DILocation(line: 4452, scope: !7518)
!7566 = distinct !DISubprogram(name: "tcl.existsOrError", scope: !864, file: !1273, type: !7567, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7569)
!7567 = !DISubroutineType(types: !7568)
!7568 = !{!14, !14, !998, !998, !976}
!7569 = !{!7570, !7571, !7572, !7573}
!7570 = !DILocalVariable(name: "exists", arg: 1, scope: !7566, file: !2, type: !14)
!7571 = !DILocalVariable(name: "message", arg: 2, scope: !7566, file: !2, type: !998)
!7572 = !DILocalVariable(name: "exception", arg: 3, scope: !7566, file: !2, type: !998)
!7573 = !DILocalVariable(name: "ecvar", arg: 4, scope: !7566, file: !2, type: !976)
!7574 = !DILocation(line: 4469, scope: !7566)
!7575 = !DILocation(line: 4005, scope: !7188, inlinedAt: !7576)
!7576 = distinct !DILocation(line: 4471, scope: !7566)
!7577 = !DILocation(line: 4006, scope: !7188, inlinedAt: !7576)
!7578 = !DILocation(line: 4007, scope: !7188, inlinedAt: !7576)
!7579 = !DILocation(line: 4008, scope: !7188, inlinedAt: !7576)
!7580 = !DILocation(line: 4009, scope: !7188, inlinedAt: !7576)
!7581 = !DILocation(line: 385, scope: !995, inlinedAt: !7582)
!7582 = distinct !DILocation(line: 4009, scope: !7188, inlinedAt: !7576)
!7583 = !DILocation(line: 386, scope: !995, inlinedAt: !7582)
!7584 = !DILocation(line: 4010, scope: !7188, inlinedAt: !7576)
!7585 = !DILocation(line: 116, scope: !1345, inlinedAt: !7586)
!7586 = distinct !DILocation(line: 4010, scope: !7188, inlinedAt: !7576)
!7587 = !DILocation(line: 4011, scope: !7188, inlinedAt: !7576)
!7588 = !DILocation(line: 4012, scope: !7188, inlinedAt: !7576)
!7589 = !DILocation(line: 39, scope: !1004, inlinedAt: !7590)
!7590 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !7591)
!7591 = distinct !DILocation(line: 4013, scope: !7188, inlinedAt: !7576)
!7592 = !DILocation(line: 4014, scope: !7188, inlinedAt: !7576)
!7593 = !DILocation(line: 71, scope: !1020, inlinedAt: !7594)
!7594 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !7595)
!7595 = distinct !DILocation(line: 4016, scope: !7188, inlinedAt: !7576)
!7596 = !DILocation(line: 72, scope: !1020, inlinedAt: !7594)
!7597 = !DILocation(line: 73, scope: !1020, inlinedAt: !7594)
!7598 = !DILocation(line: 75, scope: !1020, inlinedAt: !7594)
!7599 = !DILocation(line: 76, scope: !1020, inlinedAt: !7594)
!7600 = !DILocation(line: 77, scope: !1020, inlinedAt: !7594)
!7601 = !DILocation(line: 79, scope: !1020, inlinedAt: !7594)
!7602 = !DILocation(line: 80, scope: !1020, inlinedAt: !7594)
!7603 = !DILocation(line: 4019, scope: !7188, inlinedAt: !7576)
!7604 = !DILocation(line: 4020, scope: !7188, inlinedAt: !7576)
!7605 = !DILocation(line: 4021, scope: !7188, inlinedAt: !7576)
!7606 = !DILocation(line: 71, scope: !1020, inlinedAt: !7607)
!7607 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !7608)
!7608 = distinct !DILocation(line: 4023, scope: !7188, inlinedAt: !7576)
!7609 = !DILocation(line: 72, scope: !1020, inlinedAt: !7607)
!7610 = !DILocation(line: 73, scope: !1020, inlinedAt: !7607)
!7611 = !DILocation(line: 75, scope: !1020, inlinedAt: !7607)
!7612 = !DILocation(line: 76, scope: !1020, inlinedAt: !7607)
!7613 = !DILocation(line: 77, scope: !1020, inlinedAt: !7607)
!7614 = !DILocation(line: 79, scope: !1020, inlinedAt: !7607)
!7615 = !DILocation(line: 80, scope: !1020, inlinedAt: !7607)
!7616 = !DILocation(line: 4024, scope: !7188, inlinedAt: !7576)
!7617 = !DILocation(line: 4025, scope: !7188, inlinedAt: !7576)
!7618 = !DILocation(line: 4027, scope: !7188, inlinedAt: !7576)
!7619 = !DILocation(line: 4028, scope: !7188, inlinedAt: !7576)
!7620 = !DILocation(line: 4029, scope: !7188, inlinedAt: !7576)
!7621 = !DILocation(line: 4471, scope: !7566)
!7622 = !DILocation(line: 4472, scope: !7566)
!7623 = !DILocation(line: 4474, scope: !7566)
!7624 = distinct !DISubprogram(name: "tcl.not.string", scope: !864, file: !1273, type: !7625, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7627)
!7625 = !DISubroutineType(types: !7626)
!7626 = !{!4074, !998, !976}
!7627 = !{!7628, !7629}
!7628 = !DILocalVariable(name: "value", arg: 1, scope: !7624, file: !2, type: !998)
!7629 = !DILocalVariable(name: "ecvar", arg: 2, scope: !7624, file: !2, type: !976)
!7630 = !DILocation(line: 4490, scope: !7624)
!7631 = !DILocation(line: 4491, scope: !7624)
!7632 = !DILocation(line: 4492, scope: !7624)
!7633 = !DILocation(line: 4493, scope: !7624)
!7634 = !DILocation(line: 4495, scope: !7624)
!7635 = !DILocation(line: 4496, scope: !7624)
!7636 = !DILocation(line: 4498, scope: !7624)
!7637 = distinct !DISubprogram(name: "var.value", scope: !864, file: !7638, type: !7639, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7642)
!7638 = !DIFile(filename: "varframe.tcl", directory: "/opt/tclquadcode/codegen")
!7639 = !DISubroutineType(types: !7640)
!7640 = !{!998, !7641}
!7641 = !DIDerivedType(tag: DW_TAG_typedef, name: "Var*", scope: !12, file: !11, line: 1515, baseType: !932)
!7642 = !{!7643}
!7643 = !DILocalVariable(name: "varPtr", arg: 1, scope: !7637, file: !2, type: !7641)
!7644 = !DILocation(line: 94, scope: !7637)
!7645 = distinct !DISubprogram(name: "var.defined", scope: !864, file: !7638, type: !7646, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7648)
!7646 = !DISubroutineType(types: !7647)
!7647 = !{!14, !7641}
!7648 = !{!7649}
!7649 = !DILocalVariable(name: "varPtr", arg: 1, scope: !7645, file: !2, type: !7641)
!7650 = !DILocation(line: 94, scope: !7637, inlinedAt: !7651)
!7651 = distinct !DILocation(line: 105, scope: !7645)
!7652 = !DILocation(line: 105, scope: !7645)
!7653 = distinct !DISubprogram(name: "var.value.set", scope: !864, file: !7638, type: !7654, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7656)
!7654 = !DISubroutineType(types: !7655)
!7655 = !{!657, !7641, !998}
!7656 = !{!7657, !7658}
!7657 = !DILocalVariable(name: "varPtr", arg: 1, scope: !7653, file: !2, type: !7641)
!7658 = !DILocalVariable(name: "valuePtr", arg: 2, scope: !7653, file: !2, type: !998)
!7659 = !DILocation(line: 116, scope: !7653)
!7660 = !DILocation(line: 117, scope: !7653)
!7661 = !DILocation(line: 118, scope: !7653)
!7662 = distinct !DISubprogram(name: "var.value.set.undefined", scope: !864, file: !7638, type: !7663, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7665)
!7663 = !DISubroutineType(types: !7664)
!7664 = !{!657, !7641}
!7665 = !{!7666}
!7666 = !DILocalVariable(name: "varPtr", arg: 1, scope: !7662, file: !2, type: !7641)
!7667 = !DILocation(line: 129, scope: !7662)
!7668 = !DILocation(line: 130, scope: !7662)
!7669 = !DILocation(line: 131, scope: !7662)
!7670 = !DILocation(line: 132, scope: !7662)
!7671 = distinct !DISubprogram(name: "var.array", scope: !864, file: !7638, type: !7672, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7674)
!7672 = !DISubroutineType(types: !7673)
!7673 = !{!1681, !7641}
!7674 = !{!7675}
!7675 = !DILocalVariable(name: "varPtr", arg: 1, scope: !7671, file: !2, type: !7641)
!7676 = !DILocation(line: 143, scope: !7671)
!7677 = !DILocation(line: 144, scope: !7671)
!7678 = distinct !DISubprogram(name: "var.link", scope: !864, file: !7638, type: !7679, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7681)
!7679 = !DISubroutineType(types: !7680)
!7680 = !{!7641, !7641}
!7681 = !{!7682}
!7682 = !DILocalVariable(name: "varPtr", arg: 1, scope: !7678, file: !2, type: !7641)
!7683 = !DILocation(line: 155, scope: !7678)
!7684 = !DILocation(line: 156, scope: !7678)
!7685 = distinct !DISubprogram(name: "var.flag", scope: !864, file: !7638, type: !7686, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7688)
!7686 = !DISubroutineType(types: !7687)
!7687 = !{!14, !7641, !9}
!7688 = !{!7689, !7690}
!7689 = !DILocalVariable(name: "varPtr", arg: 1, scope: !7685, file: !2, type: !7641)
!7690 = !DILocalVariable(name: "flag", arg: 2, scope: !7685, file: !2, type: !9)
!7691 = !DILocation(line: 167, scope: !7685)
!7692 = !DILocation(line: 168, scope: !7685)
!7693 = distinct !DISubprogram(name: "var.flag.set", scope: !864, file: !7638, type: !7694, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7696)
!7694 = !DISubroutineType(types: !7695)
!7695 = !{!657, !7641, !9}
!7696 = !{!7697, !7698}
!7697 = !DILocalVariable(name: "varPtr", arg: 1, scope: !7693, file: !2, type: !7641)
!7698 = !DILocalVariable(name: "flag", arg: 2, scope: !7693, file: !2, type: !9)
!7699 = !DILocation(line: 179, scope: !7693)
!7700 = !DILocation(line: 180, scope: !7693)
!7701 = !DILocation(line: 181, scope: !7693)
!7702 = distinct !DISubprogram(name: "var.flag.clear", scope: !864, file: !7638, type: !7694, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7703)
!7703 = !{!7704, !7705}
!7704 = !DILocalVariable(name: "varPtr", arg: 1, scope: !7702, file: !2, type: !7641)
!7705 = !DILocalVariable(name: "flag", arg: 2, scope: !7702, file: !2, type: !9)
!7706 = !DILocation(line: 192, scope: !7702)
!7707 = !DILocation(line: 193, scope: !7702)
!7708 = !DILocation(line: 194, scope: !7702)
!7709 = distinct !DISubprogram(name: "var.array.set", scope: !864, file: !7638, type: !7710, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7712)
!7710 = !DISubroutineType(types: !7711)
!7711 = !{!657, !7641, !1681}
!7712 = !{!7713, !7714}
!7713 = !DILocalVariable(name: "varPtr", arg: 1, scope: !7709, file: !2, type: !7641)
!7714 = !DILocalVariable(name: "tablePtr", arg: 2, scope: !7709, file: !2, type: !1681)
!7715 = !DILocation(line: 179, scope: !7693, inlinedAt: !7716)
!7716 = distinct !DILocation(line: 206, scope: !7709)
!7717 = !DILocation(line: 180, scope: !7693, inlinedAt: !7716)
!7718 = !DILocation(line: 116, scope: !7653, inlinedAt: !7719)
!7719 = distinct !DILocation(line: 207, scope: !7709)
!7720 = !DILocation(line: 117, scope: !7653, inlinedAt: !7719)
!7721 = !DILocation(line: 208, scope: !7709)
!7722 = distinct !DISubprogram(name: "var.link.set", scope: !864, file: !7638, type: !7723, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7725)
!7723 = !DISubroutineType(types: !7724)
!7724 = !{!657, !7641, !7641}
!7725 = !{!7726, !7727}
!7726 = !DILocalVariable(name: "varPtr", arg: 1, scope: !7722, file: !2, type: !7641)
!7727 = !DILocalVariable(name: "otherPtr", arg: 2, scope: !7722, file: !2, type: !7641)
!7728 = !DILocation(line: 179, scope: !7693, inlinedAt: !7729)
!7729 = distinct !DILocation(line: 220, scope: !7722)
!7730 = !DILocation(line: 180, scope: !7693, inlinedAt: !7729)
!7731 = !DILocation(line: 116, scope: !7653, inlinedAt: !7732)
!7732 = distinct !DILocation(line: 221, scope: !7722)
!7733 = !DILocation(line: 117, scope: !7653, inlinedAt: !7732)
!7734 = !DILocation(line: 222, scope: !7722)
!7735 = distinct !DISubprogram(name: "var.isScalar", scope: !864, file: !7638, type: !7646, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7736)
!7736 = !{!7737}
!7737 = !DILocalVariable(name: "varPtr", arg: 1, scope: !7735, file: !2, type: !7641)
!7738 = !DILocation(line: 167, scope: !7685, inlinedAt: !7739)
!7739 = distinct !DILocation(line: 233, scope: !7735)
!7740 = !DILocation(line: 168, scope: !7685, inlinedAt: !7739)
!7741 = !DILocation(line: 233, scope: !7735)
!7742 = distinct !DISubprogram(name: "var.isArray", scope: !864, file: !7638, type: !7646, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7743)
!7743 = !{!7744}
!7744 = !DILocalVariable(name: "varPtr", arg: 1, scope: !7742, file: !2, type: !7641)
!7745 = !DILocation(line: 167, scope: !7685, inlinedAt: !7746)
!7746 = distinct !DILocation(line: 244, scope: !7742)
!7747 = !DILocation(line: 168, scope: !7685, inlinedAt: !7746)
!7748 = !DILocation(line: 244, scope: !7742)
!7749 = distinct !DISubprogram(name: "var.isLink", scope: !864, file: !7638, type: !7646, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7750)
!7750 = !{!7751}
!7751 = !DILocalVariable(name: "varPtr", arg: 1, scope: !7749, file: !2, type: !7641)
!7752 = !DILocation(line: 167, scope: !7685, inlinedAt: !7753)
!7753 = distinct !DILocation(line: 255, scope: !7749)
!7754 = !DILocation(line: 168, scope: !7685, inlinedAt: !7753)
!7755 = !DILocation(line: 255, scope: !7749)
!7756 = distinct !DISubprogram(name: "var.isArrayElement", scope: !864, file: !7638, type: !7646, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7757)
!7757 = !{!7758}
!7758 = !DILocalVariable(name: "varPtr", arg: 1, scope: !7756, file: !2, type: !7641)
!7759 = !DILocation(line: 167, scope: !7685, inlinedAt: !7760)
!7760 = distinct !DILocation(line: 266, scope: !7756)
!7761 = !DILocation(line: 168, scope: !7685, inlinedAt: !7760)
!7762 = !DILocation(line: 266, scope: !7756)
!7763 = distinct !DISubprogram(name: "var.hasSearch", scope: !864, file: !7638, type: !7646, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7764)
!7764 = !{!7765}
!7765 = !DILocalVariable(name: "varPtr", arg: 1, scope: !7763, file: !2, type: !7641)
!7766 = !DILocation(line: 167, scope: !7685, inlinedAt: !7767)
!7767 = distinct !DILocation(line: 277, scope: !7763)
!7768 = !DILocation(line: 168, scope: !7685, inlinedAt: !7767)
!7769 = !DILocation(line: 277, scope: !7763)
!7770 = distinct !DISubprogram(name: "var.isTraced", scope: !864, file: !7638, type: !7646, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7771)
!7771 = !{!7772}
!7772 = !DILocalVariable(name: "varPtr", arg: 1, scope: !7770, file: !2, type: !7641)
!7773 = !DILocation(line: 167, scope: !7685, inlinedAt: !7774)
!7774 = distinct !DILocation(line: 288, scope: !7770)
!7775 = !DILocation(line: 168, scope: !7685, inlinedAt: !7774)
!7776 = !DILocation(line: 288, scope: !7770)
!7777 = distinct !DISubprogram(name: "var.isTraced.read", scope: !864, file: !7638, type: !7646, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7778)
!7778 = !{!7779}
!7779 = !DILocalVariable(name: "varPtr", arg: 1, scope: !7777, file: !2, type: !7641)
!7780 = !DILocation(line: 167, scope: !7685, inlinedAt: !7781)
!7781 = distinct !DILocation(line: 299, scope: !7777)
!7782 = !DILocation(line: 168, scope: !7685, inlinedAt: !7781)
!7783 = !DILocation(line: 299, scope: !7777)
!7784 = distinct !DISubprogram(name: "var.isTraced.write", scope: !864, file: !7638, type: !7646, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7785)
!7785 = !{!7786}
!7786 = !DILocalVariable(name: "varPtr", arg: 1, scope: !7784, file: !2, type: !7641)
!7787 = !DILocation(line: 167, scope: !7685, inlinedAt: !7788)
!7788 = distinct !DILocation(line: 310, scope: !7784)
!7789 = !DILocation(line: 168, scope: !7685, inlinedAt: !7788)
!7790 = !DILocation(line: 310, scope: !7784)
!7791 = distinct !DISubprogram(name: "var.isTraced.unset", scope: !864, file: !7638, type: !7646, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7792)
!7792 = !{!7793}
!7793 = !DILocalVariable(name: "varPtr", arg: 1, scope: !7791, file: !2, type: !7641)
!7794 = !DILocation(line: 167, scope: !7685, inlinedAt: !7795)
!7795 = distinct !DILocation(line: 321, scope: !7791)
!7796 = !DILocation(line: 168, scope: !7685, inlinedAt: !7795)
!7797 = !DILocation(line: 321, scope: !7791)
!7798 = distinct !DISubprogram(name: "var.isTraced.array", scope: !864, file: !7638, type: !7646, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7799)
!7799 = !{!7800}
!7800 = !DILocalVariable(name: "varPtr", arg: 1, scope: !7798, file: !2, type: !7641)
!7801 = !DILocation(line: 167, scope: !7685, inlinedAt: !7802)
!7802 = distinct !DILocation(line: 332, scope: !7798)
!7803 = !DILocation(line: 168, scope: !7685, inlinedAt: !7802)
!7804 = !DILocation(line: 332, scope: !7798)
!7805 = distinct !DISubprogram(name: "var.isInHash", scope: !864, file: !7638, type: !7646, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7806)
!7806 = !{!7807}
!7807 = !DILocalVariable(name: "varPtr", arg: 1, scope: !7805, file: !2, type: !7641)
!7808 = !DILocation(line: 167, scope: !7685, inlinedAt: !7809)
!7809 = distinct !DILocation(line: 343, scope: !7805)
!7810 = !DILocation(line: 168, scope: !7685, inlinedAt: !7809)
!7811 = !DILocation(line: 343, scope: !7805)
!7812 = distinct !DISubprogram(name: "var.hash.refCount", scope: !864, file: !7638, type: !7813, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7815)
!7813 = !DISubroutineType(types: !7814)
!7814 = !{!976, !7641}
!7815 = !{!7816}
!7816 = !DILocalVariable(name: "varPtr", arg: 1, scope: !7812, file: !2, type: !7641)
!7817 = !DILocation(line: 356, scope: !7812)
!7818 = distinct !DISubprogram(name: "var.hash.invalidateEntry", scope: !864, file: !7638, type: !7663, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7819)
!7819 = !{!7820}
!7820 = !DILocalVariable(name: "varPtr", arg: 1, scope: !7818, file: !2, type: !7641)
!7821 = !DILocation(line: 179, scope: !7693, inlinedAt: !7822)
!7822 = distinct !DILocation(line: 368, scope: !7818)
!7823 = !DILocation(line: 180, scope: !7693, inlinedAt: !7822)
!7824 = !DILocation(line: 369, scope: !7818)
!7825 = distinct !DISubprogram(name: "var.setNamespaceVar", scope: !864, file: !7638, type: !7663, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7826)
!7826 = !{!7827}
!7827 = !DILocalVariable(name: "varPtr", arg: 1, scope: !7825, file: !2, type: !7641)
!7828 = !DILocation(line: 379, scope: !7825)
!7829 = !DILocation(line: 167, scope: !7685, inlinedAt: !7830)
!7830 = distinct !DILocation(line: 381, scope: !7825)
!7831 = !DILocation(line: 168, scope: !7685, inlinedAt: !7830)
!7832 = !DILocation(line: 381, scope: !7825)
!7833 = !DILocation(line: 180, scope: !7693, inlinedAt: !7834)
!7834 = distinct !DILocation(line: 383, scope: !7825)
!7835 = !DILocation(line: 168, scope: !7685, inlinedAt: !7836)
!7836 = distinct !DILocation(line: 343, scope: !7805, inlinedAt: !7837)
!7837 = distinct !DILocation(line: 384, scope: !7825)
!7838 = !DILocation(line: 384, scope: !7825)
!7839 = !DILocation(line: 356, scope: !7812, inlinedAt: !7840)
!7840 = distinct !DILocation(line: 386, scope: !7825)
!7841 = !DILocation(line: 387, scope: !7825)
!7842 = !DILocation(line: 388, scope: !7825)
!7843 = !DILocation(line: 390, scope: !7825)
!7844 = distinct !DISubprogram(name: "var.clearNamespaceVar", scope: !864, file: !7638, type: !7663, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7845)
!7845 = !{!7846}
!7846 = !DILocalVariable(name: "varPtr", arg: 1, scope: !7844, file: !2, type: !7641)
!7847 = !DILocation(line: 167, scope: !7685, inlinedAt: !7848)
!7848 = distinct !DILocation(line: 405, scope: !7844)
!7849 = !DILocation(line: 168, scope: !7685, inlinedAt: !7848)
!7850 = !DILocation(line: 405, scope: !7844)
!7851 = !DILocation(line: 193, scope: !7702, inlinedAt: !7852)
!7852 = distinct !DILocation(line: 407, scope: !7844)
!7853 = !DILocation(line: 168, scope: !7685, inlinedAt: !7854)
!7854 = distinct !DILocation(line: 343, scope: !7805, inlinedAt: !7855)
!7855 = distinct !DILocation(line: 408, scope: !7844)
!7856 = !DILocation(line: 408, scope: !7844)
!7857 = !DILocation(line: 356, scope: !7812, inlinedAt: !7858)
!7858 = distinct !DILocation(line: 410, scope: !7844)
!7859 = !DILocation(line: 411, scope: !7844)
!7860 = !DILocation(line: 412, scope: !7844)
!7861 = !DILocation(line: 414, scope: !7844)
!7862 = distinct !DISubprogram(name: "var.hash.getKey", scope: !864, file: !7638, type: !7639, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7863)
!7863 = !{!7864}
!7864 = !DILocalVariable(name: "varPtr", arg: 1, scope: !7862, file: !2, type: !7641)
!7865 = !DILocation(line: 429, scope: !7862)
!7866 = !DILocation(line: 430, scope: !7862)
!7867 = !DILocation(line: 431, scope: !7862)
!7868 = distinct !DISubprogram(name: "var.hash.getValue", scope: !864, file: !7638, type: !7869, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7872)
!7869 = !DISubroutineType(types: !7870)
!7870 = !{!7641, !7871}
!7871 = !DIDerivedType(tag: DW_TAG_typedef, name: "HashEntry*", scope: !12, file: !11, line: 1511, baseType: !923)
!7872 = !{!7873}
!7873 = !DILocalVariable(name: "hPtr", arg: 1, scope: !7868, file: !2, type: !7871)
!7874 = !DILocation(line: 445, scope: !7868)
!7875 = !DILocation(line: 446, scope: !7868)
!7876 = distinct !DISubprogram(name: "var.hash.delete", scope: !864, file: !7638, type: !7663, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7877)
!7877 = !{!7878}
!7878 = !DILocalVariable(name: "varPtr", arg: 1, scope: !7876, file: !2, type: !7641)
!7879 = !DILocation(line: 143, scope: !7671, inlinedAt: !7880)
!7880 = distinct !DILocation(line: 459, scope: !7876)
!7881 = !DILocation(line: 460, scope: !7876)
!7882 = !DILocation(line: 461, scope: !7876)
!7883 = !DILocation(line: 462, scope: !7876)
!7884 = !DILocation(line: 463, scope: !7876)
!7885 = distinct !DISubprogram(name: "var.hash.firstVar", scope: !864, file: !7638, type: !7886, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7892)
!7886 = !DISubroutineType(types: !7887)
!7887 = !{!7641, !1681, !7888}
!7888 = !DIDerivedType(tag: DW_TAG_typedef, name: "HashSearch*", scope: !12, file: !11, line: 1513, baseType: !7889)
!7889 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7890, size: 64)
!7890 = !DICompositeType(tag: DW_TAG_structure_type, name: "HashSearch", scope: !12, file: !11, line: 840, size: 24, elements: !7891)
!7891 = !{!912, !9, !923}
!7892 = !{!7893, !7894}
!7893 = !DILocalVariable(name: "tablePtr", arg: 1, scope: !7885, file: !2, type: !1681)
!7894 = !DILocalVariable(name: "searchPtr", arg: 2, scope: !7885, file: !2, type: !7888)
!7895 = !DILocation(line: 475, scope: !7885)
!7896 = !DILocation(line: 476, scope: !7885)
!7897 = !DILocation(line: 478, scope: !7885)
!7898 = !DILocation(line: 445, scope: !7868, inlinedAt: !7899)
!7899 = distinct !DILocation(line: 480, scope: !7885)
!7900 = !DILocation(line: 446, scope: !7868, inlinedAt: !7899)
!7901 = !DILocation(line: 480, scope: !7885)
!7902 = !DILocation(line: 482, scope: !7885)
!7903 = distinct !DISubprogram(name: "var.hash.nextVar", scope: !864, file: !7638, type: !7904, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7906)
!7904 = !DISubroutineType(types: !7905)
!7905 = !{!7641, !7888}
!7906 = !{!7907}
!7907 = !DILocalVariable(name: "searchPtr", arg: 1, scope: !7903, file: !2, type: !7888)
!7908 = !DILocation(line: 494, scope: !7903)
!7909 = !DILocation(line: 496, scope: !7903)
!7910 = !DILocation(line: 445, scope: !7868, inlinedAt: !7911)
!7911 = distinct !DILocation(line: 498, scope: !7903)
!7912 = !DILocation(line: 446, scope: !7868, inlinedAt: !7911)
!7913 = !DILocation(line: 498, scope: !7903)
!7914 = !DILocation(line: 500, scope: !7903)
!7915 = distinct !DISubprogram(name: "var.isDeadHash", scope: !864, file: !7638, type: !7646, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7916)
!7916 = !{!7917}
!7917 = !DILocalVariable(name: "varPtr", arg: 1, scope: !7915, file: !2, type: !7641)
!7918 = !DILocation(line: 167, scope: !7685, inlinedAt: !7919)
!7919 = distinct !DILocation(line: 511, scope: !7915)
!7920 = !DILocation(line: 168, scope: !7685, inlinedAt: !7919)
!7921 = !DILocation(line: 511, scope: !7915)
!7922 = distinct !DISubprogram(name: "var.followLinks", scope: !864, file: !7638, type: !7679, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7923)
!7923 = !{!7924}
!7924 = !DILocalVariable(name: "var", arg: 1, scope: !7922, file: !2, type: !7641)
!7925 = !DILocation(line: 167, scope: !7685, inlinedAt: !7926)
!7926 = distinct !DILocation(line: 255, scope: !7749, inlinedAt: !7927)
!7927 = distinct !DILocation(line: 531, scope: !7922)
!7928 = !DILocation(line: 168, scope: !7685, inlinedAt: !7926)
!7929 = !DILocation(line: 531, scope: !7922)
!7930 = !DILocation(line: 155, scope: !7678, inlinedAt: !7931)
!7931 = distinct !DILocation(line: 533, scope: !7922)
!7932 = !DILocation(line: 0, scope: !7922)
!7933 = !DILocation(line: 536, scope: !7922)
!7934 = distinct !DISubprogram(name: "tcl.getornull", scope: !864, file: !7638, type: !7935, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7937)
!7935 = !DISubroutineType(types: !7936)
!7936 = !{!655, !998}
!7937 = !{!7938}
!7938 = !DILocalVariable(name: "objPtr", arg: 1, scope: !7934, file: !2, type: !998)
!7939 = !DILocation(line: 1028, scope: !7934)
!7940 = !DILocation(line: 1030, scope: !7934)
!7941 = !DILocation(line: 1032, scope: !7934)
!7942 = distinct !DISubprogram(name: "var.fast.allowed", scope: !864, file: !7638, type: !7943, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7945)
!7943 = !DISubroutineType(types: !7944)
!7944 = !{!14, !7641, !7641, !9}
!7945 = !{!7946, !7947, !7948}
!7946 = !DILocalVariable(name: "varPtr", arg: 1, scope: !7942, file: !2, type: !7641)
!7947 = !DILocalVariable(name: "arrayPtr", arg: 2, scope: !7942, file: !2, type: !7641)
!7948 = !DILocalVariable(name: "flags", arg: 3, scope: !7942, file: !2, type: !9)
!7949 = !DILocation(line: 1045, scope: !7942)
!7950 = !DILocation(line: 1046, scope: !7942)
!7951 = !DILocation(line: 1047, scope: !7942)
!7952 = !DILocation(line: 1048, scope: !7942)
!7953 = distinct !DISubprogram(name: "var.readerr", scope: !864, file: !7638, type: !7954, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7956)
!7954 = !DISubroutineType(types: !7955)
!7955 = !{!655, !7641, !7641}
!7956 = !{!7957, !7958}
!7957 = !DILocalVariable(name: "varPtr", arg: 1, scope: !7953, file: !2, type: !7641)
!7958 = !DILocalVariable(name: "arrayPtr", arg: 2, scope: !7953, file: !2, type: !7641)
!7959 = !DILocation(line: 94, scope: !7637, inlinedAt: !7960)
!7960 = distinct !DILocation(line: 105, scope: !7645, inlinedAt: !7961)
!7961 = distinct !DILocation(line: 1060, scope: !7953)
!7962 = !DILocation(line: 105, scope: !7645, inlinedAt: !7961)
!7963 = !DILocation(line: 1060, scope: !7953)
!7964 = !DILocation(line: 94, scope: !7637, inlinedAt: !7965)
!7965 = distinct !DILocation(line: 105, scope: !7645, inlinedAt: !7966)
!7966 = distinct !DILocation(line: 1062, scope: !7953)
!7967 = !DILocation(line: 105, scope: !7645, inlinedAt: !7966)
!7968 = !DILocation(line: 1062, scope: !7953)
!7969 = !DILocation(line: 167, scope: !7685, inlinedAt: !7970)
!7970 = distinct !DILocation(line: 1064, scope: !7953)
!7971 = !DILocation(line: 168, scope: !7685, inlinedAt: !7970)
!7972 = !DILocation(line: 1066, scope: !7953)
!7973 = distinct !DISubprogram(name: "tcl.read.var.ptr", scope: !864, file: !7638, type: !7974, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !7976)
!7974 = !DISubroutineType(types: !7975)
!7975 = !{!998, !867, !7641, !7641, !998, !998, !9}
!7976 = !{!7977, !7978, !7979, !7980, !7981, !7982}
!7977 = !DILocalVariable(name: "interp", arg: 1, scope: !7973, file: !2, type: !867)
!7978 = !DILocalVariable(name: "varPtr", arg: 2, scope: !7973, file: !2, type: !7641)
!7979 = !DILocalVariable(name: "arrayPtr", arg: 3, scope: !7973, file: !2, type: !7641)
!7980 = !DILocalVariable(name: "part1Ptr", arg: 4, scope: !7973, file: !2, type: !998)
!7981 = !DILocalVariable(name: "part2Ptr", arg: 5, scope: !7973, file: !2, type: !998)
!7982 = !DILocalVariable(name: "flags", arg: 6, scope: !7973, file: !2, type: !9)
!7983 = !DILocation(line: 1045, scope: !7942, inlinedAt: !7984)
!7984 = distinct !DILocation(line: 1090, scope: !7973)
!7985 = !{!7986}
!7986 = distinct !{!7986, !7987, !"var.fast.allowed: %varPtr"}
!7987 = distinct !{!7987, !"var.fast.allowed"}
!7988 = !{!7989}
!7989 = distinct !{!7989, !7987, !"var.fast.allowed: %arrayPtr"}
!7990 = !DILocation(line: 1046, scope: !7942, inlinedAt: !7984)
!7991 = !DILocation(line: 1047, scope: !7942, inlinedAt: !7984)
!7992 = !DILocation(line: 1048, scope: !7942, inlinedAt: !7984)
!7993 = !DILocation(line: 1090, scope: !7973)
!7994 = !DILocation(line: 94, scope: !7637, inlinedAt: !7995)
!7995 = distinct !DILocation(line: 1092, scope: !7973)
!7996 = !DILocation(line: 1093, scope: !7973)
!7997 = !DILocation(line: 1095, scope: !7973)
!7998 = !DILocation(line: 1097, scope: !7973)
!7999 = distinct !DISubprogram(name: "set.by.append.element", scope: !864, file: !7638, type: !8000, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !8002)
!8000 = !DISubroutineType(types: !8001)
!8001 = !{!14, !867, !7641, !998, !998}
!8002 = !{!8003, !8004, !8005, !8006}
!8003 = !DILocalVariable(name: "interp", arg: 1, scope: !7999, file: !2, type: !867)
!8004 = !DILocalVariable(name: "var", arg: 2, scope: !7999, file: !2, type: !7641)
!8005 = !DILocalVariable(name: "oldValue", arg: 3, scope: !7999, file: !2, type: !998)
!8006 = !DILocalVariable(name: "newValue", arg: 4, scope: !7999, file: !2, type: !998)
!8007 = !DILocation(line: 1170, scope: !7999)
!8008 = !DILocation(line: 1172, scope: !7999)
!8009 = !DILocation(line: 385, scope: !995, inlinedAt: !8010)
!8010 = distinct !DILocation(line: 1172, scope: !7999)
!8011 = !DILocation(line: 386, scope: !995, inlinedAt: !8010)
!8012 = !DILocation(line: 116, scope: !7653, inlinedAt: !8013)
!8013 = distinct !DILocation(line: 1174, scope: !7999)
!8014 = !DILocation(line: 117, scope: !7653, inlinedAt: !8013)
!8015 = !DILocation(line: 39, scope: !1004, inlinedAt: !8016)
!8016 = distinct !DILocation(line: 1175, scope: !7999)
!8017 = !DILocation(line: 1176, scope: !7999)
!8018 = !DILocation(line: 116, scope: !1345, inlinedAt: !8019)
!8019 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !8020)
!8020 = distinct !DILocation(line: 1178, scope: !7999)
!8021 = !DILocation(line: 138, scope: !1351, inlinedAt: !8020)
!8022 = !DILocation(line: 1178, scope: !7999)
!8023 = !DILocation(line: 1180, scope: !7999)
!8024 = !DILocation(line: 385, scope: !995, inlinedAt: !8025)
!8025 = distinct !DILocation(line: 1180, scope: !7999)
!8026 = !DILocation(line: 116, scope: !7653, inlinedAt: !8027)
!8027 = distinct !DILocation(line: 1182, scope: !7999)
!8028 = !DILocation(line: 117, scope: !7653, inlinedAt: !8027)
!8029 = !DILocation(line: 72, scope: !1020, inlinedAt: !8030)
!8030 = distinct !DILocation(line: 1183, scope: !7999)
!8031 = !DILocation(line: 73, scope: !1020, inlinedAt: !8030)
!8032 = !DILocation(line: 75, scope: !1020, inlinedAt: !8030)
!8033 = !DILocation(line: 76, scope: !1020, inlinedAt: !8030)
!8034 = !DILocation(line: 39, scope: !1004, inlinedAt: !8035)
!8035 = distinct !DILocation(line: 1184, scope: !7999)
!8036 = !DILocation(line: 77, scope: !1020, inlinedAt: !8030)
!8037 = !DILocation(line: 79, scope: !1020, inlinedAt: !8030)
!8038 = !DILocation(line: 80, scope: !1020, inlinedAt: !8030)
!8039 = !DILocation(line: 1185, scope: !7999)
!8040 = !DILocation(line: 1189, scope: !7999)
!8041 = !DILocation(line: 1190, scope: !7999)
!8042 = distinct !DISubprogram(name: "set.copy.continuations", scope: !864, file: !7638, type: !2061, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !8043)
!8043 = !{!8044, !8045}
!8044 = !DILocalVariable(name: "to", arg: 1, scope: !8042, file: !2, type: !998)
!8045 = !DILocalVariable(name: "from", arg: 2, scope: !8042, file: !2, type: !998)
!8046 = !DILocation(line: 1204, scope: !8042)
!8047 = distinct !DISubprogram(name: "set.by.append.string", scope: !864, file: !7638, type: !8048, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !8050)
!8048 = !DISubroutineType(types: !8049)
!8049 = !{!657, !7641, !998, !998}
!8050 = !{!8051, !8052, !8053}
!8051 = !DILocalVariable(name: "var", arg: 1, scope: !8047, file: !2, type: !7641)
!8052 = !DILocalVariable(name: "oldValue", arg: 2, scope: !8047, file: !2, type: !998)
!8053 = !DILocalVariable(name: "newValue", arg: 3, scope: !8047, file: !2, type: !998)
!8054 = !DILocation(line: 1217, scope: !8047)
!8055 = !DILocation(line: 116, scope: !7653, inlinedAt: !8056)
!8056 = distinct !DILocation(line: 1219, scope: !8047)
!8057 = !DILocation(line: 117, scope: !7653, inlinedAt: !8056)
!8058 = !DILocation(line: 38, scope: !1004, inlinedAt: !8059)
!8059 = distinct !DILocation(line: 1220, scope: !8047)
!8060 = !DILocation(line: 39, scope: !1004, inlinedAt: !8059)
!8061 = !DILocation(line: 1221, scope: !8047)
!8062 = !DILocation(line: 116, scope: !1345, inlinedAt: !8063)
!8063 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !8064)
!8064 = distinct !DILocation(line: 1223, scope: !8047)
!8065 = !DILocation(line: 138, scope: !1351, inlinedAt: !8064)
!8066 = !DILocation(line: 1223, scope: !8047)
!8067 = !DILocation(line: 1225, scope: !8047)
!8068 = !DILocation(line: 385, scope: !995, inlinedAt: !8069)
!8069 = distinct !DILocation(line: 1225, scope: !8047)
!8070 = !DILocation(line: 116, scope: !7653, inlinedAt: !8071)
!8071 = distinct !DILocation(line: 1227, scope: !8047)
!8072 = !DILocation(line: 117, scope: !7653, inlinedAt: !8071)
!8073 = !DILocation(line: 72, scope: !1020, inlinedAt: !8074)
!8074 = distinct !DILocation(line: 1229, scope: !8047)
!8075 = !DILocation(line: 73, scope: !1020, inlinedAt: !8074)
!8076 = !DILocation(line: 75, scope: !1020, inlinedAt: !8074)
!8077 = !DILocation(line: 76, scope: !1020, inlinedAt: !8074)
!8078 = !DILocation(line: 39, scope: !1004, inlinedAt: !8079)
!8079 = distinct !DILocation(line: 1230, scope: !8047)
!8080 = !DILocation(line: 77, scope: !1020, inlinedAt: !8074)
!8081 = !DILocation(line: 79, scope: !1020, inlinedAt: !8074)
!8082 = !DILocation(line: 80, scope: !1020, inlinedAt: !8074)
!8083 = !DILocation(line: 1231, scope: !8047)
!8084 = !DILocation(line: 1235, scope: !8047)
!8085 = !DILocation(line: 116, scope: !1345, inlinedAt: !8086)
!8086 = distinct !DILocation(line: 1236, scope: !8047)
!8087 = !DILocation(line: 1236, scope: !8047)
!8088 = !DILocation(line: 75, scope: !1020, inlinedAt: !8089)
!8089 = distinct !DILocation(line: 1238, scope: !8047)
!8090 = !DILocation(line: 76, scope: !1020, inlinedAt: !8089)
!8091 = !DILocation(line: 1239, scope: !8047)
!8092 = !DILocation(line: 1241, scope: !8047)
!8093 = distinct !DISubprogram(name: "set.direct", scope: !864, file: !7638, type: !8048, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !8094)
!8094 = !{!8095, !8096, !8097}
!8095 = !DILocalVariable(name: "var", arg: 1, scope: !8093, file: !2, type: !7641)
!8096 = !DILocalVariable(name: "oldValue", arg: 2, scope: !8093, file: !2, type: !998)
!8097 = !DILocalVariable(name: "newValue", arg: 3, scope: !8093, file: !2, type: !998)
!8098 = !DILocation(line: 1255, scope: !8093)
!8099 = !DILocation(line: 116, scope: !7653, inlinedAt: !8100)
!8100 = distinct !DILocation(line: 1260, scope: !8093)
!8101 = !DILocation(line: 117, scope: !7653, inlinedAt: !8100)
!8102 = !DILocation(line: 38, scope: !1004, inlinedAt: !8103)
!8103 = distinct !DILocation(line: 1261, scope: !8093)
!8104 = !DILocation(line: 39, scope: !1004, inlinedAt: !8103)
!8105 = !DILocation(line: 1262, scope: !8093)
!8106 = !DILocation(line: 71, scope: !1020, inlinedAt: !8107)
!8107 = distinct !DILocation(line: 1264, scope: !8093)
!8108 = !DILocation(line: 72, scope: !1020, inlinedAt: !8107)
!8109 = !DILocation(line: 73, scope: !1020, inlinedAt: !8107)
!8110 = !DILocation(line: 75, scope: !1020, inlinedAt: !8107)
!8111 = !DILocation(line: 76, scope: !1020, inlinedAt: !8107)
!8112 = !DILocation(line: 77, scope: !1020, inlinedAt: !8107)
!8113 = !DILocation(line: 79, scope: !1020, inlinedAt: !8107)
!8114 = !DILocation(line: 80, scope: !1020, inlinedAt: !8107)
!8115 = !DILocation(line: 1267, scope: !8093)
!8116 = distinct !DISubprogram(name: "var.fast.set", scope: !864, file: !7638, type: !7654, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !8117)
!8117 = !{!8118, !8119}
!8118 = !DILocalVariable(name: "varPtr", arg: 1, scope: !8116, file: !2, type: !7641)
!8119 = !DILocalVariable(name: "newValuePtr", arg: 2, scope: !8116, file: !2, type: !998)
!8120 = !DILocation(line: 38, scope: !1004, inlinedAt: !8121)
!8121 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !8122)
!8122 = distinct !DILocation(line: 1280, scope: !8116)
!8123 = !DILocation(line: 39, scope: !1004, inlinedAt: !8121)
!8124 = !DILocation(line: 94, scope: !7637, inlinedAt: !8125)
!8125 = distinct !DILocation(line: 1281, scope: !8116)
!8126 = !DILocation(line: 117, scope: !7653, inlinedAt: !8127)
!8127 = distinct !DILocation(line: 1282, scope: !8116)
!8128 = !DILocation(line: 1283, scope: !8116)
!8129 = !DILocation(line: 71, scope: !1020, inlinedAt: !8130)
!8130 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !8131)
!8131 = distinct !DILocation(line: 1285, scope: !8116)
!8132 = !DILocation(line: 72, scope: !1020, inlinedAt: !8130)
!8133 = !DILocation(line: 73, scope: !1020, inlinedAt: !8130)
!8134 = !DILocation(line: 75, scope: !1020, inlinedAt: !8130)
!8135 = !DILocation(line: 76, scope: !1020, inlinedAt: !8130)
!8136 = !DILocation(line: 77, scope: !1020, inlinedAt: !8130)
!8137 = !DILocation(line: 79, scope: !1020, inlinedAt: !8130)
!8138 = !DILocation(line: 80, scope: !1020, inlinedAt: !8130)
!8139 = !DILocation(line: 1288, scope: !8116)
!8140 = distinct !DISubprogram(name: "tcl.write.var.ptr", scope: !864, file: !7638, type: !8141, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !8143)
!8141 = !DISubroutineType(types: !8142)
!8142 = !{!998, !867, !7641, !7641, !998, !998, !998, !9}
!8143 = !{!8144, !8145, !8146, !8147, !8148, !8149, !8150}
!8144 = !DILocalVariable(name: "interp", arg: 1, scope: !8140, file: !2, type: !867)
!8145 = !DILocalVariable(name: "varPtr", arg: 2, scope: !8140, file: !2, type: !7641)
!8146 = !DILocalVariable(name: "arrayPtr", arg: 3, scope: !8140, file: !2, type: !7641)
!8147 = !DILocalVariable(name: "part1Ptr", arg: 4, scope: !8140, file: !2, type: !998)
!8148 = !DILocalVariable(name: "part2Ptr", arg: 5, scope: !8140, file: !2, type: !998)
!8149 = !DILocalVariable(name: "newValuePtr", arg: 6, scope: !8140, file: !2, type: !998)
!8150 = !DILocalVariable(name: "flags", arg: 7, scope: !8140, file: !2, type: !9)
!8151 = !DILocation(line: 1045, scope: !7942, inlinedAt: !8152)
!8152 = distinct !DILocation(line: 1303, scope: !8140)
!8153 = !{!8154}
!8154 = distinct !{!8154, !8155, !"var.fast.allowed: %varPtr"}
!8155 = distinct !{!8155, !"var.fast.allowed"}
!8156 = !{!8157}
!8157 = distinct !{!8157, !8155, !"var.fast.allowed: %arrayPtr"}
!8158 = !DILocation(line: 1046, scope: !7942, inlinedAt: !8152)
!8159 = !DILocation(line: 1047, scope: !7942, inlinedAt: !8152)
!8160 = !DILocation(line: 1048, scope: !7942, inlinedAt: !8152)
!8161 = !DILocation(line: 1303, scope: !8140)
!8162 = !DILocation(line: 38, scope: !1004, inlinedAt: !8163)
!8163 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !8164)
!8164 = distinct !DILocation(line: 1280, scope: !8116, inlinedAt: !8165)
!8165 = distinct !DILocation(line: 1305, scope: !8140)
!8166 = !DILocation(line: 39, scope: !1004, inlinedAt: !8163)
!8167 = !DILocation(line: 94, scope: !7637, inlinedAt: !8168)
!8168 = distinct !DILocation(line: 1281, scope: !8116, inlinedAt: !8165)
!8169 = !DILocation(line: 117, scope: !7653, inlinedAt: !8170)
!8170 = distinct !DILocation(line: 1282, scope: !8116, inlinedAt: !8165)
!8171 = !DILocation(line: 1283, scope: !8116, inlinedAt: !8165)
!8172 = !DILocation(line: 71, scope: !1020, inlinedAt: !8173)
!8173 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !8174)
!8174 = distinct !DILocation(line: 1285, scope: !8116, inlinedAt: !8165)
!8175 = !DILocation(line: 72, scope: !1020, inlinedAt: !8173)
!8176 = !DILocation(line: 73, scope: !1020, inlinedAt: !8173)
!8177 = !DILocation(line: 75, scope: !1020, inlinedAt: !8173)
!8178 = !DILocation(line: 76, scope: !1020, inlinedAt: !8173)
!8179 = !DILocation(line: 77, scope: !1020, inlinedAt: !8173)
!8180 = !DILocation(line: 79, scope: !1020, inlinedAt: !8173)
!8181 = !DILocation(line: 80, scope: !1020, inlinedAt: !8173)
!8182 = !DILocation(line: 1306, scope: !8140)
!8183 = !DILocation(line: 1308, scope: !8140)
!8184 = distinct !DISubprogram(name: "tcl.write.var.ptr.numeric", scope: !864, file: !7638, type: !8185, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !8187)
!8185 = !DISubroutineType(types: !8186)
!8186 = !{!998, !867, !7641, !7641, !998, !998, !343, !9}
!8187 = !{!8188, !8189, !8190, !8191, !8192, !8193, !8194}
!8188 = !DILocalVariable(name: "interp", arg: 1, scope: !8184, file: !2, type: !867)
!8189 = !DILocalVariable(name: "varPtr", arg: 2, scope: !8184, file: !2, type: !7641)
!8190 = !DILocalVariable(name: "arrayPtr", arg: 3, scope: !8184, file: !2, type: !7641)
!8191 = !DILocalVariable(name: "part1Ptr", arg: 4, scope: !8184, file: !2, type: !998)
!8192 = !DILocalVariable(name: "part2Ptr", arg: 5, scope: !8184, file: !2, type: !998)
!8193 = !DILocalVariable(name: "newValue", arg: 6, scope: !8184, file: !2, type: !343)
!8194 = !DILocalVariable(name: "flags", arg: 7, scope: !8184, file: !2, type: !9)
!8195 = !DILocation(line: 1045, scope: !7942, inlinedAt: !8196)
!8196 = distinct !DILocation(line: 1532, scope: !8184)
!8197 = !{!8198}
!8198 = distinct !{!8198, !8199, !"var.fast.allowed: %varPtr"}
!8199 = distinct !{!8199, !"var.fast.allowed"}
!8200 = !{!8201}
!8201 = distinct !{!8201, !8199, !"var.fast.allowed: %arrayPtr"}
!8202 = !DILocation(line: 1046, scope: !7942, inlinedAt: !8196)
!8203 = !DILocation(line: 1047, scope: !7942, inlinedAt: !8196)
!8204 = !DILocation(line: 1048, scope: !7942, inlinedAt: !8196)
!8205 = !DILocation(line: 1532, scope: !8184)
!8206 = !DILocation(line: 94, scope: !7637, inlinedAt: !8207)
!8207 = distinct !DILocation(line: 1534, scope: !8184)
!8208 = !DILocation(line: 1535, scope: !8184)
!8209 = !DILocation(line: 116, scope: !1345, inlinedAt: !8210)
!8210 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !8211)
!8211 = distinct !DILocation(line: 1537, scope: !8184)
!8212 = !DILocation(line: 138, scope: !1351, inlinedAt: !8211)
!8213 = !DILocation(line: 1537, scope: !8184)
!8214 = !DILocation(line: 1539, scope: !8184)
!8215 = !DILocation(line: 385, scope: !995, inlinedAt: !8216)
!8216 = distinct !DILocation(line: 1539, scope: !8184)
!8217 = !DILocation(line: 386, scope: !995, inlinedAt: !8216)
!8218 = !DILocation(line: 117, scope: !7653, inlinedAt: !8219)
!8219 = distinct !DILocation(line: 1540, scope: !8184)
!8220 = !DILocation(line: 39, scope: !1004, inlinedAt: !8221)
!8221 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !8222)
!8222 = distinct !DILocation(line: 1541, scope: !8184)
!8223 = !DILocation(line: 1542, scope: !8184)
!8224 = !DILocation(line: 1545, scope: !8184)
!8225 = !DILocation(line: 1547, scope: !8184)
!8226 = !DILocation(line: 1550, scope: !8184)
!8227 = !DILocation(line: 1552, scope: !8184)
!8228 = !DILocation(line: 1553, scope: !8184)
!8229 = !DILocation(line: 1555, scope: !8184)
!8230 = !DILocation(line: 1556, scope: !8184)
!8231 = !DILocation(line: 1563, scope: !8184)
!8232 = !DILocation(line: 1566, scope: !8184)
!8233 = !DILocation(line: 1567, scope: !8184)
!8234 = !DILocation(line: 1215, scope: !1323, inlinedAt: !8235)
!8235 = distinct !DILocation(line: 1574, scope: !8184)
!8236 = !DILocation(line: 1217, scope: !1323, inlinedAt: !8235)
!8237 = !DILocation(line: 1189, scope: !1303, inlinedAt: !8238)
!8238 = distinct !DILocation(line: 1217, scope: !1323, inlinedAt: !8235)
!8239 = !DILocation(line: 1191, scope: !1303, inlinedAt: !8238)
!8240 = !DILocation(line: 1192, scope: !1303, inlinedAt: !8238)
!8241 = !DILocation(line: 1193, scope: !1303, inlinedAt: !8238)
!8242 = !DILocation(line: 1194, scope: !1303, inlinedAt: !8238)
!8243 = !DILocation(line: 1196, scope: !1303, inlinedAt: !8238)
!8244 = !DILocation(line: 1197, scope: !1303, inlinedAt: !8238)
!8245 = !DILocation(line: 1198, scope: !1303, inlinedAt: !8238)
!8246 = !DILocation(line: 1199, scope: !1303, inlinedAt: !8238)
!8247 = !DILocation(line: 1219, scope: !1323, inlinedAt: !8235)
!8248 = !DILocation(line: 1174, scope: !1291, inlinedAt: !8249)
!8249 = distinct !DILocation(line: 1219, scope: !1323, inlinedAt: !8235)
!8250 = !DILocation(line: 1175, scope: !1291, inlinedAt: !8249)
!8251 = !DILocation(line: 1176, scope: !1291, inlinedAt: !8249)
!8252 = !DILocation(line: 0, scope: !1323, inlinedAt: !8235)
!8253 = !DILocation(line: 38, scope: !1004, inlinedAt: !8254)
!8254 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !8255)
!8255 = distinct !DILocation(line: 1575, scope: !8184)
!8256 = !DILocation(line: 39, scope: !1004, inlinedAt: !8254)
!8257 = !DILocation(line: 1303, scope: !8140, inlinedAt: !8258)
!8258 = distinct !DILocation(line: 1576, scope: !8184)
!8259 = !DILocation(line: 39, scope: !1004, inlinedAt: !8260)
!8260 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !8261)
!8261 = distinct !DILocation(line: 1280, scope: !8116, inlinedAt: !8262)
!8262 = distinct !DILocation(line: 1305, scope: !8140, inlinedAt: !8258)
!8263 = !{!8264, !8266, !8267}
!8264 = distinct !{!8264, !8265, !"tcl.write.var.ptr: %interp"}
!8265 = distinct !{!8265, !"tcl.write.var.ptr"}
!8266 = distinct !{!8266, !8265, !"tcl.write.var.ptr: %varPtr"}
!8267 = distinct !{!8267, !8265, !"tcl.write.var.ptr: %arrayPtr"}
!8268 = !DILocation(line: 94, scope: !7637, inlinedAt: !8269)
!8269 = distinct !DILocation(line: 1281, scope: !8116, inlinedAt: !8262)
!8270 = !{!8266}
!8271 = !{!8264, !8267}
!8272 = !DILocation(line: 117, scope: !7653, inlinedAt: !8273)
!8273 = distinct !DILocation(line: 1282, scope: !8116, inlinedAt: !8262)
!8274 = !DILocation(line: 1283, scope: !8116, inlinedAt: !8262)
!8275 = !DILocation(line: 71, scope: !1020, inlinedAt: !8276)
!8276 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !8277)
!8277 = distinct !DILocation(line: 1285, scope: !8116, inlinedAt: !8262)
!8278 = !DILocation(line: 72, scope: !1020, inlinedAt: !8276)
!8279 = !{!8264, !8266}
!8280 = !DILocation(line: 73, scope: !1020, inlinedAt: !8276)
!8281 = !DILocation(line: 75, scope: !1020, inlinedAt: !8276)
!8282 = !DILocation(line: 76, scope: !1020, inlinedAt: !8276)
!8283 = !DILocation(line: 77, scope: !1020, inlinedAt: !8276)
!8284 = !DILocation(line: 79, scope: !1020, inlinedAt: !8276)
!8285 = !DILocation(line: 80, scope: !1020, inlinedAt: !8276)
!8286 = !DILocation(line: 1308, scope: !8140, inlinedAt: !8258)
!8287 = !DILocation(line: 72, scope: !1020, inlinedAt: !8288)
!8288 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !8289)
!8289 = distinct !DILocation(line: 1577, scope: !8184)
!8290 = !DILocation(line: 73, scope: !1020, inlinedAt: !8288)
!8291 = !DILocation(line: 75, scope: !1020, inlinedAt: !8288)
!8292 = !DILocation(line: 76, scope: !1020, inlinedAt: !8288)
!8293 = !DILocation(line: 77, scope: !1020, inlinedAt: !8288)
!8294 = !DILocation(line: 79, scope: !1020, inlinedAt: !8288)
!8295 = !DILocation(line: 80, scope: !1020, inlinedAt: !8288)
!8296 = !DILocation(line: 1578, scope: !8184)
!8297 = distinct !DISubprogram(name: "var.deleteSearches", scope: !864, file: !7638, type: !8298, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !8300)
!8298 = !DISubroutineType(types: !8299)
!8299 = !{!657, !867, !7641}
!8300 = !{!8301, !8302}
!8301 = !DILocalVariable(name: "interp", arg: 1, scope: !8297, file: !2, type: !867)
!8302 = !DILocalVariable(name: "varPtr", arg: 2, scope: !8297, file: !2, type: !7641)
!8303 = !DILocation(line: 1592, scope: !8297)
!8304 = !DILocation(line: 167, scope: !7685, inlinedAt: !8305)
!8305 = distinct !DILocation(line: 277, scope: !7763, inlinedAt: !8306)
!8306 = distinct !DILocation(line: 1594, scope: !8297)
!8307 = !DILocation(line: 168, scope: !7685, inlinedAt: !8305)
!8308 = !DILocation(line: 1594, scope: !8297)
!8309 = !DILocation(line: 1596, scope: !8297)
!8310 = !DILocation(line: 1597, scope: !8297)
!8311 = !DILocation(line: 1599, scope: !8297)
!8312 = !DILocation(line: 1605, scope: !8297)
!8313 = !DILocation(line: 0, scope: !8297)
!8314 = !DILocation(line: 1607, scope: !8297)
!8315 = !DILocation(line: 1608, scope: !8297)
!8316 = !DILocation(line: 71, scope: !1020, inlinedAt: !8317)
!8317 = distinct !DILocation(line: 1608, scope: !8297)
!8318 = !DILocation(line: 72, scope: !1020, inlinedAt: !8317)
!8319 = !DILocation(line: 73, scope: !1020, inlinedAt: !8317)
!8320 = !DILocation(line: 75, scope: !1020, inlinedAt: !8317)
!8321 = !DILocation(line: 76, scope: !1020, inlinedAt: !8317)
!8322 = !DILocation(line: 77, scope: !1020, inlinedAt: !8317)
!8323 = !DILocation(line: 79, scope: !1020, inlinedAt: !8317)
!8324 = !DILocation(line: 80, scope: !1020, inlinedAt: !8317)
!8325 = !DILocation(line: 1609, scope: !8297)
!8326 = !DILocation(line: 193, scope: !7702, inlinedAt: !8327)
!8327 = distinct !DILocation(line: 1612, scope: !8297)
!8328 = !DILocation(line: 1613, scope: !8297)
!8329 = !DILocation(line: 1614, scope: !8297)
!8330 = !DILocation(line: 1616, scope: !8297)
!8331 = distinct !DISubprogram(name: "var.eventuallyFreeTrace", scope: !864, file: !7638, type: !8332, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !8336)
!8332 = !DISubroutineType(types: !8333)
!8333 = !{!657, !8334}
!8334 = !DIDerivedType(tag: DW_TAG_typedef, name: "VarTrace*", scope: !12, file: !11, line: 1514, baseType: !8335)
!8335 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !655, size: 64)
!8336 = !{!8337}
!8337 = !DILocalVariable(name: "trace", arg: 1, scope: !8331, file: !2, type: !8334)
!8338 = !DILocation(line: 1628, scope: !8331)
!8339 = !DILocation(line: 1629, scope: !8331)
!8340 = distinct !DISubprogram(name: "tcl.unset.var.array", scope: !864, file: !7638, type: !8341, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !8343)
!8341 = !DISubroutineType(types: !8342)
!8342 = !{!657, !867, !998, !7641, !9}
!8343 = !{!8344, !8345, !8346, !8347}
!8344 = !DILocalVariable(name: "interp", arg: 1, scope: !8340, file: !2, type: !867)
!8345 = !DILocalVariable(name: "part1Ptr", arg: 2, scope: !8340, file: !2, type: !998)
!8346 = !DILocalVariable(name: "varPtr", arg: 3, scope: !8340, file: !2, type: !7641)
!8347 = !DILocalVariable(name: "flags", arg: 4, scope: !8340, file: !2, type: !9)
!8348 = !DILocation(line: 1641, scope: !8340)
!8349 = !DILocation(line: 167, scope: !7685, inlinedAt: !8350)
!8350 = distinct !DILocation(line: 277, scope: !7763, inlinedAt: !8351)
!8351 = distinct !DILocation(line: 1594, scope: !8297, inlinedAt: !8352)
!8352 = distinct !DILocation(line: 1645, scope: !8340)
!8353 = !DILocation(line: 168, scope: !7685, inlinedAt: !8350)
!8354 = !DILocation(line: 1594, scope: !8297, inlinedAt: !8352)
!8355 = !DILocation(line: 1596, scope: !8297, inlinedAt: !8352)
!8356 = !DILocation(line: 1597, scope: !8297, inlinedAt: !8352)
!8357 = !DILocation(line: 1599, scope: !8297, inlinedAt: !8352)
!8358 = !DILocation(line: 1605, scope: !8297, inlinedAt: !8352)
!8359 = !DILocation(line: 0, scope: !8297, inlinedAt: !8352)
!8360 = !DILocation(line: 1607, scope: !8297, inlinedAt: !8352)
!8361 = !DILocation(line: 1608, scope: !8297, inlinedAt: !8352)
!8362 = !DILocation(line: 71, scope: !1020, inlinedAt: !8363)
!8363 = distinct !DILocation(line: 1608, scope: !8297, inlinedAt: !8352)
!8364 = !DILocation(line: 72, scope: !1020, inlinedAt: !8363)
!8365 = !DILocation(line: 73, scope: !1020, inlinedAt: !8363)
!8366 = !DILocation(line: 75, scope: !1020, inlinedAt: !8363)
!8367 = !DILocation(line: 76, scope: !1020, inlinedAt: !8363)
!8368 = !DILocation(line: 77, scope: !1020, inlinedAt: !8363)
!8369 = !DILocation(line: 79, scope: !1020, inlinedAt: !8363)
!8370 = !DILocation(line: 80, scope: !1020, inlinedAt: !8363)
!8371 = !DILocation(line: 1609, scope: !8297, inlinedAt: !8352)
!8372 = !DILocation(line: 193, scope: !7702, inlinedAt: !8373)
!8373 = distinct !DILocation(line: 1612, scope: !8297, inlinedAt: !8352)
!8374 = !DILocation(line: 1613, scope: !8297, inlinedAt: !8352)
!8375 = !DILocation(line: 1614, scope: !8297, inlinedAt: !8352)
!8376 = !DILocation(line: 143, scope: !7671, inlinedAt: !8377)
!8377 = distinct !DILocation(line: 1646, scope: !8340)
!8378 = !DILocation(line: 475, scope: !7885, inlinedAt: !8379)
!8379 = distinct !DILocation(line: 1646, scope: !8340)
!8380 = !DILocation(line: 476, scope: !7885, inlinedAt: !8379)
!8381 = !DILocation(line: 478, scope: !7885, inlinedAt: !8379)
!8382 = !DILocation(line: 1650, scope: !8340)
!8383 = !DILocation(line: 0, scope: !8340)
!8384 = !DILocation(line: 167, scope: !7685, inlinedAt: !8385)
!8385 = distinct !DILocation(line: 233, scope: !7735, inlinedAt: !8386)
!8386 = distinct !DILocation(line: 1652, scope: !8340)
!8387 = !DILocation(line: 168, scope: !7685, inlinedAt: !8385)
!8388 = !DILocation(line: 94, scope: !7637, inlinedAt: !8389)
!8389 = distinct !DILocation(line: 105, scope: !7645, inlinedAt: !8390)
!8390 = distinct !DILocation(line: 1652, scope: !8340)
!8391 = !DILocation(line: 105, scope: !7645, inlinedAt: !8390)
!8392 = !DILocation(line: 1652, scope: !8340)
!8393 = !DILocation(line: 71, scope: !1020, inlinedAt: !8394)
!8394 = distinct !DILocation(line: 1654, scope: !8340)
!8395 = !DILocation(line: 72, scope: !1020, inlinedAt: !8394)
!8396 = !DILocation(line: 73, scope: !1020, inlinedAt: !8394)
!8397 = !DILocation(line: 75, scope: !1020, inlinedAt: !8394)
!8398 = !DILocation(line: 76, scope: !1020, inlinedAt: !8394)
!8399 = !DILocation(line: 77, scope: !1020, inlinedAt: !8394)
!8400 = !DILocation(line: 79, scope: !1020, inlinedAt: !8394)
!8401 = !DILocation(line: 80, scope: !1020, inlinedAt: !8394)
!8402 = !DILocation(line: 117, scope: !7653, inlinedAt: !8403)
!8403 = distinct !DILocation(line: 1655, scope: !8340)
!8404 = !DILocation(line: 180, scope: !7693, inlinedAt: !8405)
!8405 = distinct !DILocation(line: 368, scope: !7818, inlinedAt: !8406)
!8406 = distinct !DILocation(line: 1662, scope: !8340)
!8407 = !DILocation(line: 1656, scope: !8340)
!8408 = !DILocation(line: 168, scope: !7685, inlinedAt: !8409)
!8409 = distinct !DILocation(line: 288, scope: !7770, inlinedAt: !8410)
!8410 = distinct !DILocation(line: 1663, scope: !8340)
!8411 = !DILocation(line: 1663, scope: !8340)
!8412 = !DILocation(line: 168, scope: !7685, inlinedAt: !8413)
!8413 = distinct !DILocation(line: 321, scope: !7791, inlinedAt: !8414)
!8414 = distinct !DILocation(line: 1665, scope: !8340)
!8415 = !DILocation(line: 1665, scope: !8340)
!8416 = !DILocation(line: 429, scope: !7862, inlinedAt: !8417)
!8417 = distinct !DILocation(line: 1667, scope: !8340)
!8418 = !DILocation(line: 430, scope: !7862, inlinedAt: !8417)
!8419 = !DILocation(line: 193, scope: !7702, inlinedAt: !8420)
!8420 = distinct !DILocation(line: 1668, scope: !8340)
!8421 = !DILocation(line: 1670, scope: !8340)
!8422 = !DILocation(line: 1671, scope: !8340)
!8423 = !DILocation(line: 1674, scope: !8340)
!8424 = !DILocation(line: 1676, scope: !8340)
!8425 = !DILocation(line: 1682, scope: !8340)
!8426 = !DILocation(line: 1684, scope: !8340)
!8427 = !DILocation(line: 1685, scope: !8340)
!8428 = !DILocation(line: 1628, scope: !8331, inlinedAt: !8429)
!8429 = distinct !DILocation(line: 1686, scope: !8340)
!8430 = !DILocation(line: 1689, scope: !8340)
!8431 = !DILocation(line: 193, scope: !7702, inlinedAt: !8432)
!8432 = distinct !DILocation(line: 1690, scope: !8340)
!8433 = !DILocation(line: 1695, scope: !8340)
!8434 = !DILocation(line: 1697, scope: !8340)
!8435 = !DILocation(line: 1698, scope: !8340)
!8436 = !DILocation(line: 1700, scope: !8340)
!8437 = !DILocation(line: 1701, scope: !8340)
!8438 = !DILocation(line: 1703, scope: !8340)
!8439 = !DILocation(line: 130, scope: !7662, inlinedAt: !8440)
!8440 = distinct !DILocation(line: 1706, scope: !8340)
!8441 = !DILocation(line: 131, scope: !7662, inlinedAt: !8440)
!8442 = !DILocation(line: 168, scope: !7685, inlinedAt: !8443)
!8443 = distinct !DILocation(line: 405, scope: !7844, inlinedAt: !8444)
!8444 = distinct !DILocation(line: 1714, scope: !8340)
!8445 = !DILocation(line: 405, scope: !7844, inlinedAt: !8444)
!8446 = !DILocation(line: 193, scope: !7702, inlinedAt: !8447)
!8447 = distinct !DILocation(line: 407, scope: !7844, inlinedAt: !8444)
!8448 = !DILocation(line: 168, scope: !7685, inlinedAt: !8449)
!8449 = distinct !DILocation(line: 343, scope: !7805, inlinedAt: !8450)
!8450 = distinct !DILocation(line: 408, scope: !7844, inlinedAt: !8444)
!8451 = !DILocation(line: 408, scope: !7844, inlinedAt: !8444)
!8452 = !DILocation(line: 356, scope: !7812, inlinedAt: !8453)
!8453 = distinct !DILocation(line: 410, scope: !7844, inlinedAt: !8444)
!8454 = !DILocation(line: 411, scope: !7844, inlinedAt: !8444)
!8455 = !DILocation(line: 412, scope: !7844, inlinedAt: !8444)
!8456 = !DILocation(line: 494, scope: !7903, inlinedAt: !8457)
!8457 = distinct !DILocation(line: 1717, scope: !8340)
!8458 = !DILocation(line: 496, scope: !7903, inlinedAt: !8457)
!8459 = !DILocation(line: 461, scope: !7876, inlinedAt: !8460)
!8460 = distinct !DILocation(line: 1720, scope: !8340)
!8461 = !DILocation(line: 462, scope: !7876, inlinedAt: !8460)
!8462 = !DILocation(line: 1721, scope: !8340)
!8463 = distinct !DISubprogram(name: "var.dispose.activetraces", scope: !864, file: !7638, type: !8464, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !8466)
!8464 = !DISubroutineType(types: !8465)
!8465 = !{!657, !867, !7641, !8334}
!8466 = !{!8467, !8468, !8469}
!8467 = !DILocalVariable(name: "interp", arg: 1, scope: !8463, file: !2, type: !867)
!8468 = !DILocalVariable(name: "varPtr", arg: 2, scope: !8463, file: !2, type: !7641)
!8469 = !DILocalVariable(name: "tracePtr", arg: 3, scope: !8463, file: !2, type: !8334)
!8470 = !DILocation(line: 1752, scope: !8463)
!8471 = !DILocation(line: 1754, scope: !8463)
!8472 = !DILocation(line: 1755, scope: !8463)
!8473 = !DILocation(line: 1628, scope: !8331, inlinedAt: !8474)
!8474 = distinct !DILocation(line: 1756, scope: !8463)
!8475 = !DILocation(line: 1760, scope: !8463)
!8476 = !DILocation(line: 0, scope: !8463)
!8477 = !DILocation(line: 1764, scope: !8463)
!8478 = !DILocation(line: 1766, scope: !8463)
!8479 = !DILocation(line: 1767, scope: !8463)
!8480 = !DILocation(line: 1769, scope: !8463)
!8481 = !DILocation(line: 1770, scope: !8463)
!8482 = !DILocation(line: 1772, scope: !8463)
!8483 = !DILocation(line: 1776, scope: !8463)
!8484 = distinct !DISubprogram(name: "tcl.unset.var.struct", scope: !864, file: !7638, type: !8485, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !8487)
!8485 = !DISubroutineType(types: !8486)
!8486 = !{!657, !7641, !7641, !867, !998, !998, !9}
!8487 = !{!8488, !8489, !8490, !8491, !8492, !8493}
!8488 = !DILocalVariable(name: "varPtr", arg: 1, scope: !8484, file: !2, type: !7641)
!8489 = !DILocalVariable(name: "arrayPtr", arg: 2, scope: !8484, file: !2, type: !7641)
!8490 = !DILocalVariable(name: "interp", arg: 3, scope: !8484, file: !2, type: !867)
!8491 = !DILocalVariable(name: "part1Ptr", arg: 4, scope: !8484, file: !2, type: !998)
!8492 = !DILocalVariable(name: "part2Ptr", arg: 5, scope: !8484, file: !2, type: !998)
!8493 = !DILocalVariable(name: "flags", arg: 6, scope: !8484, file: !2, type: !9)
!8494 = !DILocation(line: 1641, scope: !8340, inlinedAt: !8495)
!8495 = distinct !DILocation(line: 1907, scope: !8484)
!8496 = !DILocation(line: 1792, scope: !8484)
!8497 = !DILocation(line: 167, scope: !7685, inlinedAt: !8498)
!8498 = distinct !DILocation(line: 288, scope: !7770, inlinedAt: !8499)
!8499 = distinct !DILocation(line: 1796, scope: !8484)
!8500 = !DILocation(line: 168, scope: !7685, inlinedAt: !8498)
!8501 = !DILocation(line: 1799, scope: !8484)
!8502 = !DILocation(line: 1797, scope: !8484)
!8503 = !DILocation(line: 167, scope: !7685, inlinedAt: !8504)
!8504 = distinct !DILocation(line: 321, scope: !7791, inlinedAt: !8505)
!8505 = distinct !DILocation(line: 1801, scope: !8484)
!8506 = !DILocation(line: 168, scope: !7685, inlinedAt: !8504)
!8507 = !DILocation(line: 1802, scope: !8484)
!8508 = !DILocation(line: 1592, scope: !8297, inlinedAt: !8509)
!8509 = distinct !DILocation(line: 1807, scope: !8484)
!8510 = !DILocation(line: 167, scope: !7685, inlinedAt: !8511)
!8511 = distinct !DILocation(line: 277, scope: !7763, inlinedAt: !8512)
!8512 = distinct !DILocation(line: 1594, scope: !8297, inlinedAt: !8509)
!8513 = !DILocation(line: 168, scope: !7685, inlinedAt: !8511)
!8514 = !DILocation(line: 1594, scope: !8297, inlinedAt: !8509)
!8515 = !DILocation(line: 1596, scope: !8297, inlinedAt: !8509)
!8516 = !DILocation(line: 1597, scope: !8297, inlinedAt: !8509)
!8517 = !DILocation(line: 1599, scope: !8297, inlinedAt: !8509)
!8518 = !DILocation(line: 1605, scope: !8297, inlinedAt: !8509)
!8519 = !DILocation(line: 0, scope: !8297, inlinedAt: !8509)
!8520 = !DILocation(line: 1607, scope: !8297, inlinedAt: !8509)
!8521 = !DILocation(line: 1608, scope: !8297, inlinedAt: !8509)
!8522 = !DILocation(line: 71, scope: !1020, inlinedAt: !8523)
!8523 = distinct !DILocation(line: 1608, scope: !8297, inlinedAt: !8509)
!8524 = !DILocation(line: 72, scope: !1020, inlinedAt: !8523)
!8525 = !DILocation(line: 73, scope: !1020, inlinedAt: !8523)
!8526 = !DILocation(line: 75, scope: !1020, inlinedAt: !8523)
!8527 = !DILocation(line: 76, scope: !1020, inlinedAt: !8523)
!8528 = !DILocation(line: 77, scope: !1020, inlinedAt: !8523)
!8529 = !DILocation(line: 79, scope: !1020, inlinedAt: !8523)
!8530 = !DILocation(line: 80, scope: !1020, inlinedAt: !8523)
!8531 = !DILocation(line: 1609, scope: !8297, inlinedAt: !8509)
!8532 = !DILocation(line: 193, scope: !7702, inlinedAt: !8533)
!8533 = distinct !DILocation(line: 1612, scope: !8297, inlinedAt: !8509)
!8534 = !DILocation(line: 1613, scope: !8297, inlinedAt: !8509)
!8535 = !DILocation(line: 167, scope: !7685, inlinedAt: !8536)
!8536 = distinct !DILocation(line: 277, scope: !7763, inlinedAt: !8537)
!8537 = distinct !DILocation(line: 1594, scope: !8297, inlinedAt: !8538)
!8538 = distinct !DILocation(line: 1808, scope: !8484)
!8539 = !DILocation(line: 1614, scope: !8297, inlinedAt: !8509)
!8540 = !DILocation(line: 168, scope: !7685, inlinedAt: !8536)
!8541 = !DILocation(line: 1594, scope: !8297, inlinedAt: !8538)
!8542 = !DILocation(line: 1596, scope: !8297, inlinedAt: !8538)
!8543 = !DILocation(line: 1597, scope: !8297, inlinedAt: !8538)
!8544 = !DILocation(line: 1599, scope: !8297, inlinedAt: !8538)
!8545 = !DILocation(line: 1605, scope: !8297, inlinedAt: !8538)
!8546 = !DILocation(line: 0, scope: !8297, inlinedAt: !8538)
!8547 = !DILocation(line: 1607, scope: !8297, inlinedAt: !8538)
!8548 = !DILocation(line: 1608, scope: !8297, inlinedAt: !8538)
!8549 = !DILocation(line: 71, scope: !1020, inlinedAt: !8550)
!8550 = distinct !DILocation(line: 1608, scope: !8297, inlinedAt: !8538)
!8551 = !DILocation(line: 72, scope: !1020, inlinedAt: !8550)
!8552 = !DILocation(line: 73, scope: !1020, inlinedAt: !8550)
!8553 = !DILocation(line: 75, scope: !1020, inlinedAt: !8550)
!8554 = !DILocation(line: 76, scope: !1020, inlinedAt: !8550)
!8555 = !DILocation(line: 77, scope: !1020, inlinedAt: !8550)
!8556 = !DILocation(line: 79, scope: !1020, inlinedAt: !8550)
!8557 = !DILocation(line: 80, scope: !1020, inlinedAt: !8550)
!8558 = !DILocation(line: 1609, scope: !8297, inlinedAt: !8538)
!8559 = !DILocation(line: 193, scope: !7702, inlinedAt: !8560)
!8560 = distinct !DILocation(line: 1612, scope: !8297, inlinedAt: !8538)
!8561 = !DILocation(line: 1613, scope: !8297, inlinedAt: !8538)
!8562 = !DILocation(line: 1614, scope: !8297, inlinedAt: !8538)
!8563 = !DILocation(line: 1821, scope: !8484)
!8564 = !DILocation(line: 1822, scope: !8484)
!8565 = !DILocation(line: 1823, scope: !8484)
!8566 = !DILocation(line: 130, scope: !7662, inlinedAt: !8567)
!8567 = distinct !DILocation(line: 1824, scope: !8484)
!8568 = !DILocation(line: 131, scope: !7662, inlinedAt: !8567)
!8569 = !DILocation(line: 1835, scope: !8484)
!8570 = !DILocation(line: 1838, scope: !8484)
!8571 = !DILocation(line: 168, scope: !7685, inlinedAt: !8572)
!8572 = distinct !DILocation(line: 288, scope: !7770, inlinedAt: !8573)
!8573 = distinct !DILocation(line: 1840, scope: !8484)
!8574 = !DILocation(line: 1840, scope: !8484)
!8575 = !DILocation(line: 1846, scope: !8484)
!8576 = !DILocation(line: 1848, scope: !8484)
!8577 = !DILocation(line: 193, scope: !7702, inlinedAt: !8578)
!8578 = distinct !DILocation(line: 1851, scope: !8484)
!8579 = !DILocation(line: 1852, scope: !8484)
!8580 = !DILocation(line: 168, scope: !7685, inlinedAt: !8581)
!8581 = distinct !DILocation(line: 321, scope: !7791, inlinedAt: !8582)
!8582 = distinct !DILocation(line: 1853, scope: !8484)
!8583 = !DILocation(line: 1853, scope: !8484)
!8584 = !DILocation(line: 1855, scope: !8484)
!8585 = !DILocation(line: 1857, scope: !8484)
!8586 = !DILocation(line: 167, scope: !7685, inlinedAt: !8587)
!8587 = distinct !DILocation(line: 321, scope: !7791, inlinedAt: !8588)
!8588 = distinct !DILocation(line: 1860, scope: !8484)
!8589 = !DILocation(line: 1858, scope: !8484)
!8590 = !DILocation(line: 168, scope: !7685, inlinedAt: !8587)
!8591 = !DILocation(line: 1860, scope: !8484)
!8592 = !DILocation(line: 1862, scope: !8484)
!8593 = !DILocation(line: 167, scope: !7685, inlinedAt: !8594)
!8594 = distinct !DILocation(line: 321, scope: !7791, inlinedAt: !8595)
!8595 = distinct !DILocation(line: 1864, scope: !8484)
!8596 = !DILocation(line: 168, scope: !7685, inlinedAt: !8594)
!8597 = !DILocation(line: 1864, scope: !8484)
!8598 = !DILocation(line: 193, scope: !7702, inlinedAt: !8599)
!8599 = distinct !DILocation(line: 1866, scope: !8484)
!8600 = !DILocation(line: 1867, scope: !8484)
!8601 = !DILocation(line: 1028, scope: !7934, inlinedAt: !8602)
!8602 = distinct !DILocation(line: 1867, scope: !8484)
!8603 = !DILocation(line: 1032, scope: !7934, inlinedAt: !8602)
!8604 = !DILocation(line: 167, scope: !7685, inlinedAt: !8605)
!8605 = distinct !DILocation(line: 288, scope: !7770, inlinedAt: !8606)
!8606 = distinct !DILocation(line: 1873, scope: !8484)
!8607 = !DILocation(line: 168, scope: !7685, inlinedAt: !8605)
!8608 = !DILocation(line: 1873, scope: !8484)
!8609 = !DILocation(line: 1875, scope: !8484)
!8610 = !DILocation(line: 1877, scope: !8484)
!8611 = !DILocation(line: 1879, scope: !8484)
!8612 = !DILocation(line: 1882, scope: !8484)
!8613 = !DILocation(line: 1883, scope: !8484)
!8614 = !DILocation(line: 0, scope: !8484)
!8615 = !DILocation(line: 1887, scope: !8484)
!8616 = !DILocation(line: 1754, scope: !8463, inlinedAt: !8617)
!8617 = distinct !DILocation(line: 1889, scope: !8484)
!8618 = !{!8619}
!8619 = distinct !{!8619, !8620, !"var.dispose.activetraces: %interp"}
!8620 = distinct !{!8620, !"var.dispose.activetraces"}
!8621 = !DILocation(line: 1755, scope: !8463, inlinedAt: !8617)
!8622 = !DILocation(line: 1628, scope: !8331, inlinedAt: !8623)
!8623 = distinct !DILocation(line: 1756, scope: !8463, inlinedAt: !8617)
!8624 = !DILocation(line: 1752, scope: !8463, inlinedAt: !8617)
!8625 = !DILocation(line: 1760, scope: !8463, inlinedAt: !8617)
!8626 = !DILocation(line: 0, scope: !8463, inlinedAt: !8617)
!8627 = !{!8628, !8629}
!8628 = distinct !{!8628, !8620, !"var.dispose.activetraces: %varPtr"}
!8629 = distinct !{!8629, !8620, !"var.dispose.activetraces: %tracePtr"}
!8630 = !DILocation(line: 1764, scope: !8463, inlinedAt: !8617)
!8631 = !DILocation(line: 1766, scope: !8463, inlinedAt: !8617)
!8632 = !DILocation(line: 1767, scope: !8463, inlinedAt: !8617)
!8633 = !DILocation(line: 1769, scope: !8463, inlinedAt: !8617)
!8634 = !DILocation(line: 1770, scope: !8463, inlinedAt: !8617)
!8635 = !DILocation(line: 1772, scope: !8463, inlinedAt: !8617)
!8636 = !DILocation(line: 193, scope: !7702, inlinedAt: !8637)
!8637 = distinct !DILocation(line: 1890, scope: !8484)
!8638 = !DILocation(line: 1891, scope: !8484)
!8639 = !DILocation(line: 167, scope: !7685, inlinedAt: !8640)
!8640 = distinct !DILocation(line: 233, scope: !7735, inlinedAt: !8641)
!8641 = distinct !DILocation(line: 1894, scope: !8484)
!8642 = !DILocation(line: 168, scope: !7685, inlinedAt: !8640)
!8643 = !DILocation(line: 94, scope: !7637, inlinedAt: !8644)
!8644 = distinct !DILocation(line: 105, scope: !7645, inlinedAt: !8645)
!8645 = distinct !DILocation(line: 1894, scope: !8484)
!8646 = !DILocation(line: 105, scope: !7645, inlinedAt: !8645)
!8647 = !DILocation(line: 1894, scope: !8484)
!8648 = !DILocation(line: 71, scope: !1020, inlinedAt: !8649)
!8649 = distinct !DILocation(line: 1896, scope: !8484)
!8650 = !DILocation(line: 72, scope: !1020, inlinedAt: !8649)
!8651 = !DILocation(line: 73, scope: !1020, inlinedAt: !8649)
!8652 = !DILocation(line: 75, scope: !1020, inlinedAt: !8649)
!8653 = !DILocation(line: 76, scope: !1020, inlinedAt: !8649)
!8654 = !DILocation(line: 77, scope: !1020, inlinedAt: !8649)
!8655 = !DILocation(line: 79, scope: !1020, inlinedAt: !8649)
!8656 = !DILocation(line: 80, scope: !1020, inlinedAt: !8649)
!8657 = !DILocation(line: 168, scope: !7685, inlinedAt: !8658)
!8658 = distinct !DILocation(line: 244, scope: !7742, inlinedAt: !8659)
!8659 = distinct !DILocation(line: 1899, scope: !8484)
!8660 = !DILocation(line: 1899, scope: !8484)
!8661 = !DILocation(line: 1907, scope: !8484)
!8662 = !DILocation(line: 167, scope: !7685, inlinedAt: !8663)
!8663 = distinct !DILocation(line: 277, scope: !7763, inlinedAt: !8664)
!8664 = distinct !DILocation(line: 1594, scope: !8297, inlinedAt: !8665)
!8665 = distinct !DILocation(line: 1645, scope: !8340, inlinedAt: !8495)
!8666 = !DILocation(line: 168, scope: !7685, inlinedAt: !8663)
!8667 = !DILocation(line: 1594, scope: !8297, inlinedAt: !8665)
!8668 = !DILocation(line: 1596, scope: !8297, inlinedAt: !8665)
!8669 = !DILocation(line: 1597, scope: !8297, inlinedAt: !8665)
!8670 = !{!8671}
!8671 = distinct !{!8671, !8672, !"tcl.unset.var.array: %part1Ptr"}
!8672 = distinct !{!8672, !"tcl.unset.var.array"}
!8673 = !DILocation(line: 1599, scope: !8297, inlinedAt: !8665)
!8674 = !{!8675, !8671, !8676}
!8675 = distinct !{!8675, !8672, !"tcl.unset.var.array: %interp"}
!8676 = distinct !{!8676, !8672, !"tcl.unset.var.array: %varPtr"}
!8677 = !DILocation(line: 1605, scope: !8297, inlinedAt: !8665)
!8678 = !DILocation(line: 0, scope: !8297, inlinedAt: !8665)
!8679 = !DILocation(line: 1607, scope: !8297, inlinedAt: !8665)
!8680 = !DILocation(line: 1608, scope: !8297, inlinedAt: !8665)
!8681 = !DILocation(line: 71, scope: !1020, inlinedAt: !8682)
!8682 = distinct !DILocation(line: 1608, scope: !8297, inlinedAt: !8665)
!8683 = !DILocation(line: 72, scope: !1020, inlinedAt: !8682)
!8684 = !DILocation(line: 73, scope: !1020, inlinedAt: !8682)
!8685 = !DILocation(line: 75, scope: !1020, inlinedAt: !8682)
!8686 = !DILocation(line: 76, scope: !1020, inlinedAt: !8682)
!8687 = !DILocation(line: 77, scope: !1020, inlinedAt: !8682)
!8688 = !DILocation(line: 79, scope: !1020, inlinedAt: !8682)
!8689 = !DILocation(line: 80, scope: !1020, inlinedAt: !8682)
!8690 = !DILocation(line: 1609, scope: !8297, inlinedAt: !8665)
!8691 = !DILocation(line: 193, scope: !7702, inlinedAt: !8692)
!8692 = distinct !DILocation(line: 1612, scope: !8297, inlinedAt: !8665)
!8693 = !{!8676}
!8694 = !{!8675, !8671}
!8695 = !DILocation(line: 1613, scope: !8297, inlinedAt: !8665)
!8696 = !DILocation(line: 0, scope: !7671, inlinedAt: !8697)
!8697 = distinct !DILocation(line: 1646, scope: !8340, inlinedAt: !8495)
!8698 = !DILocation(line: 143, scope: !7671, inlinedAt: !8697)
!8699 = !DILocation(line: 1614, scope: !8297, inlinedAt: !8665)
!8700 = !DILocation(line: 475, scope: !7885, inlinedAt: !8701)
!8701 = distinct !DILocation(line: 1646, scope: !8340, inlinedAt: !8495)
!8702 = !DILocation(line: 476, scope: !7885, inlinedAt: !8701)
!8703 = !DILocation(line: 478, scope: !7885, inlinedAt: !8701)
!8704 = !DILocation(line: 1650, scope: !8340, inlinedAt: !8495)
!8705 = !DILocation(line: 0, scope: !8340, inlinedAt: !8495)
!8706 = !DILocation(line: 167, scope: !7685, inlinedAt: !8707)
!8707 = distinct !DILocation(line: 233, scope: !7735, inlinedAt: !8708)
!8708 = distinct !DILocation(line: 1652, scope: !8340, inlinedAt: !8495)
!8709 = !DILocation(line: 168, scope: !7685, inlinedAt: !8707)
!8710 = !DILocation(line: 94, scope: !7637, inlinedAt: !8711)
!8711 = distinct !DILocation(line: 105, scope: !7645, inlinedAt: !8712)
!8712 = distinct !DILocation(line: 1652, scope: !8340, inlinedAt: !8495)
!8713 = !DILocation(line: 105, scope: !7645, inlinedAt: !8712)
!8714 = !DILocation(line: 1652, scope: !8340, inlinedAt: !8495)
!8715 = !DILocation(line: 71, scope: !1020, inlinedAt: !8716)
!8716 = distinct !DILocation(line: 1654, scope: !8340, inlinedAt: !8495)
!8717 = !DILocation(line: 72, scope: !1020, inlinedAt: !8716)
!8718 = !DILocation(line: 73, scope: !1020, inlinedAt: !8716)
!8719 = !DILocation(line: 75, scope: !1020, inlinedAt: !8716)
!8720 = !DILocation(line: 76, scope: !1020, inlinedAt: !8716)
!8721 = !DILocation(line: 77, scope: !1020, inlinedAt: !8716)
!8722 = !DILocation(line: 79, scope: !1020, inlinedAt: !8716)
!8723 = !DILocation(line: 80, scope: !1020, inlinedAt: !8716)
!8724 = !DILocation(line: 117, scope: !7653, inlinedAt: !8725)
!8725 = distinct !DILocation(line: 1655, scope: !8340, inlinedAt: !8495)
!8726 = !DILocation(line: 180, scope: !7693, inlinedAt: !8727)
!8727 = distinct !DILocation(line: 368, scope: !7818, inlinedAt: !8728)
!8728 = distinct !DILocation(line: 1662, scope: !8340, inlinedAt: !8495)
!8729 = !DILocation(line: 1656, scope: !8340, inlinedAt: !8495)
!8730 = !DILocation(line: 168, scope: !7685, inlinedAt: !8731)
!8731 = distinct !DILocation(line: 288, scope: !7770, inlinedAt: !8732)
!8732 = distinct !DILocation(line: 1663, scope: !8340, inlinedAt: !8495)
!8733 = !DILocation(line: 1663, scope: !8340, inlinedAt: !8495)
!8734 = !DILocation(line: 168, scope: !7685, inlinedAt: !8735)
!8735 = distinct !DILocation(line: 321, scope: !7791, inlinedAt: !8736)
!8736 = distinct !DILocation(line: 1665, scope: !8340, inlinedAt: !8495)
!8737 = !DILocation(line: 1665, scope: !8340, inlinedAt: !8495)
!8738 = !DILocation(line: 429, scope: !7862, inlinedAt: !8739)
!8739 = distinct !DILocation(line: 1667, scope: !8340, inlinedAt: !8495)
!8740 = !DILocation(line: 430, scope: !7862, inlinedAt: !8739)
!8741 = !DILocation(line: 193, scope: !7702, inlinedAt: !8742)
!8742 = distinct !DILocation(line: 1668, scope: !8340, inlinedAt: !8495)
!8743 = !DILocation(line: 1670, scope: !8340, inlinedAt: !8495)
!8744 = !{!8675, !8676}
!8745 = !{!8671, !8676}
!8746 = !DILocation(line: 1671, scope: !8340, inlinedAt: !8495)
!8747 = !DILocation(line: 1674, scope: !8340, inlinedAt: !8495)
!8748 = !DILocation(line: 1676, scope: !8340, inlinedAt: !8495)
!8749 = !DILocation(line: 1682, scope: !8340, inlinedAt: !8495)
!8750 = !DILocation(line: 1684, scope: !8340, inlinedAt: !8495)
!8751 = !DILocation(line: 1685, scope: !8340, inlinedAt: !8495)
!8752 = !DILocation(line: 1628, scope: !8331, inlinedAt: !8753)
!8753 = distinct !DILocation(line: 1686, scope: !8340, inlinedAt: !8495)
!8754 = !DILocation(line: 1689, scope: !8340, inlinedAt: !8495)
!8755 = !DILocation(line: 193, scope: !7702, inlinedAt: !8756)
!8756 = distinct !DILocation(line: 1690, scope: !8340, inlinedAt: !8495)
!8757 = !{!8675}
!8758 = !DILocation(line: 1695, scope: !8340, inlinedAt: !8495)
!8759 = !DILocation(line: 1697, scope: !8340, inlinedAt: !8495)
!8760 = !DILocation(line: 1698, scope: !8340, inlinedAt: !8495)
!8761 = !DILocation(line: 1700, scope: !8340, inlinedAt: !8495)
!8762 = !DILocation(line: 1701, scope: !8340, inlinedAt: !8495)
!8763 = !DILocation(line: 1703, scope: !8340, inlinedAt: !8495)
!8764 = !DILocation(line: 130, scope: !7662, inlinedAt: !8765)
!8765 = distinct !DILocation(line: 1706, scope: !8340, inlinedAt: !8495)
!8766 = !DILocation(line: 131, scope: !7662, inlinedAt: !8765)
!8767 = !DILocation(line: 168, scope: !7685, inlinedAt: !8768)
!8768 = distinct !DILocation(line: 405, scope: !7844, inlinedAt: !8769)
!8769 = distinct !DILocation(line: 1714, scope: !8340, inlinedAt: !8495)
!8770 = !DILocation(line: 405, scope: !7844, inlinedAt: !8769)
!8771 = !DILocation(line: 193, scope: !7702, inlinedAt: !8772)
!8772 = distinct !DILocation(line: 407, scope: !7844, inlinedAt: !8769)
!8773 = !DILocation(line: 168, scope: !7685, inlinedAt: !8774)
!8774 = distinct !DILocation(line: 343, scope: !7805, inlinedAt: !8775)
!8775 = distinct !DILocation(line: 408, scope: !7844, inlinedAt: !8769)
!8776 = !DILocation(line: 408, scope: !7844, inlinedAt: !8769)
!8777 = !DILocation(line: 356, scope: !7812, inlinedAt: !8778)
!8778 = distinct !DILocation(line: 410, scope: !7844, inlinedAt: !8769)
!8779 = !DILocation(line: 411, scope: !7844, inlinedAt: !8769)
!8780 = !DILocation(line: 412, scope: !7844, inlinedAt: !8769)
!8781 = !DILocation(line: 494, scope: !7903, inlinedAt: !8782)
!8782 = distinct !DILocation(line: 1717, scope: !8340, inlinedAt: !8495)
!8783 = !DILocation(line: 496, scope: !7903, inlinedAt: !8782)
!8784 = !DILocation(line: 461, scope: !7876, inlinedAt: !8785)
!8785 = distinct !DILocation(line: 1720, scope: !8340, inlinedAt: !8495)
!8786 = !DILocation(line: 462, scope: !7876, inlinedAt: !8785)
!8787 = !DILocation(line: 1721, scope: !8340, inlinedAt: !8495)
!8788 = !DILocation(line: 1908, scope: !8484)
!8789 = !DILocation(line: 168, scope: !7685, inlinedAt: !8790)
!8790 = distinct !DILocation(line: 255, scope: !7749, inlinedAt: !8791)
!8791 = distinct !DILocation(line: 1910, scope: !8484)
!8792 = !DILocation(line: 1910, scope: !8484)
!8793 = !DILocation(line: 167, scope: !7685, inlinedAt: !8794)
!8794 = distinct !DILocation(line: 343, scope: !7805, inlinedAt: !8795)
!8795 = distinct !DILocation(line: 1918, scope: !8484)
!8796 = !DILocation(line: 168, scope: !7685, inlinedAt: !8794)
!8797 = !DILocation(line: 1918, scope: !8484)
!8798 = !DILocation(line: 356, scope: !7812, inlinedAt: !8799)
!8799 = distinct !DILocation(line: 1920, scope: !8484)
!8800 = !DILocation(line: 1921, scope: !8484)
!8801 = !DILocation(line: 1922, scope: !8484)
!8802 = !DILocation(line: 1923, scope: !8484)
!8803 = !DILocation(line: 167, scope: !7685, inlinedAt: !8804)
!8804 = distinct !DILocation(line: 405, scope: !7844, inlinedAt: !8805)
!8805 = distinct !DILocation(line: 1929, scope: !8484)
!8806 = !DILocation(line: 168, scope: !7685, inlinedAt: !8804)
!8807 = !DILocation(line: 405, scope: !7844, inlinedAt: !8805)
!8808 = !DILocation(line: 193, scope: !7702, inlinedAt: !8809)
!8809 = distinct !DILocation(line: 407, scope: !7844, inlinedAt: !8805)
!8810 = !DILocation(line: 168, scope: !7685, inlinedAt: !8811)
!8811 = distinct !DILocation(line: 343, scope: !7805, inlinedAt: !8812)
!8812 = distinct !DILocation(line: 408, scope: !7844, inlinedAt: !8805)
!8813 = !DILocation(line: 408, scope: !7844, inlinedAt: !8805)
!8814 = !DILocation(line: 356, scope: !7812, inlinedAt: !8815)
!8815 = distinct !DILocation(line: 410, scope: !7844, inlinedAt: !8805)
!8816 = !DILocation(line: 411, scope: !7844, inlinedAt: !8805)
!8817 = !DILocation(line: 412, scope: !7844, inlinedAt: !8805)
!8818 = !DILocation(line: 1930, scope: !8484)
!8819 = distinct !DISubprogram(name: "tcl.unset.var.ptr", scope: !864, file: !7638, type: !8820, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !8822)
!8820 = !DISubroutineType(types: !8821)
!8821 = !{!9, !867, !7641, !7641, !998, !998, !9}
!8822 = !{!8823, !8824, !8825, !8826, !8827, !8828}
!8823 = !DILocalVariable(name: "interp", arg: 1, scope: !8819, file: !2, type: !867)
!8824 = !DILocalVariable(name: "varPtr", arg: 2, scope: !8819, file: !2, type: !7641)
!8825 = !DILocalVariable(name: "arrayPtr", arg: 3, scope: !8819, file: !2, type: !7641)
!8826 = !DILocalVariable(name: "part1Ptr", arg: 4, scope: !8819, file: !2, type: !998)
!8827 = !DILocalVariable(name: "part2Ptr", arg: 5, scope: !8819, file: !2, type: !998)
!8828 = !DILocalVariable(name: "flags", arg: 6, scope: !8819, file: !2, type: !9)
!8829 = !DILocation(line: 1045, scope: !7942, inlinedAt: !8830)
!8830 = distinct !DILocation(line: 1964, scope: !8819)
!8831 = !{!8832}
!8832 = distinct !{!8832, !8833, !"var.fast.allowed: %varPtr"}
!8833 = distinct !{!8833, !"var.fast.allowed"}
!8834 = !{!8835}
!8835 = distinct !{!8835, !8833, !"var.fast.allowed: %arrayPtr"}
!8836 = !DILocation(line: 1046, scope: !7942, inlinedAt: !8830)
!8837 = !DILocation(line: 1047, scope: !7942, inlinedAt: !8830)
!8838 = !DILocation(line: 1048, scope: !7942, inlinedAt: !8830)
!8839 = !DILocation(line: 1964, scope: !8819)
!8840 = !DILocation(line: 94, scope: !7637, inlinedAt: !8841)
!8841 = distinct !DILocation(line: 1966, scope: !8819)
!8842 = !DILocation(line: 1967, scope: !8819)
!8843 = !DILocation(line: 117, scope: !7653, inlinedAt: !8844)
!8844 = distinct !DILocation(line: 1969, scope: !8819)
!8845 = !DILocation(line: 71, scope: !1020, inlinedAt: !8846)
!8846 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !8847)
!8847 = distinct !DILocation(line: 1970, scope: !8819)
!8848 = !DILocation(line: 72, scope: !1020, inlinedAt: !8846)
!8849 = !DILocation(line: 73, scope: !1020, inlinedAt: !8846)
!8850 = !DILocation(line: 75, scope: !1020, inlinedAt: !8846)
!8851 = !DILocation(line: 76, scope: !1020, inlinedAt: !8846)
!8852 = !DILocation(line: 77, scope: !1020, inlinedAt: !8846)
!8853 = !DILocation(line: 79, scope: !1020, inlinedAt: !8846)
!8854 = !DILocation(line: 80, scope: !1020, inlinedAt: !8846)
!8855 = !DILocation(line: 1971, scope: !8819)
!8856 = !DILocation(line: 1973, scope: !8819)
!8857 = distinct !DISubprogram(name: "tcl.read.global.ns", scope: !864, file: !7638, type: !8858, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !8861)
!8858 = !DISubroutineType(types: !8859)
!8859 = !{!1439, !8860, !998, !976}
!8860 = !DIDerivedType(tag: DW_TAG_typedef, name: "Namespace*", scope: !12, file: !11, line: 1518, baseType: !892)
!8861 = !{!8862, !8863, !8864}
!8862 = !DILocalVariable(name: "ns", arg: 1, scope: !8857, file: !2, type: !8860)
!8863 = !DILocalVariable(name: "varname", arg: 2, scope: !8857, file: !2, type: !998)
!8864 = !DILocalVariable(name: "ecvar", arg: 3, scope: !8857, file: !2, type: !976)
!8865 = !DILocation(line: 2058, scope: !8857)
!8866 = !DILocation(line: 2059, scope: !8857)
!8867 = !DILocation(line: 2061, scope: !8857)
!8868 = !DILocation(line: 2062, scope: !8857)
!8869 = !DILocation(line: 2063, scope: !8857)
!8870 = !DILocation(line: 2065, scope: !8857)
!8871 = !DILocation(line: 2067, scope: !8857)
!8872 = !DILocation(line: 2068, scope: !8857)
!8873 = !DILocation(line: 1045, scope: !7942, inlinedAt: !8874)
!8874 = distinct !DILocation(line: 1090, scope: !7973, inlinedAt: !8875)
!8875 = distinct !DILocation(line: 2070, scope: !8857)
!8876 = !{!8877}
!8877 = distinct !{!8877, !8878, !"tcl.read.var.ptr: %varPtr"}
!8878 = distinct !{!8878, !"tcl.read.var.ptr"}
!8879 = !{!8880}
!8880 = distinct !{!8880, !8878, !"tcl.read.var.ptr: %interp"}
!8881 = !DILocation(line: 1048, scope: !7942, inlinedAt: !8874)
!8882 = !DILocation(line: 1090, scope: !7973, inlinedAt: !8875)
!8883 = !DILocation(line: 94, scope: !7637, inlinedAt: !8884)
!8884 = distinct !DILocation(line: 1092, scope: !7973, inlinedAt: !8875)
!8885 = !DILocation(line: 1093, scope: !7973, inlinedAt: !8875)
!8886 = !DILocation(line: 1097, scope: !7973, inlinedAt: !8875)
!8887 = !DILocation(line: 2071, scope: !8857)
!8888 = !DILocation(line: 38, scope: !1004, inlinedAt: !8889)
!8889 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !8890)
!8890 = distinct !DILocation(line: 2073, scope: !8857)
!8891 = !DILocation(line: 39, scope: !1004, inlinedAt: !8889)
!8892 = !DILocation(line: 2074, scope: !8857)
!8893 = !DILocation(line: 2076, scope: !8857)
!8894 = !DILocation(line: 2077, scope: !8857)
!8895 = distinct !DISubprogram(name: "tcl.read.global", scope: !864, file: !7638, type: !8896, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !8898)
!8896 = !DISubroutineType(types: !8897)
!8897 = !{!1439, !998, !998, !976}
!8898 = !{!8899, !8900, !8901}
!8899 = !DILocalVariable(name: "nsname", arg: 1, scope: !8895, file: !2, type: !998)
!8900 = !DILocalVariable(name: "varname", arg: 2, scope: !8895, file: !2, type: !998)
!8901 = !DILocalVariable(name: "ecvar", arg: 3, scope: !8895, file: !2, type: !976)
!8902 = !DILocation(line: 2058, scope: !8857, inlinedAt: !8903)
!8903 = distinct !DILocation(line: 2104, scope: !8895)
!8904 = !DILocation(line: 2097, scope: !8895)
!8905 = !DILocation(line: 2098, scope: !8895)
!8906 = !DILocation(line: 2099, scope: !8895)
!8907 = !DILocation(line: 2100, scope: !8895)
!8908 = !DILocation(line: 2102, scope: !8895)
!8909 = !DILocation(line: 2059, scope: !8857, inlinedAt: !8903)
!8910 = !DILocation(line: 2061, scope: !8857, inlinedAt: !8903)
!8911 = !DILocation(line: 2062, scope: !8857, inlinedAt: !8903)
!8912 = !DILocation(line: 2063, scope: !8857, inlinedAt: !8903)
!8913 = !DILocation(line: 2065, scope: !8857, inlinedAt: !8903)
!8914 = !DILocation(line: 2067, scope: !8857, inlinedAt: !8903)
!8915 = !DILocation(line: 2068, scope: !8857, inlinedAt: !8903)
!8916 = !DILocation(line: 1045, scope: !7942, inlinedAt: !8917)
!8917 = distinct !DILocation(line: 1090, scope: !7973, inlinedAt: !8918)
!8918 = distinct !DILocation(line: 2070, scope: !8857, inlinedAt: !8903)
!8919 = !{!8920}
!8920 = distinct !{!8920, !8921, !"tcl.read.var.ptr: %varPtr"}
!8921 = distinct !{!8921, !"tcl.read.var.ptr"}
!8922 = !{!8923}
!8923 = distinct !{!8923, !8921, !"tcl.read.var.ptr: %interp"}
!8924 = !DILocation(line: 1048, scope: !7942, inlinedAt: !8917)
!8925 = !DILocation(line: 1090, scope: !7973, inlinedAt: !8918)
!8926 = !DILocation(line: 94, scope: !7637, inlinedAt: !8927)
!8927 = distinct !DILocation(line: 1092, scope: !7973, inlinedAt: !8918)
!8928 = !DILocation(line: 1093, scope: !7973, inlinedAt: !8918)
!8929 = !DILocation(line: 1097, scope: !7973, inlinedAt: !8918)
!8930 = !DILocation(line: 2071, scope: !8857, inlinedAt: !8903)
!8931 = !DILocation(line: 38, scope: !1004, inlinedAt: !8932)
!8932 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !8933)
!8933 = distinct !DILocation(line: 2073, scope: !8857, inlinedAt: !8903)
!8934 = !DILocation(line: 39, scope: !1004, inlinedAt: !8932)
!8935 = !DILocation(line: 2074, scope: !8857, inlinedAt: !8903)
!8936 = !DILocation(line: 2076, scope: !8857, inlinedAt: !8903)
!8937 = !DILocation(line: 2077, scope: !8857, inlinedAt: !8903)
!8938 = !DILocation(line: 0, scope: !8857, inlinedAt: !8903)
!8939 = !DILocation(line: 2104, scope: !8895)
!8940 = !DILocation(line: 2106, scope: !8895)
!8941 = !DILocation(line: 2107, scope: !8895)
!8942 = distinct !DISubprogram(name: "tcl.namespace.global", scope: !864, file: !7638, type: !8943, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !3)
!8943 = !DISubroutineType(types: !8944)
!8944 = !{!8860}
!8945 = !DILocation(line: 2119, scope: !8942)
!8946 = !DILocation(line: 2120, scope: !8942)
!8947 = distinct !DISubprogram(name: "tcl.namespace.current", scope: !864, file: !7638, type: !8943, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !3)
!8948 = !DILocation(line: 2132, scope: !8947)
!8949 = !DILocation(line: 2133, scope: !8947)
!8950 = !DILocation(line: 2134, scope: !8947)
!8951 = distinct !DISubprogram(name: "tcl.direct.append", scope: !864, file: !7638, type: !2198, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !8952)
!8952 = !{!8953, !8954, !8955, !8956}
!8953 = !DILocalVariable(name: "varname", arg: 1, scope: !8951, file: !2, type: !998)
!8954 = !DILocalVariable(name: "elem", arg: 2, scope: !8951, file: !2, type: !998)
!8955 = !DILocalVariable(name: "value", arg: 3, scope: !8951, file: !2, type: !998)
!8956 = !DILocalVariable(name: "ecvar", arg: 4, scope: !8951, file: !2, type: !976)
!8957 = !DILocation(line: 2149, scope: !8951)
!8958 = !DILocation(line: 2150, scope: !8951)
!8959 = !DILocation(line: 2151, scope: !8951)
!8960 = !DILocation(line: 38, scope: !1004, inlinedAt: !8961)
!8961 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !8962)
!8962 = distinct !DILocation(line: 2153, scope: !8951)
!8963 = !DILocation(line: 39, scope: !1004, inlinedAt: !8961)
!8964 = !DILocation(line: 2154, scope: !8951)
!8965 = !DILocation(line: 2156, scope: !8951)
!8966 = !DILocation(line: 2157, scope: !8951)
!8967 = distinct !DISubprogram(name: "tcl.direct.exists", scope: !864, file: !7638, type: !4212, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !8968)
!8968 = !{!8969, !8970}
!8969 = !DILocalVariable(name: "varname", arg: 1, scope: !8967, file: !2, type: !998)
!8970 = !DILocalVariable(name: "elem", arg: 2, scope: !8967, file: !2, type: !998)
!8971 = !DILocation(line: 2171, scope: !8967)
!8972 = !DILocation(line: 2172, scope: !8967)
!8973 = !DILocation(line: 2173, scope: !8967)
!8974 = distinct !DISubprogram(name: "tcl.direct.get", scope: !864, file: !7638, type: !2117, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !8975)
!8975 = !{!8976, !8977, !8978}
!8976 = !DILocalVariable(name: "varname", arg: 1, scope: !8974, file: !2, type: !998)
!8977 = !DILocalVariable(name: "elem", arg: 2, scope: !8974, file: !2, type: !998)
!8978 = !DILocalVariable(name: "ecvar", arg: 3, scope: !8974, file: !2, type: !976)
!8979 = !DILocation(line: 2186, scope: !8974)
!8980 = !DILocation(line: 2187, scope: !8974)
!8981 = !DILocation(line: 2188, scope: !8974)
!8982 = !DILocation(line: 38, scope: !1004, inlinedAt: !8983)
!8983 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !8984)
!8984 = distinct !DILocation(line: 2190, scope: !8974)
!8985 = !DILocation(line: 39, scope: !1004, inlinedAt: !8983)
!8986 = !DILocation(line: 2191, scope: !8974)
!8987 = !DILocation(line: 2193, scope: !8974)
!8988 = !DILocation(line: 2194, scope: !8974)
!8989 = distinct !DISubprogram(name: "tcl.direct.lappend", scope: !864, file: !7638, type: !2198, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !8990)
!8990 = !{!8991, !8992, !8993, !8994}
!8991 = !DILocalVariable(name: "varname", arg: 1, scope: !8989, file: !2, type: !998)
!8992 = !DILocalVariable(name: "elem", arg: 2, scope: !8989, file: !2, type: !998)
!8993 = !DILocalVariable(name: "value", arg: 3, scope: !8989, file: !2, type: !998)
!8994 = !DILocalVariable(name: "ecvar", arg: 4, scope: !8989, file: !2, type: !976)
!8995 = !DILocation(line: 2210, scope: !8989)
!8996 = !DILocation(line: 2211, scope: !8989)
!8997 = !DILocation(line: 2212, scope: !8989)
!8998 = !DILocation(line: 38, scope: !1004, inlinedAt: !8999)
!8999 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !9000)
!9000 = distinct !DILocation(line: 2214, scope: !8989)
!9001 = !DILocation(line: 39, scope: !1004, inlinedAt: !8999)
!9002 = !DILocation(line: 2215, scope: !8989)
!9003 = !DILocation(line: 2217, scope: !8989)
!9004 = !DILocation(line: 2218, scope: !8989)
!9005 = distinct !DISubprogram(name: "tcl.direct.lappendList", scope: !864, file: !7638, type: !2198, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !9006)
!9006 = !{!9007, !9008, !9009, !9010}
!9007 = !DILocalVariable(name: "varname", arg: 1, scope: !9005, file: !2, type: !998)
!9008 = !DILocalVariable(name: "elem", arg: 2, scope: !9005, file: !2, type: !998)
!9009 = !DILocalVariable(name: "value", arg: 3, scope: !9005, file: !2, type: !998)
!9010 = !DILocalVariable(name: "ecvar", arg: 4, scope: !9005, file: !2, type: !976)
!9011 = !DILocation(line: 2236, scope: !9005)
!9012 = !DILocation(line: 2237, scope: !9005)
!9013 = !DILocation(line: 2238, scope: !9005)
!9014 = !DILocation(line: 2239, scope: !9005)
!9015 = !DILocation(line: 2240, scope: !9005)
!9016 = !DILocation(line: 2242, scope: !9005)
!9017 = !DILocation(line: 2248, scope: !9005)
!9018 = !DILocation(line: 2249, scope: !9005)
!9019 = !DILocation(line: 2251, scope: !9005)
!9020 = !DILocation(line: 2252, scope: !9005)
!9021 = !DILocation(line: 2253, scope: !9005)
!9022 = !DILocation(line: 116, scope: !1345, inlinedAt: !9023)
!9023 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !9024)
!9024 = distinct !DILocation(line: 2255, scope: !9005)
!9025 = !DILocation(line: 138, scope: !1351, inlinedAt: !9024)
!9026 = !DILocation(line: 2255, scope: !9005)
!9027 = !DILocation(line: 2257, scope: !9005)
!9028 = !DILocation(line: 385, scope: !995, inlinedAt: !9029)
!9029 = distinct !DILocation(line: 2257, scope: !9005)
!9030 = !DILocation(line: 386, scope: !995, inlinedAt: !9029)
!9031 = !DILocation(line: 2258, scope: !9005)
!9032 = !DILocation(line: 2261, scope: !9005)
!9033 = !DILocation(line: 2262, scope: !9005)
!9034 = !DILocation(line: 2263, scope: !9005)
!9035 = !DILocation(line: 38, scope: !1004, inlinedAt: !9036)
!9036 = distinct !DILocation(line: 2266, scope: !9005)
!9037 = !DILocation(line: 39, scope: !1004, inlinedAt: !9036)
!9038 = !DILocation(line: 2267, scope: !9005)
!9039 = !DILocation(line: 72, scope: !1020, inlinedAt: !9040)
!9040 = distinct !DILocation(line: 2269, scope: !9005)
!9041 = !DILocation(line: 73, scope: !1020, inlinedAt: !9040)
!9042 = !DILocation(line: 75, scope: !1020, inlinedAt: !9040)
!9043 = !DILocation(line: 76, scope: !1020, inlinedAt: !9040)
!9044 = !DILocation(line: 77, scope: !1020, inlinedAt: !9040)
!9045 = !DILocation(line: 79, scope: !1020, inlinedAt: !9040)
!9046 = !DILocation(line: 80, scope: !1020, inlinedAt: !9040)
!9047 = !DILocation(line: 2270, scope: !9005)
!9048 = !DILocation(line: 2276, scope: !9005)
!9049 = !DILocation(line: 2277, scope: !9005)
!9050 = !DILocation(line: 2279, scope: !9005)
!9051 = !DILocation(line: 2281, scope: !9005)
!9052 = !DILocation(line: 38, scope: !1004, inlinedAt: !9053)
!9053 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !9054)
!9054 = distinct !DILocation(line: 2288, scope: !9005)
!9055 = !DILocation(line: 39, scope: !1004, inlinedAt: !9053)
!9056 = !DILocation(line: 2289, scope: !9005)
!9057 = !DILocation(line: 2291, scope: !9005)
!9058 = !DILocation(line: 2292, scope: !9005)
!9059 = distinct !DISubprogram(name: "tcl.direct.set", scope: !864, file: !7638, type: !2198, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !9060)
!9060 = !{!9061, !9062, !9063, !9064}
!9061 = !DILocalVariable(name: "varname", arg: 1, scope: !9059, file: !2, type: !998)
!9062 = !DILocalVariable(name: "elem", arg: 2, scope: !9059, file: !2, type: !998)
!9063 = !DILocalVariable(name: "value", arg: 3, scope: !9059, file: !2, type: !998)
!9064 = !DILocalVariable(name: "ecvar", arg: 4, scope: !9059, file: !2, type: !976)
!9065 = !DILocation(line: 2308, scope: !9059)
!9066 = !DILocation(line: 2309, scope: !9059)
!9067 = !DILocation(line: 2310, scope: !9059)
!9068 = !DILocation(line: 38, scope: !1004, inlinedAt: !9069)
!9069 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !9070)
!9070 = distinct !DILocation(line: 2312, scope: !9059)
!9071 = !DILocation(line: 39, scope: !1004, inlinedAt: !9069)
!9072 = !DILocation(line: 2313, scope: !9059)
!9073 = !DILocation(line: 2315, scope: !9059)
!9074 = !DILocation(line: 2316, scope: !9059)
!9075 = distinct !DISubprogram(name: "tcl.direct.unset", scope: !864, file: !7638, type: !9076, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !9078)
!9076 = !DISubroutineType(types: !9077)
!9077 = !{!4074, !998, !998, !10, !976}
!9078 = !{!9079, !9080, !9081, !9082}
!9079 = !DILocalVariable(name: "varname", arg: 1, scope: !9075, file: !2, type: !998)
!9080 = !DILocalVariable(name: "elem", arg: 2, scope: !9075, file: !2, type: !998)
!9081 = !DILocalVariable(name: "flag", arg: 3, scope: !9075, file: !2, type: !10)
!9082 = !DILocalVariable(name: "ecvar", arg: 4, scope: !9075, file: !2, type: !976)
!9083 = !DILocation(line: 2332, scope: !9075)
!9084 = !DILocation(line: 392, scope: !21, inlinedAt: !9085)
!9085 = distinct !DILocation(line: 2333, scope: !9075)
!9086 = !DILocation(line: 2333, scope: !9075)
!9087 = !DILocation(line: 2334, scope: !9075)
!9088 = !DILocation(line: 0, scope: !9075)
!9089 = !DILocation(line: 2336, scope: !9075)
!9090 = !DILocation(line: 2337, scope: !9075)
!9091 = !DILocation(line: 2339, scope: !9075)
!9092 = !DILocation(line: 2340, scope: !9075)
!9093 = !DILocation(line: 2343, scope: !9075)
!9094 = !DILocation(line: 2345, scope: !9075)
!9095 = !DILocation(line: 2347, scope: !9075)
!9096 = !DILocation(line: 2348, scope: !9075)
!9097 = distinct !DISubprogram(name: "tcl.direct.isArray", scope: !864, file: !7638, type: !7625, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !9098)
!9098 = !{!9099, !9100}
!9099 = !DILocalVariable(name: "varname", arg: 1, scope: !9097, file: !2, type: !998)
!9100 = !DILocalVariable(name: "ecvar", arg: 2, scope: !9097, file: !2, type: !976)
!9101 = !DILocation(line: 2367, scope: !9097)
!9102 = !DILocation(line: 2368, scope: !9097)
!9103 = !DILocation(line: 2369, scope: !9097)
!9104 = !DILocation(line: 2370, scope: !9097)
!9105 = !DILocation(line: 167, scope: !7685, inlinedAt: !9106)
!9106 = distinct !DILocation(line: 2372, scope: !9097)
!9107 = !DILocation(line: 168, scope: !7685, inlinedAt: !9106)
!9108 = !DILocation(line: 2372, scope: !9097)
!9109 = !DILocation(line: 168, scope: !7685, inlinedAt: !9110)
!9110 = distinct !DILocation(line: 244, scope: !7742, inlinedAt: !9111)
!9111 = distinct !DILocation(line: 2374, scope: !9097)
!9112 = !DILocation(line: 94, scope: !7637, inlinedAt: !9113)
!9113 = distinct !DILocation(line: 105, scope: !7645, inlinedAt: !9114)
!9114 = distinct !DILocation(line: 2374, scope: !9097)
!9115 = !DILocation(line: 105, scope: !7645, inlinedAt: !9114)
!9116 = !DILocation(line: 2374, scope: !9097)
!9117 = !DILocation(line: 2377, scope: !9097)
!9118 = !DILocation(line: 2378, scope: !9097)
!9119 = !DILocation(line: 167, scope: !7685, inlinedAt: !9120)
!9120 = distinct !DILocation(line: 244, scope: !7742, inlinedAt: !9121)
!9121 = distinct !DILocation(line: 2382, scope: !9097)
!9122 = !DILocation(line: 2380, scope: !9097)
!9123 = !DILocation(line: 168, scope: !7685, inlinedAt: !9120)
!9124 = !DILocation(line: 94, scope: !7637, inlinedAt: !9125)
!9125 = distinct !DILocation(line: 105, scope: !7645, inlinedAt: !9126)
!9126 = distinct !DILocation(line: 2382, scope: !9097)
!9127 = !DILocation(line: 105, scope: !7645, inlinedAt: !9126)
!9128 = !DILocation(line: 2382, scope: !9097)
!9129 = !DILocation(line: 2383, scope: !9097)
!9130 = distinct !DISubprogram(name: "tcl.direct.makeArray", scope: !864, file: !7638, type: !7625, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !9131)
!9131 = !{!9132, !9133}
!9132 = !DILocalVariable(name: "varname", arg: 1, scope: !9130, file: !2, type: !998)
!9133 = !DILocalVariable(name: "ecvar", arg: 2, scope: !9130, file: !2, type: !976)
!9134 = !DILocation(line: 2406, scope: !9130)
!9135 = !DILocation(line: 2407, scope: !9130)
!9136 = !DILocation(line: 2408, scope: !9130)
!9137 = !DILocation(line: 2409, scope: !9130)
!9138 = !DILocation(line: 167, scope: !7685, inlinedAt: !9139)
!9139 = distinct !DILocation(line: 244, scope: !7742, inlinedAt: !9140)
!9140 = distinct !DILocation(line: 2411, scope: !9130)
!9141 = !DILocation(line: 168, scope: !7685, inlinedAt: !9139)
!9142 = !DILocation(line: 2411, scope: !9130)
!9143 = !DILocation(line: 168, scope: !7685, inlinedAt: !9144)
!9144 = distinct !DILocation(line: 266, scope: !7756, inlinedAt: !9145)
!9145 = distinct !DILocation(line: 2413, scope: !9130)
!9146 = !DILocation(line: 94, scope: !7637, inlinedAt: !9147)
!9147 = distinct !DILocation(line: 105, scope: !7645, inlinedAt: !9148)
!9148 = distinct !DILocation(line: 2413, scope: !9130)
!9149 = !DILocation(line: 105, scope: !7645, inlinedAt: !9148)
!9150 = !DILocation(line: 2413, scope: !9130)
!9151 = !DILocation(line: 180, scope: !7693, inlinedAt: !9152)
!9152 = distinct !DILocation(line: 2415, scope: !9130)
!9153 = !DILocation(line: 2416, scope: !9130)
!9154 = !DILocation(line: 117, scope: !7653, inlinedAt: !9155)
!9155 = distinct !DILocation(line: 2417, scope: !9130)
!9156 = !DILocation(line: 2419, scope: !9130)
!9157 = !DILocation(line: 2421, scope: !9130)
!9158 = !DILocation(line: 2422, scope: !9130)
!9159 = !DILocation(line: 2423, scope: !9130)
!9160 = !DILocation(line: 2425, scope: !9130)
!9161 = !DILocation(line: 2427, scope: !9130)
!9162 = !DILocation(line: 2428, scope: !9130)
!9163 = !DILocation(line: 116, scope: !1345, inlinedAt: !9164)
!9164 = distinct !DILocation(line: 2428, scope: !9130)
!9165 = !DILocation(line: 2429, scope: !9130)
!9166 = distinct !DISubprogram(name: "array.new", scope: !864, file: !7638, type: !9167, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !3)
!9167 = !DISubroutineType(types: !9168)
!9168 = !{!1677}
!9169 = !DILocation(line: 2450, scope: !9166)
!9170 = !DILocation(line: 2451, scope: !9166)
!9171 = !DILocation(line: 2452, scope: !9166)
!9172 = !DILocation(line: 2454, scope: !9166)
!9173 = !DILocation(line: 2455, scope: !9166)
!9174 = !DILocation(line: 2456, scope: !9166)
!9175 = !DILocation(line: 2457, scope: !9166)
!9176 = distinct !DISubprogram(name: "array.free", scope: !864, file: !7638, type: !9177, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !9179)
!9177 = !DISubroutineType(types: !9178)
!9178 = !{!657, !1677, !998}
!9179 = !{!9180, !9181}
!9180 = !DILocalVariable(name: "array", arg: 1, scope: !9176, file: !2, type: !1677)
!9181 = !DILocalVariable(name: "name", arg: 2, scope: !9176, file: !2, type: !998)
!9182 = !DILocation(line: 2472, scope: !9176)
!9183 = !DILocation(line: 2474, scope: !9176)
!9184 = !DILocation(line: 2475, scope: !9176)
!9185 = !DILocation(line: 2473, scope: !9176)
!9186 = !DILocation(line: 2477, scope: !9176)
!9187 = !DILocation(line: 180, scope: !7693, inlinedAt: !9188)
!9188 = distinct !DILocation(line: 206, scope: !7709, inlinedAt: !9189)
!9189 = distinct !DILocation(line: 2478, scope: !9176)
!9190 = !DILocation(line: 116, scope: !7653, inlinedAt: !9191)
!9191 = distinct !DILocation(line: 207, scope: !7709, inlinedAt: !9189)
!9192 = !DILocation(line: 117, scope: !7653, inlinedAt: !9191)
!9193 = !DILocation(line: 2479, scope: !9176)
!9194 = !DILocation(line: 1973, scope: !8819, inlinedAt: !9195)
!9195 = distinct !DILocation(line: 2479, scope: !9176)
!9196 = !DILocation(line: 2480, scope: !9176)
!9197 = !DILocation(line: 2482, scope: !9176)
!9198 = !DILocation(line: 2483, scope: !9176)
!9199 = distinct !DISubprogram(name: "tcl.array.addRef", scope: !864, file: !7638, type: !9200, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !9202)
!9200 = !DISubroutineType(types: !9201)
!9201 = !{!657, !1677}
!9202 = !{!9203}
!9203 = !DILocalVariable(name: "array", arg: 1, scope: !9199, file: !2, type: !1677)
!9204 = !DILocation(line: 2496, scope: !9199)
!9205 = !DILocation(line: 2497, scope: !9199)
!9206 = !DILocation(line: 2498, scope: !9199)
!9207 = distinct !DISubprogram(name: "tcl.array.addRef.nexist", scope: !864, file: !7638, type: !9208, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !9212)
!9208 = !DISubroutineType(types: !9209)
!9209 = !{!657, !9210}
!9210 = !DICompositeType(tag: DW_TAG_structure_type, name: "ARRAY!", scope: !12, file: !11, line: 1586, size: 16, elements: !9211)
!9211 = !{!9, !1677}
!9212 = !{!9213}
!9213 = !DILocalVariable(name: "array", arg: 1, scope: !9207, file: !2, type: !9210)
!9214 = !DILocation(line: 2510, scope: !9207)
!9215 = !DILocation(line: 2512, scope: !9207)
!9216 = !DILocation(line: 2496, scope: !9199, inlinedAt: !9217)
!9217 = distinct !DILocation(line: 2512, scope: !9207)
!9218 = !DILocation(line: 2497, scope: !9199, inlinedAt: !9217)
!9219 = !DILocation(line: 2513, scope: !9207)
!9220 = !DILocation(line: 2515, scope: !9207)
!9221 = distinct !DISubprogram(name: "tcl.arraystring.addRef", scope: !864, file: !7638, type: !9222, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !9226)
!9222 = !DISubroutineType(types: !9223)
!9223 = !{!657, !9224}
!9224 = !DICompositeType(tag: DW_TAG_structure_type, name: "ARRAYSTRING", scope: !12, file: !11, line: 1554, size: 24, elements: !9225)
!9225 = !{!14, !1678, !998}
!9226 = !{!9227}
!9227 = !DILocalVariable(name: "as", arg: 1, scope: !9221, file: !2, type: !9224)
!9228 = !DILocation(line: 2527, scope: !9221)
!9229 = !DILocation(line: 2529, scope: !9221)
!9230 = !DILocation(line: 2496, scope: !9199, inlinedAt: !9231)
!9231 = distinct !DILocation(line: 2529, scope: !9221)
!9232 = !DILocation(line: 2497, scope: !9199, inlinedAt: !9231)
!9233 = !DILocation(line: 2530, scope: !9221)
!9234 = !DILocation(line: 2532, scope: !9221)
!9235 = !DILocation(line: 38, scope: !1004, inlinedAt: !9236)
!9236 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !9237)
!9237 = distinct !DILocation(line: 2532, scope: !9221)
!9238 = !DILocation(line: 39, scope: !1004, inlinedAt: !9236)
!9239 = !DILocation(line: 2533, scope: !9221)
!9240 = distinct !DISubprogram(name: "tcl.arraystring.addRef.nexist", scope: !864, file: !7638, type: !9241, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !9247)
!9241 = !DISubroutineType(types: !9242)
!9242 = !{!657, !9243}
!9243 = !DICompositeType(tag: DW_TAG_structure_type, name: "ARRAYSTRING!", scope: !12, file: !11, line: 1586, size: 32, elements: !9244)
!9244 = !{!9, !9245}
!9245 = !DICompositeType(tag: DW_TAG_structure_type, name: "ARRAYSTRING", scope: !12, file: !11, line: 1565, size: 24, elements: !9246)
!9246 = !{!14, !1681, !998}
!9247 = !{!9248}
!9248 = !DILocalVariable(name: "as", arg: 1, scope: !9240, file: !2, type: !9243)
!9249 = !DILocation(line: 2545, scope: !9240)
!9250 = !DILocation(line: 2547, scope: !9240)
!9251 = !DILocation(line: 2527, scope: !9221, inlinedAt: !9252)
!9252 = distinct !DILocation(line: 2547, scope: !9240)
!9253 = !DILocation(line: 0, scope: !9221, inlinedAt: !9252)
!9254 = !DILocation(line: 2550, scope: !9240)
!9255 = distinct !DISubprogram(name: "tcl.array.dropRef", scope: !864, file: !7638, type: !9177, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !9256)
!9256 = !{!9257, !9258}
!9257 = !DILocalVariable(name: "array", arg: 1, scope: !9255, file: !2, type: !1677)
!9258 = !DILocalVariable(name: "name", arg: 2, scope: !9255, file: !2, type: !998)
!9259 = !DILocation(line: 2472, scope: !9176, inlinedAt: !9260)
!9260 = distinct !DILocation(line: 2568, scope: !9255)
!9261 = !DILocation(line: 2564, scope: !9255)
!9262 = !DILocation(line: 2565, scope: !9255)
!9263 = !DILocation(line: 2566, scope: !9255)
!9264 = !DILocation(line: 2474, scope: !9176, inlinedAt: !9260)
!9265 = !DILocation(line: 2475, scope: !9176, inlinedAt: !9260)
!9266 = !DILocation(line: 2473, scope: !9176, inlinedAt: !9260)
!9267 = !DILocation(line: 2477, scope: !9176, inlinedAt: !9260)
!9268 = !DILocation(line: 180, scope: !7693, inlinedAt: !9269)
!9269 = distinct !DILocation(line: 206, scope: !7709, inlinedAt: !9270)
!9270 = distinct !DILocation(line: 2478, scope: !9176, inlinedAt: !9260)
!9271 = !DILocation(line: 116, scope: !7653, inlinedAt: !9272)
!9272 = distinct !DILocation(line: 207, scope: !7709, inlinedAt: !9270)
!9273 = !DILocation(line: 117, scope: !7653, inlinedAt: !9272)
!9274 = !DILocation(line: 2479, scope: !9176, inlinedAt: !9260)
!9275 = !DILocation(line: 1973, scope: !8819, inlinedAt: !9276)
!9276 = distinct !DILocation(line: 2479, scope: !9176, inlinedAt: !9260)
!9277 = !DILocation(line: 2480, scope: !9176, inlinedAt: !9260)
!9278 = !DILocation(line: 2482, scope: !9176, inlinedAt: !9260)
!9279 = !DILocation(line: 2483, scope: !9176, inlinedAt: !9260)
!9280 = !DILocation(line: 2569, scope: !9255)
!9281 = !DILocation(line: 2571, scope: !9255)
!9282 = !DILocation(line: 2572, scope: !9255)
!9283 = distinct !DISubprogram(name: "tcl.array.dropRef.nexist", scope: !864, file: !7638, type: !9284, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !9286)
!9284 = !DISubroutineType(types: !9285)
!9285 = !{!657, !9210, !998}
!9286 = !{!9287, !9288}
!9287 = !DILocalVariable(name: "array", arg: 1, scope: !9283, file: !2, type: !9210)
!9288 = !DILocalVariable(name: "name", arg: 2, scope: !9283, file: !2, type: !998)
!9289 = !DILocation(line: 2472, scope: !9176, inlinedAt: !9290)
!9290 = distinct !DILocation(line: 2568, scope: !9255, inlinedAt: !9291)
!9291 = distinct !DILocation(line: 2588, scope: !9283)
!9292 = !DILocation(line: 2586, scope: !9283)
!9293 = !DILocation(line: 2588, scope: !9283)
!9294 = !DILocation(line: 2564, scope: !9255, inlinedAt: !9291)
!9295 = !DILocation(line: 2565, scope: !9255, inlinedAt: !9291)
!9296 = !DILocation(line: 2566, scope: !9255, inlinedAt: !9291)
!9297 = !DILocation(line: 2474, scope: !9176, inlinedAt: !9290)
!9298 = !DILocation(line: 2475, scope: !9176, inlinedAt: !9290)
!9299 = !DILocation(line: 2473, scope: !9176, inlinedAt: !9290)
!9300 = !DILocation(line: 2477, scope: !9176, inlinedAt: !9290)
!9301 = !DILocation(line: 180, scope: !7693, inlinedAt: !9302)
!9302 = distinct !DILocation(line: 206, scope: !7709, inlinedAt: !9303)
!9303 = distinct !DILocation(line: 2478, scope: !9176, inlinedAt: !9290)
!9304 = !DILocation(line: 116, scope: !7653, inlinedAt: !9305)
!9305 = distinct !DILocation(line: 207, scope: !7709, inlinedAt: !9303)
!9306 = !DILocation(line: 117, scope: !7653, inlinedAt: !9305)
!9307 = !DILocation(line: 2479, scope: !9176, inlinedAt: !9290)
!9308 = !DILocation(line: 1973, scope: !8819, inlinedAt: !9309)
!9309 = distinct !DILocation(line: 2479, scope: !9176, inlinedAt: !9290)
!9310 = !DILocation(line: 2480, scope: !9176, inlinedAt: !9290)
!9311 = !DILocation(line: 2482, scope: !9176, inlinedAt: !9290)
!9312 = !DILocation(line: 2483, scope: !9176, inlinedAt: !9290)
!9313 = !DILocation(line: 2569, scope: !9255, inlinedAt: !9291)
!9314 = !DILocation(line: 2571, scope: !9255, inlinedAt: !9291)
!9315 = !DILocation(line: 2572, scope: !9255, inlinedAt: !9291)
!9316 = !DILocation(line: 2591, scope: !9283)
!9317 = distinct !DISubprogram(name: "tcl.array.dropRef.fail", scope: !864, file: !7638, type: !9318, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !9322)
!9318 = !DISubroutineType(types: !9319)
!9319 = !{!657, !9320, !998}
!9320 = !DICompositeType(tag: DW_TAG_structure_type, name: "ARRAY?", scope: !12, file: !11, line: 1588, size: 16, elements: !9321)
!9321 = !{!14, !1677}
!9322 = !{!9323, !9324}
!9323 = !DILocalVariable(name: "array", arg: 1, scope: !9317, file: !2, type: !9320)
!9324 = !DILocalVariable(name: "name", arg: 2, scope: !9317, file: !2, type: !998)
!9325 = !DILocation(line: 2472, scope: !9176, inlinedAt: !9326)
!9326 = distinct !DILocation(line: 2568, scope: !9255, inlinedAt: !9327)
!9327 = distinct !DILocation(line: 2607, scope: !9317)
!9328 = !DILocation(line: 2605, scope: !9317)
!9329 = !DILocation(line: 2607, scope: !9317)
!9330 = !DILocation(line: 2564, scope: !9255, inlinedAt: !9327)
!9331 = !DILocation(line: 2565, scope: !9255, inlinedAt: !9327)
!9332 = !DILocation(line: 2566, scope: !9255, inlinedAt: !9327)
!9333 = !DILocation(line: 2474, scope: !9176, inlinedAt: !9326)
!9334 = !DILocation(line: 2475, scope: !9176, inlinedAt: !9326)
!9335 = !DILocation(line: 2473, scope: !9176, inlinedAt: !9326)
!9336 = !DILocation(line: 2477, scope: !9176, inlinedAt: !9326)
!9337 = !DILocation(line: 180, scope: !7693, inlinedAt: !9338)
!9338 = distinct !DILocation(line: 206, scope: !7709, inlinedAt: !9339)
!9339 = distinct !DILocation(line: 2478, scope: !9176, inlinedAt: !9326)
!9340 = !DILocation(line: 116, scope: !7653, inlinedAt: !9341)
!9341 = distinct !DILocation(line: 207, scope: !7709, inlinedAt: !9339)
!9342 = !DILocation(line: 117, scope: !7653, inlinedAt: !9341)
!9343 = !DILocation(line: 2479, scope: !9176, inlinedAt: !9326)
!9344 = !DILocation(line: 1973, scope: !8819, inlinedAt: !9345)
!9345 = distinct !DILocation(line: 2479, scope: !9176, inlinedAt: !9326)
!9346 = !DILocation(line: 2480, scope: !9176, inlinedAt: !9326)
!9347 = !DILocation(line: 2482, scope: !9176, inlinedAt: !9326)
!9348 = !DILocation(line: 2483, scope: !9176, inlinedAt: !9326)
!9349 = !DILocation(line: 2569, scope: !9255, inlinedAt: !9327)
!9350 = !DILocation(line: 2571, scope: !9255, inlinedAt: !9327)
!9351 = !DILocation(line: 2572, scope: !9255, inlinedAt: !9327)
!9352 = !DILocation(line: 2610, scope: !9317)
!9353 = distinct !DISubprogram(name: "tcl.arraystring.dropRef", scope: !864, file: !7638, type: !9354, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !9356)
!9354 = !DISubroutineType(types: !9355)
!9355 = !{!657, !9224, !998}
!9356 = !{!9357, !9358}
!9357 = !DILocalVariable(name: "as", arg: 1, scope: !9353, file: !2, type: !9224)
!9358 = !DILocalVariable(name: "name", arg: 2, scope: !9353, file: !2, type: !998)
!9359 = !DILocation(line: 2472, scope: !9176, inlinedAt: !9360)
!9360 = distinct !DILocation(line: 2568, scope: !9255, inlinedAt: !9361)
!9361 = distinct !DILocation(line: 2626, scope: !9353)
!9362 = !DILocation(line: 2624, scope: !9353)
!9363 = !DILocation(line: 2626, scope: !9353)
!9364 = !DILocation(line: 2564, scope: !9255, inlinedAt: !9361)
!9365 = !DILocation(line: 2565, scope: !9255, inlinedAt: !9361)
!9366 = !DILocation(line: 2566, scope: !9255, inlinedAt: !9361)
!9367 = !DILocation(line: 2474, scope: !9176, inlinedAt: !9360)
!9368 = !DILocation(line: 2475, scope: !9176, inlinedAt: !9360)
!9369 = !DILocation(line: 2473, scope: !9176, inlinedAt: !9360)
!9370 = !DILocation(line: 2477, scope: !9176, inlinedAt: !9360)
!9371 = !DILocation(line: 180, scope: !7693, inlinedAt: !9372)
!9372 = distinct !DILocation(line: 206, scope: !7709, inlinedAt: !9373)
!9373 = distinct !DILocation(line: 2478, scope: !9176, inlinedAt: !9360)
!9374 = !DILocation(line: 116, scope: !7653, inlinedAt: !9375)
!9375 = distinct !DILocation(line: 207, scope: !7709, inlinedAt: !9373)
!9376 = !DILocation(line: 117, scope: !7653, inlinedAt: !9375)
!9377 = !DILocation(line: 2479, scope: !9176, inlinedAt: !9360)
!9378 = !DILocation(line: 1973, scope: !8819, inlinedAt: !9379)
!9379 = distinct !DILocation(line: 2479, scope: !9176, inlinedAt: !9360)
!9380 = !DILocation(line: 2480, scope: !9176, inlinedAt: !9360)
!9381 = !DILocation(line: 2482, scope: !9176, inlinedAt: !9360)
!9382 = !DILocation(line: 2483, scope: !9176, inlinedAt: !9360)
!9383 = !DILocation(line: 2569, scope: !9255, inlinedAt: !9361)
!9384 = !DILocation(line: 2571, scope: !9255, inlinedAt: !9361)
!9385 = !DILocation(line: 2572, scope: !9255, inlinedAt: !9361)
!9386 = !DILocation(line: 2627, scope: !9353)
!9387 = !DILocation(line: 2629, scope: !9353)
!9388 = !DILocation(line: 71, scope: !1020, inlinedAt: !9389)
!9389 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !9390)
!9390 = distinct !DILocation(line: 2629, scope: !9353)
!9391 = !DILocation(line: 72, scope: !1020, inlinedAt: !9389)
!9392 = !DILocation(line: 73, scope: !1020, inlinedAt: !9389)
!9393 = !DILocation(line: 75, scope: !1020, inlinedAt: !9389)
!9394 = !DILocation(line: 76, scope: !1020, inlinedAt: !9389)
!9395 = !DILocation(line: 77, scope: !1020, inlinedAt: !9389)
!9396 = !DILocation(line: 79, scope: !1020, inlinedAt: !9389)
!9397 = !DILocation(line: 80, scope: !1020, inlinedAt: !9389)
!9398 = distinct !DISubprogram(name: "tcl.arraystring.dropRef.nexist", scope: !864, file: !7638, type: !9399, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !9401)
!9399 = !DISubroutineType(types: !9400)
!9400 = !{!657, !9243, !998}
!9401 = !{!9402, !9403}
!9402 = !DILocalVariable(name: "as", arg: 1, scope: !9398, file: !2, type: !9243)
!9403 = !DILocalVariable(name: "name", arg: 2, scope: !9398, file: !2, type: !998)
!9404 = !DILocation(line: 2472, scope: !9176, inlinedAt: !9405)
!9405 = distinct !DILocation(line: 2568, scope: !9255, inlinedAt: !9406)
!9406 = distinct !DILocation(line: 2626, scope: !9353, inlinedAt: !9407)
!9407 = distinct !DILocation(line: 2647, scope: !9398)
!9408 = !DILocation(line: 2645, scope: !9398)
!9409 = !DILocation(line: 2647, scope: !9398)
!9410 = !DILocation(line: 2624, scope: !9353, inlinedAt: !9407)
!9411 = !DILocation(line: 2626, scope: !9353, inlinedAt: !9407)
!9412 = !DILocation(line: 2564, scope: !9255, inlinedAt: !9406)
!9413 = !DILocation(line: 2565, scope: !9255, inlinedAt: !9406)
!9414 = !DILocation(line: 2566, scope: !9255, inlinedAt: !9406)
!9415 = !DILocation(line: 2474, scope: !9176, inlinedAt: !9405)
!9416 = !DILocation(line: 2475, scope: !9176, inlinedAt: !9405)
!9417 = !DILocation(line: 2473, scope: !9176, inlinedAt: !9405)
!9418 = !DILocation(line: 2477, scope: !9176, inlinedAt: !9405)
!9419 = !DILocation(line: 180, scope: !7693, inlinedAt: !9420)
!9420 = distinct !DILocation(line: 206, scope: !7709, inlinedAt: !9421)
!9421 = distinct !DILocation(line: 2478, scope: !9176, inlinedAt: !9405)
!9422 = !DILocation(line: 116, scope: !7653, inlinedAt: !9423)
!9423 = distinct !DILocation(line: 207, scope: !7709, inlinedAt: !9421)
!9424 = !DILocation(line: 117, scope: !7653, inlinedAt: !9423)
!9425 = !DILocation(line: 2479, scope: !9176, inlinedAt: !9405)
!9426 = !DILocation(line: 1973, scope: !8819, inlinedAt: !9427)
!9427 = distinct !DILocation(line: 2479, scope: !9176, inlinedAt: !9405)
!9428 = !DILocation(line: 2480, scope: !9176, inlinedAt: !9405)
!9429 = !DILocation(line: 2482, scope: !9176, inlinedAt: !9405)
!9430 = !DILocation(line: 2483, scope: !9176, inlinedAt: !9405)
!9431 = !DILocation(line: 2569, scope: !9255, inlinedAt: !9406)
!9432 = !DILocation(line: 2571, scope: !9255, inlinedAt: !9406)
!9433 = !DILocation(line: 2572, scope: !9255, inlinedAt: !9406)
!9434 = !DILocation(line: 2629, scope: !9353, inlinedAt: !9407)
!9435 = !DILocation(line: 71, scope: !1020, inlinedAt: !9436)
!9436 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !9437)
!9437 = distinct !DILocation(line: 2629, scope: !9353, inlinedAt: !9407)
!9438 = !DILocation(line: 72, scope: !1020, inlinedAt: !9436)
!9439 = !DILocation(line: 73, scope: !1020, inlinedAt: !9436)
!9440 = !DILocation(line: 75, scope: !1020, inlinedAt: !9436)
!9441 = !DILocation(line: 76, scope: !1020, inlinedAt: !9436)
!9442 = !DILocation(line: 77, scope: !1020, inlinedAt: !9436)
!9443 = !DILocation(line: 79, scope: !1020, inlinedAt: !9436)
!9444 = !DILocation(line: 80, scope: !1020, inlinedAt: !9436)
!9445 = !DILocation(line: 2650, scope: !9398)
!9446 = distinct !DISubprogram(name: "tcl.array.init", scope: !864, file: !7638, type: !9447, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !9449)
!9447 = !DISubroutineType(types: !9448)
!9448 = !{!1677, !9210}
!9449 = !{!9450}
!9450 = !DILocalVariable(name: "array", arg: 1, scope: !9446, file: !2, type: !9210)
!9451 = !DILocation(line: 2664, scope: !9446)
!9452 = !DILocation(line: 2666, scope: !9446)
!9453 = !DILocation(line: 2496, scope: !9199, inlinedAt: !9454)
!9454 = distinct !DILocation(line: 2667, scope: !9446)
!9455 = !DILocation(line: 2497, scope: !9199, inlinedAt: !9454)
!9456 = !DILocation(line: 2668, scope: !9446)
!9457 = !DILocation(line: 2450, scope: !9166, inlinedAt: !9458)
!9458 = distinct !DILocation(line: 2670, scope: !9446)
!9459 = !DILocation(line: 2451, scope: !9166, inlinedAt: !9458)
!9460 = !DILocation(line: 2452, scope: !9166, inlinedAt: !9458)
!9461 = !DILocation(line: 2454, scope: !9166, inlinedAt: !9458)
!9462 = !DILocation(line: 2455, scope: !9166, inlinedAt: !9458)
!9463 = !DILocation(line: 2456, scope: !9166, inlinedAt: !9458)
!9464 = !DILocation(line: 2497, scope: !9199, inlinedAt: !9465)
!9465 = distinct !DILocation(line: 2671, scope: !9446)
!9466 = !DILocation(line: 2672, scope: !9446)
!9467 = distinct !DISubprogram(name: "tcl.arraystring.init", scope: !864, file: !7638, type: !9468, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !9470)
!9468 = !DISubroutineType(types: !9469)
!9469 = !{!9224, !9243}
!9470 = !{!9471}
!9471 = !DILocalVariable(name: "as", arg: 1, scope: !9467, file: !2, type: !9243)
!9472 = !DILocation(line: 2686, scope: !9467)
!9473 = !DILocation(line: 2688, scope: !9467)
!9474 = !DILocation(line: 2527, scope: !9221, inlinedAt: !9475)
!9475 = distinct !DILocation(line: 2689, scope: !9467)
!9476 = !DILocation(line: 0, scope: !9221, inlinedAt: !9475)
!9477 = !DILocation(line: 2690, scope: !9467)
!9478 = !DILocation(line: 2450, scope: !9166, inlinedAt: !9479)
!9479 = distinct !DILocation(line: 2692, scope: !9467)
!9480 = !DILocation(line: 2451, scope: !9166, inlinedAt: !9479)
!9481 = !DILocation(line: 2452, scope: !9166, inlinedAt: !9479)
!9482 = !DILocation(line: 2454, scope: !9166, inlinedAt: !9479)
!9483 = !DILocation(line: 2455, scope: !9166, inlinedAt: !9479)
!9484 = !DILocation(line: 2456, scope: !9166, inlinedAt: !9479)
!9485 = !DILocation(line: 2497, scope: !9199, inlinedAt: !9486)
!9486 = distinct !DILocation(line: 2693, scope: !9467)
!9487 = !DILocation(line: 2694, scope: !9467)
!9488 = distinct !DISubprogram(name: "tcl.arraystring.extractarray", scope: !864, file: !7638, type: !9489, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !9491)
!9489 = !DISubroutineType(types: !9490)
!9490 = !{!1677, !9224}
!9491 = !{!9492}
!9492 = !DILocalVariable(name: "as", arg: 1, scope: !9488, file: !2, type: !9224)
!9493 = !DILocation(line: 2707, scope: !9488)
!9494 = !DILocation(line: 2496, scope: !9199, inlinedAt: !9495)
!9495 = distinct !DILocation(line: 2708, scope: !9488)
!9496 = !DILocation(line: 2497, scope: !9199, inlinedAt: !9495)
!9497 = !DILocation(line: 2709, scope: !9488)
!9498 = distinct !DISubprogram(name: "tcl.arraystring.extractarray.nexist", scope: !864, file: !7638, type: !9499, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !9501)
!9499 = !DISubroutineType(types: !9500)
!9500 = !{!9210, !9243}
!9501 = !{!9502}
!9502 = !DILocalVariable(name: "as", arg: 1, scope: !9498, file: !2, type: !9243)
!9503 = !DILocation(line: 2724, scope: !9498)
!9504 = !DILocation(line: 2726, scope: !9498)
!9505 = !DILocation(line: 2707, scope: !9488, inlinedAt: !9506)
!9506 = distinct !DILocation(line: 2727, scope: !9498)
!9507 = !DILocation(line: 2496, scope: !9199, inlinedAt: !9508)
!9508 = distinct !DILocation(line: 2708, scope: !9488, inlinedAt: !9506)
!9509 = !DILocation(line: 2497, scope: !9199, inlinedAt: !9508)
!9510 = !DILocation(line: 2728, scope: !9498)
!9511 = !DILocation(line: 2730, scope: !9498)
!9512 = distinct !DISubprogram(name: "tcl.arraystring.extractscalar", scope: !864, file: !7638, type: !9513, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !9515)
!9513 = !DISubroutineType(types: !9514)
!9514 = !{!998, !9224}
!9515 = !{!9516}
!9516 = !DILocalVariable(name: "as", arg: 1, scope: !9512, file: !2, type: !9224)
!9517 = !DILocation(line: 2743, scope: !9512)
!9518 = !DILocation(line: 38, scope: !1004, inlinedAt: !9519)
!9519 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !9520)
!9520 = distinct !DILocation(line: 2744, scope: !9512)
!9521 = !DILocation(line: 39, scope: !1004, inlinedAt: !9519)
!9522 = !DILocation(line: 2745, scope: !9512)
!9523 = distinct !DISubprogram(name: "tcl.arraystring.extractscalar.nexist", scope: !864, file: !7638, type: !9524, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !9526)
!9524 = !DISubroutineType(types: !9525)
!9525 = !{!1439, !9243}
!9526 = !{!9527}
!9527 = !DILocalVariable(name: "as", arg: 1, scope: !9523, file: !2, type: !9243)
!9528 = !DILocation(line: 2760, scope: !9523)
!9529 = !DILocation(line: 2762, scope: !9523)
!9530 = !DILocation(line: 2743, scope: !9512, inlinedAt: !9531)
!9531 = distinct !DILocation(line: 2763, scope: !9523)
!9532 = !DILocation(line: 38, scope: !1004, inlinedAt: !9533)
!9533 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !9534)
!9534 = distinct !DILocation(line: 2744, scope: !9512, inlinedAt: !9531)
!9535 = !DILocation(line: 39, scope: !1004, inlinedAt: !9533)
!9536 = !DILocation(line: 2764, scope: !9523)
!9537 = !DILocation(line: 2766, scope: !9523)
!9538 = distinct !DISubprogram(name: "tcl.arraystring.isarray", scope: !864, file: !7638, type: !9539, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !9541)
!9539 = !DISubroutineType(types: !9540)
!9540 = !{!14, !9243}
!9541 = !{!9542}
!9542 = !DILocalVariable(name: "as", arg: 1, scope: !9538, file: !2, type: !9243)
!9543 = !DILocation(line: 2779, scope: !9538)
!9544 = !DILocation(line: 2781, scope: !9538)
!9545 = !DILocation(line: 2783, scope: !9538)
!9546 = distinct !DISubprogram(name: "tcl.array.elemexists", scope: !864, file: !7638, type: !9547, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !9549)
!9547 = !DISubroutineType(types: !9548)
!9548 = !{!14, !1677, !998}
!9549 = !{!9550, !9551}
!9550 = !DILocalVariable(name: "array", arg: 1, scope: !9546, file: !2, type: !1677)
!9551 = !DILocalVariable(name: "key", arg: 2, scope: !9546, file: !2, type: !998)
!9552 = !DILocation(line: 2796, scope: !9546)
!9553 = !DILocation(line: 2797, scope: !9546)
!9554 = !DILocation(line: 2799, scope: !9546)
!9555 = !DILocation(line: 445, scope: !7868, inlinedAt: !9556)
!9556 = distinct !DILocation(line: 2801, scope: !9546)
!9557 = !DILocation(line: 94, scope: !7637, inlinedAt: !9558)
!9558 = distinct !DILocation(line: 105, scope: !7645, inlinedAt: !9559)
!9559 = distinct !DILocation(line: 2803, scope: !9546)
!9560 = !DILocation(line: 105, scope: !7645, inlinedAt: !9559)
!9561 = !DILocation(line: 2803, scope: !9546)
!9562 = !DILocation(line: 2805, scope: !9546)
!9563 = distinct !DISubprogram(name: "tcl.arraystring.elemexists", scope: !864, file: !7638, type: !9564, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !9566)
!9564 = !DISubroutineType(types: !9565)
!9565 = !{!14, !9224, !998}
!9566 = !{!9567, !9568}
!9567 = !DILocalVariable(name: "as", arg: 1, scope: !9563, file: !2, type: !9224)
!9568 = !DILocalVariable(name: "key", arg: 2, scope: !9563, file: !2, type: !998)
!9569 = !DILocation(line: 2819, scope: !9563)
!9570 = !DILocation(line: 2821, scope: !9563)
!9571 = !DILocation(line: 2796, scope: !9546, inlinedAt: !9572)
!9572 = distinct !DILocation(line: 2822, scope: !9563)
!9573 = !DILocation(line: 2797, scope: !9546, inlinedAt: !9572)
!9574 = !DILocation(line: 2799, scope: !9546, inlinedAt: !9572)
!9575 = !DILocation(line: 445, scope: !7868, inlinedAt: !9576)
!9576 = distinct !DILocation(line: 2801, scope: !9546, inlinedAt: !9572)
!9577 = !DILocation(line: 94, scope: !7637, inlinedAt: !9578)
!9578 = distinct !DILocation(line: 105, scope: !7645, inlinedAt: !9579)
!9579 = distinct !DILocation(line: 2803, scope: !9546, inlinedAt: !9572)
!9580 = !DILocation(line: 105, scope: !7645, inlinedAt: !9579)
!9581 = !DILocation(line: 2803, scope: !9546, inlinedAt: !9572)
!9582 = !DILocation(line: 2822, scope: !9563)
!9583 = distinct !DISubprogram(name: "tcl.array.get", scope: !864, file: !7638, type: !9584, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !9586)
!9584 = !DISubroutineType(types: !9585)
!9585 = !{!1439, !1677, !998}
!9586 = !{!9587, !9588}
!9587 = !DILocalVariable(name: "array", arg: 1, scope: !9583, file: !2, type: !1677)
!9588 = !DILocalVariable(name: "key", arg: 2, scope: !9583, file: !2, type: !998)
!9589 = !DILocation(line: 2839, scope: !9583)
!9590 = !DILocation(line: 2840, scope: !9583)
!9591 = !DILocation(line: 2842, scope: !9583)
!9592 = !DILocation(line: 445, scope: !7868, inlinedAt: !9593)
!9593 = distinct !DILocation(line: 2844, scope: !9583)
!9594 = !DILocation(line: 94, scope: !7637, inlinedAt: !9595)
!9595 = distinct !DILocation(line: 2846, scope: !9583)
!9596 = !DILocation(line: 2847, scope: !9583)
!9597 = !DILocation(line: 38, scope: !1004, inlinedAt: !9598)
!9598 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !9599)
!9599 = distinct !DILocation(line: 2850, scope: !9583)
!9600 = !DILocation(line: 39, scope: !1004, inlinedAt: !9598)
!9601 = !DILocation(line: 2851, scope: !9583)
!9602 = !DILocation(line: 2853, scope: !9583)
!9603 = distinct !DISubprogram(name: "tcl.array.set", scope: !864, file: !7638, type: !9604, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !9606)
!9604 = !DISubroutineType(types: !9605)
!9605 = !{!1677, !1677, !998, !998}
!9606 = !{!9607, !9608, !9609}
!9607 = !DILocalVariable(name: "array", arg: 1, scope: !9603, file: !2, type: !1677)
!9608 = !DILocalVariable(name: "key", arg: 2, scope: !9603, file: !2, type: !998)
!9609 = !DILocalVariable(name: "value", arg: 3, scope: !9603, file: !2, type: !998)
!9610 = !DILocation(line: 2871, scope: !9603)
!9611 = !DILocation(line: 2872, scope: !9603)
!9612 = !DILocation(line: 2873, scope: !9603)
!9613 = !DILocation(line: 445, scope: !7868, inlinedAt: !9614)
!9614 = distinct !DILocation(line: 2875, scope: !9603)
!9615 = !DILocation(line: 38, scope: !1004, inlinedAt: !9616)
!9616 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !9617)
!9617 = distinct !DILocation(line: 2877, scope: !9603)
!9618 = !DILocation(line: 39, scope: !1004, inlinedAt: !9616)
!9619 = !DILocation(line: 2878, scope: !9603)
!9620 = !DILocation(line: 0, scope: !9603)
!9621 = !DILocation(line: 2879, scope: !9603)
!9622 = !DILocation(line: 117, scope: !7653, inlinedAt: !9623)
!9623 = distinct !DILocation(line: 2881, scope: !9603)
!9624 = !DILocation(line: 179, scope: !7693, inlinedAt: !9625)
!9625 = distinct !DILocation(line: 2882, scope: !9603)
!9626 = !DILocation(line: 180, scope: !7693, inlinedAt: !9625)
!9627 = !DILocation(line: 2883, scope: !9603)
!9628 = !DILocation(line: 94, scope: !7637, inlinedAt: !9629)
!9629 = distinct !DILocation(line: 2885, scope: !9603)
!9630 = !DILocation(line: 117, scope: !7653, inlinedAt: !9631)
!9631 = distinct !DILocation(line: 2886, scope: !9603)
!9632 = !DILocation(line: 2887, scope: !9603)
!9633 = !DILocation(line: 71, scope: !1020, inlinedAt: !9634)
!9634 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !9635)
!9635 = distinct !DILocation(line: 2889, scope: !9603)
!9636 = !DILocation(line: 72, scope: !1020, inlinedAt: !9634)
!9637 = !DILocation(line: 73, scope: !1020, inlinedAt: !9634)
!9638 = !DILocation(line: 75, scope: !1020, inlinedAt: !9634)
!9639 = !DILocation(line: 76, scope: !1020, inlinedAt: !9634)
!9640 = !DILocation(line: 77, scope: !1020, inlinedAt: !9634)
!9641 = !DILocation(line: 79, scope: !1020, inlinedAt: !9634)
!9642 = !DILocation(line: 80, scope: !1020, inlinedAt: !9634)
!9643 = !DILocation(line: 2496, scope: !9199, inlinedAt: !9644)
!9644 = distinct !DILocation(line: 2893, scope: !9603)
!9645 = !DILocation(line: 2497, scope: !9199, inlinedAt: !9644)
!9646 = !DILocation(line: 2894, scope: !9603)
!9647 = distinct !DISubprogram(name: "tcl.array.unset", scope: !864, file: !7638, type: !9604, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !9648)
!9648 = !{!9649, !9650, !9651}
!9649 = !DILocalVariable(name: "array", arg: 1, scope: !9647, file: !2, type: !1677)
!9650 = !DILocalVariable(name: "key", arg: 2, scope: !9647, file: !2, type: !998)
!9651 = !DILocalVariable(name: "name", arg: 3, scope: !9647, file: !2, type: !998)
!9652 = !DILocation(line: 2912, scope: !9647)
!9653 = !DILocation(line: 2913, scope: !9647)
!9654 = !DILocation(line: 2915, scope: !9647)
!9655 = !DILocation(line: 445, scope: !7868, inlinedAt: !9656)
!9656 = distinct !DILocation(line: 2917, scope: !9647)
!9657 = !DILocation(line: 446, scope: !7868, inlinedAt: !9656)
!9658 = !DILocation(line: 2919, scope: !9647)
!9659 = !DILocation(line: 1045, scope: !7942, inlinedAt: !9660)
!9660 = distinct !DILocation(line: 1964, scope: !8819, inlinedAt: !9661)
!9661 = distinct !DILocation(line: 2919, scope: !9647)
!9662 = !{!9663}
!9663 = distinct !{!9663, !9664, !"tcl.unset.var.ptr: %varPtr"}
!9664 = distinct !{!9664, !"tcl.unset.var.ptr"}
!9665 = !{!9666, !9667}
!9666 = distinct !{!9666, !9664, !"tcl.unset.var.ptr: %interp"}
!9667 = distinct !{!9667, !9664, !"tcl.unset.var.ptr: %arrayPtr"}
!9668 = !DILocation(line: 1048, scope: !7942, inlinedAt: !9660)
!9669 = !DILocation(line: 1964, scope: !8819, inlinedAt: !9661)
!9670 = !DILocation(line: 94, scope: !7637, inlinedAt: !9671)
!9671 = distinct !DILocation(line: 1966, scope: !8819, inlinedAt: !9661)
!9672 = !DILocation(line: 1967, scope: !8819, inlinedAt: !9661)
!9673 = !DILocation(line: 117, scope: !7653, inlinedAt: !9674)
!9674 = distinct !DILocation(line: 1969, scope: !8819, inlinedAt: !9661)
!9675 = !DILocation(line: 71, scope: !1020, inlinedAt: !9676)
!9676 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !9677)
!9677 = distinct !DILocation(line: 1970, scope: !8819, inlinedAt: !9661)
!9678 = !DILocation(line: 72, scope: !1020, inlinedAt: !9676)
!9679 = !{!9666, !9663}
!9680 = !DILocation(line: 73, scope: !1020, inlinedAt: !9676)
!9681 = !DILocation(line: 75, scope: !1020, inlinedAt: !9676)
!9682 = !DILocation(line: 76, scope: !1020, inlinedAt: !9676)
!9683 = !DILocation(line: 77, scope: !1020, inlinedAt: !9676)
!9684 = !DILocation(line: 79, scope: !1020, inlinedAt: !9676)
!9685 = !DILocation(line: 80, scope: !1020, inlinedAt: !9676)
!9686 = !DILocation(line: 1973, scope: !8819, inlinedAt: !9661)
!9687 = !DILocation(line: 2496, scope: !9199, inlinedAt: !9688)
!9688 = distinct !DILocation(line: 2922, scope: !9647)
!9689 = !DILocation(line: 2497, scope: !9199, inlinedAt: !9688)
!9690 = !DILocation(line: 2923, scope: !9647)
!9691 = distinct !DISubprogram(name: "callframe.kill.var.contents", scope: !864, file: !7638, type: !9692, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !9694)
!9692 = !DISubroutineType(types: !9693)
!9693 = !{!657, !867, !7641, !998}
!9694 = !{!9695, !9696, !9697}
!9695 = !DILocalVariable(name: "interp", arg: 1, scope: !9691, file: !2, type: !867)
!9696 = !DILocalVariable(name: "var", arg: 2, scope: !9691, file: !2, type: !7641)
!9697 = !DILocalVariable(name: "varName", arg: 3, scope: !9691, file: !2, type: !998)
!9698 = !DILocation(line: 2939, scope: !9691)
!9699 = !DILocation(line: 2940, scope: !9691)
!9700 = !DILocation(line: 1045, scope: !7942, inlinedAt: !9701)
!9701 = distinct !DILocation(line: 1964, scope: !8819, inlinedAt: !9702)
!9702 = distinct !DILocation(line: 2941, scope: !9691)
!9703 = !{!9704}
!9704 = distinct !{!9704, !9705, !"tcl.unset.var.ptr: %varPtr"}
!9705 = distinct !{!9705, !"tcl.unset.var.ptr"}
!9706 = !{!9707, !9708}
!9707 = distinct !{!9707, !9705, !"tcl.unset.var.ptr: %interp"}
!9708 = distinct !{!9708, !9705, !"tcl.unset.var.ptr: %arrayPtr"}
!9709 = !DILocation(line: 1048, scope: !7942, inlinedAt: !9701)
!9710 = !DILocation(line: 1964, scope: !8819, inlinedAt: !9702)
!9711 = !DILocation(line: 94, scope: !7637, inlinedAt: !9712)
!9712 = distinct !DILocation(line: 1966, scope: !8819, inlinedAt: !9702)
!9713 = !DILocation(line: 1967, scope: !8819, inlinedAt: !9702)
!9714 = !DILocation(line: 117, scope: !7653, inlinedAt: !9715)
!9715 = distinct !DILocation(line: 1969, scope: !8819, inlinedAt: !9702)
!9716 = !DILocation(line: 71, scope: !1020, inlinedAt: !9717)
!9717 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !9718)
!9718 = distinct !DILocation(line: 1970, scope: !8819, inlinedAt: !9702)
!9719 = !DILocation(line: 72, scope: !1020, inlinedAt: !9717)
!9720 = !{!9707, !9704}
!9721 = !DILocation(line: 73, scope: !1020, inlinedAt: !9717)
!9722 = !DILocation(line: 75, scope: !1020, inlinedAt: !9717)
!9723 = !DILocation(line: 76, scope: !1020, inlinedAt: !9717)
!9724 = !DILocation(line: 77, scope: !1020, inlinedAt: !9717)
!9725 = !DILocation(line: 79, scope: !1020, inlinedAt: !9717)
!9726 = !DILocation(line: 80, scope: !1020, inlinedAt: !9717)
!9727 = !DILocation(line: 1973, scope: !8819, inlinedAt: !9702)
!9728 = !DILocation(line: 2942, scope: !9691)
!9729 = !DILocation(line: 2943, scope: !9691)
!9730 = distinct !DISubprogram(name: "callframe.store.array", scope: !864, file: !7638, type: !9731, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !9733)
!9731 = !DISubroutineType(types: !9732)
!9732 = !{!657, !867, !7641, !998, !1677}
!9733 = !{!9734, !9735, !9736, !9737}
!9734 = !DILocalVariable(name: "interp", arg: 1, scope: !9730, file: !2, type: !867)
!9735 = !DILocalVariable(name: "var", arg: 2, scope: !9730, file: !2, type: !7641)
!9736 = !DILocalVariable(name: "varName", arg: 3, scope: !9730, file: !2, type: !998)
!9737 = !DILocalVariable(name: "array", arg: 4, scope: !9730, file: !2, type: !1677)
!9738 = !DILocation(line: 2957, scope: !9730)
!9739 = !DILocation(line: 2958, scope: !9730)
!9740 = !DILocation(line: 94, scope: !7637, inlinedAt: !9741)
!9741 = distinct !DILocation(line: 105, scope: !7645, inlinedAt: !9742)
!9742 = distinct !DILocation(line: 2959, scope: !9730)
!9743 = !DILocation(line: 105, scope: !7645, inlinedAt: !9742)
!9744 = !DILocation(line: 2959, scope: !9730)
!9745 = !DILocation(line: 143, scope: !7671, inlinedAt: !9746)
!9746 = distinct !DILocation(line: 2961, scope: !9730)
!9747 = !DILocation(line: 2961, scope: !9730)
!9748 = !DILocation(line: 2963, scope: !9730)
!9749 = !DILocation(line: 2939, scope: !9691, inlinedAt: !9750)
!9750 = distinct !DILocation(line: 2965, scope: !9730)
!9751 = !DILocation(line: 2940, scope: !9691, inlinedAt: !9750)
!9752 = !DILocation(line: 1045, scope: !7942, inlinedAt: !9753)
!9753 = distinct !DILocation(line: 1964, scope: !8819, inlinedAt: !9754)
!9754 = distinct !DILocation(line: 2941, scope: !9691, inlinedAt: !9750)
!9755 = !{!9756}
!9756 = distinct !{!9756, !9757, !"tcl.unset.var.ptr: %varPtr"}
!9757 = distinct !{!9757, !"tcl.unset.var.ptr"}
!9758 = !{!9759, !9760}
!9759 = distinct !{!9759, !9757, !"tcl.unset.var.ptr: %interp"}
!9760 = distinct !{!9760, !9757, !"tcl.unset.var.ptr: %arrayPtr"}
!9761 = !DILocation(line: 1048, scope: !7942, inlinedAt: !9753)
!9762 = !DILocation(line: 1964, scope: !8819, inlinedAt: !9754)
!9763 = !DILocation(line: 117, scope: !7653, inlinedAt: !9764)
!9764 = distinct !DILocation(line: 1969, scope: !8819, inlinedAt: !9754)
!9765 = !DILocation(line: 71, scope: !1020, inlinedAt: !9766)
!9766 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !9767)
!9767 = distinct !DILocation(line: 1970, scope: !8819, inlinedAt: !9754)
!9768 = !DILocation(line: 72, scope: !1020, inlinedAt: !9766)
!9769 = !{!9759, !9756}
!9770 = !DILocation(line: 73, scope: !1020, inlinedAt: !9766)
!9771 = !DILocation(line: 75, scope: !1020, inlinedAt: !9766)
!9772 = !DILocation(line: 76, scope: !1020, inlinedAt: !9766)
!9773 = !DILocation(line: 77, scope: !1020, inlinedAt: !9766)
!9774 = !DILocation(line: 79, scope: !1020, inlinedAt: !9766)
!9775 = !DILocation(line: 80, scope: !1020, inlinedAt: !9766)
!9776 = !DILocation(line: 1973, scope: !8819, inlinedAt: !9754)
!9777 = !DILocation(line: 2942, scope: !9691, inlinedAt: !9750)
!9778 = !DILocation(line: 180, scope: !7693, inlinedAt: !9779)
!9779 = distinct !DILocation(line: 206, scope: !7709, inlinedAt: !9780)
!9780 = distinct !DILocation(line: 2966, scope: !9730)
!9781 = !DILocation(line: 117, scope: !7653, inlinedAt: !9782)
!9782 = distinct !DILocation(line: 207, scope: !7709, inlinedAt: !9780)
!9783 = !DILocation(line: 2967, scope: !9730)
!9784 = !DILocation(line: 179, scope: !7693, inlinedAt: !9785)
!9785 = distinct !DILocation(line: 206, scope: !7709, inlinedAt: !9786)
!9786 = distinct !DILocation(line: 2969, scope: !9730)
!9787 = !DILocation(line: 180, scope: !7693, inlinedAt: !9785)
!9788 = !DILocation(line: 117, scope: !7653, inlinedAt: !9789)
!9789 = distinct !DILocation(line: 207, scope: !7709, inlinedAt: !9786)
!9790 = !DILocation(line: 2970, scope: !9730)
!9791 = distinct !DISubprogram(name: "callframe.kill.scalar", scope: !864, file: !7638, type: !9692, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !9792)
!9792 = !{!9793, !9794, !9795}
!9793 = !DILocalVariable(name: "interp", arg: 1, scope: !9791, file: !2, type: !867)
!9794 = !DILocalVariable(name: "var", arg: 2, scope: !9791, file: !2, type: !7641)
!9795 = !DILocalVariable(name: "varName", arg: 3, scope: !9791, file: !2, type: !998)
!9796 = !DILocation(line: 94, scope: !7637, inlinedAt: !9797)
!9797 = distinct !DILocation(line: 105, scope: !7645, inlinedAt: !9798)
!9798 = distinct !DILocation(line: 2983, scope: !9791)
!9799 = !DILocation(line: 105, scope: !7645, inlinedAt: !9798)
!9800 = !DILocation(line: 167, scope: !7685, inlinedAt: !9801)
!9801 = distinct !DILocation(line: 233, scope: !7735, inlinedAt: !9802)
!9802 = distinct !DILocation(line: 2983, scope: !9791)
!9803 = !DILocation(line: 168, scope: !7685, inlinedAt: !9801)
!9804 = !DILocation(line: 2983, scope: !9791)
!9805 = !DILocation(line: 2939, scope: !9691, inlinedAt: !9806)
!9806 = distinct !DILocation(line: 2985, scope: !9791)
!9807 = !DILocation(line: 2940, scope: !9691, inlinedAt: !9806)
!9808 = !DILocation(line: 1048, scope: !7942, inlinedAt: !9809)
!9809 = distinct !DILocation(line: 1964, scope: !8819, inlinedAt: !9810)
!9810 = distinct !DILocation(line: 2941, scope: !9691, inlinedAt: !9806)
!9811 = !DILocation(line: 1964, scope: !8819, inlinedAt: !9810)
!9812 = !DILocation(line: 117, scope: !7653, inlinedAt: !9813)
!9813 = distinct !DILocation(line: 1969, scope: !8819, inlinedAt: !9810)
!9814 = !{!9815}
!9815 = distinct !{!9815, !9816, !"tcl.unset.var.ptr: %varPtr"}
!9816 = distinct !{!9816, !"tcl.unset.var.ptr"}
!9817 = !{!9818, !9819}
!9818 = distinct !{!9818, !9816, !"tcl.unset.var.ptr: %interp"}
!9819 = distinct !{!9819, !9816, !"tcl.unset.var.ptr: %arrayPtr"}
!9820 = !DILocation(line: 71, scope: !1020, inlinedAt: !9821)
!9821 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !9822)
!9822 = distinct !DILocation(line: 1970, scope: !8819, inlinedAt: !9810)
!9823 = !DILocation(line: 72, scope: !1020, inlinedAt: !9821)
!9824 = !{!9818, !9815}
!9825 = !DILocation(line: 73, scope: !1020, inlinedAt: !9821)
!9826 = !DILocation(line: 75, scope: !1020, inlinedAt: !9821)
!9827 = !DILocation(line: 76, scope: !1020, inlinedAt: !9821)
!9828 = !DILocation(line: 77, scope: !1020, inlinedAt: !9821)
!9829 = !DILocation(line: 79, scope: !1020, inlinedAt: !9821)
!9830 = !DILocation(line: 80, scope: !1020, inlinedAt: !9821)
!9831 = !DILocation(line: 1973, scope: !8819, inlinedAt: !9810)
!9832 = !DILocation(line: 2942, scope: !9691, inlinedAt: !9806)
!9833 = !DILocation(line: 2986, scope: !9791)
!9834 = !DILocation(line: 2988, scope: !9791)
!9835 = distinct !DISubprogram(name: "callframe.kill.array", scope: !864, file: !7638, type: !9692, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !9836)
!9836 = !{!9837, !9838, !9839}
!9837 = !DILocalVariable(name: "interp", arg: 1, scope: !9835, file: !2, type: !867)
!9838 = !DILocalVariable(name: "var", arg: 2, scope: !9835, file: !2, type: !7641)
!9839 = !DILocalVariable(name: "varName", arg: 3, scope: !9835, file: !2, type: !998)
!9840 = !DILocation(line: 94, scope: !7637, inlinedAt: !9841)
!9841 = distinct !DILocation(line: 105, scope: !7645, inlinedAt: !9842)
!9842 = distinct !DILocation(line: 3002, scope: !9835)
!9843 = !DILocation(line: 105, scope: !7645, inlinedAt: !9842)
!9844 = !DILocation(line: 167, scope: !7685, inlinedAt: !9845)
!9845 = distinct !DILocation(line: 244, scope: !7742, inlinedAt: !9846)
!9846 = distinct !DILocation(line: 3002, scope: !9835)
!9847 = !DILocation(line: 168, scope: !7685, inlinedAt: !9845)
!9848 = !DILocation(line: 3002, scope: !9835)
!9849 = !DILocation(line: 2939, scope: !9691, inlinedAt: !9850)
!9850 = distinct !DILocation(line: 3004, scope: !9835)
!9851 = !DILocation(line: 2940, scope: !9691, inlinedAt: !9850)
!9852 = !DILocation(line: 1048, scope: !7942, inlinedAt: !9853)
!9853 = distinct !DILocation(line: 1964, scope: !8819, inlinedAt: !9854)
!9854 = distinct !DILocation(line: 2941, scope: !9691, inlinedAt: !9850)
!9855 = !DILocation(line: 1964, scope: !8819, inlinedAt: !9854)
!9856 = !DILocation(line: 117, scope: !7653, inlinedAt: !9857)
!9857 = distinct !DILocation(line: 1969, scope: !8819, inlinedAt: !9854)
!9858 = !{!9859}
!9859 = distinct !{!9859, !9860, !"tcl.unset.var.ptr: %varPtr"}
!9860 = distinct !{!9860, !"tcl.unset.var.ptr"}
!9861 = !{!9862, !9863}
!9862 = distinct !{!9862, !9860, !"tcl.unset.var.ptr: %interp"}
!9863 = distinct !{!9863, !9860, !"tcl.unset.var.ptr: %arrayPtr"}
!9864 = !DILocation(line: 71, scope: !1020, inlinedAt: !9865)
!9865 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !9866)
!9866 = distinct !DILocation(line: 1970, scope: !8819, inlinedAt: !9854)
!9867 = !DILocation(line: 72, scope: !1020, inlinedAt: !9865)
!9868 = !{!9862, !9859}
!9869 = !DILocation(line: 73, scope: !1020, inlinedAt: !9865)
!9870 = !DILocation(line: 75, scope: !1020, inlinedAt: !9865)
!9871 = !DILocation(line: 76, scope: !1020, inlinedAt: !9865)
!9872 = !DILocation(line: 77, scope: !1020, inlinedAt: !9865)
!9873 = !DILocation(line: 79, scope: !1020, inlinedAt: !9865)
!9874 = !DILocation(line: 80, scope: !1020, inlinedAt: !9865)
!9875 = !DILocation(line: 1973, scope: !8819, inlinedAt: !9854)
!9876 = !DILocation(line: 2942, scope: !9691, inlinedAt: !9850)
!9877 = !DILocation(line: 3005, scope: !9835)
!9878 = !DILocation(line: 3007, scope: !9835)
!9879 = distinct !DISubprogram(name: "tcl.callframe.store.array", scope: !864, file: !7638, type: !9880, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !9882)
!9880 = !DISubroutineType(types: !9881)
!9881 = !{!657, !7641, !998, !9210}
!9882 = !{!9883, !9884, !9885}
!9883 = !DILocalVariable(name: "var", arg: 1, scope: !9879, file: !2, type: !7641)
!9884 = !DILocalVariable(name: "varName", arg: 2, scope: !9879, file: !2, type: !998)
!9885 = !DILocalVariable(name: "array", arg: 3, scope: !9879, file: !2, type: !9210)
!9886 = !DILocation(line: 3022, scope: !9879)
!9887 = !DILocation(line: 167, scope: !7685, inlinedAt: !9888)
!9888 = distinct !DILocation(line: 255, scope: !7749, inlinedAt: !9889)
!9889 = distinct !DILocation(line: 531, scope: !7922, inlinedAt: !9890)
!9890 = distinct !DILocation(line: 3023, scope: !9879)
!9891 = !DILocation(line: 168, scope: !7685, inlinedAt: !9888)
!9892 = !DILocation(line: 531, scope: !7922, inlinedAt: !9890)
!9893 = !DILocation(line: 155, scope: !7678, inlinedAt: !9894)
!9894 = distinct !DILocation(line: 533, scope: !7922, inlinedAt: !9890)
!9895 = !DILocation(line: 0, scope: !7922, inlinedAt: !9890)
!9896 = !DILocation(line: 3024, scope: !9879)
!9897 = !DILocation(line: 1048, scope: !7942, inlinedAt: !9898)
!9898 = distinct !DILocation(line: 1964, scope: !8819, inlinedAt: !9899)
!9899 = distinct !DILocation(line: 3026, scope: !9879)
!9900 = !DILocation(line: 1964, scope: !8819, inlinedAt: !9899)
!9901 = !DILocation(line: 94, scope: !7637, inlinedAt: !9902)
!9902 = distinct !DILocation(line: 1966, scope: !8819, inlinedAt: !9899)
!9903 = !{!9904}
!9904 = distinct !{!9904, !9905, !"tcl.unset.var.ptr: %varPtr"}
!9905 = distinct !{!9905, !"tcl.unset.var.ptr"}
!9906 = !{!9907, !9908}
!9907 = distinct !{!9907, !9905, !"tcl.unset.var.ptr: %interp"}
!9908 = distinct !{!9908, !9905, !"tcl.unset.var.ptr: %arrayPtr"}
!9909 = !DILocation(line: 1967, scope: !8819, inlinedAt: !9899)
!9910 = !DILocation(line: 117, scope: !7653, inlinedAt: !9911)
!9911 = distinct !DILocation(line: 1969, scope: !8819, inlinedAt: !9899)
!9912 = !DILocation(line: 71, scope: !1020, inlinedAt: !9913)
!9913 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !9914)
!9914 = distinct !DILocation(line: 1970, scope: !8819, inlinedAt: !9899)
!9915 = !DILocation(line: 72, scope: !1020, inlinedAt: !9913)
!9916 = !{!9907, !9904}
!9917 = !DILocation(line: 73, scope: !1020, inlinedAt: !9913)
!9918 = !DILocation(line: 75, scope: !1020, inlinedAt: !9913)
!9919 = !DILocation(line: 76, scope: !1020, inlinedAt: !9913)
!9920 = !DILocation(line: 77, scope: !1020, inlinedAt: !9913)
!9921 = !DILocation(line: 79, scope: !1020, inlinedAt: !9913)
!9922 = !DILocation(line: 80, scope: !1020, inlinedAt: !9913)
!9923 = !DILocation(line: 1973, scope: !8819, inlinedAt: !9899)
!9924 = !DILocation(line: 3027, scope: !9879)
!9925 = !DILocation(line: 3029, scope: !9879)
!9926 = !DILocation(line: 94, scope: !7637, inlinedAt: !9927)
!9927 = distinct !DILocation(line: 105, scope: !7645, inlinedAt: !9928)
!9928 = distinct !DILocation(line: 2983, scope: !9791, inlinedAt: !9929)
!9929 = distinct !DILocation(line: 3030, scope: !9879)
!9930 = !DILocation(line: 105, scope: !7645, inlinedAt: !9928)
!9931 = !DILocation(line: 167, scope: !7685, inlinedAt: !9932)
!9932 = distinct !DILocation(line: 233, scope: !7735, inlinedAt: !9933)
!9933 = distinct !DILocation(line: 2983, scope: !9791, inlinedAt: !9929)
!9934 = !DILocation(line: 168, scope: !7685, inlinedAt: !9932)
!9935 = !DILocation(line: 2983, scope: !9791, inlinedAt: !9929)
!9936 = !DILocation(line: 2939, scope: !9691, inlinedAt: !9937)
!9937 = distinct !DILocation(line: 2985, scope: !9791, inlinedAt: !9929)
!9938 = !DILocation(line: 2940, scope: !9691, inlinedAt: !9937)
!9939 = !DILocation(line: 1048, scope: !7942, inlinedAt: !9940)
!9940 = distinct !DILocation(line: 1964, scope: !8819, inlinedAt: !9941)
!9941 = distinct !DILocation(line: 2941, scope: !9691, inlinedAt: !9937)
!9942 = !DILocation(line: 1964, scope: !8819, inlinedAt: !9941)
!9943 = !DILocation(line: 117, scope: !7653, inlinedAt: !9944)
!9944 = distinct !DILocation(line: 1969, scope: !8819, inlinedAt: !9941)
!9945 = !{!9946}
!9946 = distinct !{!9946, !9947, !"tcl.unset.var.ptr: %varPtr"}
!9947 = distinct !{!9947, !"tcl.unset.var.ptr"}
!9948 = !{!9949, !9950}
!9949 = distinct !{!9949, !9947, !"tcl.unset.var.ptr: %interp"}
!9950 = distinct !{!9950, !9947, !"tcl.unset.var.ptr: %arrayPtr"}
!9951 = !DILocation(line: 71, scope: !1020, inlinedAt: !9952)
!9952 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !9953)
!9953 = distinct !DILocation(line: 1970, scope: !8819, inlinedAt: !9941)
!9954 = !DILocation(line: 72, scope: !1020, inlinedAt: !9952)
!9955 = !{!9949, !9946}
!9956 = !DILocation(line: 73, scope: !1020, inlinedAt: !9952)
!9957 = !DILocation(line: 75, scope: !1020, inlinedAt: !9952)
!9958 = !DILocation(line: 76, scope: !1020, inlinedAt: !9952)
!9959 = !DILocation(line: 77, scope: !1020, inlinedAt: !9952)
!9960 = !DILocation(line: 79, scope: !1020, inlinedAt: !9952)
!9961 = !DILocation(line: 80, scope: !1020, inlinedAt: !9952)
!9962 = !DILocation(line: 1973, scope: !8819, inlinedAt: !9941)
!9963 = !DILocation(line: 2942, scope: !9691, inlinedAt: !9937)
!9964 = !DILocation(line: 2986, scope: !9791, inlinedAt: !9929)
!9965 = !DILocation(line: 2957, scope: !9730, inlinedAt: !9966)
!9966 = distinct !DILocation(line: 3031, scope: !9879)
!9967 = !DILocation(line: 2958, scope: !9730, inlinedAt: !9966)
!9968 = !DILocation(line: 94, scope: !7637, inlinedAt: !9969)
!9969 = distinct !DILocation(line: 105, scope: !7645, inlinedAt: !9970)
!9970 = distinct !DILocation(line: 2959, scope: !9730, inlinedAt: !9966)
!9971 = !DILocation(line: 105, scope: !7645, inlinedAt: !9970)
!9972 = !DILocation(line: 2959, scope: !9730, inlinedAt: !9966)
!9973 = !DILocation(line: 143, scope: !7671, inlinedAt: !9974)
!9974 = distinct !DILocation(line: 2961, scope: !9730, inlinedAt: !9966)
!9975 = !DILocation(line: 2961, scope: !9730, inlinedAt: !9966)
!9976 = !DILocation(line: 2939, scope: !9691, inlinedAt: !9977)
!9977 = distinct !DILocation(line: 2965, scope: !9730, inlinedAt: !9966)
!9978 = !DILocation(line: 2940, scope: !9691, inlinedAt: !9977)
!9979 = !DILocation(line: 1045, scope: !7942, inlinedAt: !9980)
!9980 = distinct !DILocation(line: 1964, scope: !8819, inlinedAt: !9981)
!9981 = distinct !DILocation(line: 2941, scope: !9691, inlinedAt: !9977)
!9982 = !{!9983}
!9983 = distinct !{!9983, !9984, !"tcl.unset.var.ptr: %varPtr"}
!9984 = distinct !{!9984, !"tcl.unset.var.ptr"}
!9985 = !{!9986, !9987}
!9986 = distinct !{!9986, !9984, !"tcl.unset.var.ptr: %interp"}
!9987 = distinct !{!9987, !9984, !"tcl.unset.var.ptr: %arrayPtr"}
!9988 = !DILocation(line: 1048, scope: !7942, inlinedAt: !9980)
!9989 = !DILocation(line: 1964, scope: !8819, inlinedAt: !9981)
!9990 = !DILocation(line: 117, scope: !7653, inlinedAt: !9991)
!9991 = distinct !DILocation(line: 1969, scope: !8819, inlinedAt: !9981)
!9992 = !DILocation(line: 71, scope: !1020, inlinedAt: !9993)
!9993 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !9994)
!9994 = distinct !DILocation(line: 1970, scope: !8819, inlinedAt: !9981)
!9995 = !DILocation(line: 72, scope: !1020, inlinedAt: !9993)
!9996 = !{!9986, !9983}
!9997 = !DILocation(line: 73, scope: !1020, inlinedAt: !9993)
!9998 = !DILocation(line: 75, scope: !1020, inlinedAt: !9993)
!9999 = !DILocation(line: 76, scope: !1020, inlinedAt: !9993)
!10000 = !DILocation(line: 77, scope: !1020, inlinedAt: !9993)
!10001 = !DILocation(line: 79, scope: !1020, inlinedAt: !9993)
!10002 = !DILocation(line: 80, scope: !1020, inlinedAt: !9993)
!10003 = !DILocation(line: 1973, scope: !8819, inlinedAt: !9981)
!10004 = !DILocation(line: 2942, scope: !9691, inlinedAt: !9977)
!10005 = !DILocation(line: 180, scope: !7693, inlinedAt: !10006)
!10006 = distinct !DILocation(line: 206, scope: !7709, inlinedAt: !10007)
!10007 = distinct !DILocation(line: 2966, scope: !9730, inlinedAt: !9966)
!10008 = !DILocation(line: 117, scope: !7653, inlinedAt: !10009)
!10009 = distinct !DILocation(line: 207, scope: !7709, inlinedAt: !10007)
!10010 = !DILocation(line: 2967, scope: !9730, inlinedAt: !9966)
!10011 = !DILocation(line: 180, scope: !7693, inlinedAt: !10012)
!10012 = distinct !DILocation(line: 206, scope: !7709, inlinedAt: !10013)
!10013 = distinct !DILocation(line: 2969, scope: !9730, inlinedAt: !9966)
!10014 = !DILocation(line: 117, scope: !7653, inlinedAt: !10015)
!10015 = distinct !DILocation(line: 207, scope: !7709, inlinedAt: !10013)
!10016 = !DILocation(line: 2970, scope: !9730, inlinedAt: !9966)
!10017 = distinct !DISubprogram(name: "tcl.callframe.store.arraystring", scope: !864, file: !7638, type: !10018, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !10020)
!10018 = !DISubroutineType(types: !10019)
!10019 = !{!657, !7641, !998, !9243}
!10020 = !{!10021, !10022, !10023}
!10021 = !DILocalVariable(name: "var", arg: 1, scope: !10017, file: !2, type: !7641)
!10022 = !DILocalVariable(name: "varName", arg: 2, scope: !10017, file: !2, type: !998)
!10023 = !DILocalVariable(name: "as", arg: 3, scope: !10017, file: !2, type: !9243)
!10024 = !DILocation(line: 3046, scope: !10017)
!10025 = !DILocation(line: 167, scope: !7685, inlinedAt: !10026)
!10026 = distinct !DILocation(line: 255, scope: !7749, inlinedAt: !10027)
!10027 = distinct !DILocation(line: 531, scope: !7922, inlinedAt: !10028)
!10028 = distinct !DILocation(line: 3047, scope: !10017)
!10029 = !DILocation(line: 168, scope: !7685, inlinedAt: !10026)
!10030 = !DILocation(line: 531, scope: !7922, inlinedAt: !10028)
!10031 = !DILocation(line: 155, scope: !7678, inlinedAt: !10032)
!10032 = distinct !DILocation(line: 533, scope: !7922, inlinedAt: !10028)
!10033 = !DILocation(line: 0, scope: !7922, inlinedAt: !10028)
!10034 = !DILocation(line: 3048, scope: !10017)
!10035 = !DILocation(line: 3050, scope: !10017)
!10036 = !DILocation(line: 3051, scope: !10017)
!10037 = !DILocation(line: 1048, scope: !7942, inlinedAt: !10038)
!10038 = distinct !DILocation(line: 1964, scope: !8819, inlinedAt: !10039)
!10039 = distinct !DILocation(line: 3053, scope: !10017)
!10040 = !DILocation(line: 1964, scope: !8819, inlinedAt: !10039)
!10041 = !DILocation(line: 94, scope: !7637, inlinedAt: !10042)
!10042 = distinct !DILocation(line: 1966, scope: !8819, inlinedAt: !10039)
!10043 = !{!10044}
!10044 = distinct !{!10044, !10045, !"tcl.unset.var.ptr: %varPtr"}
!10045 = distinct !{!10045, !"tcl.unset.var.ptr"}
!10046 = !{!10047, !10048}
!10047 = distinct !{!10047, !10045, !"tcl.unset.var.ptr: %interp"}
!10048 = distinct !{!10048, !10045, !"tcl.unset.var.ptr: %arrayPtr"}
!10049 = !DILocation(line: 1967, scope: !8819, inlinedAt: !10039)
!10050 = !DILocation(line: 117, scope: !7653, inlinedAt: !10051)
!10051 = distinct !DILocation(line: 1969, scope: !8819, inlinedAt: !10039)
!10052 = !DILocation(line: 71, scope: !1020, inlinedAt: !10053)
!10053 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !10054)
!10054 = distinct !DILocation(line: 1970, scope: !8819, inlinedAt: !10039)
!10055 = !DILocation(line: 72, scope: !1020, inlinedAt: !10053)
!10056 = !{!10047, !10044}
!10057 = !DILocation(line: 73, scope: !1020, inlinedAt: !10053)
!10058 = !DILocation(line: 75, scope: !1020, inlinedAt: !10053)
!10059 = !DILocation(line: 76, scope: !1020, inlinedAt: !10053)
!10060 = !DILocation(line: 77, scope: !1020, inlinedAt: !10053)
!10061 = !DILocation(line: 79, scope: !1020, inlinedAt: !10053)
!10062 = !DILocation(line: 80, scope: !1020, inlinedAt: !10053)
!10063 = !DILocation(line: 1973, scope: !8819, inlinedAt: !10039)
!10064 = !DILocation(line: 3054, scope: !10017)
!10065 = !DILocation(line: 3056, scope: !10017)
!10066 = !DILocation(line: 94, scope: !7637, inlinedAt: !10067)
!10067 = distinct !DILocation(line: 105, scope: !7645, inlinedAt: !10068)
!10068 = distinct !DILocation(line: 2983, scope: !9791, inlinedAt: !10069)
!10069 = distinct !DILocation(line: 3057, scope: !10017)
!10070 = !DILocation(line: 105, scope: !7645, inlinedAt: !10068)
!10071 = !DILocation(line: 167, scope: !7685, inlinedAt: !10072)
!10072 = distinct !DILocation(line: 233, scope: !7735, inlinedAt: !10073)
!10073 = distinct !DILocation(line: 2983, scope: !9791, inlinedAt: !10069)
!10074 = !DILocation(line: 168, scope: !7685, inlinedAt: !10072)
!10075 = !DILocation(line: 2983, scope: !9791, inlinedAt: !10069)
!10076 = !DILocation(line: 2939, scope: !9691, inlinedAt: !10077)
!10077 = distinct !DILocation(line: 2985, scope: !9791, inlinedAt: !10069)
!10078 = !DILocation(line: 2940, scope: !9691, inlinedAt: !10077)
!10079 = !DILocation(line: 1048, scope: !7942, inlinedAt: !10080)
!10080 = distinct !DILocation(line: 1964, scope: !8819, inlinedAt: !10081)
!10081 = distinct !DILocation(line: 2941, scope: !9691, inlinedAt: !10077)
!10082 = !DILocation(line: 1964, scope: !8819, inlinedAt: !10081)
!10083 = !DILocation(line: 117, scope: !7653, inlinedAt: !10084)
!10084 = distinct !DILocation(line: 1969, scope: !8819, inlinedAt: !10081)
!10085 = !{!10086}
!10086 = distinct !{!10086, !10087, !"tcl.unset.var.ptr: %varPtr"}
!10087 = distinct !{!10087, !"tcl.unset.var.ptr"}
!10088 = !{!10089, !10090}
!10089 = distinct !{!10089, !10087, !"tcl.unset.var.ptr: %interp"}
!10090 = distinct !{!10090, !10087, !"tcl.unset.var.ptr: %arrayPtr"}
!10091 = !DILocation(line: 71, scope: !1020, inlinedAt: !10092)
!10092 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !10093)
!10093 = distinct !DILocation(line: 1970, scope: !8819, inlinedAt: !10081)
!10094 = !DILocation(line: 72, scope: !1020, inlinedAt: !10092)
!10095 = !{!10089, !10086}
!10096 = !DILocation(line: 73, scope: !1020, inlinedAt: !10092)
!10097 = !DILocation(line: 75, scope: !1020, inlinedAt: !10092)
!10098 = !DILocation(line: 76, scope: !1020, inlinedAt: !10092)
!10099 = !DILocation(line: 77, scope: !1020, inlinedAt: !10092)
!10100 = !DILocation(line: 79, scope: !1020, inlinedAt: !10092)
!10101 = !DILocation(line: 80, scope: !1020, inlinedAt: !10092)
!10102 = !DILocation(line: 1973, scope: !8819, inlinedAt: !10081)
!10103 = !DILocation(line: 2942, scope: !9691, inlinedAt: !10077)
!10104 = !DILocation(line: 2986, scope: !9791, inlinedAt: !10069)
!10105 = !DILocation(line: 2957, scope: !9730, inlinedAt: !10106)
!10106 = distinct !DILocation(line: 3058, scope: !10017)
!10107 = !DILocation(line: 2958, scope: !9730, inlinedAt: !10106)
!10108 = !DILocation(line: 94, scope: !7637, inlinedAt: !10109)
!10109 = distinct !DILocation(line: 105, scope: !7645, inlinedAt: !10110)
!10110 = distinct !DILocation(line: 2959, scope: !9730, inlinedAt: !10106)
!10111 = !DILocation(line: 105, scope: !7645, inlinedAt: !10110)
!10112 = !DILocation(line: 2959, scope: !9730, inlinedAt: !10106)
!10113 = !DILocation(line: 143, scope: !7671, inlinedAt: !10114)
!10114 = distinct !DILocation(line: 2961, scope: !9730, inlinedAt: !10106)
!10115 = !DILocation(line: 2961, scope: !9730, inlinedAt: !10106)
!10116 = !DILocation(line: 2939, scope: !9691, inlinedAt: !10117)
!10117 = distinct !DILocation(line: 2965, scope: !9730, inlinedAt: !10106)
!10118 = !DILocation(line: 2940, scope: !9691, inlinedAt: !10117)
!10119 = !DILocation(line: 1045, scope: !7942, inlinedAt: !10120)
!10120 = distinct !DILocation(line: 1964, scope: !8819, inlinedAt: !10121)
!10121 = distinct !DILocation(line: 2941, scope: !9691, inlinedAt: !10117)
!10122 = !{!10123}
!10123 = distinct !{!10123, !10124, !"tcl.unset.var.ptr: %varPtr"}
!10124 = distinct !{!10124, !"tcl.unset.var.ptr"}
!10125 = !{!10126, !10127}
!10126 = distinct !{!10126, !10124, !"tcl.unset.var.ptr: %interp"}
!10127 = distinct !{!10127, !10124, !"tcl.unset.var.ptr: %arrayPtr"}
!10128 = !DILocation(line: 1048, scope: !7942, inlinedAt: !10120)
!10129 = !DILocation(line: 1964, scope: !8819, inlinedAt: !10121)
!10130 = !DILocation(line: 117, scope: !7653, inlinedAt: !10131)
!10131 = distinct !DILocation(line: 1969, scope: !8819, inlinedAt: !10121)
!10132 = !DILocation(line: 71, scope: !1020, inlinedAt: !10133)
!10133 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !10134)
!10134 = distinct !DILocation(line: 1970, scope: !8819, inlinedAt: !10121)
!10135 = !DILocation(line: 72, scope: !1020, inlinedAt: !10133)
!10136 = !{!10126, !10123}
!10137 = !DILocation(line: 73, scope: !1020, inlinedAt: !10133)
!10138 = !DILocation(line: 75, scope: !1020, inlinedAt: !10133)
!10139 = !DILocation(line: 76, scope: !1020, inlinedAt: !10133)
!10140 = !DILocation(line: 77, scope: !1020, inlinedAt: !10133)
!10141 = !DILocation(line: 79, scope: !1020, inlinedAt: !10133)
!10142 = !DILocation(line: 80, scope: !1020, inlinedAt: !10133)
!10143 = !DILocation(line: 1973, scope: !8819, inlinedAt: !10121)
!10144 = !DILocation(line: 2942, scope: !9691, inlinedAt: !10117)
!10145 = !DILocation(line: 180, scope: !7693, inlinedAt: !10146)
!10146 = distinct !DILocation(line: 206, scope: !7709, inlinedAt: !10147)
!10147 = distinct !DILocation(line: 2966, scope: !9730, inlinedAt: !10106)
!10148 = !DILocation(line: 117, scope: !7653, inlinedAt: !10149)
!10149 = distinct !DILocation(line: 207, scope: !7709, inlinedAt: !10147)
!10150 = !DILocation(line: 2967, scope: !9730, inlinedAt: !10106)
!10151 = !DILocation(line: 180, scope: !7693, inlinedAt: !10152)
!10152 = distinct !DILocation(line: 206, scope: !7709, inlinedAt: !10153)
!10153 = distinct !DILocation(line: 2969, scope: !9730, inlinedAt: !10106)
!10154 = !DILocation(line: 117, scope: !7653, inlinedAt: !10155)
!10155 = distinct !DILocation(line: 207, scope: !7709, inlinedAt: !10153)
!10156 = !DILocation(line: 2970, scope: !9730, inlinedAt: !10106)
!10157 = !DILocation(line: 3061, scope: !10017)
!10158 = !DILocation(line: 94, scope: !7637, inlinedAt: !10159)
!10159 = distinct !DILocation(line: 105, scope: !7645, inlinedAt: !10160)
!10160 = distinct !DILocation(line: 3002, scope: !9835, inlinedAt: !10161)
!10161 = distinct !DILocation(line: 3062, scope: !10017)
!10162 = !DILocation(line: 105, scope: !7645, inlinedAt: !10160)
!10163 = !DILocation(line: 167, scope: !7685, inlinedAt: !10164)
!10164 = distinct !DILocation(line: 244, scope: !7742, inlinedAt: !10165)
!10165 = distinct !DILocation(line: 3002, scope: !9835, inlinedAt: !10161)
!10166 = !DILocation(line: 168, scope: !7685, inlinedAt: !10164)
!10167 = !DILocation(line: 3002, scope: !9835, inlinedAt: !10161)
!10168 = !DILocation(line: 2939, scope: !9691, inlinedAt: !10169)
!10169 = distinct !DILocation(line: 3004, scope: !9835, inlinedAt: !10161)
!10170 = !DILocation(line: 2940, scope: !9691, inlinedAt: !10169)
!10171 = !DILocation(line: 1048, scope: !7942, inlinedAt: !10172)
!10172 = distinct !DILocation(line: 1964, scope: !8819, inlinedAt: !10173)
!10173 = distinct !DILocation(line: 2941, scope: !9691, inlinedAt: !10169)
!10174 = !DILocation(line: 1964, scope: !8819, inlinedAt: !10173)
!10175 = !DILocation(line: 117, scope: !7653, inlinedAt: !10176)
!10176 = distinct !DILocation(line: 1969, scope: !8819, inlinedAt: !10173)
!10177 = !{!10178}
!10178 = distinct !{!10178, !10179, !"tcl.unset.var.ptr: %varPtr"}
!10179 = distinct !{!10179, !"tcl.unset.var.ptr"}
!10180 = !{!10181, !10182}
!10181 = distinct !{!10181, !10179, !"tcl.unset.var.ptr: %interp"}
!10182 = distinct !{!10182, !10179, !"tcl.unset.var.ptr: %arrayPtr"}
!10183 = !DILocation(line: 71, scope: !1020, inlinedAt: !10184)
!10184 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !10185)
!10185 = distinct !DILocation(line: 1970, scope: !8819, inlinedAt: !10173)
!10186 = !DILocation(line: 72, scope: !1020, inlinedAt: !10184)
!10187 = !{!10181, !10178}
!10188 = !DILocation(line: 73, scope: !1020, inlinedAt: !10184)
!10189 = !DILocation(line: 75, scope: !1020, inlinedAt: !10184)
!10190 = !DILocation(line: 76, scope: !1020, inlinedAt: !10184)
!10191 = !DILocation(line: 77, scope: !1020, inlinedAt: !10184)
!10192 = !DILocation(line: 79, scope: !1020, inlinedAt: !10184)
!10193 = !DILocation(line: 80, scope: !1020, inlinedAt: !10184)
!10194 = !DILocation(line: 1973, scope: !8819, inlinedAt: !10173)
!10195 = !DILocation(line: 2942, scope: !9691, inlinedAt: !10169)
!10196 = !DILocation(line: 1045, scope: !7942, inlinedAt: !10197)
!10197 = distinct !DILocation(line: 1303, scope: !8140, inlinedAt: !10198)
!10198 = distinct !DILocation(line: 3063, scope: !10017)
!10199 = !{!10200}
!10200 = distinct !{!10200, !10201, !"tcl.write.var.ptr: %varPtr"}
!10201 = distinct !{!10201, !"tcl.write.var.ptr"}
!10202 = !{!10203, !10204}
!10203 = distinct !{!10203, !10201, !"tcl.write.var.ptr: %interp"}
!10204 = distinct !{!10204, !10201, !"tcl.write.var.ptr: %arrayPtr"}
!10205 = !DILocation(line: 3005, scope: !9835, inlinedAt: !10161)
!10206 = !DILocation(line: 1048, scope: !7942, inlinedAt: !10197)
!10207 = !DILocation(line: 1303, scope: !8140, inlinedAt: !10198)
!10208 = !DILocation(line: 38, scope: !1004, inlinedAt: !10209)
!10209 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !10210)
!10210 = distinct !DILocation(line: 1280, scope: !8116, inlinedAt: !10211)
!10211 = distinct !DILocation(line: 1305, scope: !8140, inlinedAt: !10198)
!10212 = !DILocation(line: 39, scope: !1004, inlinedAt: !10209)
!10213 = !{!10203, !10200, !10204}
!10214 = !DILocation(line: 94, scope: !7637, inlinedAt: !10215)
!10215 = distinct !DILocation(line: 1281, scope: !8116, inlinedAt: !10211)
!10216 = !DILocation(line: 117, scope: !7653, inlinedAt: !10217)
!10217 = distinct !DILocation(line: 1282, scope: !8116, inlinedAt: !10211)
!10218 = !DILocation(line: 1283, scope: !8116, inlinedAt: !10211)
!10219 = !DILocation(line: 71, scope: !1020, inlinedAt: !10220)
!10220 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !10221)
!10221 = distinct !DILocation(line: 1285, scope: !8116, inlinedAt: !10211)
!10222 = !DILocation(line: 72, scope: !1020, inlinedAt: !10220)
!10223 = !{!10203, !10200}
!10224 = !DILocation(line: 73, scope: !1020, inlinedAt: !10220)
!10225 = !DILocation(line: 75, scope: !1020, inlinedAt: !10220)
!10226 = !DILocation(line: 76, scope: !1020, inlinedAt: !10220)
!10227 = !DILocation(line: 77, scope: !1020, inlinedAt: !10220)
!10228 = !DILocation(line: 79, scope: !1020, inlinedAt: !10220)
!10229 = !DILocation(line: 80, scope: !1020, inlinedAt: !10220)
!10230 = !DILocation(line: 1308, scope: !8140, inlinedAt: !10198)
!10231 = distinct !DISubprogram(name: "tcl.impl.isBoolean", scope: !864, file: !5, type: !1352, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !10232)
!10232 = !{!10233}
!10233 = !DILocalVariable(name: "objPtr", arg: 1, scope: !10231, file: !2, type: !998)
!10234 = !DILocation(line: 1250, scope: !10231)
!10235 = !DILocation(line: 1251, scope: !10231)
!10236 = !DILocation(line: 1252, scope: !10231)
!10237 = distinct !DISubprogram(name: "tcl.impl.isDouble", scope: !864, file: !5, type: !1352, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !10238)
!10238 = !{!10239}
!10239 = !DILocalVariable(name: "objPtr", arg: 1, scope: !10237, file: !2, type: !998)
!10240 = !DILocation(line: 1269, scope: !10237)
!10241 = !DILocation(line: 1270, scope: !10237)
!10242 = !DILocation(line: 1271, scope: !10237)
!10243 = distinct !DISubprogram(name: "tcl.impl.isInteger", scope: !864, file: !5, type: !1352, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !10244)
!10244 = !{!10245}
!10245 = !DILocalVariable(name: "objPtr", arg: 1, scope: !10243, file: !2, type: !998)
!10246 = !DILocation(line: 1288, scope: !10243)
!10247 = !DILocation(line: 1289, scope: !10243)
!10248 = !DILocation(line: 1290, scope: !10243)
!10249 = !DILocation(line: 1291, scope: !10243)
!10250 = distinct !DISubprogram(name: "tcl.impl.strempty", scope: !864, file: !5, type: !1352, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !10251)
!10251 = !{!10252}
!10252 = !DILocalVariable(name: "value", arg: 1, scope: !10250, file: !2, type: !998)
!10253 = !DILocation(line: 1308, scope: !10250)
!10254 = !DILocation(line: 1309, scope: !10250)
!10255 = !DILocation(line: 1311, scope: !10250)
!10256 = !DILocation(line: 1313, scope: !10250)
!10257 = !DILocation(line: 1316, scope: !10250)
!10258 = distinct !DISubprogram(name: "tcl.isNumeric", scope: !864, file: !5, type: !10259, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !10261)
!10259 = !DISubroutineType(types: !10260)
!10260 = !{!14, !998, !14}
!10261 = !{!10262, !10263}
!10262 = !DILocalVariable(name: "value", arg: 1, scope: !10258, file: !2, type: !998)
!10263 = !DILocalVariable(name: "emptyOK", arg: 2, scope: !10258, file: !2, type: !14)
!10264 = !DILocation(line: 777, scope: !1765, inlinedAt: !10265)
!10265 = distinct !DILocation(line: 1341, scope: !10258)
!10266 = !DILocation(line: 1331, scope: !10258)
!10267 = !DILocation(line: 1269, scope: !10237, inlinedAt: !10268)
!10268 = distinct !DILocation(line: 1333, scope: !10258)
!10269 = !DILocation(line: 1271, scope: !10237, inlinedAt: !10268)
!10270 = !DILocation(line: 1333, scope: !10258)
!10271 = !DILocation(line: 1288, scope: !10243, inlinedAt: !10272)
!10272 = distinct !DILocation(line: 1335, scope: !10258)
!10273 = !DILocation(line: 1289, scope: !10243, inlinedAt: !10272)
!10274 = !DILocation(line: 1291, scope: !10243, inlinedAt: !10272)
!10275 = !DILocation(line: 1335, scope: !10258)
!10276 = !DILocation(line: 1337, scope: !10258)
!10277 = !DILocation(line: 1308, scope: !10250, inlinedAt: !10278)
!10278 = distinct !DILocation(line: 1339, scope: !10258)
!10279 = !DILocation(line: 1309, scope: !10250, inlinedAt: !10278)
!10280 = !DILocation(line: 1311, scope: !10250, inlinedAt: !10278)
!10281 = !DILocation(line: 1313, scope: !10250, inlinedAt: !10278)
!10282 = !DILocation(line: 1316, scope: !10250, inlinedAt: !10278)
!10283 = !DILocation(line: 1339, scope: !10258)
!10284 = !DILocation(line: 778, scope: !1765, inlinedAt: !10265)
!10285 = !DILocation(line: 780, scope: !1765, inlinedAt: !10265)
!10286 = !DILocation(line: 782, scope: !1765, inlinedAt: !10265)
!10287 = !DILocation(line: 1342, scope: !10258)
!10288 = !DILocation(line: 1344, scope: !10258)
!10289 = distinct !DISubprogram(name: "tcl.isNumericOrBoolean", scope: !864, file: !5, type: !1352, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !10290)
!10290 = !{!10291}
!10291 = !DILocalVariable(name: "value", arg: 1, scope: !10289, file: !2, type: !998)
!10292 = !DILocation(line: 777, scope: !1765, inlinedAt: !10293)
!10293 = distinct !DILocation(line: 1368, scope: !10289)
!10294 = !DILocation(line: 747, scope: !1754, inlinedAt: !10295)
!10295 = distinct !DILocation(line: 1371, scope: !10289)
!10296 = !DILocation(line: 1360, scope: !10289)
!10297 = !DILocation(line: 1269, scope: !10237, inlinedAt: !10298)
!10298 = distinct !DILocation(line: 1362, scope: !10289)
!10299 = !DILocation(line: 1271, scope: !10237, inlinedAt: !10298)
!10300 = !DILocation(line: 1362, scope: !10289)
!10301 = !DILocation(line: 1288, scope: !10243, inlinedAt: !10302)
!10302 = distinct !DILocation(line: 1364, scope: !10289)
!10303 = !DILocation(line: 1289, scope: !10243, inlinedAt: !10302)
!10304 = !DILocation(line: 1291, scope: !10243, inlinedAt: !10302)
!10305 = !DILocation(line: 1250, scope: !10231, inlinedAt: !10306)
!10306 = distinct !DILocation(line: 1366, scope: !10289)
!10307 = !DILocation(line: 1252, scope: !10231, inlinedAt: !10306)
!10308 = !DILocation(line: 1364, scope: !10289)
!10309 = !DILocation(line: 778, scope: !1765, inlinedAt: !10293)
!10310 = !DILocation(line: 780, scope: !1765, inlinedAt: !10293)
!10311 = !DILocation(line: 782, scope: !1765, inlinedAt: !10293)
!10312 = !DILocation(line: 1369, scope: !10289)
!10313 = !DILocation(line: 748, scope: !1754, inlinedAt: !10295)
!10314 = !DILocation(line: 749, scope: !1754, inlinedAt: !10295)
!10315 = !DILocation(line: 751, scope: !1754, inlinedAt: !10295)
!10316 = !DILocation(line: 753, scope: !1754, inlinedAt: !10295)
!10317 = !DILocation(line: 1372, scope: !10289)
!10318 = !DILocation(line: 1374, scope: !10289)
!10319 = distinct !DISubprogram(name: "tcl.isBoolean", scope: !864, file: !5, type: !10259, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !10320)
!10320 = !{!10321, !10322}
!10321 = !DILocalVariable(name: "value", arg: 1, scope: !10319, file: !2, type: !998)
!10322 = !DILocalVariable(name: "emptyOK", arg: 2, scope: !10319, file: !2, type: !14)
!10323 = !DILocation(line: 747, scope: !1754, inlinedAt: !10324)
!10324 = distinct !DILocation(line: 1395, scope: !10319)
!10325 = !DILocation(line: 1250, scope: !10231, inlinedAt: !10326)
!10326 = distinct !DILocation(line: 1389, scope: !10319)
!10327 = !DILocation(line: 1251, scope: !10231, inlinedAt: !10326)
!10328 = !DILocation(line: 1252, scope: !10231, inlinedAt: !10326)
!10329 = !DILocation(line: 1389, scope: !10319)
!10330 = !DILocation(line: 1391, scope: !10319)
!10331 = !DILocation(line: 1308, scope: !10250, inlinedAt: !10332)
!10332 = distinct !DILocation(line: 1393, scope: !10319)
!10333 = !DILocation(line: 1309, scope: !10250, inlinedAt: !10332)
!10334 = !DILocation(line: 1311, scope: !10250, inlinedAt: !10332)
!10335 = !DILocation(line: 1313, scope: !10250, inlinedAt: !10332)
!10336 = !DILocation(line: 1316, scope: !10250, inlinedAt: !10332)
!10337 = !DILocation(line: 1393, scope: !10319)
!10338 = !DILocation(line: 748, scope: !1754, inlinedAt: !10324)
!10339 = !DILocation(line: 749, scope: !1754, inlinedAt: !10324)
!10340 = !DILocation(line: 751, scope: !1754, inlinedAt: !10324)
!10341 = !DILocation(line: 753, scope: !1754, inlinedAt: !10324)
!10342 = !DILocation(line: 1396, scope: !10319)
!10343 = !DILocation(line: 1398, scope: !10319)
!10344 = distinct !DISubprogram(name: "tcl.isDouble", scope: !864, file: !5, type: !10259, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !10345)
!10345 = !{!10346, !10347}
!10346 = !DILocalVariable(name: "value", arg: 1, scope: !10344, file: !2, type: !998)
!10347 = !DILocalVariable(name: "emptyOK", arg: 2, scope: !10344, file: !2, type: !14)
!10348 = !DILocation(line: 777, scope: !1765, inlinedAt: !10349)
!10349 = distinct !DILocation(line: 1418, scope: !10344)
!10350 = !DILocation(line: 1269, scope: !10237, inlinedAt: !10351)
!10351 = distinct !DILocation(line: 1412, scope: !10344)
!10352 = !DILocation(line: 1270, scope: !10237, inlinedAt: !10351)
!10353 = !DILocation(line: 1271, scope: !10237, inlinedAt: !10351)
!10354 = !DILocation(line: 1412, scope: !10344)
!10355 = !DILocation(line: 1414, scope: !10344)
!10356 = !DILocation(line: 1308, scope: !10250, inlinedAt: !10357)
!10357 = distinct !DILocation(line: 1416, scope: !10344)
!10358 = !DILocation(line: 1309, scope: !10250, inlinedAt: !10357)
!10359 = !DILocation(line: 1311, scope: !10250, inlinedAt: !10357)
!10360 = !DILocation(line: 1313, scope: !10250, inlinedAt: !10357)
!10361 = !DILocation(line: 1316, scope: !10250, inlinedAt: !10357)
!10362 = !DILocation(line: 1416, scope: !10344)
!10363 = !DILocation(line: 778, scope: !1765, inlinedAt: !10349)
!10364 = !DILocation(line: 780, scope: !1765, inlinedAt: !10349)
!10365 = !DILocation(line: 782, scope: !1765, inlinedAt: !10349)
!10366 = !DILocation(line: 1419, scope: !10344)
!10367 = !DILocation(line: 1421, scope: !10344)
!10368 = distinct !DISubprogram(name: "tcl.isInteger", scope: !864, file: !5, type: !10259, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !10369)
!10369 = !{!10370, !10371}
!10370 = !DILocalVariable(name: "value", arg: 1, scope: !10368, file: !2, type: !998)
!10371 = !DILocalVariable(name: "emptyOK", arg: 2, scope: !10368, file: !2, type: !14)
!10372 = !DILocation(line: 801, scope: !1775, inlinedAt: !10373)
!10373 = distinct !DILocation(line: 1441, scope: !10368)
!10374 = !DILocation(line: 1288, scope: !10243, inlinedAt: !10375)
!10375 = distinct !DILocation(line: 1435, scope: !10368)
!10376 = !DILocation(line: 1289, scope: !10243, inlinedAt: !10375)
!10377 = !DILocation(line: 1290, scope: !10243, inlinedAt: !10375)
!10378 = !DILocation(line: 1291, scope: !10243, inlinedAt: !10375)
!10379 = !DILocation(line: 1435, scope: !10368)
!10380 = !DILocation(line: 1437, scope: !10368)
!10381 = !DILocation(line: 1308, scope: !10250, inlinedAt: !10382)
!10382 = distinct !DILocation(line: 1439, scope: !10368)
!10383 = !DILocation(line: 1309, scope: !10250, inlinedAt: !10382)
!10384 = !DILocation(line: 1311, scope: !10250, inlinedAt: !10382)
!10385 = !DILocation(line: 1313, scope: !10250, inlinedAt: !10382)
!10386 = !DILocation(line: 1316, scope: !10250, inlinedAt: !10382)
!10387 = !DILocation(line: 1439, scope: !10368)
!10388 = !DILocation(line: 802, scope: !1775, inlinedAt: !10373)
!10389 = !DILocation(line: 804, scope: !1775, inlinedAt: !10373)
!10390 = !DILocation(line: 806, scope: !1775, inlinedAt: !10373)
!10391 = !DILocation(line: 1442, scope: !10368)
!10392 = !DILocation(line: 1444, scope: !10368)
!10393 = distinct !DISubprogram(name: "tcl.isZeroOneBoolean", scope: !864, file: !5, type: !10259, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !10394)
!10394 = !{!10395, !10396}
!10395 = !DILocalVariable(name: "value", arg: 1, scope: !10393, file: !2, type: !998)
!10396 = !DILocalVariable(name: "emptyOK", arg: 2, scope: !10393, file: !2, type: !14)
!10397 = !DILocation(line: 747, scope: !1754, inlinedAt: !10398)
!10398 = distinct !DILocation(line: 1472, scope: !10393)
!10399 = !DILocation(line: 801, scope: !1775, inlinedAt: !10400)
!10400 = distinct !DILocation(line: 1462, scope: !10393)
!10401 = !DILocation(line: 801, scope: !1775, inlinedAt: !10402)
!10402 = distinct !DILocation(line: 1475, scope: !10393)
!10403 = !DILocation(line: 1288, scope: !10243, inlinedAt: !10404)
!10404 = distinct !DILocation(line: 1460, scope: !10393)
!10405 = !DILocation(line: 1289, scope: !10243, inlinedAt: !10404)
!10406 = !DILocation(line: 1290, scope: !10243, inlinedAt: !10404)
!10407 = !DILocation(line: 1291, scope: !10243, inlinedAt: !10404)
!10408 = !DILocation(line: 1460, scope: !10393)
!10409 = !DILocation(line: 802, scope: !1775, inlinedAt: !10400)
!10410 = !DILocation(line: 804, scope: !1775, inlinedAt: !10400)
!10411 = !DILocation(line: 805, scope: !1775, inlinedAt: !10400)
!10412 = !DILocation(line: 806, scope: !1775, inlinedAt: !10400)
!10413 = !DILocation(line: 1466, scope: !10393)
!10414 = !DILocation(line: 1463, scope: !10393)
!10415 = !DILocation(line: 1468, scope: !10393)
!10416 = !DILocation(line: 1308, scope: !10250, inlinedAt: !10417)
!10417 = distinct !DILocation(line: 1470, scope: !10393)
!10418 = !DILocation(line: 1309, scope: !10250, inlinedAt: !10417)
!10419 = !DILocation(line: 1311, scope: !10250, inlinedAt: !10417)
!10420 = !DILocation(line: 1313, scope: !10250, inlinedAt: !10417)
!10421 = !DILocation(line: 1316, scope: !10250, inlinedAt: !10417)
!10422 = !DILocation(line: 1470, scope: !10393)
!10423 = !DILocation(line: 748, scope: !1754, inlinedAt: !10398)
!10424 = !DILocation(line: 749, scope: !1754, inlinedAt: !10398)
!10425 = !DILocation(line: 751, scope: !1754, inlinedAt: !10398)
!10426 = !DILocation(line: 753, scope: !1754, inlinedAt: !10398)
!10427 = !DILocation(line: 1473, scope: !10393)
!10428 = !DILocation(line: 802, scope: !1775, inlinedAt: !10402)
!10429 = !DILocation(line: 804, scope: !1775, inlinedAt: !10402)
!10430 = !DILocation(line: 806, scope: !1775, inlinedAt: !10402)
!10431 = !DILocation(line: 1476, scope: !10393)
!10432 = !DILocation(line: 1478, scope: !10393)
!10433 = distinct !DISubprogram(name: "tcl.extractNumeric", scope: !864, file: !5, type: !10434, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !10436)
!10434 = !DISubroutineType(types: !10435)
!10435 = !{!343, !998}
!10436 = !{!10437}
!10437 = !DILocalVariable(name: "value", arg: 1, scope: !10433, file: !2, type: !998)
!10438 = !DILocation(line: 777, scope: !1765, inlinedAt: !10439)
!10439 = distinct !DILocation(line: 1499, scope: !10433)
!10440 = !DILocation(line: 801, scope: !1775, inlinedAt: !10441)
!10441 = distinct !DILocation(line: 1504, scope: !10433)
!10442 = !DILocation(line: 1494, scope: !10433)
!10443 = !DILocation(line: 778, scope: !1765, inlinedAt: !10439)
!10444 = !DILocation(line: 781, scope: !1765, inlinedAt: !10439)
!10445 = !DILocation(line: 782, scope: !1765, inlinedAt: !10439)
!10446 = !DILocation(line: 1269, scope: !10237, inlinedAt: !10447)
!10447 = distinct !DILocation(line: 1500, scope: !10433)
!10448 = !DILocation(line: 1270, scope: !10237, inlinedAt: !10447)
!10449 = !DILocation(line: 1271, scope: !10237, inlinedAt: !10447)
!10450 = !DILocation(line: 1500, scope: !10433)
!10451 = !DILocation(line: 1502, scope: !10433)
!10452 = !DILocation(line: 802, scope: !1775, inlinedAt: !10441)
!10453 = !DILocation(line: 805, scope: !1775, inlinedAt: !10441)
!10454 = !DILocation(line: 806, scope: !1775, inlinedAt: !10441)
!10455 = !DILocation(line: 1505, scope: !10433)
!10456 = distinct !DISubprogram(name: "tcl.extractNumericOrBoolean", scope: !864, file: !5, type: !10457, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !10459)
!10457 = !DISubroutineType(types: !10458)
!10458 = !{!653, !998}
!10459 = !{!10460}
!10460 = !DILocalVariable(name: "value", arg: 1, scope: !10456, file: !2, type: !998)
!10461 = !DILocation(line: 777, scope: !1765, inlinedAt: !10462)
!10462 = distinct !DILocation(line: 1531, scope: !10456)
!10463 = !DILocation(line: 747, scope: !1754, inlinedAt: !10464)
!10464 = distinct !DILocation(line: 1534, scope: !10456)
!10465 = !DILocation(line: 801, scope: !1775, inlinedAt: !10466)
!10466 = distinct !DILocation(line: 1526, scope: !10456)
!10467 = !DILocation(line: 777, scope: !1765, inlinedAt: !10468)
!10468 = distinct !DILocation(line: 1539, scope: !10456)
!10469 = !DILocation(line: 0, scope: !10456)
!10470 = !DILocation(line: 0, scope: !10243, inlinedAt: !10471)
!10471 = distinct !DILocation(line: 1524, scope: !10456)
!10472 = !DILocation(line: 0, scope: !10237, inlinedAt: !10473)
!10473 = distinct !DILocation(line: 1529, scope: !10456)
!10474 = !DILocation(line: 0, scope: !1754, inlinedAt: !10464)
!10475 = !DILocation(line: 0, scope: !1765, inlinedAt: !10468)
!10476 = !DILocation(line: 1519, scope: !10456)
!10477 = !DILocation(line: 1521, scope: !10456)
!10478 = !DILocation(line: 1522, scope: !10456)
!10479 = !DILocation(line: 1291, scope: !10243, inlinedAt: !10471)
!10480 = !DILocation(line: 1524, scope: !10456)
!10481 = !DILocation(line: 802, scope: !1775, inlinedAt: !10466)
!10482 = !DILocation(line: 805, scope: !1775, inlinedAt: !10466)
!10483 = !DILocation(line: 806, scope: !1775, inlinedAt: !10466)
!10484 = !DILocation(line: 1527, scope: !10456)
!10485 = !DILocation(line: 1271, scope: !10237, inlinedAt: !10473)
!10486 = !DILocation(line: 1529, scope: !10456)
!10487 = !DILocation(line: 778, scope: !1765, inlinedAt: !10462)
!10488 = !DILocation(line: 781, scope: !1765, inlinedAt: !10462)
!10489 = !DILocation(line: 782, scope: !1765, inlinedAt: !10462)
!10490 = !DILocation(line: 1532, scope: !10456)
!10491 = !DILocation(line: 748, scope: !1754, inlinedAt: !10464)
!10492 = !DILocation(line: 749, scope: !1754, inlinedAt: !10464)
!10493 = !DILocation(line: 751, scope: !1754, inlinedAt: !10464)
!10494 = !DILocation(line: 752, scope: !1754, inlinedAt: !10464)
!10495 = !DILocation(line: 753, scope: !1754, inlinedAt: !10464)
!10496 = !DILocation(line: 1535, scope: !10456)
!10497 = !DILocation(line: 1537, scope: !10456)
!10498 = !DILocation(line: 778, scope: !1765, inlinedAt: !10468)
!10499 = !DILocation(line: 782, scope: !1765, inlinedAt: !10468)
!10500 = !DILocation(line: 1540, scope: !10456)
!10501 = distinct !DISubprogram(name: "tcl.extractDouble", scope: !864, file: !5, type: !10502, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !10504)
!10502 = !DISubroutineType(types: !10503)
!10503 = !{!321, !998}
!10504 = !{!10505}
!10505 = !DILocalVariable(name: "value", arg: 1, scope: !10501, file: !2, type: !998)
!10506 = !DILocation(line: 777, scope: !1765, inlinedAt: !10507)
!10507 = distinct !DILocation(line: 1554, scope: !10501)
!10508 = !DILocation(line: 778, scope: !1765, inlinedAt: !10507)
!10509 = !DILocation(line: 781, scope: !1765, inlinedAt: !10507)
!10510 = !DILocation(line: 782, scope: !1765, inlinedAt: !10507)
!10511 = !DILocation(line: 1554, scope: !10501)
!10512 = distinct !DISubprogram(name: "tcl.extractInteger", scope: !864, file: !5, type: !1730, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !10513)
!10513 = !{!10514}
!10514 = !DILocalVariable(name: "value", arg: 1, scope: !10512, file: !2, type: !998)
!10515 = !DILocation(line: 801, scope: !1775, inlinedAt: !10516)
!10516 = distinct !DILocation(line: 1568, scope: !10512)
!10517 = !DILocation(line: 802, scope: !1775, inlinedAt: !10516)
!10518 = !DILocation(line: 805, scope: !1775, inlinedAt: !10516)
!10519 = !DILocation(line: 806, scope: !1775, inlinedAt: !10516)
!10520 = !DILocation(line: 1568, scope: !10512)
!10521 = distinct !DISubprogram(name: "tcl.isTrue.numeric", scope: !864, file: !5, type: !640, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !10522)
!10522 = !{!10523}
!10523 = !DILocalVariable(name: "value", arg: 1, scope: !10521, file: !2, type: !343)
!10524 = !DILocation(line: 1582, scope: !10521)
!10525 = !DILocation(line: 1584, scope: !10521)
!10526 = !DILocation(line: 156, scope: !220, inlinedAt: !10527)
!10527 = distinct !DILocation(line: 1584, scope: !10521)
!10528 = !DILocation(line: 166, scope: !220, inlinedAt: !10527)
!10529 = !DILocation(line: 1586, scope: !10521)
!10530 = distinct !DISubprogram(name: "tcl.isTrue.numericOrBoolean", scope: !864, file: !5, type: !651, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !10531)
!10531 = !{!10532}
!10532 = !DILocalVariable(name: "value", arg: 1, scope: !10530, file: !2, type: !653)
!10533 = !DILocation(line: 1602, scope: !10530)
!10534 = !DILocation(line: 1604, scope: !10530)
!10535 = !DILocation(line: 1606, scope: !10530)
!10536 = !DILocation(line: 156, scope: !220, inlinedAt: !10537)
!10537 = distinct !DILocation(line: 1606, scope: !10530)
!10538 = !DILocation(line: 166, scope: !220, inlinedAt: !10537)
!10539 = !DILocation(line: 1608, scope: !10530)
!10540 = distinct !DISubprogram(name: "tcl.cmp.strstr", scope: !864, file: !5, type: !5030, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !10541)
!10541 = !{!10542, !10543}
!10542 = !DILocalVariable(name: "value1Ptr", arg: 1, scope: !10540, file: !2, type: !998)
!10543 = !DILocalVariable(name: "value2Ptr", arg: 2, scope: !10540, file: !2, type: !998)
!10544 = !DILocation(line: 777, scope: !1765, inlinedAt: !10545)
!10545 = distinct !DILocation(line: 1499, scope: !10433, inlinedAt: !10546)
!10546 = distinct !DILocation(line: 1633, scope: !10540)
!10547 = !DILocation(line: 801, scope: !1775, inlinedAt: !10548)
!10548 = distinct !DILocation(line: 1504, scope: !10433, inlinedAt: !10546)
!10549 = !DILocation(line: 777, scope: !1765, inlinedAt: !10550)
!10550 = distinct !DILocation(line: 1499, scope: !10433, inlinedAt: !10551)
!10551 = distinct !DILocation(line: 1632, scope: !10540)
!10552 = !DILocation(line: 801, scope: !1775, inlinedAt: !10553)
!10553 = distinct !DILocation(line: 1504, scope: !10433, inlinedAt: !10551)
!10554 = !DILocation(line: 880, scope: !1814, inlinedAt: !10555)
!10555 = distinct !DILocation(line: 3753, scope: !5029, inlinedAt: !10556)
!10556 = distinct !DILocation(line: 1630, scope: !10540)
!10557 = !DILocation(line: 880, scope: !1814, inlinedAt: !10558)
!10558 = distinct !DILocation(line: 3754, scope: !5029, inlinedAt: !10556)
!10559 = !DILocation(line: 777, scope: !1765, inlinedAt: !10560)
!10560 = distinct !DILocation(line: 1341, scope: !10258, inlinedAt: !10561)
!10561 = distinct !DILocation(line: 1628, scope: !10540)
!10562 = !DILocation(line: 777, scope: !1765, inlinedAt: !10563)
!10563 = distinct !DILocation(line: 1341, scope: !10258, inlinedAt: !10564)
!10564 = distinct !DILocation(line: 1626, scope: !10540)
!10565 = !DILocation(line: 1331, scope: !10258, inlinedAt: !10564)
!10566 = !DILocation(line: 1269, scope: !10237, inlinedAt: !10567)
!10567 = distinct !DILocation(line: 1333, scope: !10258, inlinedAt: !10564)
!10568 = !DILocation(line: 1271, scope: !10237, inlinedAt: !10567)
!10569 = !DILocation(line: 1333, scope: !10258, inlinedAt: !10564)
!10570 = !DILocation(line: 1288, scope: !10243, inlinedAt: !10571)
!10571 = distinct !DILocation(line: 1335, scope: !10258, inlinedAt: !10564)
!10572 = !DILocation(line: 1289, scope: !10243, inlinedAt: !10571)
!10573 = !DILocation(line: 1291, scope: !10243, inlinedAt: !10571)
!10574 = !DILocation(line: 1335, scope: !10258, inlinedAt: !10564)
!10575 = !DILocation(line: 778, scope: !1765, inlinedAt: !10563)
!10576 = !DILocation(line: 780, scope: !1765, inlinedAt: !10563)
!10577 = !DILocation(line: 782, scope: !1765, inlinedAt: !10563)
!10578 = !DILocation(line: 1626, scope: !10540)
!10579 = !DILocation(line: 1331, scope: !10258, inlinedAt: !10561)
!10580 = !DILocation(line: 1269, scope: !10237, inlinedAt: !10581)
!10581 = distinct !DILocation(line: 1333, scope: !10258, inlinedAt: !10561)
!10582 = !DILocation(line: 1271, scope: !10237, inlinedAt: !10581)
!10583 = !DILocation(line: 1333, scope: !10258, inlinedAt: !10561)
!10584 = !DILocation(line: 1288, scope: !10243, inlinedAt: !10585)
!10585 = distinct !DILocation(line: 1335, scope: !10258, inlinedAt: !10561)
!10586 = !DILocation(line: 1289, scope: !10243, inlinedAt: !10585)
!10587 = !DILocation(line: 1291, scope: !10243, inlinedAt: !10585)
!10588 = !DILocation(line: 1335, scope: !10258, inlinedAt: !10561)
!10589 = !DILocation(line: 778, scope: !1765, inlinedAt: !10560)
!10590 = !DILocation(line: 780, scope: !1765, inlinedAt: !10560)
!10591 = !DILocation(line: 782, scope: !1765, inlinedAt: !10560)
!10592 = !DILocation(line: 1628, scope: !10540)
!10593 = !DILocation(line: 1269, scope: !10237, inlinedAt: !10594)
!10594 = distinct !DILocation(line: 1500, scope: !10433, inlinedAt: !10551)
!10595 = !DILocation(line: 3743, scope: !5029, inlinedAt: !10556)
!10596 = !DILocation(line: 703, scope: !1740, inlinedAt: !10597)
!10597 = distinct !DILocation(line: 3745, scope: !5029, inlinedAt: !10556)
!10598 = !DILocation(line: 704, scope: !1740, inlinedAt: !10597)
!10599 = !DILocation(line: 705, scope: !1740, inlinedAt: !10597)
!10600 = !DILocation(line: 707, scope: !1740, inlinedAt: !10597)
!10601 = !DILocation(line: 704, scope: !1740, inlinedAt: !10602)
!10602 = distinct !DILocation(line: 3747, scope: !5029, inlinedAt: !10556)
!10603 = !DILocation(line: 705, scope: !1740, inlinedAt: !10602)
!10604 = !DILocation(line: 707, scope: !1740, inlinedAt: !10602)
!10605 = !DILocation(line: 730, scope: !1748, inlinedAt: !10606)
!10606 = distinct !DILocation(line: 3749, scope: !5029, inlinedAt: !10556)
!10607 = !DILocation(line: 732, scope: !1748, inlinedAt: !10606)
!10608 = !DILocation(line: 731, scope: !1748, inlinedAt: !10609)
!10609 = distinct !DILocation(line: 3749, scope: !5029, inlinedAt: !10556)
!10610 = !DILocation(line: 732, scope: !1748, inlinedAt: !10609)
!10611 = !DILocation(line: 3749, scope: !5029, inlinedAt: !10556)
!10612 = !DILocation(line: 881, scope: !1814, inlinedAt: !10555)
!10613 = !DILocation(line: 883, scope: !1814, inlinedAt: !10555)
!10614 = !DILocation(line: 885, scope: !1814, inlinedAt: !10555)
!10615 = !DILocation(line: 881, scope: !1814, inlinedAt: !10558)
!10616 = !DILocation(line: 883, scope: !1814, inlinedAt: !10558)
!10617 = !DILocation(line: 885, scope: !1814, inlinedAt: !10558)
!10618 = !DILocation(line: 3755, scope: !5029, inlinedAt: !10556)
!10619 = !DILocation(line: 3756, scope: !5029, inlinedAt: !10556)
!10620 = !DILocation(line: 3757, scope: !5029, inlinedAt: !10556)
!10621 = !DILocation(line: 3759, scope: !5029, inlinedAt: !10556)
!10622 = !DILocation(line: 3760, scope: !5029, inlinedAt: !10556)
!10623 = !DILocation(line: 3761, scope: !5029, inlinedAt: !10556)
!10624 = !DILocation(line: 3762, scope: !5029, inlinedAt: !10556)
!10625 = !DILocation(line: 3763, scope: !5029, inlinedAt: !10556)
!10626 = !DILocation(line: 3765, scope: !5029, inlinedAt: !10556)
!10627 = !DILocation(line: 3766, scope: !5029, inlinedAt: !10556)
!10628 = !DILocation(line: 3767, scope: !5029, inlinedAt: !10556)
!10629 = !DILocation(line: 3768, scope: !5029, inlinedAt: !10556)
!10630 = !DILocation(line: 3769, scope: !5029, inlinedAt: !10556)
!10631 = !DILocation(line: 3770, scope: !5029, inlinedAt: !10556)
!10632 = !DILocation(line: 3771, scope: !5029, inlinedAt: !10556)
!10633 = !DILocation(line: 3776, scope: !5029, inlinedAt: !10556)
!10634 = !DILocation(line: 1630, scope: !10540)
!10635 = !DILocation(line: 778, scope: !1765, inlinedAt: !10550)
!10636 = !DILocation(line: 781, scope: !1765, inlinedAt: !10550)
!10637 = !DILocation(line: 782, scope: !1765, inlinedAt: !10550)
!10638 = !DILocation(line: 1270, scope: !10237, inlinedAt: !10594)
!10639 = !DILocation(line: 1271, scope: !10237, inlinedAt: !10594)
!10640 = !DILocation(line: 1500, scope: !10433, inlinedAt: !10551)
!10641 = !DILocation(line: 1502, scope: !10433, inlinedAt: !10551)
!10642 = !DILocation(line: 802, scope: !1775, inlinedAt: !10553)
!10643 = !DILocation(line: 805, scope: !1775, inlinedAt: !10553)
!10644 = !DILocation(line: 806, scope: !1775, inlinedAt: !10553)
!10645 = !DILocation(line: 1505, scope: !10433, inlinedAt: !10551)
!10646 = !DILocation(line: 778, scope: !1765, inlinedAt: !10545)
!10647 = !DILocation(line: 781, scope: !1765, inlinedAt: !10545)
!10648 = !DILocation(line: 782, scope: !1765, inlinedAt: !10545)
!10649 = !DILocation(line: 1270, scope: !10237, inlinedAt: !10650)
!10650 = distinct !DILocation(line: 1500, scope: !10433, inlinedAt: !10546)
!10651 = !DILocation(line: 1271, scope: !10237, inlinedAt: !10650)
!10652 = !DILocation(line: 1500, scope: !10433, inlinedAt: !10546)
!10653 = !DILocation(line: 1502, scope: !10433, inlinedAt: !10546)
!10654 = !DILocation(line: 802, scope: !1775, inlinedAt: !10548)
!10655 = !DILocation(line: 805, scope: !1775, inlinedAt: !10548)
!10656 = !DILocation(line: 806, scope: !1775, inlinedAt: !10548)
!10657 = !DILocation(line: 1505, scope: !10433, inlinedAt: !10546)
!10658 = !DILocation(line: 222, scope: !491, inlinedAt: !10659)
!10659 = distinct !DILocation(line: 1634, scope: !10540)
!10660 = !DILocation(line: 0, scope: !491, inlinedAt: !10659)
!10661 = !DILocation(line: 224, scope: !491, inlinedAt: !10659)
!10662 = !DILocation(line: 156, scope: !265, inlinedAt: !10663)
!10663 = distinct !DILocation(line: 224, scope: !491, inlinedAt: !10659)
!10664 = !DILocation(line: 158, scope: !265, inlinedAt: !10663)
!10665 = !DILocation(line: 0, scope: !265, inlinedAt: !10663)
!10666 = !DILocation(line: 161, scope: !265, inlinedAt: !10663)
!10667 = !DILocation(line: 162, scope: !265, inlinedAt: !10663)
!10668 = !DILocation(line: 1634, scope: !10540)
!10669 = !DILocation(line: 394, scope: !21, inlinedAt: !10670)
!10670 = distinct !DILocation(line: 164, scope: !265, inlinedAt: !10663)
!10671 = !DILocation(line: 392, scope: !21, inlinedAt: !10672)
!10672 = distinct !DILocation(line: 165, scope: !265, inlinedAt: !10663)
!10673 = !DILocation(line: 396, scope: !21, inlinedAt: !10670)
!10674 = !DILocation(line: 392, scope: !21, inlinedAt: !10675)
!10675 = distinct !DILocation(line: 226, scope: !491, inlinedAt: !10659)
!10676 = !DILocation(line: 226, scope: !491, inlinedAt: !10659)
!10677 = !DILocation(line: 227, scope: !491, inlinedAt: !10659)
!10678 = !DILocation(line: 392, scope: !21, inlinedAt: !10679)
!10679 = distinct !DILocation(line: 227, scope: !491, inlinedAt: !10659)
!10680 = !DILocation(line: 228, scope: !491, inlinedAt: !10659)
!10681 = !DILocation(line: 166, scope: !265, inlinedAt: !10663)
!10682 = !DILocation(line: 156, scope: !235, inlinedAt: !10683)
!10683 = distinct !DILocation(line: 224, scope: !543, inlinedAt: !10684)
!10684 = distinct !DILocation(line: 1636, scope: !10540)
!10685 = !DILocation(line: 158, scope: !235, inlinedAt: !10683)
!10686 = !DILocation(line: 0, scope: !235, inlinedAt: !10683)
!10687 = !DILocation(line: 161, scope: !235, inlinedAt: !10683)
!10688 = !DILocation(line: 162, scope: !235, inlinedAt: !10683)
!10689 = !DILocation(line: 394, scope: !21, inlinedAt: !10690)
!10690 = distinct !DILocation(line: 164, scope: !235, inlinedAt: !10683)
!10691 = !DILocation(line: 392, scope: !21, inlinedAt: !10692)
!10692 = distinct !DILocation(line: 165, scope: !235, inlinedAt: !10683)
!10693 = !DILocation(line: 396, scope: !21, inlinedAt: !10690)
!10694 = !DILocation(line: 166, scope: !235, inlinedAt: !10683)
!10695 = !DILocation(line: 228, scope: !543, inlinedAt: !10684)
!10696 = distinct !DISubprogram(name: "tcl.cmp.strnum", scope: !864, file: !5, type: !10697, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !10699)
!10697 = !DISubroutineType(types: !10698)
!10698 = !{!9, !998, !343}
!10699 = !{!10700, !10701}
!10700 = !DILocalVariable(name: "value1Ptr", arg: 1, scope: !10696, file: !2, type: !998)
!10701 = !DILocalVariable(name: "value2Ptr", arg: 2, scope: !10696, file: !2, type: !343)
!10702 = !DILocation(line: 777, scope: !1765, inlinedAt: !10703)
!10703 = distinct !DILocation(line: 1499, scope: !10433, inlinedAt: !10704)
!10704 = distinct !DILocation(line: 1671, scope: !10696)
!10705 = !DILocation(line: 801, scope: !1775, inlinedAt: !10706)
!10706 = distinct !DILocation(line: 1504, scope: !10433, inlinedAt: !10704)
!10707 = !DILocation(line: 880, scope: !1814, inlinedAt: !10708)
!10708 = distinct !DILocation(line: 3753, scope: !5029, inlinedAt: !10709)
!10709 = distinct !DILocation(line: 1667, scope: !10696)
!10710 = !DILocation(line: 880, scope: !1814, inlinedAt: !10711)
!10711 = distinct !DILocation(line: 3754, scope: !5029, inlinedAt: !10709)
!10712 = !DILocation(line: 777, scope: !1765, inlinedAt: !10713)
!10713 = distinct !DILocation(line: 1341, scope: !10258, inlinedAt: !10714)
!10714 = distinct !DILocation(line: 1664, scope: !10696)
!10715 = !DILocation(line: 1331, scope: !10258, inlinedAt: !10714)
!10716 = !DILocation(line: 1269, scope: !10237, inlinedAt: !10717)
!10717 = distinct !DILocation(line: 1333, scope: !10258, inlinedAt: !10714)
!10718 = !DILocation(line: 1271, scope: !10237, inlinedAt: !10717)
!10719 = !DILocation(line: 1333, scope: !10258, inlinedAt: !10714)
!10720 = !DILocation(line: 1288, scope: !10243, inlinedAt: !10721)
!10721 = distinct !DILocation(line: 1335, scope: !10258, inlinedAt: !10714)
!10722 = !DILocation(line: 1289, scope: !10243, inlinedAt: !10721)
!10723 = !DILocation(line: 1291, scope: !10243, inlinedAt: !10721)
!10724 = !DILocation(line: 1335, scope: !10258, inlinedAt: !10714)
!10725 = !DILocation(line: 778, scope: !1765, inlinedAt: !10713)
!10726 = !DILocation(line: 780, scope: !1765, inlinedAt: !10713)
!10727 = !DILocation(line: 782, scope: !1765, inlinedAt: !10713)
!10728 = !DILocation(line: 1664, scope: !10696)
!10729 = !DILocation(line: 1269, scope: !10237, inlinedAt: !10730)
!10730 = distinct !DILocation(line: 1500, scope: !10433, inlinedAt: !10704)
!10731 = !DILocation(line: 1215, scope: !1323, inlinedAt: !10732)
!10732 = distinct !DILocation(line: 1666, scope: !10696)
!10733 = !DILocation(line: 1217, scope: !1323, inlinedAt: !10732)
!10734 = !DILocation(line: 1189, scope: !1303, inlinedAt: !10735)
!10735 = distinct !DILocation(line: 1217, scope: !1323, inlinedAt: !10732)
!10736 = !DILocation(line: 1191, scope: !1303, inlinedAt: !10735)
!10737 = !DILocation(line: 1192, scope: !1303, inlinedAt: !10735)
!10738 = !DILocation(line: 1193, scope: !1303, inlinedAt: !10735)
!10739 = !DILocation(line: 1194, scope: !1303, inlinedAt: !10735)
!10740 = !DILocation(line: 1196, scope: !1303, inlinedAt: !10735)
!10741 = !DILocation(line: 1197, scope: !1303, inlinedAt: !10735)
!10742 = !DILocation(line: 1198, scope: !1303, inlinedAt: !10735)
!10743 = !DILocation(line: 1199, scope: !1303, inlinedAt: !10735)
!10744 = !DILocation(line: 1219, scope: !1323, inlinedAt: !10732)
!10745 = !DILocation(line: 1174, scope: !1291, inlinedAt: !10746)
!10746 = distinct !DILocation(line: 1219, scope: !1323, inlinedAt: !10732)
!10747 = !DILocation(line: 1175, scope: !1291, inlinedAt: !10746)
!10748 = !DILocation(line: 1176, scope: !1291, inlinedAt: !10746)
!10749 = !DILocation(line: 0, scope: !1323, inlinedAt: !10732)
!10750 = !DILocation(line: 3743, scope: !5029, inlinedAt: !10709)
!10751 = !DILocation(line: 703, scope: !1740, inlinedAt: !10752)
!10752 = distinct !DILocation(line: 3745, scope: !5029, inlinedAt: !10709)
!10753 = !DILocation(line: 704, scope: !1740, inlinedAt: !10752)
!10754 = !DILocation(line: 705, scope: !1740, inlinedAt: !10752)
!10755 = !DILocation(line: 707, scope: !1740, inlinedAt: !10752)
!10756 = !DILocation(line: 705, scope: !1740, inlinedAt: !10757)
!10757 = distinct !DILocation(line: 3747, scope: !5029, inlinedAt: !10709)
!10758 = !DILocation(line: 707, scope: !1740, inlinedAt: !10757)
!10759 = !DILocation(line: 730, scope: !1748, inlinedAt: !10760)
!10760 = distinct !DILocation(line: 3749, scope: !5029, inlinedAt: !10709)
!10761 = !DILocation(line: 732, scope: !1748, inlinedAt: !10760)
!10762 = !DILocation(line: 732, scope: !1748, inlinedAt: !10763)
!10763 = distinct !DILocation(line: 3749, scope: !5029, inlinedAt: !10709)
!10764 = !DILocation(line: 3749, scope: !5029, inlinedAt: !10709)
!10765 = !DILocation(line: 881, scope: !1814, inlinedAt: !10708)
!10766 = !DILocation(line: 883, scope: !1814, inlinedAt: !10708)
!10767 = !DILocation(line: 885, scope: !1814, inlinedAt: !10708)
!10768 = !DILocation(line: 881, scope: !1814, inlinedAt: !10711)
!10769 = !DILocation(line: 883, scope: !1814, inlinedAt: !10711)
!10770 = !DILocation(line: 885, scope: !1814, inlinedAt: !10711)
!10771 = !DILocation(line: 3755, scope: !5029, inlinedAt: !10709)
!10772 = !DILocation(line: 3756, scope: !5029, inlinedAt: !10709)
!10773 = !DILocation(line: 3757, scope: !5029, inlinedAt: !10709)
!10774 = !DILocation(line: 3759, scope: !5029, inlinedAt: !10709)
!10775 = !DILocation(line: 3760, scope: !5029, inlinedAt: !10709)
!10776 = !DILocation(line: 3761, scope: !5029, inlinedAt: !10709)
!10777 = !DILocation(line: 3762, scope: !5029, inlinedAt: !10709)
!10778 = !DILocation(line: 3763, scope: !5029, inlinedAt: !10709)
!10779 = !DILocation(line: 3765, scope: !5029, inlinedAt: !10709)
!10780 = !DILocation(line: 3766, scope: !5029, inlinedAt: !10709)
!10781 = !DILocation(line: 3767, scope: !5029, inlinedAt: !10709)
!10782 = !DILocation(line: 3768, scope: !5029, inlinedAt: !10709)
!10783 = !DILocation(line: 3769, scope: !5029, inlinedAt: !10709)
!10784 = !DILocation(line: 3770, scope: !5029, inlinedAt: !10709)
!10785 = !DILocation(line: 3771, scope: !5029, inlinedAt: !10709)
!10786 = !DILocation(line: 3776, scope: !5029, inlinedAt: !10709)
!10787 = !DILocation(line: 0, scope: !1020, inlinedAt: !10788)
!10788 = distinct !DILocation(line: 1668, scope: !10696)
!10789 = !DILocation(line: 72, scope: !1020, inlinedAt: !10788)
!10790 = !DILocation(line: 73, scope: !1020, inlinedAt: !10788)
!10791 = !DILocation(line: 75, scope: !1020, inlinedAt: !10788)
!10792 = !DILocation(line: 76, scope: !1020, inlinedAt: !10788)
!10793 = !DILocation(line: 77, scope: !1020, inlinedAt: !10788)
!10794 = !DILocation(line: 71, scope: !1020, inlinedAt: !10788)
!10795 = !DILocation(line: 79, scope: !1020, inlinedAt: !10788)
!10796 = !DILocation(line: 80, scope: !1020, inlinedAt: !10788)
!10797 = !DILocation(line: 1669, scope: !10696)
!10798 = !DILocation(line: 778, scope: !1765, inlinedAt: !10703)
!10799 = !DILocation(line: 781, scope: !1765, inlinedAt: !10703)
!10800 = !DILocation(line: 782, scope: !1765, inlinedAt: !10703)
!10801 = !DILocation(line: 1270, scope: !10237, inlinedAt: !10730)
!10802 = !DILocation(line: 1271, scope: !10237, inlinedAt: !10730)
!10803 = !DILocation(line: 1500, scope: !10433, inlinedAt: !10704)
!10804 = !DILocation(line: 1502, scope: !10433, inlinedAt: !10704)
!10805 = !DILocation(line: 802, scope: !1775, inlinedAt: !10706)
!10806 = !DILocation(line: 805, scope: !1775, inlinedAt: !10706)
!10807 = !DILocation(line: 806, scope: !1775, inlinedAt: !10706)
!10808 = !DILocation(line: 1505, scope: !10433, inlinedAt: !10704)
!10809 = !DILocation(line: 222, scope: !491, inlinedAt: !10810)
!10810 = distinct !DILocation(line: 1672, scope: !10696)
!10811 = !DILocation(line: 0, scope: !491, inlinedAt: !10810)
!10812 = !DILocation(line: 224, scope: !491, inlinedAt: !10810)
!10813 = !DILocation(line: 156, scope: !265, inlinedAt: !10814)
!10814 = distinct !DILocation(line: 224, scope: !491, inlinedAt: !10810)
!10815 = !DILocation(line: 158, scope: !265, inlinedAt: !10814)
!10816 = !DILocation(line: 0, scope: !265, inlinedAt: !10814)
!10817 = !DILocation(line: 161, scope: !265, inlinedAt: !10814)
!10818 = !DILocation(line: 162, scope: !265, inlinedAt: !10814)
!10819 = !DILocation(line: 1672, scope: !10696)
!10820 = !DILocation(line: 394, scope: !21, inlinedAt: !10821)
!10821 = distinct !DILocation(line: 164, scope: !265, inlinedAt: !10814)
!10822 = !DILocation(line: 392, scope: !21, inlinedAt: !10823)
!10823 = distinct !DILocation(line: 165, scope: !265, inlinedAt: !10814)
!10824 = !DILocation(line: 396, scope: !21, inlinedAt: !10821)
!10825 = !DILocation(line: 392, scope: !21, inlinedAt: !10826)
!10826 = distinct !DILocation(line: 226, scope: !491, inlinedAt: !10810)
!10827 = !DILocation(line: 226, scope: !491, inlinedAt: !10810)
!10828 = !DILocation(line: 227, scope: !491, inlinedAt: !10810)
!10829 = !DILocation(line: 392, scope: !21, inlinedAt: !10830)
!10830 = distinct !DILocation(line: 227, scope: !491, inlinedAt: !10810)
!10831 = !DILocation(line: 228, scope: !491, inlinedAt: !10810)
!10832 = !DILocation(line: 166, scope: !265, inlinedAt: !10814)
!10833 = !DILocation(line: 156, scope: !235, inlinedAt: !10834)
!10834 = distinct !DILocation(line: 224, scope: !543, inlinedAt: !10835)
!10835 = distinct !DILocation(line: 1674, scope: !10696)
!10836 = !DILocation(line: 158, scope: !235, inlinedAt: !10834)
!10837 = !DILocation(line: 0, scope: !235, inlinedAt: !10834)
!10838 = !DILocation(line: 161, scope: !235, inlinedAt: !10834)
!10839 = !DILocation(line: 162, scope: !235, inlinedAt: !10834)
!10840 = !DILocation(line: 394, scope: !21, inlinedAt: !10841)
!10841 = distinct !DILocation(line: 164, scope: !235, inlinedAt: !10834)
!10842 = !DILocation(line: 392, scope: !21, inlinedAt: !10843)
!10843 = distinct !DILocation(line: 165, scope: !235, inlinedAt: !10834)
!10844 = !DILocation(line: 396, scope: !21, inlinedAt: !10841)
!10845 = !DILocation(line: 166, scope: !235, inlinedAt: !10834)
!10846 = !DILocation(line: 228, scope: !543, inlinedAt: !10835)
!10847 = distinct !DISubprogram(name: "tcl.resolveCmd", scope: !864, file: !1273, type: !1552, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !10848)
!10848 = !{!10849}
!10849 = !DILocalVariable(name: "cmdName", arg: 1, scope: !10847, file: !2, type: !998)
!10850 = !DILocation(line: 4518, scope: !10847)
!10851 = !DILocation(line: 4519, scope: !10847)
!10852 = !DILocation(line: 385, scope: !995, inlinedAt: !10853)
!10853 = distinct !DILocation(line: 4519, scope: !10847)
!10854 = !DILocation(line: 4520, scope: !10847)
!10855 = !DILocation(line: 4521, scope: !10847)
!10856 = !DILocation(line: 4523, scope: !10847)
!10857 = !DILocation(line: 39, scope: !1004, inlinedAt: !10858)
!10858 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !10859)
!10859 = distinct !DILocation(line: 4526, scope: !10847)
!10860 = !DILocation(line: 4524, scope: !10847)
!10861 = !DILocation(line: 4527, scope: !10847)
!10862 = distinct !DISubprogram(name: "tcl.originCmd", scope: !864, file: !1273, type: !2803, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !10863)
!10863 = !{!10864, !10865}
!10864 = !DILocalVariable(name: "cmdName", arg: 1, scope: !10862, file: !2, type: !998)
!10865 = !DILocalVariable(name: "ecvar", arg: 2, scope: !10862, file: !2, type: !976)
!10866 = !DILocation(line: 4544, scope: !10862)
!10867 = !DILocation(line: 4545, scope: !10862)
!10868 = !DILocation(line: 385, scope: !995, inlinedAt: !10869)
!10869 = distinct !DILocation(line: 4545, scope: !10862)
!10870 = !DILocation(line: 386, scope: !995, inlinedAt: !10869)
!10871 = !DILocation(line: 4546, scope: !10862)
!10872 = !DILocation(line: 4547, scope: !10862)
!10873 = !DILocation(line: 4549, scope: !10862)
!10874 = !DILocation(line: 4550, scope: !10862)
!10875 = !DILocation(line: 0, scope: !10862)
!10876 = !DILocation(line: 4557, scope: !10862)
!10877 = !DILocation(line: 39, scope: !1004, inlinedAt: !10878)
!10878 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !10879)
!10879 = distinct !DILocation(line: 4558, scope: !10862)
!10880 = !DILocation(line: 4559, scope: !10862)
!10881 = !DILocation(line: 72, scope: !1020, inlinedAt: !10882)
!10882 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !10883)
!10883 = distinct !DILocation(line: 4561, scope: !10862)
!10884 = !DILocation(line: 73, scope: !1020, inlinedAt: !10882)
!10885 = !DILocation(line: 75, scope: !1020, inlinedAt: !10882)
!10886 = !DILocation(line: 76, scope: !1020, inlinedAt: !10882)
!10887 = !DILocation(line: 77, scope: !1020, inlinedAt: !10882)
!10888 = !DILocation(line: 79, scope: !1020, inlinedAt: !10882)
!10889 = !DILocation(line: 80, scope: !1020, inlinedAt: !10882)
!10890 = !DILocation(line: 4562, scope: !10862)
!10891 = !DILocation(line: 385, scope: !995, inlinedAt: !10892)
!10892 = distinct !DILocation(line: 4562, scope: !10862)
!10893 = !DILocation(line: 386, scope: !995, inlinedAt: !10892)
!10894 = !DILocation(line: 4563, scope: !10862)
!10895 = !DILocation(line: 4564, scope: !10862)
!10896 = !DILocation(line: 4565, scope: !10862)
!10897 = distinct !DISubprogram(name: "tcl.callframe.init", scope: !864, file: !7638, type: !10898, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !10902)
!10898 = !DISubroutineType(types: !10899)
!10899 = !{!657, !7494, !9, !9, !1061, !10900, !10901, !7641}
!10900 = !DIDerivedType(tag: DW_TAG_typedef, name: "Proc*", scope: !12, file: !11, line: 1517, baseType: !917)
!10901 = !DIDerivedType(tag: DW_TAG_typedef, name: "LocalCache*", scope: !12, file: !11, line: 1519, baseType: !935)
!10902 = !{!10903, !10904, !10905, !10906, !10907, !10908, !10909}
!10903 = !DILocalVariable(name: "frame", arg: 1, scope: !10897, file: !2, type: !7494)
!10904 = !DILocalVariable(name: "length", arg: 2, scope: !10897, file: !2, type: !9)
!10905 = !DILocalVariable(name: "objc", arg: 3, scope: !10897, file: !2, type: !9)
!10906 = !DILocalVariable(name: "objv", arg: 4, scope: !10897, file: !2, type: !1061)
!10907 = !DILocalVariable(name: "proc", arg: 5, scope: !10897, file: !2, type: !10900)
!10908 = !DILocalVariable(name: "localCache", arg: 6, scope: !10897, file: !2, type: !10901)
!10909 = !DILocalVariable(name: "locals", arg: 7, scope: !10897, file: !2, type: !7641)
!10910 = !DILocation(line: 572, scope: !10897)
!10911 = !DILocation(line: 573, scope: !10897)
!10912 = !DILocation(line: 574, scope: !10897)
!10913 = !DILocation(line: 575, scope: !10897)
!10914 = !DILocation(line: 576, scope: !10897)
!10915 = !DILocation(line: 578, scope: !10897)
!10916 = !DILocation(line: 579, scope: !10897)
!10917 = !DILocation(line: 580, scope: !10897)
!10918 = !DILocation(line: 581, scope: !10897)
!10919 = !DILocation(line: 582, scope: !10897)
!10920 = !DILocation(line: 583, scope: !10897)
!10921 = !DILocation(line: 584, scope: !10897)
!10922 = !DILocation(line: 585, scope: !10897)
!10923 = !DILocation(line: 586, scope: !10897)
!10924 = !DILocation(line: 587, scope: !10897)
!10925 = !DILocation(line: 588, scope: !10897)
!10926 = !DILocation(line: 589, scope: !10897)
!10927 = distinct !DISubprogram(name: "tcl.callframe.makevar", scope: !864, file: !7638, type: !10928, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !10930)
!10928 = !DISubroutineType(types: !10929)
!10929 = !{!7641, !7494, !9, !9}
!10930 = !{!10931, !10932, !10933}
!10931 = !DILocalVariable(name: "frame", arg: 1, scope: !10927, file: !2, type: !7494)
!10932 = !DILocalVariable(name: "index", arg: 2, scope: !10927, file: !2, type: !9)
!10933 = !DILocalVariable(name: "flags", arg: 3, scope: !10927, file: !2, type: !9)
!10934 = !DILocation(line: 603, scope: !10927)
!10935 = !DILocation(line: 604, scope: !10927)
!10936 = !DILocation(line: 605, scope: !10927)
!10937 = !DILocation(line: 606, scope: !10927)
!10938 = !DILocation(line: 607, scope: !10927)
!10939 = distinct !DISubprogram(name: "tcl.callframe.clear", scope: !864, file: !7638, type: !10940, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !10942)
!10940 = !DISubroutineType(types: !10941)
!10941 = !{!657, !7494}
!10942 = !{!10943}
!10943 = !DILocalVariable(name: "frame", arg: 1, scope: !10939, file: !2, type: !7494)
!10944 = !DILocation(line: 620, scope: !10939)
!10945 = !DILocation(line: 621, scope: !10939)
!10946 = !DILocation(line: 622, scope: !10939)
!10947 = !DILocation(line: 623, scope: !10939)
!10948 = !DILocation(line: 624, scope: !10939)
!10949 = !DILocation(line: 628, scope: !10939)
!10950 = distinct !DISubprogram(name: "tcl.callframe.getarglist", scope: !864, file: !7638, type: !10951, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !10953)
!10951 = !DISubroutineType(types: !10952)
!10952 = !{!1382, !7494, !10}
!10953 = !{!10954, !10955}
!10954 = !DILocalVariable(name: "frame", arg: 1, scope: !10950, file: !2, type: !7494)
!10955 = !DILocalVariable(name: "level", arg: 2, scope: !10950, file: !2, type: !10)
!10956 = !DILocation(line: 644, scope: !10950)
!10957 = !DILocation(line: 392, scope: !21, inlinedAt: !10958)
!10958 = distinct !DILocation(line: 645, scope: !10950)
!10959 = !DILocation(line: 645, scope: !10950)
!10960 = !DILocation(line: 647, scope: !10950)
!10961 = !DILocation(line: 651, scope: !10950)
!10962 = !DILocation(line: 652, scope: !10950)
!10963 = !DILocation(line: 0, scope: !10950)
!10964 = !DILocation(line: 660, scope: !10950)
!10965 = !DILocation(line: 662, scope: !10950)
!10966 = !DILocation(line: 665, scope: !10950)
!10967 = !DILocation(line: 668, scope: !10950)
!10968 = !DILocation(line: 385, scope: !995, inlinedAt: !10969)
!10969 = distinct !DILocation(line: 668, scope: !10950)
!10970 = !DILocation(line: 386, scope: !995, inlinedAt: !10969)
!10971 = !DILocation(line: 39, scope: !1004, inlinedAt: !10972)
!10972 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !10973)
!10973 = distinct !DILocation(line: 669, scope: !10950)
!10974 = !DILocation(line: 670, scope: !10950)
!10975 = !DILocation(line: 672, scope: !10950)
!10976 = !DILocation(line: 385, scope: !995, inlinedAt: !10977)
!10977 = distinct !DILocation(line: 672, scope: !10950)
!10978 = !DILocation(line: 386, scope: !995, inlinedAt: !10977)
!10979 = !DILocation(line: 673, scope: !10950)
!10980 = !DILocation(line: 674, scope: !10950)
!10981 = !DILocation(line: 385, scope: !995, inlinedAt: !10982)
!10982 = distinct !DILocation(line: 674, scope: !10950)
!10983 = !DILocation(line: 386, scope: !995, inlinedAt: !10982)
!10984 = !DILocation(line: 675, scope: !10950)
!10985 = !DILocation(line: 72, scope: !1020, inlinedAt: !10986)
!10986 = distinct !DILocation(line: 676, scope: !10950)
!10987 = !DILocation(line: 73, scope: !1020, inlinedAt: !10986)
!10988 = !DILocation(line: 75, scope: !1020, inlinedAt: !10986)
!10989 = !DILocation(line: 76, scope: !1020, inlinedAt: !10986)
!10990 = !DILocation(line: 77, scope: !1020, inlinedAt: !10986)
!10991 = !DILocation(line: 79, scope: !1020, inlinedAt: !10986)
!10992 = !DILocation(line: 80, scope: !1020, inlinedAt: !10986)
!10993 = !DILocation(line: 677, scope: !10950)
!10994 = distinct !DISubprogram(name: "tcl.callframe.depth", scope: !864, file: !7638, type: !10995, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !10997)
!10995 = !DISubroutineType(types: !10996)
!10996 = !{!10, !7494}
!10997 = !{!10998}
!10998 = !DILocalVariable(name: "frame", arg: 1, scope: !10994, file: !2, type: !7494)
!10999 = !DILocation(line: 698, scope: !10994)
!11000 = distinct !DISubprogram(name: "tcl.callframe.store.string", scope: !864, file: !7638, type: !11001, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !11003)
!11001 = !DISubroutineType(types: !11002)
!11002 = !{!657, !7641, !998, !1439}
!11003 = !{!11004, !11005, !11006}
!11004 = !DILocalVariable(name: "var", arg: 1, scope: !11000, file: !2, type: !7641)
!11005 = !DILocalVariable(name: "varName", arg: 2, scope: !11000, file: !2, type: !998)
!11006 = !DILocalVariable(name: "value", arg: 3, scope: !11000, file: !2, type: !1439)
!11007 = !DILocation(line: 711, scope: !11000)
!11008 = !DILocation(line: 167, scope: !7685, inlinedAt: !11009)
!11009 = distinct !DILocation(line: 255, scope: !7749, inlinedAt: !11010)
!11010 = distinct !DILocation(line: 531, scope: !7922, inlinedAt: !11011)
!11011 = distinct !DILocation(line: 712, scope: !11000)
!11012 = !DILocation(line: 168, scope: !7685, inlinedAt: !11009)
!11013 = !DILocation(line: 531, scope: !7922, inlinedAt: !11011)
!11014 = !DILocation(line: 155, scope: !7678, inlinedAt: !11015)
!11015 = distinct !DILocation(line: 533, scope: !7922, inlinedAt: !11011)
!11016 = !DILocation(line: 0, scope: !7922, inlinedAt: !11011)
!11017 = !DILocation(line: 713, scope: !11000)
!11018 = !DILocation(line: 717, scope: !11000)
!11019 = !DILocation(line: 1048, scope: !7942, inlinedAt: !11020)
!11020 = distinct !DILocation(line: 1303, scope: !8140, inlinedAt: !11021)
!11021 = distinct !DILocation(line: 718, scope: !11000)
!11022 = !DILocation(line: 1303, scope: !8140, inlinedAt: !11021)
!11023 = !DILocation(line: 38, scope: !1004, inlinedAt: !11024)
!11024 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !11025)
!11025 = distinct !DILocation(line: 1280, scope: !8116, inlinedAt: !11026)
!11026 = distinct !DILocation(line: 1305, scope: !8140, inlinedAt: !11021)
!11027 = !DILocation(line: 39, scope: !1004, inlinedAt: !11024)
!11028 = !{!11029, !11031, !11032}
!11029 = distinct !{!11029, !11030, !"tcl.write.var.ptr: %interp"}
!11030 = distinct !{!11030, !"tcl.write.var.ptr"}
!11031 = distinct !{!11031, !11030, !"tcl.write.var.ptr: %varPtr"}
!11032 = distinct !{!11032, !11030, !"tcl.write.var.ptr: %arrayPtr"}
!11033 = !DILocation(line: 94, scope: !7637, inlinedAt: !11034)
!11034 = distinct !DILocation(line: 1281, scope: !8116, inlinedAt: !11026)
!11035 = !{!11031}
!11036 = !{!11029, !11032}
!11037 = !DILocation(line: 117, scope: !7653, inlinedAt: !11038)
!11038 = distinct !DILocation(line: 1282, scope: !8116, inlinedAt: !11026)
!11039 = !DILocation(line: 1283, scope: !8116, inlinedAt: !11026)
!11040 = !DILocation(line: 71, scope: !1020, inlinedAt: !11041)
!11041 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !11042)
!11042 = distinct !DILocation(line: 1285, scope: !8116, inlinedAt: !11026)
!11043 = !DILocation(line: 72, scope: !1020, inlinedAt: !11041)
!11044 = !{!11029, !11031}
!11045 = !DILocation(line: 73, scope: !1020, inlinedAt: !11041)
!11046 = !DILocation(line: 75, scope: !1020, inlinedAt: !11041)
!11047 = !DILocation(line: 76, scope: !1020, inlinedAt: !11041)
!11048 = !DILocation(line: 77, scope: !1020, inlinedAt: !11041)
!11049 = !DILocation(line: 79, scope: !1020, inlinedAt: !11041)
!11050 = !DILocation(line: 80, scope: !1020, inlinedAt: !11041)
!11051 = !DILocation(line: 1308, scope: !8140, inlinedAt: !11021)
!11052 = !DILocation(line: 719, scope: !11000)
!11053 = !DILocation(line: 1048, scope: !7942, inlinedAt: !11054)
!11054 = distinct !DILocation(line: 1964, scope: !8819, inlinedAt: !11055)
!11055 = distinct !DILocation(line: 721, scope: !11000)
!11056 = !DILocation(line: 1964, scope: !8819, inlinedAt: !11055)
!11057 = !DILocation(line: 94, scope: !7637, inlinedAt: !11058)
!11058 = distinct !DILocation(line: 1966, scope: !8819, inlinedAt: !11055)
!11059 = !{!11060}
!11060 = distinct !{!11060, !11061, !"tcl.unset.var.ptr: %varPtr"}
!11061 = distinct !{!11061, !"tcl.unset.var.ptr"}
!11062 = !{!11063, !11064}
!11063 = distinct !{!11063, !11061, !"tcl.unset.var.ptr: %interp"}
!11064 = distinct !{!11064, !11061, !"tcl.unset.var.ptr: %arrayPtr"}
!11065 = !DILocation(line: 1967, scope: !8819, inlinedAt: !11055)
!11066 = !DILocation(line: 117, scope: !7653, inlinedAt: !11067)
!11067 = distinct !DILocation(line: 1969, scope: !8819, inlinedAt: !11055)
!11068 = !DILocation(line: 71, scope: !1020, inlinedAt: !11069)
!11069 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !11070)
!11070 = distinct !DILocation(line: 1970, scope: !8819, inlinedAt: !11055)
!11071 = !DILocation(line: 72, scope: !1020, inlinedAt: !11069)
!11072 = !{!11063, !11060}
!11073 = !DILocation(line: 73, scope: !1020, inlinedAt: !11069)
!11074 = !DILocation(line: 75, scope: !1020, inlinedAt: !11069)
!11075 = !DILocation(line: 76, scope: !1020, inlinedAt: !11069)
!11076 = !DILocation(line: 77, scope: !1020, inlinedAt: !11069)
!11077 = !DILocation(line: 79, scope: !1020, inlinedAt: !11069)
!11078 = !DILocation(line: 80, scope: !1020, inlinedAt: !11069)
!11079 = !DILocation(line: 1973, scope: !8819, inlinedAt: !11055)
!11080 = distinct !DISubprogram(name: "tcl.callframe.store.numeric", scope: !864, file: !7638, type: !11081, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !11085)
!11081 = !DISubroutineType(types: !11082)
!11082 = !{!657, !7641, !998, !11083}
!11083 = !DICompositeType(tag: DW_TAG_structure_type, name: "NUMERIC!", scope: !12, file: !11, line: 1586, size: 48, elements: !11084)
!11084 = !{!9, !343}
!11085 = !{!11086, !11087, !11088}
!11086 = !DILocalVariable(name: "var", arg: 1, scope: !11080, file: !2, type: !7641)
!11087 = !DILocalVariable(name: "varName", arg: 2, scope: !11080, file: !2, type: !998)
!11088 = !DILocalVariable(name: "value", arg: 3, scope: !11080, file: !2, type: !11083)
!11089 = !DILocation(line: 735, scope: !11080)
!11090 = !DILocation(line: 167, scope: !7685, inlinedAt: !11091)
!11091 = distinct !DILocation(line: 255, scope: !7749, inlinedAt: !11092)
!11092 = distinct !DILocation(line: 531, scope: !7922, inlinedAt: !11093)
!11093 = distinct !DILocation(line: 736, scope: !11080)
!11094 = !DILocation(line: 168, scope: !7685, inlinedAt: !11091)
!11095 = !DILocation(line: 531, scope: !7922, inlinedAt: !11093)
!11096 = !DILocation(line: 155, scope: !7678, inlinedAt: !11097)
!11097 = distinct !DILocation(line: 533, scope: !7922, inlinedAt: !11093)
!11098 = !DILocation(line: 0, scope: !7922, inlinedAt: !11093)
!11099 = !DILocation(line: 737, scope: !11080)
!11100 = !DILocation(line: 741, scope: !11080)
!11101 = !DILocation(line: 1048, scope: !7942, inlinedAt: !11102)
!11102 = distinct !DILocation(line: 1532, scope: !8184, inlinedAt: !11103)
!11103 = distinct !DILocation(line: 742, scope: !11080)
!11104 = !DILocation(line: 1532, scope: !8184, inlinedAt: !11103)
!11105 = !DILocation(line: 94, scope: !7637, inlinedAt: !11106)
!11106 = distinct !DILocation(line: 1534, scope: !8184, inlinedAt: !11103)
!11107 = !{!11108}
!11108 = distinct !{!11108, !11109, !"tcl.write.var.ptr.numeric: %varPtr"}
!11109 = distinct !{!11109, !"tcl.write.var.ptr.numeric"}
!11110 = !{!11111, !11112}
!11111 = distinct !{!11111, !11109, !"tcl.write.var.ptr.numeric: %interp"}
!11112 = distinct !{!11112, !11109, !"tcl.write.var.ptr.numeric: %arrayPtr"}
!11113 = !DILocation(line: 1535, scope: !8184, inlinedAt: !11103)
!11114 = !DILocation(line: 116, scope: !1345, inlinedAt: !11115)
!11115 = distinct !DILocation(line: 138, scope: !1351, inlinedAt: !11116)
!11116 = distinct !DILocation(line: 1537, scope: !8184, inlinedAt: !11103)
!11117 = !{!11111, !11108}
!11118 = !DILocation(line: 138, scope: !1351, inlinedAt: !11116)
!11119 = !DILocation(line: 1537, scope: !8184, inlinedAt: !11103)
!11120 = !DILocation(line: 1539, scope: !8184, inlinedAt: !11103)
!11121 = !DILocation(line: 385, scope: !995, inlinedAt: !11122)
!11122 = distinct !DILocation(line: 1539, scope: !8184, inlinedAt: !11103)
!11123 = !DILocation(line: 386, scope: !995, inlinedAt: !11122)
!11124 = !{!11111, !11108, !11112}
!11125 = !DILocation(line: 117, scope: !7653, inlinedAt: !11126)
!11126 = distinct !DILocation(line: 1540, scope: !8184, inlinedAt: !11103)
!11127 = !DILocation(line: 39, scope: !1004, inlinedAt: !11128)
!11128 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !11129)
!11129 = distinct !DILocation(line: 1541, scope: !8184, inlinedAt: !11103)
!11130 = !DILocation(line: 1542, scope: !8184, inlinedAt: !11103)
!11131 = !DILocation(line: 1545, scope: !8184, inlinedAt: !11103)
!11132 = !DILocation(line: 1547, scope: !8184, inlinedAt: !11103)
!11133 = !DILocation(line: 1550, scope: !8184, inlinedAt: !11103)
!11134 = !DILocation(line: 1552, scope: !8184, inlinedAt: !11103)
!11135 = !DILocation(line: 1553, scope: !8184, inlinedAt: !11103)
!11136 = !DILocation(line: 1555, scope: !8184, inlinedAt: !11103)
!11137 = !DILocation(line: 1556, scope: !8184, inlinedAt: !11103)
!11138 = !DILocation(line: 1563, scope: !8184, inlinedAt: !11103)
!11139 = !DILocation(line: 1566, scope: !8184, inlinedAt: !11103)
!11140 = !DILocation(line: 1567, scope: !8184, inlinedAt: !11103)
!11141 = !DILocation(line: 1215, scope: !1323, inlinedAt: !11142)
!11142 = distinct !DILocation(line: 1574, scope: !8184, inlinedAt: !11103)
!11143 = !DILocation(line: 1217, scope: !1323, inlinedAt: !11142)
!11144 = !DILocation(line: 1189, scope: !1303, inlinedAt: !11145)
!11145 = distinct !DILocation(line: 1217, scope: !1323, inlinedAt: !11142)
!11146 = !DILocation(line: 1191, scope: !1303, inlinedAt: !11145)
!11147 = !DILocation(line: 1192, scope: !1303, inlinedAt: !11145)
!11148 = !DILocation(line: 1193, scope: !1303, inlinedAt: !11145)
!11149 = !DILocation(line: 1194, scope: !1303, inlinedAt: !11145)
!11150 = !DILocation(line: 1196, scope: !1303, inlinedAt: !11145)
!11151 = !DILocation(line: 1197, scope: !1303, inlinedAt: !11145)
!11152 = !DILocation(line: 1198, scope: !1303, inlinedAt: !11145)
!11153 = !DILocation(line: 1199, scope: !1303, inlinedAt: !11145)
!11154 = !DILocation(line: 1219, scope: !1323, inlinedAt: !11142)
!11155 = !DILocation(line: 1174, scope: !1291, inlinedAt: !11156)
!11156 = distinct !DILocation(line: 1219, scope: !1323, inlinedAt: !11142)
!11157 = !DILocation(line: 1175, scope: !1291, inlinedAt: !11156)
!11158 = !DILocation(line: 1176, scope: !1291, inlinedAt: !11156)
!11159 = !DILocation(line: 0, scope: !1323, inlinedAt: !11142)
!11160 = !DILocation(line: 38, scope: !1004, inlinedAt: !11161)
!11161 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !11162)
!11162 = distinct !DILocation(line: 1575, scope: !8184, inlinedAt: !11103)
!11163 = !DILocation(line: 39, scope: !1004, inlinedAt: !11161)
!11164 = !DILocation(line: 1303, scope: !8140, inlinedAt: !11165)
!11165 = distinct !DILocation(line: 1576, scope: !8184, inlinedAt: !11103)
!11166 = !DILocation(line: 39, scope: !1004, inlinedAt: !11167)
!11167 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !11168)
!11168 = distinct !DILocation(line: 1280, scope: !8116, inlinedAt: !11169)
!11169 = distinct !DILocation(line: 1305, scope: !8140, inlinedAt: !11165)
!11170 = !{!11171, !11173, !11174, !11111, !11108, !11112}
!11171 = distinct !{!11171, !11172, !"tcl.write.var.ptr: %interp"}
!11172 = distinct !{!11172, !"tcl.write.var.ptr"}
!11173 = distinct !{!11173, !11172, !"tcl.write.var.ptr: %varPtr"}
!11174 = distinct !{!11174, !11172, !"tcl.write.var.ptr: %arrayPtr"}
!11175 = !DILocation(line: 94, scope: !7637, inlinedAt: !11176)
!11176 = distinct !DILocation(line: 1281, scope: !8116, inlinedAt: !11169)
!11177 = !{!11173, !11108}
!11178 = !{!11171, !11174, !11111, !11112}
!11179 = !DILocation(line: 117, scope: !7653, inlinedAt: !11180)
!11180 = distinct !DILocation(line: 1282, scope: !8116, inlinedAt: !11169)
!11181 = !DILocation(line: 1283, scope: !8116, inlinedAt: !11169)
!11182 = !DILocation(line: 71, scope: !1020, inlinedAt: !11183)
!11183 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !11184)
!11184 = distinct !DILocation(line: 1285, scope: !8116, inlinedAt: !11169)
!11185 = !DILocation(line: 72, scope: !1020, inlinedAt: !11183)
!11186 = !{!11171, !11173, !11111, !11108}
!11187 = !DILocation(line: 73, scope: !1020, inlinedAt: !11183)
!11188 = !DILocation(line: 75, scope: !1020, inlinedAt: !11183)
!11189 = !DILocation(line: 76, scope: !1020, inlinedAt: !11183)
!11190 = !DILocation(line: 77, scope: !1020, inlinedAt: !11183)
!11191 = !DILocation(line: 79, scope: !1020, inlinedAt: !11183)
!11192 = !DILocation(line: 80, scope: !1020, inlinedAt: !11183)
!11193 = !DILocation(line: 1308, scope: !8140, inlinedAt: !11165)
!11194 = !DILocation(line: 72, scope: !1020, inlinedAt: !11195)
!11195 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !11196)
!11196 = distinct !DILocation(line: 1577, scope: !8184, inlinedAt: !11103)
!11197 = !DILocation(line: 73, scope: !1020, inlinedAt: !11195)
!11198 = !DILocation(line: 75, scope: !1020, inlinedAt: !11195)
!11199 = !DILocation(line: 76, scope: !1020, inlinedAt: !11195)
!11200 = !DILocation(line: 77, scope: !1020, inlinedAt: !11195)
!11201 = !DILocation(line: 79, scope: !1020, inlinedAt: !11195)
!11202 = !DILocation(line: 80, scope: !1020, inlinedAt: !11195)
!11203 = !DILocation(line: 743, scope: !11080)
!11204 = !DILocation(line: 1048, scope: !7942, inlinedAt: !11205)
!11205 = distinct !DILocation(line: 1964, scope: !8819, inlinedAt: !11206)
!11206 = distinct !DILocation(line: 745, scope: !11080)
!11207 = !DILocation(line: 1964, scope: !8819, inlinedAt: !11206)
!11208 = !DILocation(line: 94, scope: !7637, inlinedAt: !11209)
!11209 = distinct !DILocation(line: 1966, scope: !8819, inlinedAt: !11206)
!11210 = !{!11211}
!11211 = distinct !{!11211, !11212, !"tcl.unset.var.ptr: %varPtr"}
!11212 = distinct !{!11212, !"tcl.unset.var.ptr"}
!11213 = !{!11214, !11215}
!11214 = distinct !{!11214, !11212, !"tcl.unset.var.ptr: %interp"}
!11215 = distinct !{!11215, !11212, !"tcl.unset.var.ptr: %arrayPtr"}
!11216 = !DILocation(line: 1967, scope: !8819, inlinedAt: !11206)
!11217 = !DILocation(line: 117, scope: !7653, inlinedAt: !11218)
!11218 = distinct !DILocation(line: 1969, scope: !8819, inlinedAt: !11206)
!11219 = !DILocation(line: 71, scope: !1020, inlinedAt: !11220)
!11220 = distinct !DILocation(line: 169, scope: !1366, inlinedAt: !11221)
!11221 = distinct !DILocation(line: 1970, scope: !8819, inlinedAt: !11206)
!11222 = !DILocation(line: 72, scope: !1020, inlinedAt: !11220)
!11223 = !{!11214, !11211}
!11224 = !DILocation(line: 73, scope: !1020, inlinedAt: !11220)
!11225 = !DILocation(line: 75, scope: !1020, inlinedAt: !11220)
!11226 = !DILocation(line: 76, scope: !1020, inlinedAt: !11220)
!11227 = !DILocation(line: 77, scope: !1020, inlinedAt: !11220)
!11228 = !DILocation(line: 79, scope: !1020, inlinedAt: !11220)
!11229 = !DILocation(line: 80, scope: !1020, inlinedAt: !11220)
!11230 = !DILocation(line: 1973, scope: !8819, inlinedAt: !11206)
!11231 = distinct !DISubprogram(name: "tcl.callframe.load", scope: !864, file: !7638, type: !11232, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !11234)
!11232 = !DISubroutineType(types: !11233)
!11233 = !{!9243, !7641, !998}
!11234 = !{!11235, !11236}
!11235 = !DILocalVariable(name: "var", arg: 1, scope: !11231, file: !2, type: !7641)
!11236 = !DILocalVariable(name: "varName", arg: 2, scope: !11231, file: !2, type: !998)
!11237 = !DILocation(line: 761, scope: !11231)
!11238 = !DILocation(line: 167, scope: !7685, inlinedAt: !11239)
!11239 = distinct !DILocation(line: 255, scope: !7749, inlinedAt: !11240)
!11240 = distinct !DILocation(line: 531, scope: !7922, inlinedAt: !11241)
!11241 = distinct !DILocation(line: 762, scope: !11231)
!11242 = !DILocation(line: 168, scope: !7685, inlinedAt: !11239)
!11243 = !DILocation(line: 531, scope: !7922, inlinedAt: !11241)
!11244 = !DILocation(line: 155, scope: !7678, inlinedAt: !11245)
!11245 = distinct !DILocation(line: 533, scope: !7922, inlinedAt: !11241)
!11246 = !DILocation(line: 0, scope: !7922, inlinedAt: !11241)
!11247 = !DILocation(line: 94, scope: !7637, inlinedAt: !11248)
!11248 = distinct !DILocation(line: 105, scope: !7645, inlinedAt: !11249)
!11249 = distinct !DILocation(line: 763, scope: !11231)
!11250 = !DILocation(line: 105, scope: !7645, inlinedAt: !11249)
!11251 = !DILocation(line: 763, scope: !11231)
!11252 = !DILocation(line: 168, scope: !7685, inlinedAt: !11253)
!11253 = distinct !DILocation(line: 244, scope: !7742, inlinedAt: !11254)
!11254 = distinct !DILocation(line: 765, scope: !11231)
!11255 = !DILocation(line: 765, scope: !11231)
!11256 = !DILocation(line: 1048, scope: !7942, inlinedAt: !11257)
!11257 = distinct !DILocation(line: 1090, scope: !7973, inlinedAt: !11258)
!11258 = distinct !DILocation(line: 767, scope: !11231)
!11259 = !DILocation(line: 1090, scope: !7973, inlinedAt: !11258)
!11260 = !DILocation(line: 1097, scope: !7973, inlinedAt: !11258)
!11261 = !DILocation(line: 768, scope: !11231)
!11262 = !DILocation(line: 38, scope: !1004, inlinedAt: !11263)
!11263 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !11264)
!11264 = distinct !DILocation(line: 770, scope: !11231)
!11265 = !DILocation(line: 39, scope: !1004, inlinedAt: !11263)
!11266 = !DILocation(line: 771, scope: !11231)
!11267 = !DILocation(line: 773, scope: !11231)
!11268 = !DILocation(line: 775, scope: !11231)
!11269 = !DILocation(line: 776, scope: !11231)
!11270 = !DILocation(line: 777, scope: !11231)
!11271 = !DILocation(line: 143, scope: !7671, inlinedAt: !11272)
!11272 = distinct !DILocation(line: 778, scope: !11231)
!11273 = !DILocation(line: 778, scope: !11231)
!11274 = !DILocation(line: 2497, scope: !9199, inlinedAt: !11275)
!11275 = distinct !DILocation(line: 779, scope: !11231)
!11276 = !DILocation(line: 780, scope: !11231)
!11277 = !DILocation(line: 781, scope: !11231)
!11278 = distinct !DISubprogram(name: "tcl.callframe.bindvar", scope: !864, file: !7638, type: !11279, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !11281)
!11279 = !DISubroutineType(types: !11280)
!11280 = !{!4074, !7494, !7641, !7641, !998, !976}
!11281 = !{!11282, !11283, !11284, !11285, !11286}
!11282 = !DILocalVariable(name: "frame", arg: 1, scope: !11278, file: !2, type: !7494)
!11283 = !DILocalVariable(name: "otherVar", arg: 2, scope: !11278, file: !2, type: !7641)
!11284 = !DILocalVariable(name: "localVar", arg: 3, scope: !11278, file: !2, type: !7641)
!11285 = !DILocalVariable(name: "localName", arg: 4, scope: !11278, file: !2, type: !998)
!11286 = !DILocalVariable(name: "errorCode", arg: 5, scope: !11278, file: !2, type: !976)
!11287 = !DILocation(line: 804, scope: !11278)
!11288 = !DILocation(line: 805, scope: !11278)
!11289 = !DILocation(line: 807, scope: !11278)
!11290 = !DILocation(line: 167, scope: !7685, inlinedAt: !11291)
!11291 = distinct !DILocation(line: 288, scope: !7770, inlinedAt: !11292)
!11292 = distinct !DILocation(line: 809, scope: !11278)
!11293 = !DILocation(line: 168, scope: !7685, inlinedAt: !11291)
!11294 = !DILocation(line: 809, scope: !11278)
!11295 = !DILocation(line: 94, scope: !7637, inlinedAt: !11296)
!11296 = distinct !DILocation(line: 105, scope: !7645, inlinedAt: !11297)
!11297 = distinct !DILocation(line: 811, scope: !11278)
!11298 = !DILocation(line: 105, scope: !7645, inlinedAt: !11297)
!11299 = !DILocation(line: 811, scope: !11278)
!11300 = !DILocation(line: 168, scope: !7685, inlinedAt: !11301)
!11301 = distinct !DILocation(line: 255, scope: !7749, inlinedAt: !11302)
!11302 = distinct !DILocation(line: 811, scope: !11278)
!11303 = !DILocation(line: 0, scope: !11278)
!11304 = !DILocation(line: 813, scope: !11278)
!11305 = !DILocation(line: 816, scope: !11278)
!11306 = !DILocation(line: 167, scope: !7685, inlinedAt: !11307)
!11307 = distinct !DILocation(line: 343, scope: !7805, inlinedAt: !11308)
!11308 = distinct !DILocation(line: 818, scope: !11278)
!11309 = !DILocation(line: 168, scope: !7685, inlinedAt: !11307)
!11310 = !DILocation(line: 818, scope: !11278)
!11311 = !DILocation(line: 356, scope: !7812, inlinedAt: !11312)
!11312 = distinct !DILocation(line: 820, scope: !11278)
!11313 = !DILocation(line: 821, scope: !11278)
!11314 = !DILocation(line: 94, scope: !7637, inlinedAt: !11315)
!11315 = distinct !DILocation(line: 105, scope: !7645, inlinedAt: !11316)
!11316 = distinct !DILocation(line: 822, scope: !11278)
!11317 = !DILocation(line: 105, scope: !7645, inlinedAt: !11316)
!11318 = !DILocation(line: 822, scope: !11278)
!11319 = !DILocation(line: 824, scope: !11278)
!11320 = !DILocation(line: 825, scope: !11278)
!11321 = !DILocation(line: 180, scope: !7693, inlinedAt: !11322)
!11322 = distinct !DILocation(line: 220, scope: !7722, inlinedAt: !11323)
!11323 = distinct !DILocation(line: 827, scope: !11278)
!11324 = !DILocation(line: 117, scope: !7653, inlinedAt: !11325)
!11325 = distinct !DILocation(line: 221, scope: !7722, inlinedAt: !11323)
!11326 = !DILocation(line: 167, scope: !7685, inlinedAt: !11327)
!11327 = distinct !DILocation(line: 343, scope: !7805, inlinedAt: !11328)
!11328 = distinct !DILocation(line: 828, scope: !11278)
!11329 = !DILocation(line: 168, scope: !7685, inlinedAt: !11327)
!11330 = !DILocation(line: 828, scope: !11278)
!11331 = !DILocation(line: 356, scope: !7812, inlinedAt: !11332)
!11332 = distinct !DILocation(line: 830, scope: !11278)
!11333 = !DILocation(line: 831, scope: !11278)
!11334 = !DILocation(line: 832, scope: !11278)
!11335 = !DILocation(line: 835, scope: !11278)
!11336 = !DILocation(line: 836, scope: !11278)
!11337 = !DILocation(line: 837, scope: !11278)
!11338 = !DILocation(line: 839, scope: !11278)
!11339 = !DILocation(line: 841, scope: !11278)
!11340 = !DILocation(line: 842, scope: !11278)
!11341 = distinct !DISubprogram(name: "tcl.callframe.lookup.varns", scope: !864, file: !7638, type: !11342, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !11344)
!11342 = !DISubroutineType(types: !11343)
!11343 = !{!7641, !7494, !998, !998}
!11344 = !{!11345, !11346, !11347}
!11345 = !DILocalVariable(name: "frame", arg: 1, scope: !11341, file: !2, type: !7494)
!11346 = !DILocalVariable(name: "nsName", arg: 2, scope: !11341, file: !2, type: !998)
!11347 = !DILocalVariable(name: "varName", arg: 3, scope: !11341, file: !2, type: !998)
!11348 = !DILocation(line: 860, scope: !11341)
!11349 = !DILocation(line: 861, scope: !11341)
!11350 = !DILocation(line: 862, scope: !11341)
!11351 = !DILocation(line: 863, scope: !11341)
!11352 = !DILocation(line: 865, scope: !11341)
!11353 = !DILocation(line: 866, scope: !11341)
!11354 = !DILocation(line: 867, scope: !11341)
!11355 = !DILocation(line: 869, scope: !11341)
!11356 = !DILocation(line: 873, scope: !11341)
!11357 = !DILocation(line: 874, scope: !11341)
!11358 = !DILocation(line: 875, scope: !11341)
!11359 = !DILocation(line: 877, scope: !11341)
!11360 = distinct !DISubprogram(name: "tcl.callframe.lookup.var", scope: !864, file: !7638, type: !11361, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !11363)
!11361 = !DISubroutineType(types: !11362)
!11362 = !{!7641, !7494, !998}
!11363 = !{!11364, !11365}
!11364 = !DILocalVariable(name: "frame", arg: 1, scope: !11360, file: !2, type: !7494)
!11365 = !DILocalVariable(name: "varName", arg: 2, scope: !11360, file: !2, type: !998)
!11366 = !DILocation(line: 898, scope: !11360)
!11367 = !DILocation(line: 899, scope: !11360)
!11368 = !DILocation(line: 901, scope: !11360)
!11369 = !DILocation(line: 902, scope: !11360)
!11370 = !DILocation(line: 167, scope: !7685, inlinedAt: !11371)
!11371 = distinct !DILocation(line: 381, scope: !7825, inlinedAt: !11372)
!11372 = distinct !DILocation(line: 904, scope: !11360)
!11373 = !DILocation(line: 168, scope: !7685, inlinedAt: !11371)
!11374 = !DILocation(line: 381, scope: !7825, inlinedAt: !11372)
!11375 = !DILocation(line: 180, scope: !7693, inlinedAt: !11376)
!11376 = distinct !DILocation(line: 383, scope: !7825, inlinedAt: !11372)
!11377 = !DILocation(line: 168, scope: !7685, inlinedAt: !11378)
!11378 = distinct !DILocation(line: 343, scope: !7805, inlinedAt: !11379)
!11379 = distinct !DILocation(line: 384, scope: !7825, inlinedAt: !11372)
!11380 = !DILocation(line: 384, scope: !7825, inlinedAt: !11372)
!11381 = !DILocation(line: 356, scope: !7812, inlinedAt: !11382)
!11382 = distinct !DILocation(line: 386, scope: !7825, inlinedAt: !11372)
!11383 = !DILocation(line: 387, scope: !7825, inlinedAt: !11372)
!11384 = !DILocation(line: 388, scope: !7825, inlinedAt: !11372)
!11385 = !DILocation(line: 905, scope: !11360)
!11386 = distinct !DISubprogram(name: "tcl.get.level.frame", scope: !864, file: !7638, type: !11387, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !11389)
!11387 = !DISubroutineType(types: !11388)
!11388 = !{!7494, !998}
!11389 = !{!11390}
!11390 = !DILocalVariable(name: "level", arg: 1, scope: !11386, file: !2, type: !998)
!11391 = !DILocation(line: 923, scope: !11386)
!11392 = !DILocation(line: 924, scope: !11386)
!11393 = !DILocation(line: 925, scope: !11386)
!11394 = !DILocation(line: 927, scope: !11386)
!11395 = !DILocation(line: 929, scope: !11386)
!11396 = !DILocation(line: 931, scope: !11386)
!11397 = !DILocation(line: 933, scope: !11386)
!11398 = !DILocation(line: 937, scope: !11386)
!11399 = !DILocation(line: 938, scope: !11386)
!11400 = !DILocation(line: 385, scope: !995, inlinedAt: !11401)
!11401 = distinct !DILocation(line: 938, scope: !11386)
!11402 = !DILocation(line: 386, scope: !995, inlinedAt: !11401)
!11403 = !DILocation(line: 939, scope: !11386)
!11404 = !DILocation(line: 940, scope: !11386)
!11405 = !DILocation(line: 942, scope: !11386)
!11406 = distinct !DISubprogram(name: "tcl.callframe.lookup.upvar", scope: !864, file: !7638, type: !11342, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !11407)
!11407 = !{!11408, !11409, !11410}
!11408 = !DILocalVariable(name: "frame", arg: 1, scope: !11406, file: !2, type: !7494)
!11409 = !DILocalVariable(name: "level", arg: 2, scope: !11406, file: !2, type: !998)
!11410 = !DILocalVariable(name: "varName", arg: 3, scope: !11406, file: !2, type: !998)
!11411 = !DILocation(line: 923, scope: !11386, inlinedAt: !11412)
!11412 = distinct !DILocation(line: 961, scope: !11406)
!11413 = !DILocation(line: 960, scope: !11406)
!11414 = !DILocation(line: 924, scope: !11386, inlinedAt: !11412)
!11415 = !DILocation(line: 925, scope: !11386, inlinedAt: !11412)
!11416 = !DILocation(line: 927, scope: !11386, inlinedAt: !11412)
!11417 = !DILocation(line: 933, scope: !11386, inlinedAt: !11412)
!11418 = !DILocation(line: 937, scope: !11386, inlinedAt: !11412)
!11419 = !DILocation(line: 938, scope: !11386, inlinedAt: !11412)
!11420 = !DILocation(line: 385, scope: !995, inlinedAt: !11421)
!11421 = distinct !DILocation(line: 938, scope: !11386, inlinedAt: !11412)
!11422 = !DILocation(line: 386, scope: !995, inlinedAt: !11421)
!11423 = !DILocation(line: 939, scope: !11386, inlinedAt: !11412)
!11424 = !DILocation(line: 940, scope: !11386, inlinedAt: !11412)
!11425 = !DILocation(line: 942, scope: !11386, inlinedAt: !11412)
!11426 = !DILocation(line: 963, scope: !11406)
!11427 = !DILocation(line: 929, scope: !11386, inlinedAt: !11412)
!11428 = !DILocation(line: 931, scope: !11386, inlinedAt: !11412)
!11429 = !DILocation(line: 966, scope: !11406)
!11430 = !DILocation(line: 967, scope: !11406)
!11431 = !DILocation(line: 968, scope: !11406)
!11432 = !DILocation(line: 970, scope: !11406)
!11433 = !DILocation(line: 971, scope: !11406)
!11434 = !DILocation(line: 972, scope: !11406)
!11435 = !DILocation(line: 974, scope: !11406)
!11436 = distinct !DISubprogram(name: "::main", linkageName: "tcl ::main {}", scope: !683, file: !2, type: !7155, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !3)
!11437 = !DILocation(line: 5, scope: !11436)
!11438 = !DILocation(line: 116, scope: !1345, inlinedAt: !11439)
!11439 = distinct !DILocation(line: 5, scope: !11436)
!11440 = !DILocation(line: 39, scope: !1004, inlinedAt: !11441)
!11441 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !11442)
!11442 = distinct !DILocation(line: 5, scope: !11436)
!11443 = distinct !DISubprogram(name: "cmd.thunk::main", scope: !11445, file: !11444, type: !11446, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !11448)
!11444 = !DIFile(filename: "java-tcl-native-no-puts.tcl", directory: "/graalvm/examples/java-tcl-native-no-puts")
!11445 = !DINamespace(name: "thunks", scope: null)
!11446 = !DISubroutineType(types: !11447)
!11447 = !{!9, !655, !867, !9, !1061}
!11448 = !{!11449, !11450, !11451, !11452}
!11449 = !DILocalVariable(name: "clientData", arg: 1, scope: !11443, file: !11444, type: !655)
!11450 = !DILocalVariable(name: "interp", arg: 2, scope: !11443, file: !11444, type: !867)
!11451 = !DILocalVariable(name: "argc", arg: 3, scope: !11443, file: !11444, type: !9)
!11452 = !DILocalVariable(name: "argv", arg: 4, scope: !11443, file: !11444, type: !1061)
!11453 = !DILocation(line: 1, scope: !11443)
!11454 = !DILocation(line: 5, scope: !11436, inlinedAt: !11455)
!11455 = distinct !DILocation(line: 3, scope: !11443)
!11456 = !DILocation(line: 116, scope: !1345, inlinedAt: !11457)
!11457 = distinct !DILocation(line: 5, scope: !11436, inlinedAt: !11455)
!11458 = !DILocation(line: 39, scope: !1004, inlinedAt: !11459)
!11459 = distinct !DILocation(line: 154, scope: !1359, inlinedAt: !11460)
!11460 = distinct !DILocation(line: 5, scope: !11436, inlinedAt: !11455)
!11461 = !DILocation(line: 2717, scope: !1250, inlinedAt: !11462)
!11462 = distinct !DILocation(line: 4, scope: !11443)
!11463 = !DILocation(line: 385, scope: !995, inlinedAt: !11464)
!11464 = distinct !DILocation(line: 2717, scope: !1250, inlinedAt: !11462)
!11465 = !DILocation(line: 386, scope: !995, inlinedAt: !11464)
!11466 = !DILocation(line: 4, scope: !11443)
